<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MacOS-M1软件安装-Github关联</title>
    <url>/2022/10/08/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Github%E5%85%B3%E8%81%94/</url>
    <content><![CDATA[<h1 id="确定git已经完成安装"><a href="#确定git已经完成安装" class="headerlink" title="确定git已经完成安装"></a>确定git已经完成安装</h1><p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Github%E5%85%B3%E8%81%94/image-20221022161937577.png" alt="image-20221022161937577"></p>
<h1 id="配置用户名称跟邮箱"><a href="#配置用户名称跟邮箱" class="headerlink" title="配置用户名称跟邮箱"></a>配置用户名称跟邮箱</h1><p>配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xuwei@xuweideMacBook-Pro ~ % git config --global user.name xuwei</span><br><span class="line">xuwei@xuweideMacBook-Pro ~ % git config --global user.email 2427340869@qq.com</span><br><span class="line">xuwei@xuweideMacBook-Pro ~ % git config -global push.default simple</span><br></pre></td></tr></table></figure>

<p>检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xuwei@xuweideMacBook-Pro ~ % git config -l</span><br><span class="line">credential.helper=osxkeychain</span><br><span class="line">safe.directory=/opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-core</span><br><span class="line">safe.directory=/opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-cask</span><br><span class="line">user.name=xuwei</span><br><span class="line">user.email=2427340869@qq.com</span><br><span class="line">push.default=simple</span><br></pre></td></tr></table></figure>

<h1 id="生成ssh相关的密钥"><a href="#生成ssh相关的密钥" class="headerlink" title="生成ssh相关的密钥"></a><strong>生成ssh相关的密钥</strong></h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xuwei@xuweideMacBook-Pro ~ % ssh-keygen -t rsa -C 2427340869@qq.com</span><br></pre></td></tr></table></figure>

<p>一直回车 ,回车到啥也不出为止,然后打开 id_rsa.pub 这个文件</p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Github%E5%85%B3%E8%81%94/image-20221022163410456.png" alt="image-20221022163410456"></p>
<p>打开 id_rsa.pub </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xuwei@xuweideMacBook-Pro ~ % open ~/.ssh</span><br></pre></td></tr></table></figure>

<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Github%E5%85%B3%E8%81%94/image-20221022163629571.png" alt="image-20221022163629571"></p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Github%E5%85%B3%E8%81%94/image-20221022163748366.png" alt="image-20221022163748366"></p>
<h1 id="关联github"><a href="#关联github" class="headerlink" title="关联github"></a>关联github</h1><p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Github%E5%85%B3%E8%81%94/image-20221022164159219.png" alt="image-20221022164159219"></p>
<p>测试是否ok</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xuwei@xuweideMacBook-Pro ~ % ssh git@github.com</span><br><span class="line">The authenticity of host <span class="string">&#x27;github.com (20.205.243.166)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.</span></span><br><span class="line"><span class="string">This key is not known by any other names</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>github.com<span class="string">&#x27; (ED25519) to the list of known hosts.</span></span><br><span class="line"><span class="string">PTY allocation request failed on channel 0</span></span><br><span class="line"><span class="string">Hi weishao-996! You&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">Connection to github.com closed.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
  </entry>
  <entry>
    <title>MacOS-M1软件安装-HomeBrew</title>
    <url>/2022/10/08/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-HomeBrew/</url>
    <content><![CDATA[<p>首先安装<code>Command_Line_Tools_for_Xcode</code></p>
<p>下载地址</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://developer.apple.com/download/more/</span><br></pre></td></tr></table></figure>

<p>终端输入命令安装homebrew，需要输入电脑密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/huwei1024/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>镜像选择</p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-HomeBrew/image-20221022151825549.png" alt="image-20221022151825549"></p>
<p>开始安装</p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-HomeBrew/image-20221022151918255.png" alt="image-20221022151918255"></p>
<p>安装完成后出现报错信息</p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-HomeBrew/image-20221022153709967.png" alt="image-20221022153709967"></p>
<p>修改环境变量</p>
<p>利用命令进入macOS系统的根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<p><strong>打开.zshrc文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ open -e .zshrc</span><br></pre></td></tr></table></figure>

<p>修改路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/opt/homebrew/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/opt/homebrew/sbin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-HomeBrew/image-20221022154059485.png" alt="image-20221022154059485"></p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-HomeBrew/image-20221022154203401.png" alt="image-20221022154203401"></p>
<p><strong>存修改，读取文件中环境变量路径，使其生效</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure>

<p>查看homebrew是否安装成功</p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-HomeBrew/image-20221022155223254.png" alt="image-20221022155223254"></p>
<p>复制执行两两条命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --add safe.directory /opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-core</span><br><span class="line">git config --global --add safe.directory /opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-cask</span><br></pre></td></tr></table></figure>

<p>安装成功</p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-HomeBrew/image-20221022160446246.png" alt="image-20221022160446246"></p>
<p>安装git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>

<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-HomeBrew/image-20221022161238762.png" alt="image-20221022161238762"></p>
<p>查看git版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>

<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-HomeBrew/image-20221022161326251.png" alt="image-20221022161326251"></p>
]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
  </entry>
  <entry>
    <title>MacOS-M1软件安装-Maven安装与绑定IDEA</title>
    <url>/2022/10/23/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Maven%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%91%E5%AE%9AIDEA/</url>
    <content><![CDATA[<p><strong>需要先安装好jdk</strong></p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Maven%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%91%E5%AE%9AIDEA/image-20221023201710257.png" alt="image-20221023201710257"></p>
<h1 id="Maven下载"><a href="#Maven下载" class="headerlink" title="Maven下载"></a>Maven下载</h1><p><a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Maven%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%91%E5%AE%9AIDEA/image-20221023000756369.png" alt="image-20221023000756369"></p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Maven%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%91%E5%AE%9AIDEA/image-20221023001034901.png" alt="image-20221023001034901"></p>
<h1 id="将解压的文件移动至制定目录下"><a href="#将解压的文件移动至制定目录下" class="headerlink" title="将解压的文件移动至制定目录下"></a>将解压的文件移动至制定目录下</h1><p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Maven%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%91%E5%AE%9AIDEA/image-20221023195252205.png" alt="image-20221023195252205"></p>
<h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure>

<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Maven%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%91%E5%AE%9AIDEA/image-20221023195337769.png" alt="image-20221023195337769"></p>
<p>激活环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xuwei@xuweideMacBook-Pro <span class="built_in">local</span> % <span class="built_in">source</span> ~/.zshrc </span><br></pre></td></tr></table></figure>

<h1 id="安装完成测试"><a href="#安装完成测试" class="headerlink" title="安装完成测试"></a>安装完成测试</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure>

<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Maven%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%91%E5%AE%9AIDEA/image-20221023195428947.png" alt="image-20221023195428947"></p>
<h1 id="配置阿里云源"><a href="#配置阿里云源" class="headerlink" title="配置阿里云源"></a>配置阿里云源</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Maven%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%91%E5%AE%9AIDEA/image-20221023182029206.png" alt="image-20221023182029206"></p>
<h1 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h1><p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Maven%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%91%E5%AE%9AIDEA/image-20221023195704330.png" alt="image-20221023195704330"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/Users/xuwei/codeEnv/apache-maven-3.8.6/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Maven%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%91%E5%AE%9AIDEA/image-20221023195608495.png" alt="image-20221023195608495"></p>
<h1 id="IDEA绑定"><a href="#IDEA绑定" class="headerlink" title="IDEA绑定"></a>IDEA绑定</h1><p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Maven%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%91%E5%AE%9AIDEA/image-20221023201248989.png" alt="image-20221023201248989"></p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-Maven%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%91%E5%AE%9AIDEA/image-20221023201321292.png" alt="image-20221023201321292"></p>
]]></content>
  </entry>
  <entry>
    <title>MacOS-M1软件安装-MySQL</title>
    <url>/2022/10/25/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/</url>
    <content><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a href="https://www.mysql.com/">MySQL</a></p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20221025123919387.png" alt="image-20221025123919387"></p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20221025123954237.png" alt="image-20221025123954237"></p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20221025124013949.png" alt="image-20221025124013949"></p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20221025124055827.png" alt="image-20221025124055827"></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20221025124321127.png" alt="image-20221025124321127"></p>
<p>设置mysql密码</p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20221025124424438.png" alt="image-20221025124424438"></p>
<h1 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h1><p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20221025124554568.png" alt="image-20221025124554568"></p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20221025124626748.png" alt="image-20221025124626748"></p>
<h1 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h1><p>如果需要在终端里面输入Mysql命令，那么就需要进行如下的配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、打开文件：vi ~/.bash_profile</span><br><span class="line">2、加入语句：PATH=<span class="variable">$PATH</span>:/usr/local/mysql/bin</span><br><span class="line">3、使配置的语句生效：<span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20221025125226840.png" alt="image-20221025125226840"></p>
<p>如果配置成功，那么输入命令：<code>mysql -u root -p</code>，运行效果如下：</p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20221025125400865.png" alt="image-20221025125400865"></p>
<p>此时输入登录密码就可以使用了。<br>如果不能出现上面的运行图片，则说明配置环境失败。</p>
<p>此时输入登录密码就可以使用了。<br>如果不能出现上面的运行图片，则说明配置环境失败。</p>
<p>配置Mysql环境变量遇到的坑<br>之前我们是在bash环境中配置Mysql，所以当电脑重启或者关机之后有可能出现mysql命令失效的情况。这也是我遇到的一个坑，解决办法如下：</p>
<p>在<code>~/.zshrc</code>文件最后，增加一行：<br><code>source ~/.bash_profile</code><br>1、如果没有<code>~/.zshrc</code>文件，那么就需要执行命令<code>touch ~/.zshrc</code>；反之，如果有<code>zsh</code>文件，那么可以跳过本步骤，直接进入第2步。<br>2、执行<code>vi ~/.zshrc</code>命令，然后添加<code>source ~/.bash_profile</code>即可；如下图所示：</p>
<p><img src="/img/MacOS-M1%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20221025125633370.png" alt="image-20221025125633370"></p>
<p>然后就可以解决电脑重启后<code>mysql</code>命令失效的问题了。</p>
]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
  </entry>
  <entry>
    <title>软件安装-JDK</title>
    <url>/2022/08/29/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-JDK/</url>
    <content><![CDATA[<h1 id="基于CentOS8-2安装JDK8（压缩包下载版）"><a href="#基于CentOS8-2安装JDK8（压缩包下载版）" class="headerlink" title="基于CentOS8.2安装JDK8（压缩包下载版）"></a>基于CentOS8.2安装JDK8（压缩包下载版）</h1><h2 id="下载-JDK"><a href="#下载-JDK" class="headerlink" title="下载 JDK"></a>下载 JDK</h2><p>因为Java JDK区分32位和64位系统，所以在安装之前必须先要判断以下我们的Centos系统为多少位系统，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-JDK/image-20220929222014734.png" alt="image-20220929222014734"></p>
<p>解释：如果有<code>x86_64</code>就是64位的，没有就是32位的。后面是X86或X86_64则内核是64位的，i686或i386则内核是32位的</p>
<p>由此可以判断我的centos为64位系统，故而我需要下载64位系统的JDK。</p>
<p>下载JDK，地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>
<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-JDK/image-20220929222205170.png" alt="image-20220929222205170"></p>
<h2 id="安装Java-JDK8-0"><a href="#安装Java-JDK8-0" class="headerlink" title="安装Java JDK8.0"></a>安装Java JDK8.0</h2><p>然后在Xshell中使用命令跳转到local下面创建者自己的文件夹：<code>weishao</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd usr/local/   </span><br><span class="line">mkdir weishao   </span><br><span class="line">cd weishao</span><br></pre></td></tr></table></figure>

<p>然后使用Xftp将jdk复制到weishao文件夹下面，如图所示：</p>
<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-JDK/image-20220929223548833.png" alt="image-20220929223548833"></p>
<p>将上传的jdk解压，解压之后重命名为jdk8，如图所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u301-linux-x64.tar.gz</span><br><span class="line">mv jdk1.8.0_301 jdk8</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-JDK/image-20220930104145336.png" alt="image-20220930104145336"></p>
<p>通过上面的步骤，我们的jdk已经全部完成安装了，接下来就是更重要的一步：配置[环境变量]</p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>打开之后按键盘<code>（i）</code>进入编辑模式,将下面的内容复制到底部</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/weishao/jdk8</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure>

<p>备注:根据上面的配置信息，我们既可以将环境变量的配置完成，需要注意的是，<code>PATH</code>在配置的哦时候，一定要把<code>JAVA_HOME/bin</code>放在最前面，不然使用<code>java</code>命令式，系统会找到以前的<code>JAVA</code>，在不往下找了，这样java这个可执行文件运行的目录其实不在$JAVA_HOME/bin下，而在其它目录下，会造成很大的问题。</p>
<p>写完之后我们按键盘<code>（ESC）</code>按钮退出，然后按<code>（:wq）</code>保存并且关闭Vim。</p>
<p>配置完成之后，最重要的一步就是使文件立即生效：命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p>让profile更新一下；</p>
<h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><p>上面所有的步骤完成之后，这时候我们需要检查是否安装成功，输入如下命令，如图所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-JDK/image-20220930105059388.png" alt="image-20220930105059388"></p>
<p>出现版本与环境变量了就是安装成功了。</p>
]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>尚硅谷-Spring-Security</title>
    <url>/2023/01/13/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/</url>
    <content><![CDATA[<h1 id="1-SpringSecurity-框架简介"><a href="#1-SpringSecurity-框架简介" class="headerlink" title="1.  SpringSecurity 框架简介"></a><strong>1.</strong>  <strong>SpringSecurity</strong> 框架简介</h1><h2 id="1-1-概要"><a href="#1-1-概要" class="headerlink" title="1.1 概要"></a><strong>1.1</strong> 概要</h2><p>Spring 是非常流行和成功的 Java 应用开发框架，Spring Security 正是 Spring 家族中的成员。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。</p>
<p>正如你可能知道的关于安全方面的两个主要区域是“<strong>认证</strong>”和“<strong>授权</strong>”（或者访问控制），一般来说，Web 应用的安全性包括<strong>用户认证（Authentication）和用户授权(Authorization）</strong>两个部分，这两点也是 Spring Security 重要核心功</p>
<p><strong>（1）</strong> 用户认证指的是：验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。<strong>通俗点说就是系统认为用户是否能登录</strong></p>
<p><strong>（2）</strong> 用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。<strong>通俗点讲就是系统判断用户是否有权限去做某些事情。</strong></p>
<h2 id="1-2-历史"><a href="#1-2-历史" class="headerlink" title="1.2 历史"></a>1.2 历史</h2><p>“Spring Security 开始于 2003 年年底,““spring 的 acegi 安全系统”。 起因是 Spring开发者邮件列表中的一个问题,有人提问是否考虑提供一个基于 spring 的安全实现。</p>
<p>Spring Security 以“The Acegi Secutity System for Spring” 的名字始于 2013 年晚些时候。一个问题提交到 Spring 开发者的邮件列表，询问是否已经有考虑一个机遇 Spring 的安全性社区实现。那时候 Spring 的社区相对较小（相对现在）。实际上 Spring 自己在2013 年只是一个存在于 ScourseForge 的项目，这个问题的回答是一个值得研究的领域，虽然目前时间的缺乏组织了我们对它的探索。</p>
<p>考虑到这一点，一个简单的安全实现建成但是并没有发布。几周后，Spring 社区的其他成员询问了安全性，这次这个代码被发送给他们。其他几个请求也跟随而来。到 2014 年一月大约有 20 万人使用了这个代码。这些创业者的人提出一个 SourceForge 项目加入是为了，这是在 2004 三月正式成立。</p>
<p>在早些时候，这个项目没有任何自己的验证模块，身份验证过程依赖于容器管理的安全性和 Acegi 安全性。而不是专注于授权。开始的时候这很适合，但是越来越多的用户请求额外的容器支持。容器特定的认证领域接口的基本限制变得清晰。还有一个相关的问题增加新的容器的路径，这是最终用户的困惑和错误配置的常见问题。</p>
<p>Acegi 安全特定的认证服务介绍。大约一年后，Acegi 安全正式成为了 Spring 框架的子项目。1.0.0 最终版本是出版于 2006 -在超过两年半的大量生产的软件项目和数以百计的改进和积极利用社区的贡献</p>
<p>Acegi 安全 2007 年底正式成为了 Spring 组合项目，更名为”Spring Security”。</p>
<h2 id="1-3同款产品对比"><a href="#1-3同款产品对比" class="headerlink" title="1.3同款产品对比"></a>1.3同款产品对比</h2><h3 id="1-3-1-Spring-Security"><a href="#1-3-1-Spring-Security" class="headerlink" title="1.3.1 Spring Security"></a>1.3.1 Spring Security</h3><p>Spring 技术栈的组成部分。</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114185801606.png" alt="image-20230114185801606"></p>
<p>通过提供完整可扩展的认证和授权支持保护你的应用程序。</p>
<p><a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a></p>
<p>SpringSecurity 特点：</p>
<ul>
<li><p>和 Spring 无缝整合。</p>
</li>
<li><p>全面的权限控制。</p>
</li>
<li><p>专门为Web 开发而设计。</p>
<ul>
<li>旧版本不能脱离Web 环境使用。</li>
</ul>
</li>
<li><p> 新版本对整个框架进行了分层抽取，分成了核心模块和Web 模块。单独引入核心模块就可以脱离Web 环境。</p>
</li>
<li><p>重量级。</p>
</li>
</ul>
<h3 id="1-3-2-Shiro"><a href="#1-3-2-Shiro" class="headerlink" title="1.3.2 Shiro"></a>1.3.2 Shiro</h3><p>Apache 旗下的轻量级权限控制框架。</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114190038429.png" alt="image-20230114190038429"></p>
<p>特点：</p>
<ul>
<li><p>轻量级。Shiro 主张的理念是把复杂的事情变简单。针对对性能有更高要求的互联网应用有更好表现。</p>
</li>
<li><p>通用性。</p>
<ul>
<li><p>好处：不局限于Web 环境，可以脱离Web 环境使用。</p>
</li>
<li><p>缺陷：在Web 环境下一些特定的需求需要手动编写代码定制。</p>
</li>
</ul>
</li>
</ul>
<p>Spring Security 是 Spring 家族中的一个安全管理框架，实际上，在 Spring Boot 出现之前，Spring Security 就已经发展了多年了，但是使用的并不多，安全管理这个领域，一直是 Shiro 的天下。</p>
<p>相对于 Shiro，在 SSM 中整合 Spring Security 都是比较麻烦的操作，所以，Spring Security 虽然功能比 Shiro 强大，但是使用反而没有 Shiro 多（Shiro 虽然功能没有Spring Security 多，但是对于大部分项目而言，Shiro 也够用了）。</p>
<p>自从有了 Spring Boot 之后，Spring Boot 对于 Spring Security 提供了自动化配置方案，可以使用更少的配置来使用 Spring Security。</p>
<p>因此，一般来说，常见的安全管理技术栈的组合是这样的：</p>
<ul>
<li><code>SSM + Shiro</code></li>
<li><code>Spring Boot/Spring Cloud + Spring Security</code></li>
</ul>
<p><strong>以上只是一个推荐的组合而已，如果单纯从技术上来说，无论怎么组合，都是可以运行的</strong></p>
<h2 id="1-4-模块划分"><a href="#1-4-模块划分" class="headerlink" title="1.4 模块划分"></a><strong>1.4</strong> 模块划分</h2><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114190328945.png" alt="image-20230114190328945"></p>
<h1 id="2-SpringSecurity-入门案例"><a href="#2-SpringSecurity-入门案例" class="headerlink" title="2.  SpringSecurity 入门案例"></a>2.  SpringSecurity 入门案例</h1><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114191112306.png" alt="image-20230114191112306"></p>
<h2 id="2-1-创建一个项目"><a href="#2-1-创建一个项目" class="headerlink" title="2.1  创建一个项目"></a><strong>2.1</strong>  创建一个项目</h2><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114191359949.png" alt="image-20230114191359949"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114191837151.png" alt="image-20230114191837151"></p>
<p>确认pom文件相关信息</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114192007676.png" alt="image-20230114192007676"></p>
<h2 id="2-2-定义一个controller方法"><a href="#2-2-定义一个controller方法" class="headerlink" title="2.2 定义一个controller方法"></a>2.2 定义一个controller方法</h2><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114192347475.png" alt="image-20230114192347475"></p>
<h2 id="2-3-启动后并访问方法"><a href="#2-3-启动后并访问方法" class="headerlink" title="2.3 启动后并访问方法"></a>2.3 启动后并访问方法</h2><p>观察发现自动跳转到登录页面</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114192501625.png" alt="image-20230114192501625"></p>
<p>默认的用户名：user</p>
<p>密码在项目启动的时候在控制台会打印，<strong>注意每次启动的时候密码都回发生变化！</strong></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114192641620.png" alt="image-20230114192641620"></p>
<p>输入用户名，密码，这样表示可以访问了，404 表示我们没有这个控制器，但是我们可以访问了。</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114192704316.png" alt="image-20230114192704316"></p>
<h2 id="2-4-SpringSecurity-基本原理"><a href="#2-4-SpringSecurity-基本原理" class="headerlink" title="2.4 SpringSecurity 基本原理"></a>2.4 <strong>SpringSecurity</strong> 基本原理</h2><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114214432047.png" alt="image-20230114214432047"></p>
<p><code>SpringSecurity </code>本质是一个过滤器链： 从启动是可以获取到过滤器链：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFil ter</span><br><span class="line">org.springframework.security.web.context.SecurityContextPersistenceFilter org.springframework.security.web.header.HeaderWriterFilter org.springframework.security.web.csrf.CsrfFilter org.springframework.security.web.authentication.logout.LogoutFilter org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter org.springframework.security.web.savedrequest.RequestCacheAwareFilter org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter org.springframework.security.web.authentication.AnonymousAuthenticationFilter org.springframework.security.web.session.SessionManagementFilter org.springframework.security.web.access.ExceptionTranslationFilter org.springframework.security.web.access.intercept.FilterSecurityInterceptor</span><br></pre></td></tr></table></figure>

<p>代码底层流程：重点看三个过滤器：</p>
<ul>
<li><code>FilterSecurityInterceptor</code>：是一个方法级的权限过滤器, 基本位于过滤链的最底部。</li>
</ul>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114193319522.png" alt="image-20230114193319522"></p>
<p><code>super.beforeInvocation(fi) </code>表示查看之前的<code>filter</code>是否通过。</p>
<p><code>fi.getChain().doFilter(fi.getRequest(), fi.getResponse());</code>表示真正的调用后台的服务。</p>
<ul>
<li><code>ExceptionTranslationFilter</code>：是个异常过滤器，用来处理在认证授权过程中抛出的异常</li>
</ul>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114214216441.png" alt="image-20230114214216441"></p>
<ul>
<li><code>UsernamePasswordAuthenticationFilter </code>：对/login 的 POST 请求做拦截，校验表单中用户名，密码。</li>
</ul>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114214300656.png" alt="image-20230114214300656"></p>
<h2 id="2-5-过滤器如何进行加载的"><a href="#2-5-过滤器如何进行加载的" class="headerlink" title="2.5 过滤器如何进行加载的"></a>2.5 过滤器如何进行加载的</h2><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114215304034.png" alt="image-20230114215304034"></p>
<h2 id="2-6-UserDetailsService-接口讲解"><a href="#2-6-UserDetailsService-接口讲解" class="headerlink" title="2.6 UserDetailsService 接口讲解"></a>2.6 <strong>UserDetailsService</strong> 接口讲解</h2><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114220246947.png" alt="image-20230114220246947"></p>
<p>当什么也没有配置的时候，账号和密码是由<code>Spring Security</code>定义生成的。而在实际项目中账号和密码都是从数据库中查询出来的。 所以我们要通过自定义逻辑控制认证逻辑。</p>
<p>如果需要自定义逻辑时，只需要实现 UserDetailsService 接口即可。接口定义如下：</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114215717272.png" alt="image-20230114215717272"></p>
<p><strong>返回值 UserDetails</strong></p>
<p>这个类是系统默认的用户“<strong>主体</strong>”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示获取登录用户所有权限</span></span><br><span class="line">Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示获取密码</span></span><br><span class="line">String <span class="title function_">getPassword</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示获取用户名</span></span><br><span class="line">String <span class="title function_">getUsername</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示判断账户是否过期</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示判断账户是否被锁定</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示凭证&#123;密码&#125;是否过期</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前用户是否可用</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以下是 <code>UserDetails </code>实现类</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114220345212.png" alt="image-20230114220345212"></p>
<p>以后我们只需要使用 User 这个实体类即可！</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114220424927.png" alt="image-20230114220424927"></p>
<ul>
<li>方法参数<code>username</code></li>
</ul>
<p>表示用户名。此值是客户端表单传递过来的数据。默认情况下必须叫 username，否则无法接收。</p>
<h2 id="2-7-PasswordEncoder-接口讲解"><a href="#2-7-PasswordEncoder-接口讲解" class="headerlink" title="2.7 PasswordEncoder 接口讲解"></a>2.7 PasswordEncoder 接口讲解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示把参数按照特定的解析规则进行解析</span></span><br><span class="line">String <span class="title function_">encode</span><span class="params">(CharSequence rawPassword)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示验证从存储中获取的编码密码与编码后提交的原始密码是否匹配。如果密码匹配，则返回 true；如果不匹配，则返回 false。第一个参数表示需要被解析的密码。第二个参数表示存储的密码。</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示如果解析的密码能够再次进行解析且达到更安全的结果则返回 true，否则返回false。默认返回 false。</span></span><br><span class="line"><span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">upgradeEncoding</span><span class="params">(String encodedPassword)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接口实现类</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230114220939686.png" alt="image-20230114220939686"></p>
<p><code>BCryptPasswordEncoder</code> 是 <code>Spring Security</code> 官方推荐的密码解析器，平时多使用这个解析器。</p>
<p><code>BCryptPasswordEncoder</code> 是对bcrypt 强散列方法的具体实现。是基于 Hash 算法实现的单向加密。可以通过 strength 控制加密强度，默认 10.</p>
<p><strong>查用方法演示</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">// 创建密码解析器 </span></span><br><span class="line">  <span class="type">BCryptPasswordEncoder</span>  <span class="variable">bCryptPasswordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">  <span class="comment">// 对密码进行加密</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">atguigu</span> <span class="operator">=</span> bCryptPasswordEncoder.encode(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">  <span class="comment">// 打印加密之后的数据</span></span><br><span class="line">  System.out.println(<span class="string">&quot;加密之后数据：\t&quot;</span>+atguigu);</span><br><span class="line">  <span class="comment">//判断原字符加密后和加密之前是否匹配</span></span><br><span class="line">  <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> bCryptPasswordEncoder.matches(<span class="string">&quot;atguigu&quot;</span>, atguigu);</span><br><span class="line">  <span class="comment">// 打印比较结果</span></span><br><span class="line">  System.out.println(<span class="string">&quot;比较结果：\t&quot;</span>+result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="3-SpringSecurity-Web-权限方案"><a href="#3-SpringSecurity-Web-权限方案" class="headerlink" title="3.  SpringSecurity Web 权限方案"></a>3.  SpringSecurity Web 权限方案</h1><h2 id="3-1-设置登录系统的账号、密码"><a href="#3-1-设置登录系统的账号、密码" class="headerlink" title="3.1  设置登录系统的账号、密码"></a><strong>3.1</strong>  设置登录系统的账号、密码</h2><h4 id="方式一：在-application-properties"><a href="#方式一：在-application-properties" class="headerlink" title="方式一：在 application.properties"></a><strong>方式一：在 application.properties</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring.security.user.name=atguigu </span><br><span class="line">spring.security.user.password=atguigu</span><br></pre></td></tr></table></figure>

<h4 id="方式二：-编写类实现接口"><a href="#方式二：-编写类实现接口" class="headerlink" title="方式二： 编写类实现接口"></a><strong>方式二： 编写类实现接口</strong></h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230115150017899.png" alt="image-20230115150017899"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springsecuritydemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BCryptPasswordEncoder</span> <span class="variable">bCryptPasswordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> bCryptPasswordEncoder.encode(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;lucy&quot;</span>).password(encode).roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="方式三：自定义实现类设置"><a href="#方式三：自定义实现类设置" class="headerlink" title="方式三：自定义实现类设置"></a>方式三：自定义实现类设置</h4><p>第一步 创建配置类，设置使用哪个<code>userDetailService</code>实现类</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230115153555803.png" alt="image-20230115153555803"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springsecuritydemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfigTest</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二步 编写实现类，返回User对象，User对象有用户名密码和操作权限</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230115170944214.png" alt="image-20230115170944214"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springsecuritydemo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.AuthorityUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;userDetailService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceDetailService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; auths= AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;marry&quot;</span>,<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123&quot;</span>),auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动测试</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230115171217798.png" alt="image-20230115171217798"></p>
<h2 id="3-2-实现数据库认证来完成用户登陆"><a href="#3-2-实现数据库认证来完成用户登陆" class="headerlink" title="3.2  实现数据库认证来完成用户登陆"></a>3.2  实现数据库认证来完成用户登陆</h2><h4 id="3-2-1-引入相关依赖"><a href="#3-2-1-引入相关依赖" class="headerlink" title="3.2.1 引入相关依赖"></a>3.2.1 引入相关依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-2-创建数据库和数据库表"><a href="#3-2-2-创建数据库和数据库表" class="headerlink" title="3.2.2 创建数据库和数据库表"></a>3.2.2 创建数据库和数据库表</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230115222000390.png" alt="image-20230115222000390"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : MyDocker-MySQL</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 80031</span></span><br><span class="line"><span class="comment"> Source Host           : localhost:3307</span></span><br><span class="line"><span class="comment"> Source Schema         : demo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 80031</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 15/01/2023 22:20:24</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for users</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `users`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-2-3-创建users表对应的实体类"><a href="#3-2-3-创建users表对应的实体类" class="headerlink" title="3.2.3 创建users表对应的实体类"></a>3.2.3 创建users表对应的实体类</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230115222523476.png" alt="image-20230115222523476"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springsecuritydemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-2-4-整合mp，创建接口，继承mp的接口"><a href="#3-2-4-整合mp，创建接口，继承mp的接口" class="headerlink" title="3.2.4 整合mp，创建接口，继承mp的接口"></a>3.2.4 整合mp，创建接口，继承mp的接口</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230115222817843.png" alt="image-20230115222817843"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springsecuritydemo.mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springsecuritydemo.entity.Users;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UsersMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Users&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-2-5-在MyUserDetailsService调用mapper里面的方法查询数据库进行用户认证"><a href="#3-2-5-在MyUserDetailsService调用mapper里面的方法查询数据库进行用户认证" class="headerlink" title="3.2.5 在MyUserDetailsService调用mapper里面的方法查询数据库进行用户认证"></a>3.2.5 在MyUserDetailsService调用mapper里面的方法查询数据库进行用户认证</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230115223808681.png" alt="image-20230115223808681"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springsecuritydemo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springsecuritydemo.entity.Users;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springsecuritydemo.mapper.UsersMapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.AuthorityUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;userDetailService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceDetailService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UsersMapper usersMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">       <span class="comment">//调用userMapper方法，根据用户查询数据库</span></span><br><span class="line">        QueryWrapper&lt;Users&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        Users users= usersMapper.selectOne(wrapper);</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (users==<span class="literal">null</span>)&#123;<span class="comment">//数据库没有用户名，认证失败</span></span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        <span class="comment">//从查询数据库返回users对象，得到用户名和密码返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(users.getUsername(),<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()),auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-2-6-启动类上添加注解MaperScan"><a href="#3-2-6-启动类上添加注解MaperScan" class="headerlink" title="3.2.6 启动类上添加注解MaperScan"></a>3.2.6 启动类上添加注解MaperScan</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springsecuritydemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;package com.atguigu.springsecuritydemo.mapper;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringsecuritydemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringsecuritydemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-2-7-配置数据库"><a href="#3-2-7-配置数据库" class="headerlink" title="3.2.7 配置数据库"></a>3.2.7 配置数据库</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mysql 数据库连接</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3307/demo?serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-8-测试"><a href="#3-2-8-测试" class="headerlink" title="3.2.8 测试"></a>3.2.8 测试</h4><p>铺底数据</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230115230750319.png" alt="image-20230115230750319"></p>
<p>输入错误的用户名</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230115230824217.png" alt="image-20230115230824217"></p>
<p> <img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230115230841239.png" alt="image-20230115230841239"></p>
<p>输入正确的用户名</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230115230924029.png" alt="image-20230115230924029"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230115230936487.png" alt="image-20230115230936487"></p>
<h2 id="3-3自定义用户登录页面及白名单"><a href="#3-3自定义用户登录页面及白名单" class="headerlink" title="3.3自定义用户登录页面及白名单"></a>3.3自定义用户登录页面及白名单</h2><h4 id="3-3-1-修改配置类"><a href="#3-3-1-修改配置类" class="headerlink" title="3.3.1 修改配置类"></a>3.3.1 修改配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.formLogin()<span class="comment">//自定义自己编写的登录页面</span></span><br><span class="line">            .loginPage(<span class="string">&quot;/login.html&quot;</span>)<span class="comment">//登录页面设置</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)<span class="comment">//登录访问路径</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()<span class="comment">//登陆成功之后，跳转路径</span></span><br><span class="line">            .and().authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()<span class="comment">//设置哪些路径可以直接访问，不需要认证</span></span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and().csrf().disable();<span class="comment">//关闭csrf防护</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-2-编写登录页面"><a href="#3-3-2-编写登录页面" class="headerlink" title="3.3.2 编写登录页面"></a>3.3.2 编写登录页面</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230118230730481.png" alt="image-20230118230730481"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/html&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">      用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-3-测试"><a href="#3-3-3-测试" class="headerlink" title="3.3.3 测试"></a>3.3.3 测试</h4><p>访问白名单内的地址，直接访问</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230118230846805.png" alt="image-20230118230846805"></p>
<p>访问需认证的页面,自动跳转至自定义的登录页面</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230118231002498.png" alt="image-20230118231002498"></p>
<p>完成登录</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230118231021993.png" alt="image-20230118231021993"></p>
<h2 id="3-4-基于角色或权限进行访问控制"><a href="#3-4-基于角色或权限进行访问控制" class="headerlink" title="3.4 基于角色或权限进行访问控制"></a>3.4 基于角色或权限进行访问控制</h2><h4 id="hasAuthority"><a href="#hasAuthority" class="headerlink" title="hasAuthority"></a>hasAuthority</h4><p>如果当前的主体具体有指定的权限，返回true，否则返回false</p>
<p>1.在配置类中设置当前访问地址有哪些权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.formLogin()<span class="comment">//自定义自己编写的登录页面</span></span><br><span class="line">            .loginPage(<span class="string">&quot;/login.html&quot;</span>)<span class="comment">//登录页面设置</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)<span class="comment">//登录访问路径</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()<span class="comment">//登陆成功之后，跳转路径</span></span><br><span class="line">            .and().authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()<span class="comment">//设置哪些路径可以直接访问，不需要认证</span></span><br><span class="line">            <span class="comment">//当前登录用户，只有具有admins权限才可以访问这个路径</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAuthority(<span class="string">&quot;admins&quot;</span>)</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and().csrf().disable();<span class="comment">//关闭csrf防护</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在UserDetailService，把返回User对象设置权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">   <span class="comment">//调用userMapper方法，根据用户查询数据库</span></span><br><span class="line">    QueryWrapper&lt;Users&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">    Users users= usersMapper.selectOne(wrapper);</span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    <span class="keyword">if</span> (users==<span class="literal">null</span>)&#123;<span class="comment">//数据库没有用户名，认证失败</span></span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admins&quot;</span>);</span><br><span class="line">    <span class="comment">//从查询数据库返回users对象，得到用户名和密码返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(users.getUsername(),<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()),auths);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<p>1.权限不通过</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119133414345.png" alt="image-20230119133414345"></p>
<p>自动跳转至错误页面</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119133453331.png" alt="image-20230119133453331"></p>
<p>2.权限通过</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119133803336.png" alt="image-20230119133803336"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119133721607.png" alt="image-20230119133721607"></p>
<h4 id="hasAnyAuthority"><a href="#hasAnyAuthority" class="headerlink" title="hasAnyAuthority"></a>hasAnyAuthority</h4><p>配置类中设置哪些权限可以访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()<span class="comment">//自定义自己编写的登录页面</span></span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)<span class="comment">//登录页面设置</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)<span class="comment">//登录访问路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()<span class="comment">//登陆成功之后，跳转路径</span></span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()<span class="comment">//设置哪些路径可以直接访问，不需要认证</span></span><br><span class="line">                <span class="comment">//当前登录用户，只有具有admins权限才可以访问这个路径</span></span><br><span class="line"><span class="comment">//                .antMatchers(&quot;/test/index&quot;).hasAuthority(&quot;admins&quot;)</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAnyAuthority(<span class="string">&quot;admins&quot;</span>,<span class="string">&quot;manager&quot;</span>)</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().csrf().disable();<span class="comment">//关闭csrf防护</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">   <span class="comment">//调用userMapper方法，根据用户查询数据库</span></span><br><span class="line">    QueryWrapper&lt;Users&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">    Users users= usersMapper.selectOne(wrapper);</span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    <span class="keyword">if</span> (users==<span class="literal">null</span>)&#123;<span class="comment">//数据库没有用户名，认证失败</span></span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admins&quot;</span>);</span><br><span class="line">    <span class="comment">//从查询数据库返回users对象，得到用户名和密码返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(users.getUsername(),<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()),auths);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>权限通过</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119135549774.png" alt="image-20230119135549774"></p>
<h4 id="hasRole"><a href="#hasRole" class="headerlink" title="hasRole"></a>hasRole</h4><p>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()<span class="comment">//自定义自己编写的登录页面</span></span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)<span class="comment">//登录页面设置</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)<span class="comment">//登录访问路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()<span class="comment">//登陆成功之后，跳转路径</span></span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()<span class="comment">//设置哪些路径可以直接访问，不需要认证</span></span><br><span class="line">                <span class="comment">//当前登录用户，只有具有admins权限才可以访问这个路径</span></span><br><span class="line"><span class="comment">//                .antMatchers(&quot;/test/index&quot;).hasAuthority(&quot;admins&quot;)</span></span><br><span class="line"><span class="comment">//                .antMatchers(&quot;/test/index&quot;).hasAnyAuthority(&quot;admins&quot;,&quot;manager&quot;)</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasRole(<span class="string">&quot;sale&quot;</span>)</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().csrf().disable();<span class="comment">//关闭csrf防护</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>UserDetailService类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">   <span class="comment">//调用userMapper方法，根据用户查询数据库</span></span><br><span class="line">    QueryWrapper&lt;Users&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">    Users users= usersMapper.selectOne(wrapper);</span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    <span class="keyword">if</span> (users==<span class="literal">null</span>)&#123;<span class="comment">//数据库没有用户名，认证失败</span></span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admins,ROLE_sale&quot;</span>);</span><br><span class="line">    <span class="comment">//从查询数据库返回users对象，得到用户名和密码返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(users.getUsername(),<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()),auths);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<p>认证通过</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119150951069.png" alt="image-20230119150951069"></p>
<h4 id="hasAnyRole"><a href="#hasAnyRole" class="headerlink" title="hasAnyRole"></a>hasAnyRole</h4><p>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()<span class="comment">//自定义自己编写的登录页面</span></span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)<span class="comment">//登录页面设置</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)<span class="comment">//登录访问路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()<span class="comment">//登陆成功之后，跳转路径</span></span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()<span class="comment">//设置哪些路径可以直接访问，不需要认证</span></span><br><span class="line">                <span class="comment">//当前登录用户，只有具有admins权限才可以访问这个路径</span></span><br><span class="line"><span class="comment">//                .antMatchers(&quot;/test/index&quot;).hasAuthority(&quot;admins&quot;)</span></span><br><span class="line"><span class="comment">//                .antMatchers(&quot;/test/index&quot;).hasAnyAuthority(&quot;admins&quot;,&quot;manager&quot;)</span></span><br><span class="line"><span class="comment">//                .antMatchers(&quot;/test/index&quot;).hasRole(&quot;sale&quot;)</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAnyRole(<span class="string">&quot;sale&quot;</span>,<span class="string">&quot;sale2&quot;</span>)</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().csrf().disable();<span class="comment">//关闭csrf防护</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>UserDetailService类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">   <span class="comment">//调用userMapper方法，根据用户查询数据库</span></span><br><span class="line">    QueryWrapper&lt;Users&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">    Users users= usersMapper.selectOne(wrapper);</span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    <span class="keyword">if</span> (users==<span class="literal">null</span>)&#123;<span class="comment">//数据库没有用户名，认证失败</span></span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;ROLE_sale2&quot;</span>);</span><br><span class="line">    <span class="comment">//从查询数据库返回users对象，得到用户名和密码返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(users.getUsername(),<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()),auths);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试 认证成功</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119151645806.png" alt="image-20230119151645806"></p>
<h2 id="3-5自定义403页面"><a href="#3-5自定义403页面" class="headerlink" title="3.5自定义403页面"></a>3.5自定义403页面</h2><p>配置类中，配置自定义页面的路径</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119152547500.png" alt="image-20230119152547500"></p>
<p>编辑自定义403页面</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119152615835.png" alt="image-20230119152615835"></p>
<p>测试</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119152630077.png" alt="image-20230119152630077"></p>
<h2 id="3-6-用户授权（注解方式）"><a href="#3-6-用户授权（注解方式）" class="headerlink" title="3.6 用户授权（注解方式）"></a>3.6 用户授权（注解方式）</h2><h4 id="3-6-1-Secured"><a href="#3-6-1-Secured" class="headerlink" title="3.6.1 @Secured"></a>3.6.1 @Secured</h4><ul>
<li><p>启动类开启注解<img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119163722824.png" alt="image-20230119163722824"></p>
</li>
<li><p>在<code>controller</code>方法上使用注解，设置可以访问的角色</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119163829386.png" alt="image-20230119163829386"></p>
</li>
<li><p><code>userDetailService</code>中设置用户角色</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119164454054.png" alt="image-20230119164454054"></p>
</li>
</ul>
<h4 id="3-6-2-PreAuthorize"><a href="#3-6-2-PreAuthorize" class="headerlink" title="3.6.2 @PreAuthorize"></a>3.6.2 @PreAuthorize</h4><p>方法之前进行校验</p>
<ul>
<li><p>启动类开启注解</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119182817987.png" alt="image-20230119182817987"></p>
</li>
<li><p>controller方法上添加注解</p>
</li>
</ul>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119183107422.png" alt="image-20230119183107422"></p>
<h4 id="3-6-3-PostAuthorize"><a href="#3-6-3-PostAuthorize" class="headerlink" title="3.6.3   @PostAuthorize"></a>3.6.3   @PostAuthorize</h4><p>@PostAuthorize 注解使用并不多，在方法执行后再进行权限验证，适合验证带有返回值的权限.</p>
<ul>
<li><p>开启注解</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119184323797.png" alt="image-20230119184323797"></p>
</li>
<li><p>controller方法添加注解</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119184545352.png" alt="image-20230119184545352"></p>
</li>
<li><p>测试 认证不通过</p>
</li>
</ul>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119184804873.png" alt="image-20230119184804873"></p>
<h4 id="3-6-4-PostFilter"><a href="#3-6-4-PostFilter" class="headerlink" title="3.6.4  @PostFilter"></a>3.6.4  @PostFilter</h4><p>权限验证之后对数据进行过滤 留下用户名是 admin1 的数据表达式中的 filterObject 引用的是方法返回值List 中的某一个元素</p>
<ul>
<li>请求方法上添加注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;getAll&quot;)</span> <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;admin&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@PostFilter(&quot;filterObject.username == &#x27;admin1&#x27;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Users&gt; <span class="title function_">getAllUser</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Users&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Users</span>(<span class="number">1</span>,<span class="string">&quot;admin1&quot;</span>,<span class="string">&quot;6666&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Users</span>(<span class="number">2</span>,<span class="string">&quot;admin2&quot;</span>,<span class="string">&quot;888&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119185834346.png" alt="image-20230119185834346"></p>
<ul>
<li>用户配置角色</li>
</ul>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119185910872.png" alt="image-20230119185910872"></p>
<p>测试 通过</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230119185942456.png" alt="image-20230119185942456"></p>
<h4 id="3-6-5-PreFilter"><a href="#3-6-5-PreFilter" class="headerlink" title="3.6.5 @PreFilter"></a>3.6.5 @PreFilter</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;getTestPreFilter&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;admin&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@PreFilter(value = &quot;filterObject.id%2==0&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Users&gt; <span class="title function_">getTestPreFilter</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;Users&gt; list)</span>&#123;</span><br><span class="line">  list.forEach(t-&gt; &#123;</span><br><span class="line">    System.out.println(t.getId()+<span class="string">&quot;\t&quot;</span>+t.getUsername());</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-7-用户注销"><a href="#3-7-用户注销" class="headerlink" title="3.7 用户注销"></a>3.7 用户注销</h2><ul>
<li><p>配置类中添加退出的配置</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230120160718129.png" alt="image-20230120160718129"></p>
</li>
<li><p>编辑登陆成功页面,添加超链接写退出路径</p>
<p><strong>success.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  登陆成功！！！</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>启动项目测试</p>
<p>访问登录地址<code>http://localhost:8080/success.html</code></p>
<p>输入用户名密码后成功登录</p>
</li>
</ul>
</li>
</ul>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230120161345392.png" alt="image-20230120161345392"></p>
<p>访问其他服务,成功访问</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230120161429901.png" alt="image-20230120161429901"></p>
<p>点击退出按钮后跳转默认设置的页面</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230120161502411.png" alt="image-20230120161502411"></p>
<p>再访问其他服务,无法访问跳转至登录页面</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230120161543062.png" alt="image-20230120161543062"></p>
<h2 id="3-8-自动登录"><a href="#3-8-自动登录" class="headerlink" title="3.8 自动登录"></a>3.8 自动登录</h2><h4 id="3-8-1-原理分析"><a href="#3-8-1-原理分析" class="headerlink" title="3.8.1 原理分析"></a>3.8.1 原理分析</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230120174922870.png" alt="image-20230120174922870"></p>
<h4 id="3-8-2-功能实现"><a href="#3-8-2-功能实现" class="headerlink" title="3.8.2 功能实现"></a>3.8.2 功能实现</h4><ul>
<li>创建表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `persistent_logins` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`series` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`token` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`last_used` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`series`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>配置类，注入数据源，配置操作数据库对象</li>
</ul>
<p><strong>SecurityConfigTest.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;<span class="comment">//注入数据</span></span><br><span class="line">    <span class="comment">//配置对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PersistentTokenRepository <span class="title function_">persistentTokenRepository</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JdbcTokenRepositoryImpl</span> <span class="variable">jdbcTokenRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTokenRepositoryImpl</span>();</span><br><span class="line">        jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line"><span class="comment">//        jdbcTokenRepository.setCreateTableOnStartup(true);//创建表</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置类中配置自动登录</li>
</ul>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230120190802499.png" alt="image-20230120190802499"></p>
<ul>
<li>在登录页面中添加复选框</li>
</ul>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230120191127493.png" alt="image-20230120191127493"></p>
<ul>
<li>测试</li>
</ul>
<p>访问登录页面</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230120205104877.png" alt="image-20230120205104877"></p>
<p>登录成功后发现cookies，数据库也出现了数据</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230120205231635.png" alt="image-20230120205231635">  </p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230120205446596.png" alt="image-20230120205446596"></p>
<p>直接关闭浏览器，访问一般请求,可直接访问无需再认证</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230120205257803.png" alt="image-20230120205257803"></p>
<h2 id="3-9-CSRF"><a href="#3-9-CSRF" class="headerlink" title="3.9 CSRF"></a>3.9 CSRF</h2><p>跨站请求伪造（英语：Cross-site request forgery），也被称为 <strong>one-click attack</strong> 或者 <strong>session riding</strong>，通常缩写为 <strong>CSRF</strong> 或者 <strong>XSRF</strong>， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。跟<a href="https://baike.baidu.com/item/%E8%B7%A8%E7%BD%91%E7%AB%99%E8%84%9A%E6%9C%AC">跨网站脚本</a>（XSS）相比，<strong>XSS</strong> 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p>
<p>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的</p>
<p>从 Spring Security 4.0 开始，默认情况下会启用CSRF 保护，以防止CSRF 攻击应用程序，Spring Security CSRF 会针对 PATCH，POST，PUT 和DELETE 方法进行防护。</p>
<p><strong>在登录页面添加一个隐藏域</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>	<span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span><span class="attr">th:if</span>=<span class="string">&quot;$&#123;_csrf&#125;!=null&quot;</span><span class="attr">th:value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span><span class="attr">name</span>=<span class="string">&quot;_csrf&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>关闭安全配置的类中的csrf</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http.csrf().disable();</span></span><br></pre></td></tr></table></figure>

<h1 id="4-SpringSecurity微服务权限"><a href="#4-SpringSecurity微服务权限" class="headerlink" title="4.SpringSecurity微服务权限"></a>4.SpringSecurity微服务权限</h1><h2 id="4-1-什么是微服务"><a href="#4-1-什么是微服务" class="headerlink" title="4.1 什么是微服务"></a>4.1 什么是微服务</h2><p><strong>1、微服务由来</strong></p>
<p>微服务最早由Martin Fowler 与 James Lewis 于 2014 年共同提出，微服务架构风格是一种使用一套小服务来开发单个应用的方式途径，每个服务运行在自己的进程中，并使用轻量级机制通信，通常是 HTTP API，这些服务基于业务能力构建，并能够通过自动化部署机制来独立部署，这些服务使用不同的编程语言实现，以及不同数据存储技术，并保持最低限度的集中式管理。</p>
<p><strong>2 、微服务优势</strong></p>
<p>（1）微服务每个模块就相当于一个单独的项目，代码量明显减少，遇到问题也相对来说比较好解决。</p>
<p>（2）微服务每个模块都可以使用不同的存储方式（比如有的用 redis，有的用 mysql等），数据库也是单个模块对应自己的数据库。</p>
<p>（3)  微服务每个模块都可以使用不同的开发技术，开发模式更灵活。</p>
<p><strong>3 、微服务本质</strong></p>
<p>（1） 微服务，关键其实不仅仅是微服务本身，而是系统要提供一套基础的架构，这种架构使得微服务可以独立的部署、运行、升级，不仅如此，这个系统架构还让微服务与微服务之间在结构上“松耦合”，而在功能上则表现为一个统一的整体。这种所谓的“统一的整体”表现出来的是统一风格的界面，统一的权限管理，统一的安全策略，统一的上线过 程，统一的日志和审计方法，统一的调度方式，统一的访问入口等等。</p>
<p>（2） 微服务的目的是有效的拆分应用，实现敏捷开发和部署。</p>
<h2 id="4-2-微服务认证与授权实现思路"><a href="#4-2-微服务认证与授权实现思路" class="headerlink" title="4.2 微服务认证与授权实现思路"></a>4.2 微服务认证与授权实现思路</h2><h3 id="1、认证授权过程分析"><a href="#1、认证授权过程分析" class="headerlink" title="1、认证授权过程分析"></a>1、认证授权过程分析</h3><p>（1） 如果是基于Session，那么 Spring-security 会对 cookie 里的 sessionid 进行解析，找到服务器存储的 session 信息，然后判断当前用户是否符合请求的要求。</p>
<p>（2） 如果是token，则是解析出 token，然后将当前请求加入到 Spring-security 管理的权限信息中去</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230122235150283.png" alt="image-20230122235150283"></p>
<p>如果系统的模块众多，每个模块都需要进行授权与认证，所以我们选择基于 token 的形式进行授权与认证，用户根据用户名密码认证成功，然后获取当前用户角色的一系列权限 值，并以用户名为key，权限列表为value 的形式存入 redis 缓存中，根据用户名相关信息生成token 返回，浏览器将 token 记录到 cookie 中，每次调用 api 接口都默认将token 携带到 header 请求头中，Spring-security 解析 header 头获取 token 信息，解析 token 获取当前用户名，根据用户名就可以从redis 中获取权限列表，这样 Spring-security 就能够判断当前请求是否有权限访问</p>
<h3 id="2、权限管理数据模型"><a href="#2、权限管理数据模型" class="headerlink" title="2、权限管理数据模型"></a>2、权限管理数据模型</h3><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230122235855639.png" alt="image-20230122235855639"></p>
<h3 id="3、项目搭建"><a href="#3、项目搭建" class="headerlink" title="3、项目搭建"></a>3、项目搭建</h3><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230125125127014.png" alt="image-20230125125127014"></p>
<h4 id="3-1、创建父工程"><a href="#3-1、创建父工程" class="headerlink" title="3.1、创建父工程"></a>3.1、创建父工程</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230125125538304.png" alt="image-20230125125538304"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230125125828478.png" alt="image-20230125125828478"></p>
<h4 id="3-2、创建common子模块"><a href="#3-2、创建common子模块" class="headerlink" title="3.2、创建common子模块"></a>3.2、创建common子模块</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230125130116408.png" alt="image-20230125130116408"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230125130215249.png" alt="image-20230125130215249"></p>
<h5 id="3-2-1-common目录下创建子模块service-base"><a href="#3-2-1-common目录下创建子模块service-base" class="headerlink" title="3.2.1 common目录下创建子模块service_base"></a>3.2.1 common目录下创建子模块service_base</h5><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230125131403368.png" alt="image-20230125131403368"></p>
<h5 id="3-2-2-common目录下创建子模块spring-security"><a href="#3-2-2-common目录下创建子模块spring-security" class="headerlink" title="3.2.2 common目录下创建子模块spring_security"></a>3.2.2 common目录下创建子模块spring_security</h5><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230125131449252.png" alt="image-20230125131449252"></p>
<h4 id="3-3、创建infrastructure子模块"><a href="#3-3、创建infrastructure子模块" class="headerlink" title="3.3、创建infrastructure子模块"></a>3.3、创建infrastructure子模块</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230125132559462.png" alt="image-20230125132559462"></p>
<h5 id="3-3-1、创建api-gateway子模块"><a href="#3-3-1、创建api-gateway子模块" class="headerlink" title="3.3.1、创建api_gateway子模块"></a>3.3.1、创建api_gateway子模块</h5><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230125132750029.png" alt="image-20230125132750029"></p>
<h4 id="3-4、创建service子模块"><a href="#3-4、创建service子模块" class="headerlink" title="3.4、创建service子模块"></a>3.4、创建service子模块</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230125133020703.png" alt="image-20230125133020703"></p>
<h5 id="3-4-1、创建service-acl子模块"><a href="#3-4-1、创建service-acl子模块" class="headerlink" title="3.4.1、创建service_acl子模块"></a>3.4.1、创建service_acl子模块</h5><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230125133303390.png" alt="image-20230125133303390"></p>
<h4 id="3-5、项目规划"><a href="#3-5、项目规划" class="headerlink" title="3.5、项目规划"></a>3.5、项目规划</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230125133628999.png" alt="image-20230125133628999"></p>
<h3 id="4、引入依赖"><a href="#4、引入依赖" class="headerlink" title="4、引入依赖"></a>4、引入依赖</h3><p><strong>acl_parent</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>infrastructure<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>acl_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>acl_parent<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>acl_parent<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">velocity.version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">velocity.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jwt.version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">jwt.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.83<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gson.version</span>&gt;</span>2.8.4<span class="tag">&lt;/<span class="name">gson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">json.version</span>&gt;</span>20170516<span class="tag">&lt;/<span class="name">json.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cloud-alibaba.version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">cloud-alibaba.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Spring Cloud--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis-plus 持久层--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;velocity.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--swagger ui--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- JWT --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Common</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>acl_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>service_base<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring_security<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>spring_security</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service_base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Security依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>api_gateway</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>infrastructure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api_gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service_base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--gson--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--服务调用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>service</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>acl_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>service_acl<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service_base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--服务注册--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--服务调用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--gson--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>service_acl</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service_acl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、启动redis和Nacos"><a href="#5、启动redis和Nacos" class="headerlink" title="5、启动redis和Nacos"></a>5、启动redis和Nacos</h3><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230126163559489.png" alt="image-20230126163559489"></p>
<h3 id="6、编写common里面需要的工具类"><a href="#6、编写common里面需要的工具类" class="headerlink" title="6、编写common里面需要的工具类"></a>6、编写common里面需要的工具类</h3><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230126171727242.png" alt="image-20230126171727242"></p>
<h3 id="7、编写SpringSecurity认证授权工具类和处理器"><a href="#7、编写SpringSecurity认证授权工具类和处理器" class="headerlink" title="7、编写SpringSecurity认证授权工具类和处理器"></a>7、编写SpringSecurity认证授权工具类和处理器</h3><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230126175853459.png" alt="image-20230126175853459"></p>
<h4 id="7-1、编写密码处理工具类"><a href="#7-1、编写密码处理工具类" class="headerlink" title="7.1、编写密码处理工具类"></a>7.1、编写密码处理工具类</h4><p><code>DefaultPasswordEncoder.java</code></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230126180634574.png" alt="image-20230126180634574"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.security.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.utils.MD5;</span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.WCharSeqHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultPasswordEncoder</span> <span class="keyword">implements</span> <span class="title class_">PasswordEncoder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultPasswordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultPasswordEncoder</span><span class="params">(<span class="type">int</span> strength)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行MD5加密</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(CharSequence rawPassword)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MD5.encrypt(rawPassword.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行密码比对</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> encodedPassword.equals(MD5.encrypt(rawPassword.toString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="7-2、编写token操作工具类"><a href="#7-2、编写token操作工具类" class="headerlink" title="7.2、编写token操作工具类"></a>7.2、编写token操作工具类</h4><p>使用jwt生成token</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230126184203614.png" alt="image-20230126184203614"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.security.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.CompressionCodecs;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwt;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> tokenExpiration=<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String tokenSignKey=<span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createToken</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> Jwts.builder().setSubject(username).setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + tokenExpiration))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, tokenSignKey).compressWith(CompressionCodecs.GZIP).compact();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserFromToken</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        String user=Jwts.parser().setSigningKey(tokenSignKey).parseClaimsJws(token).getBody().getSubject();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeToken</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="comment">//jwttoken 无需删除 客户端扔掉即可</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="7-3、编写退出处理器"><a href="#7-3、编写退出处理器" class="headerlink" title="7.3、编写退出处理器"></a>7.3、编写退出处理器</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230126190615720.png" alt="image-20230126190615720"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.security.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.utils.R;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.utils.ResponseUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.logout.LogoutHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenLogoutHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TokenManager tokenManager;</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TokenLogoutHandler</span><span class="params">(TokenManager tokenManager,RedisTemplate redisTemplate)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.tokenManager=tokenManager;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate=redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> &#123;</span><br><span class="line">        String token=request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (token!=<span class="literal">null</span>)&#123;</span><br><span class="line">            tokenManager.removeToken(token);</span><br><span class="line">            <span class="comment">//清空当前用户缓存中的权限数据</span></span><br><span class="line">            String userName=tokenManager.getUserFromToken(token);</span><br><span class="line">            redisTemplate.delete(userName);</span><br><span class="line">        &#125;</span><br><span class="line">        ResponseUtil.out(response, R.ok());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="7-4、编写未授权统一处理类"><a href="#7-4、编写未授权统一处理类" class="headerlink" title="7.4、编写未授权统一处理类"></a>7.4、编写未授权统一处理类</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230126191141065.png" alt="image-20230126191141065"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.security.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.utils.R;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.utils.ResponseUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnauthEntryPoint</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        ResponseUtil.out(response, R.error());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="8、编写实体类"><a href="#8、编写实体类" class="headerlink" title="8、编写实体类"></a>8、编写实体类</h3><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230126225223381.png" alt="image-20230126225223381"></p>
<p>SecurityUser.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.security.entity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="comment">//当前登录用户</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> User currentUserInfo;</span><br><span class="line">    <span class="comment">//当前权限</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; permissionValueList; <span class="keyword">public</span> <span class="title function_">SecurityUser</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecurityUser</span><span class="params">(User user)</span> &#123; <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentUserInfo = user;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        Collection&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String permissionValue : permissionValueList)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isEmpty(permissionValue))&#123;</span><br><span class="line">                SimpleGrantedAuthority  authority=<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(permissionValue);</span><br><span class="line">                authorities.add(authority);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentUserInfo.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentUserInfo.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.security.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="9、编写认证和授权的filter"><a href="#9、编写认证和授权的filter" class="headerlink" title="9、编写认证和授权的filter"></a>9、编写认证和授权的filter</h3><h4 id="9-1、编写认证的filter"><a href="#9-1、编写认证的filter" class="headerlink" title="9.1、编写认证的filter"></a>9.1、编写认证的filter</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230126233821374.png" alt="image-20230126233821374"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.security.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.security.entity.SecurityUser;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.security.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.security.security.TokenManager;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.utils.R;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.utils.ResponseUtil;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenLoginFilter</span> <span class="keyword">extends</span> <span class="title class_">UsernamePasswordAuthenticationFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="keyword">private</span> TokenManager tokenManager;</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TokenLoginFilter</span><span class="params">(AuthenticationManager authenticationManager,</span></span><br><span class="line"><span class="params">                            TokenManager tokenManager, RedisTemplate redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authenticationManager = authenticationManager;</span><br><span class="line">        <span class="built_in">this</span>.tokenManager = tokenManager;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="built_in">this</span>.setPostOnly(<span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">this</span>.setRequiresAuthenticationRequestMatcher(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;/admin/acl/login&quot;</span>,<span class="string">&quot;POST&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//1.获取表单提交用户名和密码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> <span class="keyword">throws</span> AuthenticationException</span><br><span class="line">      <span class="comment">//获取表单提交数据</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().readValue(req.getInputStream(), User.class);</span><br><span class="line">        <span class="keyword">return</span> authenticationManager.authenticate(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user.getUsername(), user.getPassword(), <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**认证成功调用的方法</span></span><br><span class="line"><span class="comment">     * 登录成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">successfulAuthentication</span><span class="params">(HttpServletRequest req,</span></span><br><span class="line"><span class="params">                                            HttpServletResponse res, FilterChain chain,</span></span><br><span class="line"><span class="params">                                            Authentication auth)</span> <span class="keyword">throws</span></span><br><span class="line">            IOException, ServletException &#123;</span><br><span class="line">      	<span class="comment">//认证成功，得到认证成功之后的用户信息</span></span><br><span class="line">        <span class="type">SecurityUser</span> <span class="variable">user</span> <span class="operator">=</span> (SecurityUser) auth.getPrincipal();</span><br><span class="line">      	<span class="comment">//根据用户名生成token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span>tokenManager.createToken(user.getCurrentUserInfo().getUsername());</span><br><span class="line">        <span class="comment">//把用户名称和用户权限列表放大redis</span></span><br><span class="line">      	redisTemplate.opsForValue().set(user.getCurrentUserInfo().getUsername(),</span><br><span class="line">                user.getPermissionValueList());</span><br><span class="line">      	<span class="comment">//返回token</span></span><br><span class="line">        ResponseUtil.out(res, R.ok().data(<span class="string">&quot;token&quot;</span>, token));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">unsuccessfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                              HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                              AuthenticationException e)</span> <span class="keyword">throws</span></span><br><span class="line">            IOException, ServletException</span><br><span class="line">    &#123; ResponseUtil.out(response,</span><br><span class="line">            R.error());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="9-2、编写授权的filter"><a href="#9-2、编写授权的filter" class="headerlink" title="9.2、编写授权的filter"></a>9.2、编写授权的filter</h4><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230126234948489.png" alt="image-20230126234948489"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.security.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.security.security.TokenManager;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.utils.R;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.utils.ResponseUtil;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.www.BasicAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">BasicAuthenticationFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TokenManager tokenManager;</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="keyword">public</span>	<span class="title function_">TokenAuthenticationFilter</span><span class="params">(AuthenticationManager authManager, TokenManager tokenManager, RedisTemplate redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(authManager); <span class="built_in">this</span>.tokenManager = tokenManager; <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest req, HttpServletResponse res, FilterChain chain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;=================&quot;</span> + req.getRequestURI());</span><br><span class="line">        <span class="keyword">if</span> (req.getRequestURI().indexOf(<span class="string">&quot;admin&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">            chain.doFilter(req, res);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            authentication = getAuthentication(req);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            ResponseUtil.out(res, R.error());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (authentication != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ResponseUtil.out(res, R.error());</span><br><span class="line">        &#125;</span><br><span class="line">            chain.doFilter(req, res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UsernamePasswordAuthenticationToken <span class="title function_">getAuthentication</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="comment">// token 置于header 里</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(token.trim())) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> tokenManager.getUserFromToken(token); List&lt;String&gt; permissionValueList=(List&lt;String&gt;)</span><br><span class="line">                    redisTemplate.opsForValue().get(userName);</span><br><span class="line">            Collection&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(String permissionValue : permissionValueList) &#123;</span><br><span class="line">                <span class="keyword">if</span>(StringUtils.isEmpty(permissionValue)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">SimpleGrantedAuthority</span> <span class="variable">authority</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                        <span class="title class_">SimpleGrantedAuthority</span>(permissionValue);</span><br><span class="line">                authorities.add(authority);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(userName)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(userName, token,</span><br><span class="line">                        authorities);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10、编写核心配置类"><a href="#10、编写核心配置类" class="headerlink" title="10、编写核心配置类"></a>10、编写核心配置类</h3><p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230127153613189.png" alt="image-20230127153613189"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.security.filter.TokenAuthenticationFilter;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.security.filter.TokenLoginFilter;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.security.security.DefaultPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.security.security.TokenLogoutHandler;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.security.security.TokenManager;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.security.security.UnauthEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="comment">//自定义查询数据库用户名密码和权限信息</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService; <span class="comment">//token 管理工具类(生成 token)</span></span><br><span class="line">    <span class="keyword">private</span> TokenManager tokenManager; <span class="comment">//密码管理工具类</span></span><br><span class="line">    <span class="keyword">private</span> DefaultPasswordEncoder defaultPasswordEncoder; <span class="comment">//redis 操作工具类</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TokenWebSecurityConfig</span><span class="params">(UserDetailsService userDetailsService, DefaultPasswordEncoder defaultPasswordEncoder,</span></span><br><span class="line"><span class="params">                                  TokenManager tokenManager, RedisTemplate</span></span><br><span class="line"><span class="params">                                          redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDetailsService = userDetailsService;</span><br><span class="line">        <span class="built_in">this</span>.defaultPasswordEncoder = defaultPasswordEncoder; <span class="built_in">this</span>.tokenManager = tokenManager;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置设置 */</span></span><br><span class="line"><span class="comment">//设置退出的地址和 token，redis 操作地址</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;http.exceptionHandling()</span><br><span class="line">            .authenticationEntryPoint(<span class="keyword">new</span> <span class="title class_">UnauthEntryPoint</span>())<span class="comment">//没有权限</span></span><br><span class="line">            .and().csrf().disable()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and().logout().logoutUrl(<span class="string">&quot;/admin/acl/index/logout&quot;</span>)<span class="comment">//退出路径</span></span><br><span class="line">            .addLogoutHandler(<span class="keyword">new</span> <span class="title class_">TokenLogoutHandler</span>(tokenManager,redisTemplate)).and()</span><br><span class="line">            .addFilter(<span class="keyword">new</span> <span class="title class_">TokenLoginFilter</span>(authenticationManager(), tokenManager, redisTemplate))</span><br><span class="line">            .addFilter(<span class="keyword">new</span> <span class="title class_">TokenAuthenticationFilter</span>(authenticationManager(),tokenManager, redisTemplate)).httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> auth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(defaultPasswordEncoder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置哪些请求不拦截</span></span><br><span class="line"><span class="comment">     &#125; &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123; web.ignoring().antMatchers(<span class="string">&quot;/api/**&quot;</span> , <span class="string">&quot;/swagger-ui.html/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="11、编写userDetailService"><a href="#11、编写userDetailService" class="headerlink" title="11、编写userDetailService"></a>11、编写userDetailService</h3><p>导入service_acl模块</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230128120636196.png" alt="image-20230128120636196"></p>
<p>编写userDetailService</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230128120709977.png" alt="image-20230128120709977"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.aclservice.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.aclservice.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.aclservice.service.PermissionService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.aclservice.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.security.entity.SecurityUser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;userDetailService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PermissionService permissionService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.selectByUsername(username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        com.atguigu.security.entity.<span class="type">User</span> <span class="variable">curUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.atguigu.security.entity.User();</span><br><span class="line">        BeanUtils.copyProperties(user,curUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据用户查询用户权限列表</span></span><br><span class="line">        List&lt;String&gt; permissionValueList = permissionService.selectPermissionValueByUserId(user.getId());</span><br><span class="line">        SecurityUser securityUser=<span class="keyword">new</span> <span class="title class_">SecurityUser</span>();</span><br><span class="line">        securityUser.setCurrentUserInfo(curUser);</span><br><span class="line">        securityUser.setPermissionValueList(permissionValueList);</span><br><span class="line">        <span class="keyword">return</span> securityUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="12、编写网关部分"><a href="#12、编写网关部分" class="headerlink" title="12、编写网关部分"></a>12、编写网关部分</h3><p>编写跨域配置类</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230128160736922.png" alt="image-20230128160736922"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.gateway.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.reactive.CorsWebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.pattern.PathPatternParser;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/01/02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>(<span class="keyword">new</span> <span class="title class_">PathPatternParser</span>());</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写启动类</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230128160801112.png" alt="image-20230128160801112"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.gateway;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiGatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ApiGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写网关配置类</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230128160903867.png" alt="image-20230128160903867"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8222</span></span><br><span class="line"><span class="comment"># 服务名</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">service-gateway</span></span><br><span class="line"><span class="comment"># nacos服务地址</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#使用服务发现路由</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.discovery.locator.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置路由id</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[0].id</span>=<span class="string">service-acl</span></span><br><span class="line"><span class="comment">#设置路由的uri   lb://nacos注册服务名称</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[0].uri</span>=<span class="string">lb://service-acl</span></span><br><span class="line"><span class="comment">#设置路由断言,代理servicerId为auth-service的/auth/路径</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[0].predicates</span>= <span class="string">Path=/*/acl/**</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="13、测试"><a href="#13、测试" class="headerlink" title="13、测试"></a>13、测试</h3><p>13.1、启动后端项目</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230128175316694.png" alt="image-20230128175316694"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230128231803932.png" alt="image-20230128231803932"></p>
<h1 id="5-SpringSecurity源码"><a href="#5-SpringSecurity源码" class="headerlink" title="5.SpringSecurity源码"></a>5.SpringSecurity源码</h1><h2 id="5-1-SpringSecurity-的过滤器介绍"><a href="#5-1-SpringSecurity-的过滤器介绍" class="headerlink" title="5.1 SpringSecurity 的过滤器介绍"></a>5.1 SpringSecurity 的过滤器介绍</h2><p>SpringSecurity 采用的是责任链的设计模式，它有一条很长的过滤器链。现在对这条过滤 器链的 15 个过滤器进行说明: </p>
<ul>
<li>（1） WebAsyncManagerIntegrationFilter：将 Security 上下文与 Spring Web 中用于 处理异步请求映射的 WebAsyncManager 进行集成。 </li>
<li>（2） SecurityContextPersistenceFilter：在每次请求处理之前将该请求相关的安全上 下文信息加载到 SecurityContextHolder 中，然后在该次请求处理完成之后，将 SecurityContextHolder 中关于这次请求的信息存储到一个“仓储”中，然后将 SecurityContextHolder 中的信息清除，例如在 Session 中维护一个用户的安全信 息就是这个过滤器处理的。 </li>
<li>（3） HeaderWriterFilter：用于将头信息加入响应中。 </li>
<li>（4） CsrfFilter：用于处理跨站请求伪造。 </li>
<li>（5）LogoutFilter：用于处理退出登录。 </li>
<li>（6）UsernamePasswordAuthenticationFilter：用于处理基于表单的登录请求，从表单中 获取用户名和密码。默认情况下处理来自 /login 的请求。从表单中获取用户名和密码 时，默认使用的表单 name 值为 username 和 password，这两个值可以通过设置这个 过滤器的 usernameParameter 和 passwordParameter 两个参数的值进行修改。 </li>
<li>（7）DefaultLoginPageGeneratingFilter：如果没有配置登录页面，那系统初始化时就会 配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。</li>
<li> （8）BasicAuthenticationFilter：检测和处理 http basic 认证。 </li>
<li>（9）RequestCacheAwareFilter：用来处理请求的缓存。 </li>
<li>（10）SecurityContextHolderAwareRequestFilter：主要是包装请求对象 request。 </li>
<li>（11）AnonymousAuthenticationFilter：检测 SecurityContextHolder 中是否存在 Authentication 对象，如果不存在为其提供一个匿名 Authentication。 </li>
<li>（12）SessionManagementFilter：管理 session 的过滤器 </li>
<li>（13）ExceptionTranslationFilter：处理 AccessDeniedException 和 AuthenticationException 异常。 </li>
<li>（14）FilterSecurityInterceptor：可以看做过滤器链的出口。 </li>
<li>（15）RememberMeAuthenticationFilter：当用户没有登录而直接访问资源时, 从 cookie  里找出用户的信息, 如果 Spring Security 能够识别出用户提供的 remember me cookie,  用户将不必填写用户名和密码, 而是直接登录进入系统，该过滤器默认不开启。</li>
</ul>
<h2 id="5-2-SpringSecurity-基本流程"><a href="#5-2-SpringSecurity-基本流程" class="headerlink" title="5.2 SpringSecurity 基本流程"></a>5.2 SpringSecurity 基本流程</h2><p>Spring Security 采取过滤链实现认证与授权，只有当前过滤器通过，才能进入下一个 过滤器</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129004433899.png" alt="image-20230129004433899"></p>
<p>绿色部分是认证过滤器，需要我们自己配置，可以配置多个认证过滤器。认证过滤器可以 使用 Spring Security 提供的认证过滤器，也可以自定义过滤器（例如：短信验证）。认 证过滤器要在 configure(HttpSecurity http)方法中配置，没有配置不生效。下面会重 点介绍以下三个过滤器：</p>
<p>UsernamePasswordAuthenticationFilter 过滤器：该过滤器会拦截前端提交的 POST 方式 的登录表单请求，并进行身份认证。</p>
<p>ExceptionTranslationFilter 过滤器：该过滤器不需要我们配置，对于前端提交的请求会 直接放行，捕获后续抛出的异常并进行处理（例如：权限访问限制）。 FilterSecurityInterceptor 过滤器：该过滤器是过滤器链的最后一个过滤器，根据资源 权限配置来判断当前请求是否有权限访问对应的资源。如果访问受限会抛出相关异常，并 由 ExceptionTranslationFilter 过滤器进行捕获和处理。</p>
<h2 id="5-3-SpringSecurity-认证流程"><a href="#5-3-SpringSecurity-认证流程" class="headerlink" title="5.3 SpringSecurity 认证流程"></a>5.3 SpringSecurity 认证流程</h2><p>认证流程是在 UsernamePasswordAuthenticationFilter 过滤器中处理的，具体流程如下 所示：</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129004536165.png" alt="image-20230129004536165"></p>
<h3 id="5-3-1-UsernamePasswordAuthenticationFilter-源码"><a href="#5-3-1-UsernamePasswordAuthenticationFilter-源码" class="headerlink" title="5.3.1 UsernamePasswordAuthenticationFilter 源码"></a>5.3.1 UsernamePasswordAuthenticationFilter 源码</h3><p>当前端提交的是一个 POST 方式的登录表单请求，就会被该过滤器拦截，并进行身份认 证。该过滤器的 doFilter() 方法实现在其抽象父类</p>
<p><code>AbstractAuthenticationProcessingFilter </code>中，查看相关源码：</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129004714222.png" alt="image-20230129004714222"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129004845970.png" alt="image-20230129004845970"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129004933128.png" alt="image-20230129004933128"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129005030188.png" alt="image-20230129005030188"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129005058686.png" alt="image-20230129005058686"></p>
<p>上述的 第二 过程调用了 UsernamePasswordAuthenticationFilter 的 attemptAuthentication() 方法，源码如下</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129005241485.png" alt="image-20230129005241485"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129005303010.png" alt="image-20230129005303010"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129005322808.png" alt="image-20230129005322808"></p>
<p>上述的（3）过程创建的 UsernamePasswordAuthenticationToken 是 Authentication 接口的实现类，该类有两个构造器，一个用于封装前端请求传入的未认 证的用户信息，一个用于封装认证成功后的用户信息</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129005504200.png" alt="image-20230129005504200"></p>
<p>Authentication 接口的实现类用于存储用户认证信息，查看该接口具体定义：</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129005548616.png" alt="image-20230129005548616"></p>
<h3 id="5-3-2-ProviderManager-源码"><a href="#5-3-2-ProviderManager-源码" class="headerlink" title="5.3.2 ProviderManager 源码"></a>5.3.2 ProviderManager 源码</h3><p>上述过程中，UsernamePasswordAuthenticationFilter 过滤器的 attemptAuthentication() 方法的（5）过程将未认证的 Authentication 对象传入 ProviderManager 类的 authenticate() 方法进行身份认证</p>
<p>ProviderManager 是 AuthenticationManager 接口的实现类，该接口是认证相关的核心接 口，也是认证的入口。在实际开发中，我们可能有多种不同的认证方式，例如：用户名+ 密码、邮箱+密码、手机号+验证码等，而这些认证方式的入口始终只有一个，那就是 AuthenticationManager。在该接口的常用实现类 ProviderManager 内部会维护一个 List列表，存放多种认证方式，实际上这是委托者模式 （Delegate）的应用。每种认证方式对应着一个 AuthenticationProvider， AuthenticationManager 根据认证方式的不同（根据传入的 Authentication 类型判断）委托 对应的 AuthenticationProvider 进行用户认证。</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129005659606.png" alt="image-20230129005659606"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129005711969.png" alt="image-20230129005711969"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129005731523.png" alt="image-20230129005731523"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129005751019.png" alt="image-20230129005751019"></p>
<p>上述认证成功之后的（6）过程，调用 CredentialsContainer 接口定义的 eraseCredentials() 方法去除敏感信息。查看 UsernamePasswordAuthenticationToken 实现的 eraseCredentials() 方法，该方 法实现在其父类中</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129005819121.png" alt="image-20230129005819121"></p>
<h3 id="5-3-3-认证成功-失败处理"><a href="#5-3-3-认证成功-失败处理" class="headerlink" title="5.3.3 认证成功/失败处理"></a>5.3.3 认证成功/失败处理</h3><p>上述过程就是认证流程的最核心部分，接下来重新回到 UsernamePasswordAuthenticationFilter 过滤器的 doFilter() 方法，查看认证成 功/失败的处理</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129005913611.png" alt="image-20230129005913611"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129005951550.png" alt="image-20230129005951550"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129010014754.png" alt="image-20230129010014754"></p>
<h2 id="5-4-SpringSecurity-权限访问流程"><a href="#5-4-SpringSecurity-权限访问流程" class="headerlink" title="5.4 SpringSecurity 权限访问流程"></a>5.4 SpringSecurity 权限访问流程</h2><p>上一个部分通过源码的方式介绍了认证流程，下面介绍权限访问流程，主要是对 ExceptionTranslationFilter 过滤器和 FilterSecurityInterceptor 过滤器进行介绍。</p>
<h3 id="5-4-1-ExceptionTranslationFilter-过滤器"><a href="#5-4-1-ExceptionTranslationFilter-过滤器" class="headerlink" title="5.4.1 ExceptionTranslationFilter 过滤器"></a>5.4.1 ExceptionTranslationFilter 过滤器</h3><p>该过滤器是用于处理异常的，不需要我们配置，对于前端提交的请求会直接放行，捕获后 续抛出的异常并进行处理（例如：权限访问限制）。具体源码如下：</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129010142040.png" alt="image-20230129010142040"></p>
<h3 id="5-4-2-FilterSecurityInterceptor-过滤器"><a href="#5-4-2-FilterSecurityInterceptor-过滤器" class="headerlink" title="5.4.2 FilterSecurityInterceptor 过滤器"></a>5.4.2 FilterSecurityInterceptor 过滤器</h3><p>FilterSecurityInterceptor 是过滤器链的最后一个过滤器，该过滤器是过滤器链 的最后一个过滤器，根据资源权限配置来判断当前请求是否有权限访问对应的资源。如果 访问受限会抛出相关异常，最终所抛出的异常会由前一个过滤器 ExceptionTranslationFilter 进行捕获和处理。具体源码如下</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129010224853.png" alt="image-20230129010224853"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129010237662.png" alt="image-20230129010237662"></p>
<p>需要注意，Spring Security 的过滤器链是配置在 SpringMVC 的核心组件 DispatcherServlet 运行之前。也就是说，请求通过 Spring Security 的所有过滤器， 不意味着能够正常访问资源，该请求还需要通过 SpringMVC 的拦截器链。</p>
<h2 id="5-5-SpringSecurity-请求间共享认证信息"><a href="#5-5-SpringSecurity-请求间共享认证信息" class="headerlink" title="5.5 SpringSecurity 请求间共享认证信息"></a>5.5 SpringSecurity 请求间共享认证信息</h2><p>一般认证成功后的用户信息是通过 Session 在多个请求之间共享，那么 Spring  Security 中是如何实现将已认证的用户信息对象 Authentication 与 Session 绑定的进行 具体分析</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129010351662.png" alt="image-20230129010351662"></p>
<p>在前面讲解认证成功的处理方法 successfulAuthentication() 时，有以下代码：</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129010414796.png" alt="image-20230129010414796"></p>
<p>查 看 SecurityContext 接 口 及 其 实 现 类 SecurityContextImpl ， 该 类 其 实 就 是 对 Authentication 的封装：</p>
<p>查 看 SecurityContextHolder 类 ， 该 类 其 实 是 对 ThreadLocal 的 封 装 ， 存 储 SecurityContext 对象</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129010510710.png" alt="image-20230129010510710"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129010525525.png" alt="image-20230129010525525"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129010538734.png" alt="image-20230129010538734"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129010551278.png" alt="image-20230129010551278"></p>
<h3 id="5-5-1-SecurityContextPersistenceFilter-过滤器"><a href="#5-5-1-SecurityContextPersistenceFilter-过滤器" class="headerlink" title="5.5.1 SecurityContextPersistenceFilter 过滤器"></a>5.5.1 SecurityContextPersistenceFilter 过滤器</h3><p>前面提到过，在 UsernamePasswordAuthenticationFilter 过滤器认证成功之 后，会在认证成功的处理方法中将已认证的用户信息对象 Authentication 封装进 SecurityContext，并存入 SecurityContextHolder。 之后，响应会通过 SecurityContextPersistenceFilter 过滤器，该过滤器的位置 在所有过滤器的最前面，请求到来先进它，响应返回最后一个通过它，所以在该过滤器中 处理已认证的用户信息对象 Authentication 与 Session 绑定</p>
<p>认证成功的响应通过 SecurityContextPersistenceFilter 过滤器时，会从 SecurityContextHolder 中取出封装了已认证用户信息对象 Authentication 的 SecurityContext，放进 Session 中。当请求再次到来时，请求首先经过该过滤器，该过滤 器会判断当前请求的 Session 是否存有 SecurityContext 对象，如果有则将该对象取出再次 放入 SecurityContextHolder 中，之后该请求所在的线程获得认证用户信息，后续的资源访 问不需要进行身份认证；当响应再次返回时，该过滤器同样从 SecurityContextHolder 取出 SecurityContext 对象，放入 Session 中。具体源码如下</p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129010632805.png" alt="image-20230129010632805"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129010644817.png" alt="image-20230129010644817"></p>
<p><img src="/img/%E5%B0%9A%E7%A1%85%E8%B0%B7-Spring-Security/image-20230129010654837.png" alt="image-20230129010654837"></p>
]]></content>
      <categories>
        <category>Java框架</category>
        <category>Spring-Security</category>
      </categories>
      <tags>
        <tag>Spring-Security</tag>
        <tag>尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus-代码生成器（新）</title>
    <url>/2022/11/05/MyBatis-Plus-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%88%E6%96%B0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * mysql 代码生成器演示例子</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * mysql 代码生成器演示例子</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MysqlGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RUN THIS</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; tables = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加需要生成的表</span></span><br><span class="line">        tables.add(<span class="string">&quot;dish&quot;</span>);</span><br><span class="line">        tables.add(<span class="string">&quot;setmeal&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;Xuwei19941214~&quot;</span>)</span><br><span class="line">                .globalConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.author(<span class="string">&quot;威少&quot;</span>)               <span class="comment">//作者</span></span><br><span class="line">                            .outputDir(<span class="string">&quot;/Users/xuwei/Desktop/项目/reggie_take_out/src/main/java&quot;</span>)    <span class="comment">//输出路径(写到java目录)</span></span><br><span class="line">                            .commentDate(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="comment">//                          .enableSwagger()           //开启swagger</span></span><br><span class="line"><span class="comment">//                          .fileOverride();           //开启覆盖之前生成的文件</span></span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line">                .packageConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.parent(<span class="string">&quot;com.itheima&quot;</span>)</span><br><span class="line">                            .moduleName(<span class="string">&quot;reggie&quot;</span>)</span><br><span class="line">                            .entity(<span class="string">&quot;entity&quot;</span>)</span><br><span class="line">                            .service(<span class="string">&quot;service&quot;</span>)</span><br><span class="line">                            .serviceImpl(<span class="string">&quot;service.impl&quot;</span>)</span><br><span class="line">                            .controller(<span class="string">&quot;controller&quot;</span>)</span><br><span class="line">                            .mapper(<span class="string">&quot;mapper&quot;</span>)</span><br><span class="line">                            .xml(<span class="string">&quot;mapper.xml&quot;</span>)</span><br><span class="line">                            .pathInfo(Collections.singletonMap(OutputFile.mapperXml,<span class="string">&quot;/Users/xuwei/Desktop/项目/reggie_take_out/src/main/resources/mapper&quot;</span>));</span><br><span class="line">                &#125;)</span><br><span class="line">                .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.addInclude(tables)</span><br><span class="line"><span class="comment">//                          .addTablePrefix(&quot;p_&quot;)</span></span><br><span class="line">                            .serviceBuilder()</span><br><span class="line">                            .formatServiceFileName(<span class="string">&quot;%sService&quot;</span>)</span><br><span class="line">                            .formatServiceImplFileName(<span class="string">&quot;%sServiceImpl&quot;</span>)</span><br><span class="line">                            .entityBuilder()</span><br><span class="line">                            .enableLombok()</span><br><span class="line">                            .logicDeleteColumnName(<span class="string">&quot;is_deleted&quot;</span>)</span><br><span class="line">                            .enableTableFieldAnnotation()</span><br><span class="line">                            .controllerBuilder()</span><br><span class="line">                            <span class="comment">// 映射路径使用连字符格式，而不是驼峰</span></span><br><span class="line">                            .enableHyphenStyle()</span><br><span class="line">                            .formatFileName(<span class="string">&quot;%sController&quot;</span>)</span><br><span class="line">                            .enableRestStyle()</span><br><span class="line">                            .mapperBuilder()</span><br><span class="line">                            <span class="comment">//生成通用的resultMap</span></span><br><span class="line">                            .enableBaseResultMap()</span><br><span class="line">                            .superClass(BaseMapper.class)</span><br><span class="line">                            .formatMapperFileName(<span class="string">&quot;%sMapper&quot;</span>)</span><br><span class="line">                            .enableMapperAnnotation()</span><br><span class="line">                            .formatXmlFileName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">                .execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="添加生成数据库表"><a href="#添加生成数据库表" class="headerlink" title="添加生成数据库表"></a>添加生成数据库表</h1><p><img src="/img/MyBatis-Plus-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%88%E6%96%B0%EF%BC%89/image-20221105211001754.png" alt="image-20221105211001754"></p>
<h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><p><img src="/img/MyBatis-Plus-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%88%E6%96%B0%EF%BC%89/image-20221105211544956.png" alt="image-20221105211544956"></p>
<h1 id="包配置"><a href="#包配置" class="headerlink" title="包配置"></a>包配置</h1><p><img src="/img/MyBatis-Plus-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%88%E6%96%B0%EF%BC%89/image-20221105211836590.png" alt="image-20221105211836590"></p>
<h1 id="策略配置"><a href="#策略配置" class="headerlink" title="策略配置"></a>策略配置</h1><p><img src="/img/MyBatis-Plus-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%88%E6%96%B0%EF%BC%89/421d182015b73dce9227ee817e164a02.png" alt="421d182015b73dce9227ee817e164a02"></p>
<p>官网参考</p>
<p><a href="https://baomidou.com/pages/981406/#%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE-datasourceconfig">https://baomidou.com/pages/981406/#%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE-datasourceconfig</a></p>
]]></content>
      <categories>
        <category>Java框架</category>
        <category>MyBatis-Plus</category>
      </categories>
      <tags>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>软件安装-MySQL</title>
    <url>/2022/08/29/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/</url>
    <content><![CDATA[<h1 id="基于CentOS8-2安装MySQL"><a href="#基于CentOS8-2安装MySQL" class="headerlink" title="基于CentOS8.2安装MySQL"></a>基于CentOS8.2安装MySQL</h1><h3 id="检测系统是否已安装Mysql"><a href="#检测系统是否已安装Mysql" class="headerlink" title="检测系统是否已安装Mysql"></a>检测系统是否已安装Mysql</h3><p>执行命令<code>rpm -qa | grep mysql</code> 如果是下图所示，表示已安装</p>
<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/8409f98d101e4c94a690c9aff128860e.png" alt="img"></p>
<h3 id="卸载命令"><a href="#卸载命令" class="headerlink" title="卸载命令"></a>卸载命令</h3><p>如果要重新安装需要选择执行以下命令进行<code>mysql卸载</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -e mysql　　// 普通删除</span><br><span class="line">rpm -e --nodeps mysql　　// 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删</span><br></pre></td></tr></table></figure>

<p>rpm安装下的需逐行删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps mysql-community-debugsource-8.0.30-1.el8.x86_64</span><br><span class="line">rpm -e --nodeps mysql-community-icu-data-files-8.0.30-1.el8.x86_64</span><br><span class="line">rpm -e --nodeps mysql-community-server-debuginfo-8.0.30-1.el8.x86_64</span><br><span class="line">rpm -e --nodeps mysql-community-libs-debuginfo-8.0.30-1.el8.x86_64</span><br><span class="line">rpm -e --nodeps mysql-community-server-8.0.30-1.el8.x86_64</span><br><span class="line">rpm -e --nodeps mysql-community-client-plugins-8.0.30-1.el8.x86_64</span><br><span class="line">rpm -e --nodeps mysql-community-client-debuginfo-8.0.30-1.el8.x86_64</span><br><span class="line">rpm -e --nodeps mysql-community-server-debug-debuginfo-8.0.30-1.el8.x86_64</span><br></pre></td></tr></table></figure>

<p>查找mysql相关目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure>

<p>对这些目录一个个的进行删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf</span><br></pre></td></tr></table></figure>

<p>删除/etc/my.cnf 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>删除 /var/log/mysql/mysqld.log文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /var/log/mysql/mysqld.log</span><br></pre></td></tr></table></figure>



<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a><strong>下载</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el8-3.noarch.rpm</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20220930134049957.png" alt="image-20220930134049957"></p>
<p><strong>第二步：安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install mysql80-community-release-el8-3.noarch.rpm</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20220930134154945.png" alt="image-20220930134154945"></p>
<h3 id="查看该yum源支持哪些版本"><a href="#查看该yum源支持哪些版本" class="headerlink" title="查看该yum源支持哪些版本"></a>查看该yum源支持哪些版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum repolist all | grep mysql</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20220930134311029.png" alt="image-20220930134311029"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装过程会询问你，一直y即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure>

<p>如遇报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: Unable to find a match: mysql-community-server</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum module disable mysql</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20220930134723042.png" alt="image-20220930134723042"></p>
<p>继续安装</p>
<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20220930134802715.png" alt="image-20220930134802715"></p>
<h3 id="启动、查看、开机自启"><a href="#启动、查看、开机自启" class="headerlink" title="启动、查看、开机自启"></a>启动、查看、开机自启</h3><p>启动MySQL：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>

<p>查看MySQL状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20220930135020609.png" alt="image-20220930135020609"></p>
<p>开机自启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机自启</span></span><br><span class="line">systemctl enable mysqld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载系统配置，使开机自启立马有效</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<h3 id="登录MySQL8"><a href="#登录MySQL8" class="headerlink" title="登录MySQL8"></a>登录MySQL8</h3><p>MySQL较大的变动就是，第一次安装会给root用户一个临时密码，我们需要拿到这个临时密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/4fa8124b46ee2db5abc79626e2d30b68.png" alt="img"></p>
<p>还有一种查看默认密码的方式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/6b414fe7163593c93060cc85dafd8abc.png" alt="img"></p>
<p>ok，拿到默认密码后，登录：</p>
<p>会提示你输入密码，将密码复制即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/b562d2b4c45d85671647c6e3bdf37159.png" alt="img"></p>
<h3 id="改密码"><a href="#改密码" class="headerlink" title="改密码"></a>改密码</h3><ol>
<li>改密码，</li>
</ol>
<p>需要知道的是： <strong>mysql新的安全机制要求，mysql的密码必须包含英文大小写、数字以及特殊字符</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;新密码&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/bbe63279ecf5f924c699e2869a5b1796.png" alt="img"></p>
<p>刷新：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><p>换库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure>

<p>查看数据库用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select user,host from user;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/013fefdc7c728915f4bb36c6e6c4853a.png" alt="img"></p>
<p>可以看到，root用户的host未localhost，这意味着root用户只能在本机连接数据库。</p>
<p>所以我们需要将他改为所有机器都能连：（或者指定为ip）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">update user set host=&#x27;%&#x27; where user=&#x27;root&#x27;;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/6b54f883e3d9756e6069c3b5358ccf67.png" alt="img"></p>
<p>因为：mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password, 解决问题方法有两种,一种是升级navicat驱动,一种是把mysql用户登录密码加密规则还原成mysql_native_password. 由于用的是破解版的navicat，所以只能用第二种方法解决了</p>
<p>修改密码，并且不对密码加密：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure>

<p>修改完成，退出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<h3 id="远程连接测试"><a href="#远程连接测试" class="headerlink" title="远程连接测试"></a>远程连接测试</h3><p>服务器防火墙记得开放3306</p>
<p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-MySQL/image-20220930135858626.png" alt="image-20220930135858626"></p>
]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>芋道源码-ruoyi-vue-pro</title>
    <url>/2023/01/30/%E8%8A%8B%E9%81%93%E6%BA%90%E7%A0%81-ruoyi-vue-pro/</url>
    <content><![CDATA[<h1 id="从零开始"><a href="#从零开始" class="headerlink" title="从零开始"></a>从零开始</h1><h2 id="视频课程导读：项目简介、功能列表、技术选型"><a href="#视频课程导读：项目简介、功能列表、技术选型" class="headerlink" title="视频课程导读：项目简介、功能列表、技术选型"></a>视频课程导读：项目简介、功能列表、技术选型</h2><p><img src="/Users/xuwei/Desktop/%E9%A1%B9%E7%9B%AE/weishao-996.github.io/source/_posts/%E8%8A%8B%E9%81%93%E6%BA%90%E7%A0%81-ruoyi-vue-pro/image-20230130005707471.png" alt="image-20230130005707471"></p>
<p><img src="/Users/xuwei/Desktop/%E9%A1%B9%E7%9B%AE/weishao-996.github.io/source/_posts/%E8%8A%8B%E9%81%93%E6%BA%90%E7%A0%81-ruoyi-vue-pro/image-20230130005810542.png" alt="image-20230130005810542"></p>
]]></content>
  </entry>
  <entry>
    <title>面试-Java基础</title>
    <url>/2022/09/06/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="基本概念与常识"><a href="#基本概念与常识" class="headerlink" title="基本概念与常识"></a><strong>基本概念与常识</strong></h1><h2 id="什么是字节码-采用字节码的好处是什么"><a href="#什么是字节码-采用字节码的好处是什么" class="headerlink" title="什么是字节码?采用字节码的好处是什么?"></a>什么是字节码?采用字节码的好处是什么?</h2><p>在 Java 中，JVM 可以理解的代码就叫做字节码（<strong>即扩展名为 .class 的文件</strong>），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以， Java 程序运行时相对来说还是高效的（不过，和 C++，Rust，Go 等语言还是有一定差距的），而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。  </p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220906111423536.png" alt="image-20220906111423536"></p>
<p>我们需要格外注意的是 <strong>.class-&gt;机器码</strong> 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT（just-in-time compilation） 编译器，而 <strong>JIT 属于运行时编译</strong>。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 <strong>Java 是编译与解释共存的语言</strong> 。</p>
<p>HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（<strong>热点代码</strong>），而这也就是 <strong>JIT 所需要编译的部分</strong>。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。<strong>JDK 9</strong> 引入了一种新的<strong>编译模式 AOT</strong>(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持<strong>分层编译和 AOT 协作</strong>使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。</p>
<h2 id="一次编写、到处运行"><a href="#一次编写、到处运行" class="headerlink" title="一次编写、到处运行"></a>一次编写、到处运行</h2><p>JVM（Java虚拟机）是Java跨平台的关键。</p>
<p>在程序运行前，Java源代码（.java）需要经过编译器编译成字节码（.class）。在程序运行时，JVM负责将字节码翻译成特定平台下的机器码并运行，也就是说，只要在不同的平台上安装对应的JVM，就可以运行字节码文件。</p>
<p>同一份Java源代码在不同的平台上运行，它不需要做任何的改变，并且只需要编译一次。而编译好的字节码，是通过JVM这个中间的“桥梁”实现跨平台的，JVM是与平台相关的软件，它能将统一的字节码翻译成该平台的机器码。</p>
<p><strong>注意事项</strong></p>
<ol>
<li>编译的结果是生成字节码、不是机器码，字节码不能直接运行，必须通过JVM翻译成机器码才能运行；</li>
<li>跨平台的是Java程序、而不是JVM，JVM是用C/C++开发的软件，不同平台下需要安装不同版本的JVM。</li>
</ol>
<h2 id="Oracle-JDK-vs-OpenJDK"><a href="#Oracle-JDK-vs-OpenJDK" class="headerlink" title="Oracle JDK vs OpenJDK"></a>Oracle JDK vs OpenJDK</h2><ol>
<li>OpenJDK 是一个参考模型并且是<strong>完全开源</strong>的，而 Oracle JDK 是 OpenJDK 的一个实现，并不是完全开源的；</li>
<li>Oracle JDK 比 OpenJDK 更稳定。OpenJDK 和 Oracle JDK 的代码几乎相同，但 Oracle JDK 有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，我建议您选择 <strong>Oracle JDK</strong>，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用 OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到 Oracle JDK 就可以解决问题；</li>
<li>在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK 相比提供了更好的性能；</li>
<li>Oracle JDK 不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；</li>
<li>Oracle JDK 使用 <strong>BCL/OTN</strong> 协议获得许可，而 OpenJDK 根据 <strong>GPL v2</strong> 许可获得许可。</li>
</ol>
<p>🌈 拓展一下：</p>
<ul>
<li>BCL 协议（Oracle Binary Code License Agreement）： 可以使用 JDK（支持商用），但是不能进行修改。</li>
<li>OTN 协议（Oracle Technology Network License Agreement）： 11 及之后新发布的 JDK 用的都是这个协议，可以自己私下用，但是商用需要付费。</li>
<li>OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是 OpenJDK 的一个实现，并不是完全开源的；</li>
<li>Oracle JDK 比 OpenJDK 更稳定。OpenJDK 和 Oracle JDK 的代码几乎相同，但 Oracle JDK 有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，我建议您选择 <strong>Oracle JDK</strong>，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用 OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到 Oracle JDK 就可以解决问题；</li>
<li>在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK 相比提供了更好的性能；</li>
<li>Oracle JDK 不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；</li>
<li>Oracle JDK 使用 <strong>BCL/OTN</strong> 协议获得许可，而 OpenJDK 根据 <strong>GPL v2</strong> 许可获得许可。</li>
</ul>
<p>🌈 拓展一下：</p>
<ul>
<li><p>BCL 协议（Oracle Binary Code License Agreement）： 可以使用 JDK（支持商用），但是不能进行修改。</p>
</li>
<li><p>OTN 协议（Oracle Technology Network License Agreement）： 11 及之后新发布的 JDK 用的都是这个协议，可以自己私下用，但是商用需要付费。</p>
<ol>
<li>OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是 OpenJDK 的一个实现，并不是完全开源的；</li>
<li>Oracle JDK 比 OpenJDK 更稳定。OpenJDK 和 Oracle JDK 的代码几乎相同，但 Oracle JDK 有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，我建议您选择 <strong>Oracle JDK</strong>，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用 OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到 Oracle JDK 就可以解决问题；</li>
<li>在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK 相比提供了更好的性能；</li>
<li>Oracle JDK 不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；</li>
<li>Oracle JDK 使用 <strong>BCL/OTN</strong> 协议获得许可，而 OpenJDK 根据 <strong>GPL v2</strong> 许可获得许可。</li>
</ol>
<p>🌈 拓展一下：</p>
<ul>
<li><p>BCL 协议（Oracle Binary Code License Agreement）： 可以使用 JDK（支持商用），但是不能进行修改。</p>
</li>
<li><p>OTN 协议（Oracle Technology Network License Agreement）： 11 及之后新发布的 JDK 用的都是这个协议，可以自己私下用，但是商用需要付费。</p>
</li>
<li><p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220906111806538.png" alt="image-20220906111806538"></p>
</li>
</ul>
</li>
</ul>
<h2 id="Java-和-C-的区别"><a href="#Java-和-C-的区别" class="headerlink" title="Java 和 C++的区别?"></a>Java 和 C++的区别?</h2><p>都是面向对象的语言，都支持<strong>封装、继承和多态</strong></p>
<p>Java 不提供<strong>指针</strong>来直接访问内存，程序内存更加安全</p>
<p>Java 的类是<strong>单继承</strong>的，C++ 支持多<strong>重继承</strong>；虽然 Java 的类不可以多继承，但是接口可以多继承。</p>
<p>Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。</p>
<p>C ++同时支持方法重载和操作符重载，但是 Java 只支持方法重载（操作符重载增加了复杂性，这与 Java 最初的设计思想不符）。</p>
<h2 id="为什么说-Java-语言“编译与解释并存”？"><a href="#为什么说-Java-语言“编译与解释并存”？" class="headerlink" title="为什么说 Java 语言“编译与解释并存”？"></a>为什么说 Java 语言“编译与解释并存”？</h2><ul>
<li><strong>编译型</strong> ：编译型语言 (opens new window) 会通过编译器</li>
</ul>
<p>(opens new window)将源代码<strong>一次**</strong>性**翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。</p>
<ul>
<li><strong>解释型</strong> ：解释型语言</li>
</ul>
<p>(opens new window)会通过<strong>解释器</strong> (opens new window)<strong>一句一句</strong>的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。</p>
<ul>
<li><strong>编译型</strong> ：编译型语言 (opens new window) 会通过编译器</li>
</ul>
<p>(opens new window)将源代码<strong>一次**</strong>性**翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。</p>
<ul>
<li><strong>解释型</strong> ：解释型语言</li>
</ul>
<p>(opens new window)会通过<strong>解释器</strong> (opens new window)<strong>一句一句</strong>的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220906112004658.png" alt="image-20220906112004658"></p>
<p><strong>为什么说 Java 语言“编译与解释并存”？</strong></p>
<p>这是因为 Java 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过<strong>先编译，后解释</strong>两个步骤，由 Java 编写的程序需要先经过<strong>编译步骤，生成字节码（.class 文件）</strong>，这种字节码必须由 <strong>Java 解释器</strong>来解释执行。</p>
<p><strong>为什么说 Java 语言“编译与解释并存”？</strong></p>
<p>这是因为 Java 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过<strong>先编译，后解释</strong>两个步骤，由 Java 编写的程序需要先经过<strong>编译步骤，生成字节码（.class 文件）</strong>，这种字节码必须由 <strong>Java 解释器</strong>来解释执行。</p>
<h2 id="JVM-vs-JDK-vs-JRE"><a href="#JVM-vs-JDK-vs-JRE" class="headerlink" title="JVM vs JDK vs JRE"></a>JVM vs JDK vs JRE</h2><ul>
<li><strong>JVM</strong></li>
</ul>
<p><strong>Java 虚拟机（JVM）</strong>是运行 Java 字节码的虚拟机。</p>
<p>JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p>
<ul>
<li><strong>JRE</strong></li>
</ul>
<p><strong>Java 运行时环境</strong></p>
<p>它是运行已编译 Java 程序所需的所有内容的集合，包括 <strong>Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件</strong>。但是，它不能用于创建新程序。</p>
<ul>
<li><strong>JDK</strong></li>
</ul>
<p>JDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。<strong>它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）</strong>。它能够创建和编译程序。</p>
<h2 id="JAVA语言的特点"><a href="#JAVA语言的特点" class="headerlink" title="JAVA语言的特点"></a>JAVA语言的特点</h2><ul>
<li><p>1、简单易学、有丰富的类库 </p>
</li>
<li><p>2、面向对象（Java最重要的特性，让程序耦合度更低，内聚性更高） 封装，继承，多态</p>
</li>
<li><p>3、与平台无关性（JVM是Java跨平台使用的根本） </p>
</li>
<li><p>4、可靠安全</p>
</li>
<li><p>5、支持多线程</p>
</li>
<li><p>6、支持网络编程</p>
</li>
<li><p>7、编译与解释并存</p>
</li>
</ul>
<h2 id="线程、程序、进程"><a href="#线程、程序、进程" class="headerlink" title="线程、程序、进程"></a>线程、程序、进程</h2><p>要说线程，必须得先说说进程。</p>
<ul>
<li>进程：进程是代码在数据集合上的一次运行活动，是<strong>系统进行资源分配和调度的基本单位</strong>。</li>
<li>线程：线程是进程的一个执行路径，一个进程中至少有一个线程，进程中的多个线程共享进程的资源。</li>
</ul>
<p>操作系统在分配资源时是把资源分配给进程的， 但是 CPU 资源比较特殊，它是被分配到线程的，因为真正要占用CPU运行的是线程，所以也说线程是 CPU分配的基本单位。比如在Java中，当我们启动 main 函数其实就启动了一个JVM进程，而 main 函数在的线程就是这个进程中的一个线程，也称主线程。一个进程中有多个线程，多个线程共用进程的堆和方法区资源，但是每个线程有自己的程序计数器和栈。</p>
<p><strong>程序</strong>是含有<strong>指令和数据的文件</strong>，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h1><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p><strong>+=</strong> 操作符会进行<strong>隐式自动类型转换</strong>,此处<strong>a+=b</strong>隐式的<strong>将加操作的结果类型强制转换为持有结果的类</strong> 型,而a=a+b则不会自动进行类型转换.如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">b = a + b; <span class="comment">// 报编译错误:cannot convert from int to byte</span></span><br><span class="line">b += a;</span><br></pre></td></tr></table></figure>

<p>以下代码是否有错,有的话怎么改？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">short</span> s1= <span class="number">1</span>;</span><br><span class="line">s1 = s1 + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>有错误.short类型在进行运算时会自动提升为int类型,也就是说 s1+1 的运算结果是int类型,而s1是 short类型,此时编译器会报错</p>
<p>正确写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">short</span> s1= <span class="number">1</span>;</span><br><span class="line">s1 += <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>+=操作符会对右边的表达式结果强转匹配左边的数据类型,所以没错.</p>
<p>在Java语言中，当参与运算的两个数是<strong>byte、short或int类型</strong>时，他们首先会被转化成int类型，然后在进行计算。然后把计算的结果赋值给用来存储结果的变量。如果用来存储结果变量的类型是byte或者short，这意味着需要把int类型转化成byte或者short类型。a+=b和a = a+b的区别就在于<strong>a+=b会隐式的把运算结果转换为a的类型</strong>。而a = a+b不会把a+b运算结果的类型隐式转换为a的类型。</p>
<h2 id="使用过可变长参数吗？"><a href="#使用过可变长参数吗？" class="headerlink" title="使用过可变长参数吗？"></a>使用过可变长参数吗？</h2><p>从 Java5 开始，Java 支持定义可变长参数，所谓可变长参数就是允许在调用方法时传入不定长度的参数。就比如下面的这个 <code>printVariable</code> 方法就可以接受 0 个或者多个参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">   <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外，可变参数只能作为函数的<strong>最后一个参数</strong>，但其前面可以有也可以没有任何其他参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(String arg1, String... args)</span> &#123;</span><br><span class="line">   <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>遇到方法重载的情况怎么办呢？会优先匹配固定参数还是可变参数的方法呢？</strong></p>
<p>答案是会<strong>优先匹配固定参数</strong>的方法，因为固定参数的方法匹配度更高。</p>
<p>我们通过下面这个例子来证明一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信搜 JavaGuide 回复&quot;面试突击&quot;即可免费领取个人原创的 Java 面试手册</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Guide哥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/12/13 16:52</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableLengthArgument</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printVariable</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String s : args) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printVariable</span><span class="params">(String arg1, String arg2)</span> &#123;</span><br><span class="line">        System.out.println(arg1 + arg2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        printVariable(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">        printVariable(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ab</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br></pre></td></tr></table></figure>

<p>另外，Java 的可变参数<strong>编译后实际会被转换成一个数组</strong>，我们看编译后生成的 <code>class</code>文件就可以看出来了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableLengthArgument</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printVariable</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        String[] var1 = args;</span><br><span class="line">        <span class="type">int</span> <span class="variable">var2</span> <span class="operator">=</span> args.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="number">0</span>; var3 &lt; var2; ++var3) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> var1[var3];</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h2><blockquote>
<p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理。</p>
<p>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</p>
</blockquote>
<h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a><strong>重载</strong></h3><p>发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。</p>
<p>《Java 核心技术》这本书是这样介绍重载的：</p>
<p>如果多个方法(比如 <code>StringBuilder</code> 的构造方法)有相同的名字、不同的参数， 便产生了重载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;HelloWorld&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>编译器必须挑选出具体执行哪个方法，它通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法。 如果编译器找不到匹配的参数， 就会产生编译时错误， 因为根本不存在匹配， 或者没有一个比其他的更好(这个过程被称为重载解析(overloading resolution))。<strong>Java 允许重载任何方法， 而不只是构造器方法</strong>。</p>
<p>综上：<strong>重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。</strong></p>
<h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a><strong>重写</strong></h3><p>重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。</p>
<p><strong>方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</strong></p>
<p>如果父类方法访问修饰符为 <strong><code>private/final/static</code></strong> 则子类就<strong>不能重写该方法</strong>，但是被 <code>static</code> 修饰的方法能够被再次声明。</p>
<p><strong>构造方法无法被重写</strong></p>
<p>综上：<strong>重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变</strong>。</p>
<blockquote>
<p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理。</p>
<p>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</p>
</blockquote>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220906114511133.png" alt="image-20220906114511133"></p>
<p><strong>方法的重写要遵循“两同两小一大”</strong>（以下内容摘录自《疯狂 Java 讲义》：</p>
<ul>
<li>“两同”即方法名相同、形参列表相同；</li>
<li>“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</li>
<li>“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。</li>
</ul>
<p>⭐️ 关于 <strong>重写的返回值类型</strong> 这里需要额外多说明一下，上面的表述不太清晰准确：<strong>如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;超级英雄&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperMan</span> <span class="keyword">extends</span> <span class="title class_">Hero</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;超人&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Hero <span class="title function_">hero</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperSuperMan</span> <span class="keyword">extends</span> <span class="title class_">SuperMan</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;超级超级英雄&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SuperMan <span class="title function_">hero</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SuperMan</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="和-equals"><a href="#和-equals" class="headerlink" title="== 和 equals()"></a>== 和 equals()</h2><h3 id=""><a href="#" class="headerlink" title="=="></a>==</h3><p>对于基本类型和引用类型的作用效果是不同的：</p>
<ul>
<li>对于<strong>基本数据类型</strong>来说，<code>==</code> 比较的是<strong>值</strong>。</li>
<li>对于<strong>引用数据类型</strong>来说，<code>==</code> 比较的是对象的<strong>内存地址</strong>。</li>
</ul>
<p>因为 <strong>Java 只有值传递</strong>，所以，对于 == 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。两边的操作数必须是<strong>同一类型</strong>的（可以是 <strong>父子类之间</strong>）才能编译通过。</p>
<h3 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h3><p> 不能用于判断基本数据类型的变量，<strong>只能用来判断两个对象是否相等</strong>。<code>equals()</code>方法存在于<code>Object</code>类中，而<code>Object</code>类是所有类的直接或间接父类。</p>
<p><code>Object</code> 类 <code>equals()</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>equals()</code> 方法存在两种使用情况：</p>
<ul>
<li><strong>类没有覆盖 <code>equals()</code>方法</strong> ：通过<code>equals()</code>比较该类的两个对象时，<strong>等价于通过“==”比较</strong>这两个对象，使用的默认是 <code>Object</code>类<code>equals()</code>方法。</li>
<li><strong>类覆盖了 <code>equals()</code>方法</strong> ：一般我们都覆盖 <code>equals()</code>方法来<strong>比较两个对象中的属性是否相等</strong>；若它们的属性相等，则返回 true(即，认为这两个对象相等)。</li>
</ul>
<p>举个例子（这里只是为了举例。实际上，你按照下面这种写法的话，像 IDEA 这种比较智能的 IDE 都会提示你将 <code>==</code> 换成 <code>equals()</code> ）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>); <span class="comment">// a 为一个引用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>); <span class="comment">// b为另一个引用,对象的内容一样</span></span><br><span class="line"><span class="type">String</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>; <span class="comment">// 放在常量池中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>; <span class="comment">// 从常量池中查找</span></span><br><span class="line">System.out.println(aa == bb);<span class="comment">// true</span></span><br><span class="line">System.out.println(a == b);<span class="comment">// false</span></span><br><span class="line">System.out.println(a.equals(b));<span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="number">42</span> == <span class="number">42.0</span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>String</code> 中的 <code>equals</code> 方法是被重写过的，因为 <code>Object</code> 的 <code>equals</code> 方法是比较的对象的内存地址，而 <code>String</code> 的 <code>equals</code> 方法比较的是对象的值。</p>
<p>当创建 <code>String</code> 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 <code>String</code> 对象。</p>
<p><code>String</code>类<code>equals()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="type">char</span> v1[] = value;</span><br><span class="line">            <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hashCode-与-equals"><a href="#hashCode-与-equals" class="headerlink" title="hashCode() 与 equals()"></a>hashCode() 与 equals()</h2><h3 id="hashCode-有什么用？"><a href="#hashCode-有什么用？" class="headerlink" title="hashCode() 有什么用？"></a><strong>hashCode() 有什么用？</strong></h3><p><code>hashCode()</code> 的作用是<strong>获取哈希码</strong>（<code>int</code> 整数），也称为<strong>散列码</strong>。这个哈希码的作用是确定该对象在哈希表中的<strong>索引位置</strong>。</p>
<p><code>hashCode()</code>定义在 JDK 的 <code>Object</code> 类中，这就意味着 Java 中的任何类都包含有 <code>hashCode()</code> 函数。另外需要注意的是： <code>Object</code> 的 <code>hashCode()</code> 方法是<strong>本地方法</strong>，也就是用 C 语言或 C++ 实现的，<strong>该方法通常用来将对象的内存地址转换为整数</strong>之后返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>散列表存储的是键值对(key-value)，它的特点是：<strong>能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</strong></p>
<h3 id="为什么要有-hashCode？"><a href="#为什么要有-hashCode？" class="headerlink" title="为什么要有 hashCode？"></a><strong>为什么要有 hashCode？</strong></h3><p>当你把对象加入 <code>HashSet</code> 时，<code>HashSet</code> 会先计算对象的 <code>hashCode</code> 值来判断对象加入的位置，同时也会与其他已经加入的对象的 <code>hashCode</code> 值作比较，如果没有相符的 <code>hashCode</code>，<code>HashSet</code> 会假设对象没有重复出现。但是如果发现有相同 <code>hashCode</code> 值的对象，这时会调用 <strong>equals</strong>() 方法来检查 <code>hashCode</code> 相等的对象是否真的相同。如果两者相同，<code>HashSet</code> 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。。这样我们就大大减少了 <code>equals</code> 的次数，相应就大大提高了执行速度。</p>
<p>其实， <code>hashCode()</code> 和 <code>equals()</code>都是用于比较两个对象是否相等。 </p>
<h3 id="那为什么-JDK-还要同时提供这两个方法呢？"><a href="#那为什么-JDK-还要同时提供这两个方法呢？" class="headerlink" title="那为什么 JDK 还要同时提供这两个方法呢？"></a><strong>那为什么 JDK 还要同时提供这两个方法呢？</strong></h3><p>是因为在一些容器（比如 <code>HashMap</code>、<code>HashSet</code>）中，有了 <code>hashCode()</code> 之后，判断元素是否在对应容器中的效率会更高（参考添加元素进<code>HastSet</code>的过程）！</p>
<p>我们在前面也提到了添加元素进<code>HastSet</code>的过程，如果 <code>HashSet</code> 在对比的时候，同样的 <code>hashCode</code> 有多个对象，它会继续使用 <code>equals()</code> 来判断是否真的相同。也就是说 <strong><code>hashCode</code></strong> <strong>帮助我们大大缩小了查找成本</strong>。</p>
<h3 id="那为什么不只提供-hashCode-方法呢？"><a href="#那为什么不只提供-hashCode-方法呢？" class="headerlink" title="那为什么不只提供 hashCode() 方法呢？"></a><strong>那为什么不只提供 <code>hashCode()</code> 方法呢？</strong></h3><p>这是因为两个对象的**<code>hashCode</code> **值相等并不代表两个对象就相等。</p>
<h3 id="那为什么两个对象有相同的-hashCode-值，它们也不一定是相等的？"><a href="#那为什么两个对象有相同的-hashCode-值，它们也不一定是相等的？" class="headerlink" title="那为什么两个对象有相同的 hashCode 值，它们也不一定是相等的？"></a><strong>那为什么两个对象有相同的 <code>hashCode</code> 值，它们也不一定是相等的？</strong></h3><p>因为 <code>hashCode()</code> 所使用的哈希算法也许刚好会让多个对象传回相同的哈希值。越糟糕的哈希算法越容易碰撞，但这也与数据值域分布的特性有关（所谓哈希碰撞也就是指的是不同的对象得到相同的 <code>hashCode</code> )。</p>
<p>总结下来就是 ：</p>
<ul>
<li>如果两个对象的<code>hashCode</code> 值相等，那这两个对象不一定相等（哈希碰撞）。</li>
<li>如果两个对象的<code>hashCode</code> 值相等并且<code>equals()</code>方法返回 <code>true</code>，我们才认为这两个对象相等。</li>
<li>如果两个对象的<code>hashCode</code> 值不相等，我们就可以直接认为这两个对象不相等。</li>
</ul>
<h3 id="为什么重写-equals-时必须重写-hashCode-方法？"><a href="#为什么重写-equals-时必须重写-hashCode-方法？" class="headerlink" title="为什么重写 equals() 时必须重写 hashCode() 方法？"></a>为什么重写 equals() 时必须重写 hashCode() 方法？</h3><p>因为两个相等的对象的 <code>hashCode</code> 值必须是相等。也就是说如果 <code>equals</code> 方法判断两个对象是相等的，那这两个对象的 <code>hashCode</code> 值也要相等。</p>
<p>如果重写 <code>equals()</code> 时没有重写 <code>hashCode()</code> 方法的话就可能<strong>会导致</strong> <strong><code>equals</code></strong> <strong>方法判断是相等的两个对象，<code>hashCode</code></strong> 值却不相等。例子：<strong>可能会造成再HashSet中存在两个相等的元素，但是他们的哈希值不同</strong>。</p>
<p><strong>思考</strong> ：重写 <code>equals()</code> 时没有重写 <code>hashCode()</code> 方法的话，使用 <code>HashMap</code> 可能会出现什么问题。</p>
<p><strong>总结</strong> ：</p>
<ul>
<li><code>equals</code> 方法判断两个对象是相等的，那这两个对象的 <code>hashCode</code> 值也要相等。</li>
<li>两个对象有相同的 <code>hashCode</code> 值，他们也不一定是相等的（哈希碰撞）。</li>
</ul>
<p><strong>拓展</strong></p>
<p><strong>Hashcode冲突：</strong></p>
<p>产生hash冲突时,两个不相等的对象就会有相同的 hashcode 值.当hash冲突产生时,一般 有以下几种方式来处理:</p>
<ul>
<li><strong>拉链法</strong>:每个哈希表节点都有一个next指针,多个哈希表节点可以用next指针构成一个单向链 表，被分配到同一个索引上的多个节点可以用这个单向链表进行存储. </li>
<li><strong>开放定址法</strong>:一旦发生了冲突,就去寻找下一个空的散列地址,只要散列表足够大,空的散列地址总 能找到,并将记录存入</li>
<li><strong>再哈希</strong>:又叫双哈希法,有多个不同的Hash函数.当发生冲突时,使用第二个,第三个….等哈希函数 计算地址,直到无冲突.</li>
</ul>
<h2 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h2><p>Java中的变量分为成员变量和局部变量，它们的区别如下：</p>
<p><strong>成员变量：</strong></p>
<ol>
<li>成员变量是在类的范围里定义的变量；</li>
<li>成员变量<strong>有默认初始值</strong>；</li>
<li>未被static修饰的成员变量也叫实例变量，它存储于对象所在的堆内存中，生命周期与对象相同；</li>
<li>被static修饰的成员变量也叫类变量，它存储于方法区中，生命周期与当前类相同。</li>
</ol>
<p><strong>局部变量：</strong></p>
<ol>
<li>局部变量是在方法里定义的变量；</li>
<li>局部变量没有默认初始值；</li>
<li>局部变量存储于栈内存中，作用的范围结束，变量空间会自动的释放。</li>
</ol>
<p><strong>注意事项</strong>Java中没有真正的全局变量，面试官应该是出于其他语言的习惯说全局变量的，他的本意应该是指成员变量。</p>
<h2 id="静态方法为什么不能调用非静态成员"><a href="#静态方法为什么不能调用非静态成员" class="headerlink" title="静态方法为什么不能调用非静态成员?"></a>静态方法为什么不能调用非静态成员?</h2><p>这个需要结合 JVM 的相关知识，主要原因如下：</p>
<ol>
<li><strong>静态方法</strong>是属于类的，在<strong>类加载</strong>的时候就会分配内存，可以通过类名直接访问。而<strong>非静态成员</strong>属于实例对象，只有在对象实例化之后才存在，需要通过类的<strong>实例对象去访问</strong>。</li>
<li>在类的非静态成员不存在的时候静态成员就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。</li>
</ol>
<h3 id="静态方法和实例方法有何不同？"><a href="#静态方法和实例方法有何不同？" class="headerlink" title="静态方法和实例方法有何不同？"></a>静态方法和实例方法有何不同？</h3><p><strong>1、调用方式</strong></p>
<p>在外部调用静态方法时，可以使用 <code>类名.方法名</code> 的方式，也可以使用 <code>对象.方法名</code> 的方式，而实例方法只有后面这种方式。也就是说，<strong>调用静态方法可以无需创建对象</strong> 。</p>
<p>不过，需要注意的是一般不建议使用 <code>对象.方法名</code> 的方式来调用静态方法。这种方式非常容易造成混淆，静态方法不属于类的某个对象而是属于这个类。</p>
<p>因此，一般建议使用 <code>类名.方法名</code> 的方式来调用静态方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staicMethod</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">// 调用实例方法</span></span><br><span class="line">        person.method();</span><br><span class="line">        <span class="comment">// 调用静态方法</span></span><br><span class="line">        Person.staicMethod()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、访问类成员是否存在限制</strong></p>
<p><strong>静态方法</strong>在访问本类的成员时，<strong>只允许访问静态成员（即静态成员变量和静态方法）</strong>，不允许访问实例成员（即实例成员变量和实例方法），而实例方法不存在这个限制。</p>
<h2 id="什么是方法的返回值-方法有哪几种类型？"><a href="#什么是方法的返回值-方法有哪几种类型？" class="headerlink" title="什么是方法的返回值?方法有哪几种类型？"></a>什么是方法的返回值?方法有哪几种类型？</h2><h4 id="什么是方法的返回值-方法有哪几种类型？-1"><a href="#什么是方法的返回值-方法有哪几种类型？-1" class="headerlink" title="什么是方法的返回值?方法有哪几种类型？"></a>什么是方法的返回值?方法有哪几种类型？</h4><p><strong>方法的返回值</strong> 是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用是接收出结果，使得它可以用于其他的操作！</p>
<p>我们可以按照方法的返回值和参数类型将方法分为下面这几种：</p>
<ul>
<li><strong>1.无参数无返回值的方法</strong></li>
<li><strong>2.有参数无返回值的方法</strong></li>
<li><strong>3.有返回值无参数的方法</strong></li>
<li><strong>4.有返回值有参数的方法</strong></li>
</ul>
<h2 id="continue、break-和-return-的区别是什么？"><a href="#continue、break-和-return-的区别是什么？" class="headerlink" title="continue、break 和 return 的区别是什么？"></a>continue、break 和 return 的区别是什么？</h2><p>在循环结构中，当循环条件不满足或者循环次数达到要求时，循环会正常结束。但是，有时候可能需要在循环的过程中，当发生了某种条件之后 ，提前终止循环，这就需要用到下面几个关键词：</p>
<ol>
<li><strong>continue</strong> ：指跳出当前的这一次循环，继续下一次循环。</li>
<li><strong>break</strong> ：指跳出整个循环体，继续执行循环下面的语句。</li>
</ol>
<p><code>return</code> 用于跳出所在方法，结束该方法的运行。return 一般有两种用法：</p>
<ol>
<li><strong>return</strong>; ：直接使用 return 结束方法执行，用于没有返回值函数的方法</li>
<li><strong>return value</strong>; ：return 一个特定值，用于有返回值函数的方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;xixi&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;heihei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line">xixi</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">xixi</span><br><span class="line"><span class="number">3</span></span><br><span class="line">haha</span><br></pre></td></tr></table></figure>

<h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><p>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++)和自减运算符（–）。</p>
<p>++ 和 – 运算符可以放在变量之前，也可以放在变量之后，当运算符放在变量之前时(前缀)，先自增/减，再赋值；当运算符放在变量之后时(后缀)，先赋值，再自增/减。例如，当 <code>b = ++a</code> 时，先自增（自己增加 1），再赋值（赋值给 b）；当 <code>b = a++</code> 时，先赋值(赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++输出的是 a 值。用一句口诀就是：“<strong>符号在前就先加/减，符号在后就后加/减</strong>”。</p>
<h2 id="注释有哪几种？注释越多越好吗？"><a href="#注释有哪几种？注释越多越好吗？" class="headerlink" title="注释有哪几种？注释越多越好吗？"></a>注释有哪几种？注释越多越好吗？</h2><p>Java 中的注释有三种：</p>
<ol>
<li><strong>单行注释</strong></li>
<li><strong>多行注释</strong></li>
<li><strong>文档注释</strong>。</li>
</ol>
<p>在我们编写代码的时候，如果代码量比较少，我们自己或者团队其他成员还可以很轻易地看懂代码，但是当项目结构一旦复杂起来，我们就需要用到注释了。注释并不会执行(编译器在编译代码之前会把代码中的所有注释抹掉,字节码中不保留注释)，是我们程序员写给自己看的，注释是你的代码说明书，能够帮助看代码的人快速地理清代码之间的逻辑关系。因此，在写程序的时候随手加上注释是一个非常好的习惯。</p>
<h2 id="字符型常量和字符串常量的区别"><a href="#字符型常量和字符串常量的区别" class="headerlink" title="字符型常量和字符串常量的区别?"></a>字符型常量和字符串常量的区别?</h2><ul>
<li><strong>形式</strong> : 字符常量是单引号引起的一个字符，字符串常量是双引号引起的 0 个或若干个字符</li>
<li><strong>含义</strong> : 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)</li>
<li><strong>占内存大小</strong> ： 字符常量只占 2 个字节; 字符串常量占若干个字节 (<strong>注意： <code>char</code> 在 Java 中占两个字节)</strong></li>
</ul>
<h2 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a>instanceof 关键字</h2><p>instanceof 严格来说是Java中的一个<strong>双目运算符</strong>，用来<strong>测试一个对象是否为一个类的实例</strong>，用法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> obj <span class="keyword">instanceof</span> Class</span><br></pre></td></tr></table></figure>

<p>其中 obj 为一个对象，Class 表示一个类或者一个接口，<strong>当 obj 为 Class 的对象，或者是其直接 或间接子类，或者是其接口的实现类，结果result 都返回 true，否则返回false</strong>。 注意：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能 确定类型，则通过编译，具体看运行时定。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">System.out.println(i <span class="keyword">instanceof</span> Integer);<span class="comment">//编译不通过 i必须是引用类型，不能是基本类型</span></span><br><span class="line">System.out.println(i <span class="keyword">instanceof</span> Object);<span class="comment">//编译不通过</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">System.out.println(integer <span class="keyword">instanceof</span> Integer);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//false ,在 JavaSE规范 中对 instanceof 运算符的规定就是：如果 obj 为 null，那么将返</span></span><br><span class="line"><span class="comment">//回 false。</span></span><br><span class="line">System.out.println(<span class="literal">null</span> <span class="keyword">instanceof</span> Object);</span><br></pre></td></tr></table></figure>

<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a><strong>基本数据类型</strong></h1><h2 id="Java-中的几种基本数据类型了解么？"><a href="#Java-中的几种基本数据类型了解么？" class="headerlink" title="Java 中的几种基本数据类型了解么？"></a>Java 中的几种基本数据类型了解么？</h2><p><strong>Java 中有 8 种基本数据类型</strong>，分别为：</p>
<ol>
<li>6 种数字类型：<ul>
<li>4 种整数型：<strong>byte、short、int、long</strong></li>
<li>2 种浮点型：<strong>float、double</strong></li>
</ul>
</li>
<li>1 种字符类型：<strong>char</strong></li>
<li>1 种布尔型：<strong>boolean</strong>。</li>
</ol>
<p>这 8 种基本数据类型的默认值以及所占空间的大小如下：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220906180157973.png" alt="image-20220906180157973"></p>
<p>虽然定义了boolean这种数据类型，但是只对它提供了非常有限的支持。在Java虚拟机中没有 任何供boolean值专用的字节码指令，Java语言表达式所操作的boolean值，在编译之后都使用Java 虚拟机中的<strong>int</strong>数据类型来代替，而boolean数组将会被编码成Java虚拟机的byte数组，每个元素 boolean元素占8位。这样我们可以得出boolean类型占了单独使用是4个字节，在数组中又是1个字 节。使用int的原因是，对于当下32位的处理器（CPU）来说，一次处理数据是32位（这里不是指的 是32/64位系统，而是指CPU硬件层面），具有<strong>高效存取</strong>的特点。</p>
<p>另外，Java 的每种基本类型所占存储空间的大小不会像其他大多数语言那样随机器硬件架构的变化而变化。这种所占存储空间大小的不变性是 Java 程序比用其他大多数语言编写的程序更具可移植性的原因之一（《Java 编程思想》2.2 节有提到）。</p>
<p><strong>注意：</strong></p>
<ol>
<li>Java 里使用 <code>long</code> 类型的数据一定要在数值后面加上 <strong>L</strong>，否则将作为整型解析。</li>
<li><code>char a = &#39;h&#39;</code>char :单引号，<code>String a = &quot;hello&quot;</code> :双引号。</li>
</ol>
<p>这八种基本类型都有对应的包装类分别为：**<code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>、<code>Character</code>、<code>Boolean</code> 。**</p>
<p><strong>包装类型不赋值就是</strong> <strong><code>Null</code></strong> <strong>，而基本类型有默认值且不是</strong> **<code>Null</code>**。</p>
<p>另外，这个问题建议还可以先从 JVM 层面来分析。</p>
<p><strong>基本数据类型</strong>直接存放在 Java 虚拟机栈中的<strong>局部变量表</strong>中，而<strong>包装类型</strong>属于对象类型，我们知道对象实例都存在于<strong>堆</strong>中。相比于对象类型， 基本数据类型占用的空间非常小。</p>
<p>引用类型就是对一个对象的引用，根据引用对象类型的不同，可以将引用类型分为3类，即数组、类、接口类型。引用类型本质上就是通过指针，指向堆中对象所持有的内存空间，只是Java语言不再沿用指针这个说法而已。</p>
<h2 id="int和Integer有什么区别，二者在做-运算时会得到什么结果"><a href="#int和Integer有什么区别，二者在做-运算时会得到什么结果" class="headerlink" title="int和Integer有什么区别，二者在做==运算时会得到什么结果"></a>int和Integer有什么区别，二者在做==运算时会得到什么结果</h2><p>int是基本数据类型，Integer是int的包装类。二者在做==运算时，Integer会<strong>自动拆箱</strong>为int类型，然后再进行比较。届时，如果两个int值相等则返回true，否则就返回false。</p>
<h2 id="如何对Integer和Double类型判断相等？"><a href="#如何对Integer和Double类型判断相等？" class="headerlink" title="如何对Integer和Double类型判断相等？"></a>如何对Integer和Double类型判断相等？</h2><p>Integer、Double不能直接进行比较，这包括：</p>
<ul>
<li>不能用==进行直接比较，因为它们是不同的数据类型；</li>
<li>不能转为字符串进行比较，因为转为字符串后，浮点值带小数点，整数值不带，这样它们永远都不相等；</li>
<li>不能使用compareTo方法进行比较，虽然它们都有compareTo方法，但该方法只能对相同类型进行比较。</li>
</ul>
<p>整数、浮点类型的包装类，都继承于Number类型，而Number类型分别定义了将数字转换为byte、short、int、long、float、double的方法。所以，可以<strong>将Integer、Double先转为转换为相同的基本数据类（如double）</strong>，然后使用==进行比较。 </p>
<p><strong>示例代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Integer i = 100;</span><br><span class="line">Double d = 100.00;</span><br><span class="line">System.out.println(i.doubleValue() == d.doubleValue());</span><br></pre></td></tr></table></figure>

<h2 id="为啥要有包装类？"><a href="#为啥要有包装类？" class="headerlink" title="为啥要有包装类？"></a>为啥要有包装类？</h2><p><strong>参考答案</strong></p>
<p>Java语言是面向对象的语言，其设计理念是“<strong>一切皆对象</strong>”。但8种基本数据类型却出现了例外，它们不具备对象的特性。正是为了解决这个问题，Java为每个基本数据类型都定义了一个对应的引用类型，这就是包装类。</p>
<p><strong>扩展阅读</strong></p>
<p>Java之所以提供8种基本数据类型，主要是为了照顾程序员的传统习惯。这8种基本数据类型的确带来了一定的方便性，但在某些时候也会受到一些制约。比如，所有的引用类型的变量都继承于Object类，都可以当做Object类型的变量使用，但基本数据类型却不可以。如果某个方法需要Object类型的参数，但实际传入的值却是数字的话，就需要做特殊的处理了。有了包装类，这种问题就可以得以简化。</p>
<h2 id="自动装箱与拆箱"><a href="#自动装箱与拆箱" class="headerlink" title="自动装箱与拆箱"></a>自动装箱与拆箱</h2><p><strong>什么是自动拆装箱？</strong></p>
<ul>
<li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li>
<li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;  <span class="comment">//装箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> i;   <span class="comment">//拆箱</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">L1</span><br><span class="line"> LINENUMBER <span class="number">8</span> L1</span><br><span class="line"> ALOAD <span class="number">0</span></span><br><span class="line"> BIPUSH <span class="number">10</span></span><br><span class="line"> INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line"> PUTFIELD AutoBoxTest.i : Ljava/lang/Integer;</span><br><span class="line">L2</span><br><span class="line"> LINENUMBER <span class="number">9</span> L2</span><br><span class="line"> ALOAD <span class="number">0</span></span><br><span class="line"> ALOAD <span class="number">0</span></span><br><span class="line"> GETFIELD AutoBoxTest.i : Ljava/lang/Integer;</span><br><span class="line"> INVOKEVIRTUAL java/lang/Integer.intValue ()I</span><br><span class="line"> PUTFIELD AutoBoxTest.n : I</span><br><span class="line"> RETURN</span><br></pre></td></tr></table></figure>

<p>从字节码中，我们发现装箱其实就是调用了 包装类的<code>valueOf()</code>方法，拆箱其实就是调用了 **<code>xxxValue()</code>**方法。</p>
<p>因此，</p>
<ul>
<li><code>Integer i = 10</code> 等价于 <code>Integer i = Integer.valueOf(10)</code></li>
<li><code>int n = i</code> 等价于 <code>int n = i.intValue()</code>;</li>
</ul>
<p>注意：<strong>如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 应该使用 long 而不是 Long</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= Integer.MAX_VALUE; i++)</span><br><span class="line">        sum += i;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Java SE5之前，如果要生成一个数值为10的Integer对象，必须这样进行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>而在从Java SE5开始就提供了自动装箱的特性，如果要生成一个数值为10的Integer对象，只需要 这样就可以了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>试题1： 以下代码会输出什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line"> <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"> <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"> <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"> <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"> </span><br><span class="line"> System.out.println(i1==i2);</span><br><span class="line"> System.out.println(i3==i4);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>为什么会出现这样的结果？输出结果表明i1和i2指向的是同一个对象，而i3和i4指向的是不同的对 象。此时只需一看源码便知究竟，下面这段代码是Integer的valueOf方法的具体实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(i &gt;= -<span class="number">128</span> &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line"> <span class="keyword">return</span> IntegerCache.cache[i + <span class="number">128</span>];</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>其中<strong>IntegerCache类</strong>的实现为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntegerCache</span> &#123;</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> high;</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line"> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> -<span class="number">128</span>;</span><br><span class="line"> <span class="comment">// high value may be configured by property</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"> <span class="keyword">if</span> (integerCacheHighPropValue != <span class="literal">null</span>) &#123;</span><br><span class="line"> <span class="comment">// Use Long.decode here to avoid invoking methods that</span></span><br><span class="line"> <span class="comment">// require Integer&#x27;s autoboxing cache to be initialized</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Long.decode(integerCacheHighPropValue).intValue();</span><br><span class="line"> i = Math.max(i, <span class="number">127</span>);</span><br><span class="line"> <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line"> h = Math.min(i, Integer.MAX_VALUE - -low);</span><br><span class="line"> &#125;</span><br><span class="line"> high = h;</span><br><span class="line"> cache = <span class="keyword">new</span> <span class="title class_">Integer</span>[(high - low) + <span class="number">1</span>];</span><br><span class="line"> <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> low;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line"> cache[k] = <span class="keyword">new</span> <span class="title class_">Integer</span>(j++);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">private</span> <span class="title function_">IntegerCache</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>从这2段代码可以看出，在通过<strong>valueOf方法</strong>创建Integer对象的时候，如果数值在**[-128,127]<strong>之间， 便返回指向</strong>IntegerCache.cache**中已经存在的对象的引用；否则创建一个新的Integer对象。 上面的代码中i1和i2的数值为100，因此会直接从cache中取已经存在的对象，所以i1和i2指向的是 同一个对象，而i3和i4则是分别指向不同的对象。</p>
<p><strong>面试题2：以下代码输出什么</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line"> <span class="type">Double</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">100.0</span>;</span><br><span class="line"> <span class="type">Double</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">100.0</span>;</span><br><span class="line"> <span class="type">Double</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">200.0</span>;</span><br><span class="line"> <span class="type">Double</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">200.0</span>;</span><br><span class="line"> </span><br><span class="line"> System.out.println(i1==i2);</span><br><span class="line"> System.out.println(i3==i4);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>原因： 在某个范围内的整型数值的个数是有限的，而浮点数却不是。</p>
<h2 id="包装类型的常量池技术了解么？"><a href="#包装类型的常量池技术了解么？" class="headerlink" title="包装类型的常量池技术了解么？"></a>包装类型的常量池技术了解么？</h2><p>Java 基本类型的包装类的大部分都实现了<strong>常量池技术</strong>。</p>
<p><strong>Byte,Short,Integer,Long</strong> 这 4 种包装类默认创建了数值 <strong>[-128，127]</strong> 的相应类型的<strong>缓存数据</strong>，<strong>Character</strong> 创建了数值在 <strong>[0,127]</strong> 范围的缓存数据，<strong>Boolean</strong> 直接返回 <strong>True or False</strong>。</p>
<p><strong>Integer 缓存源码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntegerCache</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>Character</code> 缓存源码:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Character <span class="title function_">valueOf</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">      <span class="keyword">return</span> CharacterCache.cache[(<span class="type">int</span>)c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Character</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CharacterCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">CharacterCache</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Character cache[] = <span class="keyword">new</span> <span class="title class_">Character</span>[<span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> <span class="title class_">Character</span>((<span class="type">char</span>)i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>Boolean</code> 缓存源码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">valueOf</span><span class="params">(<span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。</p>
<p>两种浮点数类型的包装类 <strong>Float,Double</strong>并没有实现常量池技术。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">33</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">33</span>;</span><br><span class="line">System.out.println(i1 == i2);<span class="comment">// 输出 true</span></span><br><span class="line"><span class="type">Float</span> <span class="variable">i11</span> <span class="operator">=</span> <span class="number">333f</span>;</span><br><span class="line"><span class="type">Float</span> <span class="variable">i22</span> <span class="operator">=</span> <span class="number">333f</span>;</span><br><span class="line">System.out.println(i11 == i22);<span class="comment">// 输出 false</span></span><br><span class="line"><span class="type">Double</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">1.2</span>;</span><br><span class="line"><span class="type">Double</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">1.2</span>;</span><br><span class="line">System.out.println(i3 == i4);<span class="comment">// 输出 false</span></span><br></pre></td></tr></table></figure>

<p>下面我们来看一下问题。下面的代码的输出结果是 <code>true</code> 还是 <code>flase</code> 呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">40</span>);</span><br><span class="line">System.out.println(i1==i2);</span><br></pre></td></tr></table></figure>

<p><code>Integer i1=40</code> 这一行代码会发生装箱，也就是说这行代码等价于 <code>Integer i1=Integer.valueOf(40)</code> 。因此，<code>i1</code> 直接使用的是常量池中的对象。而**<code>Integer i2 = new Integer(40)</code>** <strong>会直接创建新的对象</strong>。 因此，答案是 <code>false</code> 。</p>
<p>记住：<strong>所有整型包装类对象之间值的比较，全部使用 equals 方法比较</strong>。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220906174815320.png" alt="image-20220906174815320"></p>
<p>缓存池</p>
<p><strong>new Integer(123) 与 Integer.valueOf(123)</strong> 的区别在于:</p>
<ul>
<li>new Integer(123) 每次都会新建一个对象</li>
<li>Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">123</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">123</span>);</span><br><span class="line">System.out.println(x == y);    <span class="comment">// false</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">z</span> <span class="operator">=</span> Integer.valueOf(<span class="number">123</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> Integer.valueOf(<span class="number">123</span>);</span><br><span class="line">System.out.println(z == k);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>valueOf() 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译器会<strong>在缓冲池范围内的基本类型</strong>自动装箱过程调用 valueOf() 方法，因此多个 Integer 实例使用自动装箱来创建并且值相同，那么就会引用相同的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">System.out.println(m == n); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>基本类型对应的缓冲池如下:</p>
<ul>
<li>boolean values true and false</li>
<li>all byte values</li>
<li>short values between -128 and 127</li>
<li>int values between -128 and 127</li>
<li>char in the range \u0000 to \u007F</li>
</ul>
<p>在使用这些基本类型对应的包装类型时，就可以直接使用缓冲池中的对象。</p>
<p>如果在缓冲池之外：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">323</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">323</span>;</span><br><span class="line">System.out.println(m == n); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h1 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a><strong>面向对象基础</strong></h1><h2 id="面向对象和面向过程"><a href="#面向对象和面向过程" class="headerlink" title="面向对象和面向过程"></a>面向对象和面向过程</h2><p><strong>面向过程</strong>：是<strong>分析解决问题的步骤</strong>，然后用函数把这些步骤一步一步地实现，然后在使用的时候一 一调用则可。性能较高，所以单片机、嵌入式开发等一般采用面向过程开发</p>
<p><strong>面向对象</strong>：<strong>是把构成问题的事务分解成各个对象</strong>，而建立对象的目的也不是为了完成一个个步骤， 而是为了描述某个事物在解决整个问题的过程中所发生的行为。面向对象有封装、继承、多态的特 性，所以易维护、易复用、易扩展。可以设计出低耦合的系统。 但是性能上来说，比面向过程要低。</p>
<h2 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a><strong>封装</strong></h3><p><strong>封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性</strong>。就好像我们看不到挂在墙上的空调的内部的零件信息（也就是属性），但是可以通过遥控器（方法）来控制空调。如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。就好像如果没有空调遥控器，那么我们就无法操控空凋制冷，空调本身就没有意义了（当然现在还有很多其他方法 ，这里只是为了举例子）。</p>
<p> <strong>封装的目的</strong></p>
<p>封装是面向对象编程语言对客观世界的模拟，在客观世界里，对象的状态信息都被隐藏在对象内部，外界无法直接操作和修改。对一个类或对象实现良好的封装，可以实现以下目的：</p>
<ul>
<li><p><strong>隐藏类的实现细节；</strong></p>
</li>
<li><p><strong>让使用者只能通过事先预定的方法来访问数据，从而可以在该方法里加入控制逻辑，限制对成员变量的不合理访问；</strong></p>
</li>
<li><p><strong>可进行数据检查，从而有利于保证对象信息的完整性；</strong></p>
</li>
<li><p><strong>便于修改，提高代码的可维护性。</strong></p>
<p>为了实现良好的封装，需要从两个方面考虑：</p>
</li>
<li><p><strong>将对象的成员变量和实现细节隐藏起来，不允许外部直接访问；</strong></p>
</li>
<li><p><strong>把方法暴露出来，让方法来控制对这些成员变量进行安全的访问和操作。</strong></p>
</li>
</ul>
<p>封装实际上有两个方面的含义：把该隐藏的隐藏起来，把该暴露的暴露出来。这两个方面都需要通过使用Java提供的访问控制符来实现。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a><strong>继承</strong></h3><p>不同类型的对象，相互之间经常有一定数量的共同点。例如，小明同学、小红同学、小李同学，都共享学生的特性（班级、学号等）。同时，每一个对象还定义了额外的特性使得他们与众不同。例如小明的数学比较好，小红的性格惹人喜爱；小李的力气比较大。<strong>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类</strong>。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。</p>
<p><strong>关于继承如下 3 点请记住：</strong></p>
<ol>
<li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。</li>
<li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li>
<li>子类可以用自己的方式实现父类的方法。</li>
</ol>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a><strong>多态</strong></h3><p>多态，顾名思义，表示一个对象具有多种的状态，具体表现为<strong>父类的引用指向子类的实例。</strong></p>
<p><strong>多态的特点:</strong></p>
<ul>
<li>对象类型和引用类型之间具有继承（类）/实现（接口）的关系；</li>
<li>引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；</li>
<li>多态不能调用“只在子类存在但在父类不存在”的方法；</li>
<li>如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。</li>
</ul>
<p>Java中的多态是怎么实现的</p>
<p>多态的实现离不开继承，在设计程序时，我们可以将参数的类型定义为父类型。在调用程序时，则可以根据实际情况，传入该父类型的某个子类型的实例，这样就实现了多态。对于父类型，可以有三种形式，即<strong>普通的类、抽象类、接口</strong>。对于子类型，则要根据它自身的特征，重写父类的某些方法，或实现抽象类/接口的某些抽象方法。</p>
<p>抽象也是面向对象的重要部分，抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是考虑部分问题。例如，需要考察Person对象时，不可能在程序中把Person的所有细节都定义出来，通常只能定义Person的部分数据、部分行为特征，而这些数据、行为特征是软件系统所关心的部分。</p>
<h2 id="final用法"><a href="#final用法" class="headerlink" title="final用法"></a>final用法</h2><p>final也是很多面试喜欢问的地方,但我觉得这个问题很无聊,通常能回答下以下5点就不错了: </p>
<ul>
<li><p><strong>被final修饰的类不可以被继承</strong> </p>
</li>
<li><p><strong>被final修饰的方法不可以被重写</strong> </p>
</li>
<li><p><strong>被final修饰的变量不可以被改变.如果修饰引用,那么表示引用不可变,引用指向的内容可变.</strong> </p>
</li>
<li><p><strong>被final修饰的方法,JVM会尝试将其内联,以提高运行效率</strong> </p>
</li>
<li><p><strong>被final修饰的常量,在编译阶段会存入常量池中.</strong> </p>
</li>
</ul>
<p>对final域的读和写更像是普通的变量访问，编译器和处理器要遵守两个重排序规则：</p>
<ul>
<li>在构造函数内对一个final域的写入，与随后把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。</li>
<li>初次读一个包含final域的对象的引用，与随后初次读这个final域，这两个操作之间不能重排序。</li>
</ul>
<p>下面，我们通过一些示例性的代码来分别说明这两个规则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalExample</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;                            <span class="comment">//普通变量</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> j;                      <span class="comment">//final变量</span></span><br><span class="line">    <span class="keyword">static</span> FinalExample obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">FinalExample</span> <span class="params">()</span> &#123;     <span class="comment">//构造函数</span></span><br><span class="line">        i = <span class="number">1</span>;                        <span class="comment">//写普通域</span></span><br><span class="line">        j = <span class="number">2</span>;                        <span class="comment">//写final域</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writer</span> <span class="params">()</span> &#123;    <span class="comment">//写线程A执行</span></span><br><span class="line">        obj = <span class="keyword">new</span> <span class="title class_">FinalExample</span> ();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reader</span> <span class="params">()</span> &#123;       <span class="comment">//读线程B执行</span></span><br><span class="line">        <span class="type">FinalExample</span> <span class="variable">object</span> <span class="operator">=</span> obj;       <span class="comment">//读对象引用</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> object.i;                <span class="comment">//读普通域</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> object.j;                <span class="comment">//读final域</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里假设一个线程A执行writer ()方法，随后另一个线程B执行reader ()方法，注意两者的调用先后关系！</p>
<p>下面我们通过这两个线程的交互来说明这两个规则。</p>
<h3 id="写final域的重排序规则"><a href="#写final域的重排序规则" class="headerlink" title="写final域的重排序规则"></a><strong>写final域的重排序规则</strong></h3><p>写final域的重排序规则禁止把final域的写重排序到构造函数之外。这个规则的实现包含下面2个方面：</p>
<ul>
<li>JMM禁止编译器把final域的写重排序到构造函数之外。</li>
<li>编译器会在final域的写之后，构造函数return之前，插入一个StoreStore屏障。这个屏障禁止处理器把final域的写重排序到构造函数之外。</li>
</ul>
<p>现在让我们分析writer ()方法。writer ()方法只包含一行代码：finalExample = new FinalExample ()。这行代码包含两个步骤：</p>
<ul>
<li>构造一个FinalExample类型的对象；</li>
<li>把这个对象的引用赋值给引用变量obj。</li>
</ul>
<p>假设线程B读对象引用与读对象的成员域之间没有重排序（马上会说明为什么需要这个假设），下图是一种可能的执行时序：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/v2-3869fced5d21179df3f02f1fc2a58665_1440w.jpg" alt="img"></p>
<p>在上图中，写普通域的操作被编译器重排序到了构造函数之外，读线程B错误的读取了普通变量i初始化之前的值。而写final域的操作，被写final域的重排序规则“限定”在了构造函数之内，读线程B正确的读取了final变量初始化之后的值。</p>
<p>写final域的重排序规则可以确保：在对象引用为任意线程可见之前，对象的final域已经被正确初始化过了，而普通域不具有这个保障。以上图为例，在读线程B“看到”对象引用obj时，很可能obj对象还没有构造完成（对普通域i的写操作被重排序到构造函数外，此时初始值2还没有写入普通域i）。</p>
<p>总结一下：也就是对象初始化final变量和普通变量，然后将初始化的对象引用赋值给其它变量前，final变量可以保证已经被初始化，但是普通变量不能保证，可能会导致读取的普通变量是一个空值，或者说是未初始化的值，导致异常。</p>
<h3 id="读final域的重排序规则"><a href="#读final域的重排序规则" class="headerlink" title="读final域的重排序规则"></a><strong>读final域的重排序规则</strong></h3><p>读final域的重排序规则如下：</p>
<ul>
<li>在一个线程中，初次读对象引用与初次读该对象包含的final域，JMM禁止处理器重排序这两个操作（注意，这个规则仅仅针对处理器）。编译器会在读final域操作的前面插入一个LoadLoad屏障。</li>
</ul>
<p>reader()方法包含三个操作：</p>
<ol>
<li>初次读引用变量obj;</li>
<li>初次读引用变量obj指向对象的普通域j。</li>
<li>初次读引用变量obj指向对象的final域i。</li>
</ol>
<p>现在我们假设写线程A没有发生任何重排序，同时程序在不遵守间接依赖的处理器上执行，下面是一种可能的执行时序：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/v2-4bba1060156b86b5786eb81d832b12bd_r.jpg" alt="preview"></p>
<p>在上图中，读对象的普通域的操作被处理器重排序到读对象引用之前。读普通域时，该域还没有被写线程A写入，这是一个错误的读取操作。而读final域的重排序规则会把读对象final域的操作“限定”在读对象引用之后，此时该final域已经被A线程初始化过了，这是一个正确的读取操作。</p>
<p>总结一下：<strong>在读一个对象的final变量之前，一定会先读包含这个final域的对象的引用，所以不用担心读到对象的final变量，会因为重排除导致读到的是一个未初始化的值，但是对象的普通变量就不能这样保证</strong>。</p>
<p>对读和写finlal域，整体总结一下：<strong>写final域的重排序规则会要求译编器在final域的写之后，构造函数return之前，插入一个StoreStore障屏。读final域的重排序规则要求编译器在读final域的操作前面插入一个LoadLoad屏障</strong>。</p>
<h3 id="如果final域是引用类型"><a href="#如果final域是引用类型" class="headerlink" title="如果final域是引用类型"></a><strong>如果final域是引用类型</strong></h3><p>上面我们看到的final域是基础数据类型，下面让我们看看如果final域是引用类型，将会有什么效果？请看下列示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalReferenceExample</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">int</span>[] intArray;                     <span class="comment">//final是引用类型</span></span><br><span class="line">  <span class="keyword">static</span> FinalReferenceExample obj;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">FinalReferenceExample</span> <span class="params">()</span> &#123;        <span class="comment">//构造函数</span></span><br><span class="line">      intArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];              <span class="comment">//1</span></span><br><span class="line">      intArray[<span class="number">0</span>] = <span class="number">1</span>;                   <span class="comment">//2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writerOne</span> <span class="params">()</span> &#123;          <span class="comment">//写线程A执行</span></span><br><span class="line">      obj = <span class="keyword">new</span> <span class="title class_">FinalReferenceExample</span> ();  <span class="comment">//3</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writerTwo</span> <span class="params">()</span> &#123;          <span class="comment">//写线程B执行</span></span><br><span class="line">      obj.intArray[<span class="number">0</span>] = <span class="number">2</span>;                 <span class="comment">//4</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reader</span> <span class="params">()</span> &#123;              <span class="comment">//读线程C执行</span></span><br><span class="line">      <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;                    <span class="comment">//5</span></span><br><span class="line">          <span class="type">int</span> <span class="variable">temp1</span> <span class="operator">=</span> obj.intArray[<span class="number">0</span>];       <span class="comment">//6</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/v2-d2d2465e3e68f8c74bcf9054c3d172c7_r.jpg" alt="preview"></p>
<p>在上图中，1是对final域的写入，2是对这个final域引用的对象的成员域的写入，3是把被构造的对象的引用赋值给某个引用变量。这里除了前面提到的1不能和3重排序外，2和3也不能重排序。</p>
<p>JMM可以确保读线程C至少能看到写线程A在构造函数中对final引用对象的成员域的写入。即C至少能看到数组下标0的值为1。而写线程B对数组元素的写入，读线程C可能看的到，也可能看不到。JMM不保证线程B的写入对读线程C可见，因为写线程B和读线程C之间存在数据竞争，此时的执行结果不可预知。</p>
<p>如果想要确保读线程C看到写线程B对数组元素的写入，写线程B和读线程C之间需要使用同步原语（lock或volatile）来确保内存可见性。</p>
<blockquote>
<p>总结一下：如果final域为引用类型，这个其实和非引用类型禁止重排序的规则基本一样。上面的示例，writerTwo()和reader()同时对一个数据进行操作，存在竞争关系，也很好理解，我换一个非引用类型，也一样存在并发，解决方案就是加锁。</p>
</blockquote>
<h3 id="为什么final引用不能从构造函数内“逸出”"><a href="#为什么final引用不能从构造函数内“逸出”" class="headerlink" title="为什么final引用不能从构造函数内“逸出”"></a><strong>为什么final引用不能从构造函数内“逸出”</strong></h3><p>前面我们提到过，写final域的重排序规则可以确保：在引用变量为任意线程可见之前，该引用变量指向的对象的final域已经在构造函数中被正确初始化过了。其实要得到这个效果，还需要一个保证：</p>
<blockquote>
<p>在构造函数内部，不能让这个被构造对象的引用为其他线程可见，也就是对象引用不能在构造函数中“逸出”。</p>
</blockquote>
<p>为了说明问题，让我们来看下面示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalReferenceEscapeExample</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">static</span> FinalReferenceEscapeExample obj;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">FinalReferenceEscapeExample</span> <span class="params">()</span> &#123;</span><br><span class="line">      i = <span class="number">1</span>;                              <span class="comment">//1写final域</span></span><br><span class="line">      obj = <span class="built_in">this</span>;                          <span class="comment">//2 this引用在此“逸出”</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writer</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">FinalReferenceEscapeExample</span> ();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> reader &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;                     <span class="comment">//3</span></span><br><span class="line">          <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> obj.i;                 <span class="comment">//4</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设一个线程A执行writer()方法，另一个线程B执行reader()方法。这里的操作2使得对象还未完成构造前就为线程B可见。即使这里的操作2是构造函数的最后一步，且即使在程序中操作2排在操作1后面，执行read()方法的线程仍然可能无法看到final域被初始化后的值，因为这里的操作1和操作2之间可能被重排序。实际的执行时序可能如下图所示：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/v2-8fa3251115aebd3953ff0888a94f8091_1440w.jpg" alt="img"></p>
<p>从上图我们可以看出：在构造函数返回前，被构造对象的引用不能为其他线程可见，因为此时的final域可能还没有被初始化。在构造函数返回后，任意线程都将保证能看到final域正确初始化之后的值。</p>
<h2 id="static用法"><a href="#static用法" class="headerlink" title="static用法"></a>static用法</h2><p>所有的人都知道static关键字这两个基本的用法:<strong>静态变量和静态方法</strong>.也就是被static所修饰的变量/ 方法都属于类的静态资源,<strong>类实例所共享</strong>.</p>
<p>除了静态变量和静态方法之外,static也用于<strong>静态块</strong>,多用于初始化操作:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> calss PreCache&#123;</span><br><span class="line"> <span class="keyword">static</span>&#123;</span><br><span class="line"> <span class="comment">//执行相关操作</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此外static也多用于修饰内部类,此时称之为<strong>静态内部类</strong>.</p>
<p>最后一种用法就是静态导包,即 <strong>import static</strong> .import static是在JDK 1.5之后引入的新特性,可以用 来指定导入某个类中的静态资源,并且不需要使用类名,可以直接使用资源名,比如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"> <span class="comment">//System.out.println(Math.sin(20));传统做法</span></span><br><span class="line"> System.out.println(sin(<span class="number">20</span>));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Java类里只能包含成员变量、方法、构造器、初始化块、内部类（包括接口、枚举）5种成员，而static可以修饰<strong>成员变量、方法、初始化块、内部类</strong>（包括接口、枚举），以static修饰的成员就是类成员。类成员属于整个类，而不属于单个对象。</p>
<p>对static关键字而言，有一条非常重要的规则：<strong>类成员（包括成员变量、方法、初始化块、内部类和内部枚举）不能访问实例成员（包括成员变量、方法、初始化块、内部类和内部枚举）</strong>。因为类成员是属于类的，类成员的作用域比实例成员的作用域更大，完全可能出现类成员已经初始化完成，但实例成员还不曾初始化的情况，如果允许类成员访问实例成员将会引起大量错误。 </p>
<p><strong>static修饰的类能不能被继承</strong></p>
<p><strong>static修饰的类可以被继承。</strong></p>
<p>如果使用static来修饰一个内部类，则这个内部类就属于外部类本身，而不属于外部类的某个对象。因此使用static修饰的内部类被称为<strong>类内部类</strong>，有的地方也称为<strong>静态内部类</strong>。</p>
<p>static关键字的作用是把类的成员变成类相关，而不是实例相关，即static修饰的成员属于整个类，而不属于单个对象。外部类的上一级程序单元是包，所以不可使用static修饰；而内部类的上一级程序单元是外部类，使用static修饰可以将内部类变成外部类相关，而不是外部类实例相关。因此static关键字不可修饰外部类，但可修饰内部类。</p>
<p>静态内部类需满足如下规则：</p>
<ol>
<li><p>静态内部类可以包含静态成员，也可以包含非静态成员；</p>
</li>
<li><p>静态内部类不能访问外部类的实例成员，只能访问它的静态成员；</p>
</li>
<li><p>外部类的所有方法、初始化块都能访问其内部定义的静态内部类；</p>
</li>
<li><p>在外部类的外部，也可以实例化静态内部类，语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">外部类.内部类 变量名 = <span class="keyword">new</span> 外部类.内部类构造方法();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Java访问权限"><a href="#Java访问权限" class="headerlink" title="Java访问权限"></a>Java访问权限</h2><p>Java语言为我们提供了三种访问修饰符，即private、protected、public，在使用这些修饰符修饰目标时，一共可以形成四种访问权限，即<strong>private、default、protected、public</strong>，注意在不加任何修饰符时为default访问权限。</p>
<p>在<strong>修饰成员变量/成员方法</strong>时，该成员的四种访问权限的含义如下：</p>
<ul>
<li>private：该成员可以被该类<strong>内部成员</strong>访问；</li>
<li>default：该成员可以被该类<strong>内部成员</strong>访问，也可以被<strong>同一包下其他的类</strong>访问；</li>
<li>protected：该成员可以被该类<strong>内部成员</strong>访问，也可以被<strong>同一包下其他的类</strong>访问，还可以被<strong>它的子类</strong>访问；</li>
<li>public：该成员可以被<strong>任意包下，任意类的成员</strong>进行访问。</li>
</ul>
<p>在<strong>修饰类</strong>时，该类只有两种访问权限，对应的访问权限的含义如下：</p>
<ul>
<li>default：该类可以被<strong>同一包下其他的类</strong>访问；</li>
<li>public：该类可以被<strong>任意包下，任意的类</strong>所访问。</li>
</ul>
<h2 id="一个Java文件里可以有多个类"><a href="#一个Java文件里可以有多个类" class="headerlink" title="一个Java文件里可以有多个类"></a>一个Java文件里可以有多个类</h2><ol>
<li>一个java文件里可以有多个类，但最多只能有一个被<strong>public</strong>修饰的类；</li>
<li>如果这个java文件中包含<strong>public</strong>修饰的类，则这个类的名称必须和java文件名一致。</li>
</ol>
<h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2><ul>
<li><strong>浅拷贝</strong>：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。</li>
<li><strong>深拷贝</strong> ：深拷贝会<strong>完全复制整个对象</strong>，包括这个对象所包含的内部对象。</li>
</ul>
<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a><strong>浅拷贝</strong></h3><p>浅拷贝的示例代码如下，我们这里实现了 <code>Cloneable</code> 接口，并重写了 <code>clone()</code> 方法。<code>clone()</code> 方法的实现很简单，直接调用的是父类 <code>Object</code> 的 <code>clone()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 省略构造函数、Getter&amp;Setter方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Address) <span class="built_in">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="comment">// 省略构造函数、Getter&amp;Setter方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) <span class="built_in">super</span>.clone();</span><br><span class="line">            <span class="keyword">return</span> person;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="keyword">new</span> <span class="title class_">Address</span>(<span class="string">&quot;武汉&quot;</span>));</span><br><span class="line"><span class="type">Person</span> <span class="variable">person1Copy</span> <span class="operator">=</span> person1.clone();</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">System.out.println(person1.getAddress() == person1Copy.getAddress());</span><br></pre></td></tr></table></figure>

<p>从输出结构就可以看出， <code>person1</code> 的克隆对象和 <code>person1</code> 使用的仍然是同一个 <code>Address</code> 对象。</p>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a><strong>深拷贝</strong></h3><p>这里我们简单对 <code>Person</code> 类的 <code>clone()</code> 方法进行修改，连带着要把 <code>Person</code> 对象内部的 <code>Address</code> 对象一起复制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) <span class="built_in">super</span>.clone();</span><br><span class="line">        person.setAddress(person.getAddress().clone());</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="keyword">new</span> <span class="title class_">Address</span>(<span class="string">&quot;武汉&quot;</span>));</span><br><span class="line"><span class="type">Person</span> <span class="variable">person1Copy</span> <span class="operator">=</span> person1.clone();</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">System.out.println(person1.getAddress() == person1Copy.getAddress());</span><br></pre></td></tr></table></figure>

<p>从输出结构就可以看出， <code>person1</code> 的克隆对象和 <code>person1</code> 包含的 <code>Address</code> 对象已经是不同的了。</p>
<p><strong>那什么是引用拷贝呢？</strong> 简单来说，<strong>引用拷贝就是两个不同的引用指向同一个对象。</strong></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220906211832053.png" alt="image-20220906211832053"></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220906211847040.png" alt="image-20220906211847040"></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220906211856438.png" alt="image-20220906211856438"></p>
<h2 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h2><p>从<strong>设计目的</strong>上来说，二者有如下的区别：</p>
<p>接口体现的是一种<strong>规范</strong>。对于接口的实现者而言，<strong>接口规定了实现者必须向外提供哪些服务</strong>；对于接口的调用者而言，<strong>接口规定了调用者可以调用哪些服务</strong>，以及如何调用这些服务。当在一个程序中使用接口时，<strong>接口是多个模块间的耦合标准</strong>；当在多个应用程序之间使用接口时，<strong>接口是多个程序之间的通信标准</strong>。</p>
<p>抽象类体现的是一种<strong>模板式设计</strong>。抽象类作为多个子类的抽象父类，可以被当成系统实现过程中的中间产品，这个中间产品已经实现了系统的部分功能，但这个产品依然不能当成最终产品，必须有更进一步的完善，这种完善可能有几种不同方式。</p>
<p>从使用方式上来说，二者有如下的<strong>区别</strong>：</p>
<ul>
<li>接口里只能包含抽象方法、静态方法、默认方法和私有方法，不能为普通方法提供方法实现；抽象类则完全可以包含普通方法。</li>
<li>接口里只能定义静态常量，不能定义普通成员变量；抽象类里则既可以定义普通成员变量，也可以定义静态常量。</li>
<li>接口里不包含构造器；抽象类里可以包含构造器，抽象类里的构造器并不是用于创建对象，而是让其子类调用这些构造器来完成属于抽象类的初始化操作。</li>
<li>接口里不能包含初始化块；但抽象类则完全可以包含初始化块。</li>
<li>一个类最多只能有一个直接父类，包括抽象类；但一个类可以直接实现多个接口，通过实现多个接口可以弥补Java单继承的不足。</li>
</ul>
<p>扩展阅读</p>
<p>接口和抽象类很像，它们都具有如下<strong>共同的特征</strong>：</p>
<ul>
<li>接口和抽象类都<strong>不能被实例化</strong>，它们都位于继承树的顶端，用于被其他类实现和继承。</li>
<li>接口和抽象类都可以包含抽象方法，实现接口或继承抽象类的普通子类都必须实现这些抽象方法。</li>
</ul>
<p><strong>面向接口编程</strong></p>
<p>接口体现的是一种规范和实现分离的设计哲学，充分利用接口可以极好地<strong>降低程序各模块之间的耦合</strong>，从而提高系统的可扩展性和可维护性。基于这种原则，很多软件架构设计理论都倡导“面向接口”编程，而不是面向实现类编程，希望通过面向接口编程来降低程序的耦合。</p>
<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><h3 id="构造方法有哪些特点？是否可被-override"><a href="#构造方法有哪些特点？是否可被-override" class="headerlink" title="构造方法有哪些特点？是否可被 override?"></a>构造方法有哪些特点？是否可被 override?</h3><p>构造方法特点如下：</p>
<ul>
<li>名字与类名相同。</li>
<li>没有返回值，但不能用 void 声明构造函数。</li>
<li>生成类的对象时自动执行，无需调用。</li>
</ul>
<p><strong>构造方法不能被 override（重写）,但是可以 overload（重载）</strong>,所以你可以看到<strong>一个类中有多个构造函数</strong>的情况。</p>
<p>构造方法不能重写。因为构造方法需要和类保持同名，而重写的要求是子类方法要和父类方法保持同名。如果允许重写构造方法的话，那么子类中将会存在与类名不同的构造方法，这与构造方法的要求是矛盾的。</p>
<p><strong>Constructor(构造器)**不能被继承，所以不能被</strong>override(重写)<strong>，但是可以被</strong>overloading(重载)**。构造器就是构造方法，能够被重载（同类中不同参数列表的构造器），不能够被重写（子类使用super方法可以调用）。</p>
<h3 id="如果一个类没有声明构造方法，该程序能正确执行吗"><a href="#如果一个类没有声明构造方法，该程序能正确执行吗" class="headerlink" title="如果一个类没有声明构造方法，该程序能正确执行吗?"></a>如果一个类没有声明构造方法，该程序能正确执行吗?</h3><p>如果一个类没有声明构造方法，也可以执行！因为一个类即使没有声明构造方法也会有<strong>默认的不带参数的构造方法</strong>。如果我们自己添加了类的构造方法（无论是否有参），Java 就不会再添加默认的无参数的构造方法了，这时候，就不能直接 new 一个对象而不传递参数了，所以我们一直在不知不觉地使用构造方法，这也是为什么我们<strong>在创建对象的时候后面要加一个括号（因为要调用无参的构造方法）</strong>。<strong>如果我们重载了有参的构造方法，记得都要把无参的构造方法也写出来</strong>（无论是否用到），因为这可以帮助我们在创建对象的时候少踩坑。</p>
<h2 id="Java创建对象"><a href="#Java创建对象" class="headerlink" title="Java创建对象"></a>Java创建对象</h2><h3 id="创建一个对象用什么运算符-对象实体与对象引用有何不同"><a href="#创建一个对象用什么运算符-对象实体与对象引用有何不同" class="headerlink" title="创建一个对象用什么运算符?对象实体与对象引用有何不同"></a>创建一个对象用什么运算符?对象实体与对象引用有何不同</h3><p>new 运算符，new 创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。</p>
<h3 id="Java创建对象方式"><a href="#Java创建对象方式" class="headerlink" title="Java创建对象方式"></a>Java创建对象方式</h3><p>java中提供了以下四种创建对象的方式:</p>
<ul>
<li><strong>new创建新对象</strong> </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>通过反射机制</strong> </li>
</ul>
<p>使用 newInstance()，但是得处理两个异常 InstantiationException、 IllegalAccessException：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user=User.class.newInstance();</span><br><span class="line">Object object=(Object)Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).newInstance()</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>采用clone机制</strong> </li>
<li><strong>通过序列化机制</strong> </li>
</ul>
<p>调用 ObjectInputStream 类的 readObject() 方法。 我们反序列化一个对象，JVM 会给我们创建一个单独的对象。JVM 创建对象并不会调用任何构造函 数。一个对象实现了 Serializable 接口，就可以把对象写入到文件中，并通过读取文件来创建对 象。</p>
<h1 id="JAVA常见对象"><a href="#JAVA常见对象" class="headerlink" title="JAVA常见对象"></a><strong>JAVA常见对象</strong></h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="String、StringBuffer、StringBuilder-的区别？String-为什么是不可变的"><a href="#String、StringBuffer、StringBuilder-的区别？String-为什么是不可变的" class="headerlink" title="String、StringBuffer、StringBuilder 的区别？String 为什么是不可变的?"></a><strong>String、StringBuffer、StringBuilder 的区别？String 为什么是不可变的?</strong></h3><h4 id="可变性"><a href="#可变性" class="headerlink" title="可变性"></a><strong>可变性</strong></h4><p>简单的来说：<code>String</code> 类中使用 <strong>final</strong> <strong>关键字</strong>修饰字符数组来保存字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span> value[];</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>我们知道被</strong> <code>final</code> <strong>关键字修饰的类不能被继承，修饰的方法不能被重写，修饰的变量是基本数据类型则值不能改变，修饰的变量是引用类型则不能再指向其他对象</strong>。因此，<code>final</code> 关键字修饰的数组保存字符串并不是 <code>String</code> 不可变的根本原因，因为这个数组保存的字符串是可变的（<code>final</code> 修饰引用类型变量的情况）。</p>
<p><code>String</code> 真正不可变有下面几点原因：</p>
<ol>
<li><strong>保存字符串的数组被 final 修饰且为私有的，并且<code>String</code> 类没有提供/暴露修改这个字符串的方法。</strong></li>
<li><strong><code>String</code> 类被 <code>final</code> 修饰导致其不能被继承，进而避免了子类破坏 <code>String</code> 不可变。</strong></li>
</ol>
<p>在 Java 9 之后，<code>String</code> 、<code>StringBuilder</code> 与 <code>StringBuffer</code> 的实现改用 <strong>byte 数组</strong>存储字符串。</p>
<p><strong>StringBuilder</strong>与 <strong>StringBuffer</strong>都继承自 <code>AbstractStringBuilder</code> 类，在 <code>AbstractStringBuilder</code> 中也是使用字符数组保存字符串，不过没有使用 <code>final</code> 和 <code>private</code> 关键字修饰，最关键的是这个 <code>AbstractStringBuilder</code> 类还提供了很多<strong>修改字符串的方法</strong>比如 <code>append</code> 方法。</p>
<h4 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a><strong>线程安全性</strong></h4><p><strong>String中的对象是不可变的，也就可以理解为常量，线程安全</strong>。AbstractStringBuilder 是 <code>StringBuilder</code> 与 <code>StringBuffer</code> 的公共父类，定义了一些字符串的基本操作，如 <code>expandCapacity</code>、<code>append</code>、<code>insert</code>、<code>indexOf</code> 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，<strong>StringBuffer 是线程安全的</strong>，内部使用 synchronized 进行同步，所以是线程安全的。<strong>StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的</strong>。</p>
<h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a><strong>性能</strong></h4><p><strong>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。<code>StringBuffer</code> 每次都会对 <code>StringBuffer</code> 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 <code>StringBuilder</code> 相比使用 <code>StringBuffer</code> 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</strong> </p>
<p><strong>对于三者使用的总结：</strong></p>
<ul>
<li>操作少量的数据: 适用 String</li>
<li>单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder</li>
<li>多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer</li>
</ul>
<h3 id="字符串拼接用“-”-还是-StringBuilder"><a href="#字符串拼接用“-”-还是-StringBuilder" class="headerlink" title="字符串拼接用“+” 还是 StringBuilder?"></a>字符串拼接用“+” 还是 StringBuilder?</h3><p>Java 语言本身并不支持运算符重载，“+”和“+=”是专门为 String 类重载过的运算符，也是 Java 中仅有的两个重载过的元素符。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220906221904219.png" alt="image-20220906221904219"></p>
<p>不过，在循环内使用<strong>“+”</strong>进行字符串的拼接的话，<strong>存在比较明显的缺陷：编译器不会创建单个 StringBuilder</strong> <strong>以复用，会导致创建过多的 StringBuilder 对象</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = &#123;<span class="string">&quot;he&quot;</span>, <span class="string">&quot;llo&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    s += arr[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure>

<p><code>StringBuilder</code> 对象是在循环内部被创建的，这意味着<strong>每循环一次就会创建一个</strong> <strong><code>StringBuilder</code></strong> 对象。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220906222043648.png" alt="image-20220906222043648"></p>
<p>如果直接使用 <code>StringBuilder</code> 对象进行字符串拼接的话，就不会存在这个问题了。</p>
<h3 id="String-equals-和-Object-equals-有何区别？"><a href="#String-equals-和-Object-equals-有何区别？" class="headerlink" title="String#equals() 和 Object#equals() 有何区别？"></a>String#equals() 和 Object#equals() 有何区别？</h3><p><code>String</code> 中的 <code>equals</code> 方法是被重写过的，比较的是 String 字符串的值是否相等。 <code>Object</code> 的 <code>equals</code> 方法是比较的对象的内存地址。</p>
<h3 id="字符串常量池的作用了解吗？"><a href="#字符串常量池的作用了解吗？" class="headerlink" title="字符串常量池的作用了解吗？"></a>字符串常量池的作用了解吗？</h3><p><strong>字符串常量池</strong> 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>; <span class="comment">// 放在常量池中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>; <span class="comment">// 从常量池中查找</span></span><br><span class="line">System.out.println(aa==bb);<span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>JDK1.7 之前</strong>运行时常量池逻辑包含字符串常量池存放在<strong>方法区</strong>。<strong>JDK1.7</strong> 的时候，字符串常量池被从方法区拿到了<strong>堆中</strong>。</p>
<h3 id="String类有哪些方法？"><a href="#String类有哪些方法？" class="headerlink" title="String类有哪些方法？"></a>String类有哪些方法？</h3><p>String类是Java最常用的API，它包含了大量处理字符串的方法，比较常用的有：</p>
<ul>
<li>char charAt(int index)：返回指定索引处的字符；</li>
<li>String substring(int beginIndex, int endIndex)：从此字符串中截取出一部分子字符串；</li>
<li>String[] split(String regex)：以指定的规则将此字符串分割成数组；</li>
<li>String trim()：删除字符串前导和后置的空格；</li>
<li>int indexOf(String str)：返回子串在此字符串首次出现的索引；</li>
<li>int lastIndexOf(String str)：返回子串在此字符串最后出现的索引；</li>
<li>boolean startsWith(String prefix)：判断此字符串是否以指定的前缀开头；</li>
<li>boolean endsWith(String suffix)：判断此字符串是否以指定的后缀结尾；</li>
<li>String toUpperCase()：将此字符串中所有的字符大写；</li>
<li>String toLowerCase()：将此字符串中所有的字符小写；</li>
<li>String replaceFirst(String regex, String replacement)：用指定字符串替换第一个匹配的子串；</li>
<li>String replaceAll(String regex, String replacement)：用指定字符串替换所有的匹配的子串</li>
</ul>
<h3 id="String可以被继承吗？"><a href="#String可以被继承吗？" class="headerlink" title="String可以被继承吗？"></a>String可以被继承吗？</h3><p>在Java中，String类被设计为不可变类，主要表现在它保存字符串的成员变量是final的。</p>
<ul>
<li>Java 9之前字符串采用char[]数组来保存字符，即 private final char[] value；</li>
<li>Java 9做了改进，采用byte[]数组来保存字符，即 private final byte[] value；</li>
</ul>
<p>之所以要把String类设计为不可变类，主要是出于安全和性能的考虑，可归纳为如下4点。</p>
<ul>
<li>由于字符串无论在任何 Java 系统中都广泛使用，会用来存储敏感信息，如账号，密码，网络路径，文件处理等场景里，保证字符串 String 类的安全性就尤为重要了，如果字符串是可变的，容易被篡改，那我们就无法保证使用字符串进行操作时，它是安全的，很有可能出现 SQL 注入，访问危险文件等操作。</li>
<li>在多线程中，只有不变的对象和值是线程安全的，可以在多个线程中共享数据。由于 String 天然的不可变，当一个线程”修改“了字符串的值，只会产生一个新的字符串对象，不会对其他线程的访问产生副作用，访问的都是同样的字符串数据，不需要任何同步操作。</li>
<li>字符串作为基础的数据结构，大量地应用在一些集合容器之中，尤其是一些散列集合，在散列集合中，存放元素都要根据对象的 hashCode() 方法来确定元素的位置。由于字符串 hashcode 属性不会变更，保证了唯一性，使得类似 HashMap，HashSet 等容器才能实现相应的缓存功能。由于 String 的不可变，避免重复计算 hashcode，只要使用缓存的 hashcode 即可，这样一来大大提高了在散列集合中使用 String 对象的性能。</li>
<li>当字符串不可变时，字符串常量池才有意义。字符串常量池的出现，可以减少创建相同字面量的字符串，让不同的引用指向池中同一个字符串，为运行时节约很多的堆内存。若字符串可变，字符串常量池失去意义，基于常量池的 String.intern() 方法也失效，每次创建新的字符串将在堆内开辟出新的空间，占据更多的内存。</li>
</ul>
<p>因为要保证String类的不可变，那么将这个类定义为final的就很容易理解了。如果没有final修饰，那么就会存在String的子类，这些子类可以重写String类的方法，强行改变字符串的值，这便违背了String类设计的初衷。 </p>
<h3 id="使用字符串时，new和””推荐使用哪种方式"><a href="#使用字符串时，new和””推荐使用哪种方式" class="headerlink" title="使用字符串时，new和””推荐使用哪种方式"></a>使用字符串时，new和””推荐使用哪种方式</h3><p>先看看 “hello” 和 new String(“hello”) 的区别：</p>
<ul>
<li>当Java程序直接使用 “hello” 的字符串直接量时，JVM将会使用<strong>常量池</strong>来管理这个字符串；</li>
<li>当使用 new String(“hello”) 时，JVM会先使用常量池来管理 “hello” 直接量，再调用String类的构造器来创建一个<strong>新的String对象</strong>，新创建的String对象被保存在<strong>堆内存</strong>中。</li>
</ul>
<p>显然，采用new的方式会多创建一个对象出来，会占用更多的内存，所以一般建议使用<strong>直接量的方式</strong>创建字符串。 </p>
<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>拼接字符串有很多种方式，其中最常用的有4种，下面列举了这4种方式各自适合的场景。</p>
<ol>
<li>+ 运算符：如果拼接的都是字符串直接量，则适合使用 + 运算符实现拼接；</li>
<li>StringBuilder：如果拼接的字符串中包含变量，并不要求线程安全，则适合使用StringBuilder；</li>
<li>StringBuffer：如果拼接的字符串中包含变量，并且要求线程安全，则适合使用StringBuffer；</li>
<li>String类的concat方法：如果只是对两个字符串进行拼接，并且包含变量，则适合使用concat方法；</li>
</ol>
<p><strong>用 + 运算符拼接字符串时：</strong></p>
<ul>
<li>如果拼接的都是<strong>字符串直接量</strong>，则在编译时<strong>编译器会将其直接优化为一个完整的字符串</strong>，和你直接写一个完整的字符串是一样的，所以效率非常的高。</li>
<li>如果拼接的字符串中<strong>包含变量</strong>，则在编译时编译器采用StringBuilder对其进行优化，即自动创建<strong>StringBuilder</strong>实例并调用其<strong>append()**方法，将这些字符串拼接在一起，效率也很高。但如果这个拼接操作是在</strong>循环中<strong>进行的，那么</strong>每次循环编译器都会创建一个StringBuilder实例**，再去拼接字符串，相当于执行了 new StringBuilder().append(str)，所以此时效率很低。</li>
</ul>
<p><strong>采用StringBuilder/StringBuffer拼接字符串时：</strong></p>
<ul>
<li>StringBuilder/StringBuffer都有字符串缓冲区，缓冲区的容量在创建对象时确定，并且<strong>默认为16</strong>。当拼接的字符串超过缓冲区的容量时，会触发缓冲区的<strong>扩容机制，即缓冲区加倍</strong>。</li>
<li>缓冲区频繁的扩容会降低拼接的性能，所以如果能提前预估最终字符串的长度，则建议在创建可变字符串对象时，放弃使用默认的容量，<strong>可以指定缓冲区的容量为预估的字符串的长度</strong>。</li>
</ul>
<p><strong>采用String类的concat方法拼接字符串时：</strong></p>
<ul>
<li>concat方法的拼接逻辑是，先创建一个足以容纳待拼接的两个字符串的字节数组，然后先后将两个字符串拼到这个数组里，最后将此数组转换为字符串。</li>
<li>在拼接大量字符串的时候，concat方法的效率低于StringBuilder。但是只拼接2个字符串时，concat方法的效率要优于StringBuilder。并且这种拼接方式代码简洁，<strong>所以只拼2个字符串时建议优先选择concat方法</strong>。</li>
</ul>
<h3 id="String-a-“abc”-，说一下这个过程会创建什么，放在哪里？"><a href="#String-a-“abc”-，说一下这个过程会创建什么，放在哪里？" class="headerlink" title="String a = “abc”; ，说一下这个过程会创建什么，放在哪里？"></a>String a = “abc”; ，说一下这个过程会创建什么，放在哪里？</h3><p>JVM会使用常量池来管理字符串直接量。在执行这句话时，JVM会先检查常量池中是否已经存有”abc”，若没有则将”abc”存入常量池，否则就复用常量池中已有的”abc”，将其引用赋值给变量a。</p>
<h3 id="new-String-“abc”-是去了哪里，仅仅是在堆里面吗？"><a href="#new-String-“abc”-是去了哪里，仅仅是在堆里面吗？" class="headerlink" title="new String(“abc”) 是去了哪里，仅仅是在堆里面吗？"></a>new String(“abc”) 是去了哪里，仅仅是在堆里面吗？</h3><p>在执行这句话时，JVM会先使用常量池来管理字符串直接量，即<strong>将”abc”存入常量池</strong>。然后再创建一个新的String对象，这个对象会被保存在<strong>堆内存</strong>中。并且，堆中对象的数据会<strong>指向常量池中的直接量</strong>。</p>
<h3 id="string不可变的好处"><a href="#string不可变的好处" class="headerlink" title="string不可变的好处"></a>string不可变的好处</h3><p><strong>1. 可以缓存 hash 值</strong></p>
<p>因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。</p>
<p><strong>2. String Pool 的需要</strong></p>
<p>如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220906223127273.png" alt="image-20220906223127273"></p>
<p><strong>3. 安全性</strong></p>
<p>String 经常作为参数，String 不可变性可以保证参数不可变。例如在作为网络连接参数的情况下如果 String 是可变的，那么在网络连接过程中，String 被改变，改变 String 对象的那一方以为现在连接的是其它主机，而实际情况却不一定是。</p>
<p><strong>4. 线程安全</strong></p>
<p>String 不可变性天生具备线程安全，可以在多个线程中安全地使用。</p>
<h3 id="String-intern"><a href="#String-intern" class="headerlink" title="String.intern()"></a>String.intern()</h3><p>使用 <strong>String.intern()</strong> 可以保证相同内容的字符串变量引用同一的内存对象。</p>
<p>下面示例中，s1 和 s2 采用 new String() 的方式新建了两个不同对象，而 s3 是通过 s1.intern() 方法取得一个对象引用。intern() 首先把 s1 引用的对象放到 String Pool(字符串常量池)中，然后返回这个对象引用。因此 s3 和 s1 引用的是同一个字符串常量池的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);           <span class="comment">// false</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s1.intern();</span><br><span class="line">System.out.println(s1.intern() == s3);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>如果是采用 “bbb” 这种使用双引号的形式创建字符串实例，会自动地将新建的对象放入 String Pool 中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">System.out.println(s4 == s5);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>在 Java 7 之前，字符串常量池被放在运行时常量池中，它属于永久代。而在 Java 7，字符串常量池被移到 Native Method 中。这是因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。</p>
<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h3 id="Object-类的常见方法有哪些？"><a href="#Object-类的常见方法有哪些？" class="headerlink" title="Object 类的常见方法有哪些？"></a>Object 类的常见方法有哪些？</h3><p>Object 类是一个特殊的类，是所有类的父类。它主要提供了以下 11 个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass()<span class="comment">//native方法，用于返回当前运行时对象的Class对象，使用了final关键字修饰，故不允许子类重写。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> <span class="comment">//native方法，用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap。</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span><span class="comment">//用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException<span class="comment">//naitive方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为true。Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException异常。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span><span class="comment">//返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span><span class="comment">//native方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notifyAll</span><span class="params">()</span><span class="comment">//native方法，并且不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//native方法，并且不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout, <span class="type">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123; &#125;<span class="comment">//实例被垃圾回收器回收的时候触发的操作</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a><strong>泛型</strong></h1><h2 id="Java-泛型了解么？"><a href="#Java-泛型了解么？" class="headerlink" title="Java 泛型了解么？"></a>Java 泛型了解么？</h2><p><strong>Java 泛型（generics）</strong> 是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p>
<p>Java 的泛型是伪泛型，这是因为 Java 在运行期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">12</span>);</span><br><span class="line"><span class="comment">//这里直接添加会报错</span></span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">List</span>&gt; clazz = list.getClass();</span><br><span class="line"><span class="type">Method</span> <span class="variable">add</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line"><span class="comment">//但是通过反射添加是可以的</span></span><br><span class="line"><span class="comment">//这就说明在运行期间所有的泛型信息都会被擦掉</span></span><br><span class="line">add.invoke(list, <span class="string">&quot;kl&quot;</span>);</span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>泛型一般有三种使用方式: <strong>泛型类、泛型接口、泛型方法</strong>。</p>
<p><strong>1.泛型类</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span></span><br><span class="line"><span class="comment">//在实例化泛型类时，必须指定T的具体类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generic</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如何实例化泛型类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Generic&lt;Integer&gt; genericInteger = <span class="keyword">new</span> <span class="title class_">Generic</span>&lt;Integer&gt;(<span class="number">123456</span>);</span><br></pre></td></tr></table></figure>

<p><strong>2.泛型接口</strong> ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Generator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现泛型接口，不指定类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GeneratorImpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现泛型接口，指定类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GeneratorImpl</span> <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.泛型方法</strong> ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(E[] inputArray)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (E element : inputArray) &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%s &quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建不同类型数组： Integer, Double 和 Character</span></span><br><span class="line">Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">String[] stringArray = &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span> &#125;;</span><br><span class="line">printArray(intArray);</span><br><span class="line">printArray(stringArray);</span><br></pre></td></tr></table></figure>

<h2 id="泛型擦除"><a href="#泛型擦除" class="headerlink" title="泛型擦除"></a>泛型擦除</h2><h3 id="一、各种语言中的编译器是如何处理泛型的"><a href="#一、各种语言中的编译器是如何处理泛型的" class="headerlink" title="一、各种语言中的编译器是如何处理泛型的"></a><strong>一、各种语言中的编译器是如何处理泛型的</strong></h3><p>通常情况下，一个编译器处理泛型有两种方式：</p>
<p>1.<strong>Code specialization</strong>。在实例化一个泛型类或泛型方法时都产生一份新的目标代码（字节码or二进制代码）。例如，针对一个泛型List，可能需要 针对String，Integer，Float产生三份目标代码。</p>
<p>2**.Code sharing**。对每个泛型类只生成唯一的一份目标代码；该泛型类的所有实例都映射到这份目标代码上，在需要的时候执行类型检查和类型转换。</p>
<p>C++ 中的模板（template）是典型的Code specialization实现。C++ 编译器会为每一个泛型类实例生成一份执行代码。执行代码中Integer List和String List是两种不同的类型。这样会导致<strong>代码膨胀</strong>（code bloat）。 C#里面泛型无论在程序源码中、编译后的IL中（Intermediate Language，中间语言，这时候泛型是一个占位符）或是运行期的CLR中都是切实存在的，List<Integer>与List<String>就是两个不同的类型，它们在系统运行期生成，有自己的虚方法表和类型数据，这种实现称为类型膨胀，基于这种方法实现的泛型被称为<strong>真实泛型</strong>。 Java语言中的泛型则不一样，它只在程序源码中存在，在编译后的字节码文件中，就已经被替换为原来的原生类型（Raw Type，也称为裸类型）了，并且在相应的地方插入了强制转型代码，因此对于运行期的Java语言来说，ArrayList<Integer>与ArrayList<String>就是同一个类。<strong>所以说泛型技术实际上是Java语言的一颗语法糖，Java语言中的泛型实现方法称为类型擦除，基于这种方法实现的泛型被称为伪泛型</strong>。</p>
<p>C++和C#是使用Code specialization的处理机制，前面提到，他有一个缺点，那就是<strong>会导致代码膨胀</strong>。另外一个弊端是在引用类型系统中，浪费空间，因为引用类型集合中元素本质上都是一个指针。没必要为每个类型都产生一份执行代码。而这也是Java编译器中采用Code sharing方式处理泛型的主要原因。</p>
<p>Java编译器通过Code sharing方式为每个泛型类型创建唯一的字节码表示，并且将该泛型类型的实例都映射到这个唯一的字节码表示上。将多种泛型类形实例映射到唯一的字节码表示是通过类型擦除（type erasure）实现的。</p>
<h3 id="二、什么是类型擦除"><a href="#二、什么是类型擦除" class="headerlink" title="二、什么是类型擦除"></a><strong>二、什么是类型擦除</strong></h3><p>前面我们多次提到这个词：<strong>类型擦除</strong>（type erasure），那么到底什么是类型擦除呢？</p>
<p>类型擦除指的是通过类型参数合并，将泛型类型实例关联到<strong>同一份字节码</strong>上。编译器只为泛型类型生成一份字节码，并将其实例关联到这份字节码上。类型擦除的关键在于从泛型类型中清除类型参数的相关信息，并且再必要的时候添加类型检查和类型转换的方法。 类型擦除可以简单的理解为将泛型java代码转换为普通java代码，只不过编译器更直接点，将泛型java代码直接转换成普通java字节码。 类型擦除的主要过程如下： <strong>1.将所有的泛型参数用其最左边界（最顶级的父类型）类型替换。（这部分内容可以看：Java泛型中extends和super的理解） 2.移除所有的类型参数。</strong></p>
<h3 id="三、Java编译器处理泛型的过程"><a href="#三、Java编译器处理泛型的过程" class="headerlink" title="三、Java编译器处理泛型的过程"></a><strong>三、Java编译器处理泛型的过程</strong></h3><p><strong>code 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();  </span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hollis&quot;</span>);  </span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;22&quot;</span>);  </span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;name&quot;</span>));  </span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;age&quot;</span>));  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p><strong>反编译后的code 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();  </span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hollis&quot;</span>);  </span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;22&quot;</span>); </span><br><span class="line">    System.out.println((String) map.get(<span class="string">&quot;name&quot;</span>));  </span><br><span class="line">    System.out.println((String) map.get(<span class="string">&quot;age&quot;</span>));  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p><strong>code 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Comparable</span>&lt;A&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(A that)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NumericValue</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;NumericValue&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumericValue</span><span class="params">(<span class="type">byte</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(NumericValue that)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value - that.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>反编译后的code 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">interface</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">( Object that)</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NumericValue</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Comparable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumericValue</span><span class="params">(<span class="type">byte</span> value)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span> <span class="title function_">getValue</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(NumericValue that)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> value - that.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object obj)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> compareTo((NumericValue)obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>code 3:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Collections</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;A <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;A&gt;&gt; A <span class="title function_">max</span><span class="params">(Collection&lt;A&gt; xs)</span> &#123;</span><br><span class="line">        Iterator&lt;A&gt; xi = xs.iterator();</span><br><span class="line">        <span class="type">A</span> <span class="variable">w</span> <span class="operator">=</span> xi.next();</span><br><span class="line">        <span class="keyword">while</span> (xi.hasNext()) &#123;</span><br><span class="line">            <span class="type">A</span> <span class="variable">x</span> <span class="operator">=</span> xi.next();</span><br><span class="line">            <span class="keyword">if</span> (w.compareTo(x) &lt; <span class="number">0</span>)</span><br><span class="line">                w = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>反编译后的code 3:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Collections</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Collections</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Comparable <span class="title function_">max</span><span class="params">(Collection xs)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">xi</span> <span class="operator">=</span> xs.iterator();</span><br><span class="line">        <span class="type">Comparable</span> <span class="variable">w</span> <span class="operator">=</span> (Comparable)xi.next();</span><br><span class="line">        <span class="keyword">while</span>(xi.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">Comparable</span> <span class="variable">x</span> <span class="operator">=</span> (Comparable)xi.next();</span><br><span class="line">            <span class="keyword">if</span>(w.compareTo(x) &lt; <span class="number">0</span>)</span><br><span class="line">                w = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h2><p>E - Element (在集合中使用，因为集合中存放的是元素)</p>
<p>T - Type（Java 类）</p>
<p>K - Key（键）</p>
<p>V - Value（值）</p>
<p>N - Number（数值类型）</p>
<p>？ - 表示不确定的java类型（无限制通配符类型）</p>
<p>S、U、V - 2nd、3rd、4th types</p>
<p>Object - 是所有类的根类，任何类的对象都可以设置给该Object引用变量，使用的时候可能需要类型强制转换，但是用使用了泛型T、E等这些标识符后，在实际用之前类型就已经确定了，不需要再进行类型强制转换。</p>
<h2 id="你的项目中哪里用到了泛型？"><a href="#你的项目中哪里用到了泛型？" class="headerlink" title="你的项目中哪里用到了泛型？"></a>你的项目中哪里用到了泛型？</h2><ul>
<li><p>可用于定义通用返回结果 <strong>CommonResult<T></strong> 通过参数 T 可根据具体的返回类型动态指定结果的数据类型</p>
</li>
<li><p>定义 Excel 处理类 <strong>ExcelUtil<T></strong> 用于动态指定 Excel 导出的数据类型</p>
</li>
<li><p>用于构建集合工具类。参考 Collections 中的 sort, binarySearch 方法</p>
</li>
</ul>
<h2 id="List-lt-super-T-gt-和List-lt-extends-T-gt"><a href="#List-lt-super-T-gt-和List-lt-extends-T-gt" class="headerlink" title="List&lt;? super T&gt;和List&lt;? extends T&gt;"></a>List&lt;? super T&gt;和List&lt;? extends T&gt;</h2><ul>
<li>? 是类型通配符，List&lt;?&gt; 可以表示各种泛型List的父类，意思是<strong>元素类型未知的List</strong>；</li>
<li>List&lt;? super T&gt; 用于设定类型通配符的下限，此处 ? 代表一个未知的类型，但它必须是<strong>T的父类型</strong>；</li>
<li>List&lt;? extends T&gt; 用于设定类型通配符的上限，此处 ? 代表一个未知的类型，但它必须是<strong>T的子类型</strong>。</li>
</ul>
<p><strong>扩展阅读</strong></p>
<p>在Java的早期设计中，允许把Integer[]数组赋值给Number[]变量，此时如果试图把一个Double对象保存到该Number[]数组中，编译可以通过，但在运行时抛出ArrayStoreException异常。这显然是一种不安全的设计，因此Java在泛型设计时进行了改进，它不再允许把 List<Integer> 对象赋值给 List<Number> 变量。</p>
<p>数组和泛型有所不同，假设Foo是Bar的一个子类型（子类或者子接口），那么Foo[]依然是Bar[]的子类型，但G<Foo> 不是 G<Bar> 的子类型。Foo[]自动向上转型为Bar[]的方式被称为型变，也就是说，Java的数组支持型变，但Java集合并不支持型变。Java泛型的设计原则是，只要代码在编译时没有出现警告，就不会遇到运行时ClassCastException异常。</p>
<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a><strong>反射</strong></h1><h2 id="反射的定义、优缺点及应用场景"><a href="#反射的定义、优缺点及应用场景" class="headerlink" title="反射的定义、优缺点及应用场景"></a>反射的定义、优缺点及应用场景</h2><h3 id="何为反射？"><a href="#何为反射？" class="headerlink" title="何为反射？"></a>何为反射？</h3><p>Java 的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为 Java 语言的反射机制。反射被视为动态语言的关键。</p>
<h3 id="反射机制优缺点"><a href="#反射机制优缺点" class="headerlink" title="反射机制优缺点"></a>反射机制优缺点</h3><p><strong>优点</strong> ： 可以让咱们的代码更加灵活、为各种框架提供<strong>开箱即用</strong>的功能提供了便利</p>
<p><strong>缺点</strong> ：让我们在运行时有了分析操作类的能力，这同样也增加了安全问题。比如可以<strong>无视泛型参数的安全检查</strong>（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。使用反射 性能较低，需要解析字节码，将内存中的对象进行解析</p>
<p>解决方案： </p>
<p>1、通过setAccessible(true) 关闭JDK的安全检查来提升反射速度； </p>
<p>2、多次创建一个类的实例时，有缓存会快很多 </p>
<p>3、 ReflectASM工具类，通过字节码生成的方式加快反射速度 2）相对不安全，破坏了封装性（因为通 过反射可以获得私有方法和属性）</p>
<h3 id="反射的应用场景"><a href="#反射的应用场景" class="headerlink" title="反射的应用场景"></a>反射的应用场景</h3><p>像咱们平时大部分时候都是在写业务代码，很少会接触到直接使用反射机制的场景。</p>
<p>但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 <strong>Spring/Spring Boot、MyBatis</strong> 等等框架中都大量使用了反射机制。</p>
<p><strong>这些框架中也大量使用了动态代理，而动态代理的实现也依赖反射。</strong></p>
<p>比如下面是通过 JDK 实现动态代理的示例代码，其中就使用了反射类 <code>Method</code> 来调用指定的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DebugInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理类中的真实对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DebugInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before method &quot;</span> + method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;after method &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外，像 Java 中的一大利器 <strong>注解</strong> 的实现也用到了反射。</p>
<p>为什么你使用 Spring 的时候 ，一个<code>@Component</code>注解就声明了一个类为 Spring Bean 呢？为什么你通过一个 <code>@Value</code>注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？</p>
<p>这些都是因为你可以基于反射分析类，然后获取到类/属性/方法/方法的参数上的注解。你获取到注解之后，就可以做进一步的处理。</p>
<h2 id="过反射获取Class对象的方法"><a href="#过反射获取Class对象的方法" class="headerlink" title="过反射获取Class对象的方法"></a>过反射获取Class对象的方法</h2><ul>
<li><strong>类名.class</strong>：即通过一个 Class 的静态变量 class 获取，实例如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> ImoocStudent.class;</span><br></pre></td></tr></table></figure>

<ul>
<li>**对象.getClass ()**：前提是有该类的对象实例，该方法由 java.lang.Object 类提供，实例如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ImoocStudent</span> <span class="variable">imoocStudent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImoocStudent</span>(<span class="string">&quot;小慕&quot;</span>);</span><br><span class="line">Class imoocStudent.getClass();</span><br></pre></td></tr></table></figure>

<ul>
<li>**Class.forName (“包名.类名”)**：如果知道一个类的完整包名，可以通过 Class 类的静态方法 forName() 获得 Class 对象，实例如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span> = Class.forName(<span class="string">&quot;java.util.ArrayList&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过类加载器**xxxClassLoader.loadClass()**传入类路径获取:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ClassLoader.loadClass(<span class="string">&quot;cn.javaguide.TargetObject&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>实现Java反射的类：</strong></p>
<ul>
<li>1）<strong>Class</strong>：表示正在运行的Java应用程序中的类和接口 注意： 所有获取对象的信息都需要Class类 来实现。 </li>
<li>2）<strong>Field</strong>：提供有关类和接口的属性信息，以及对它的动态访问权限。 </li>
<li>3）<strong>Constructor</strong>： 提供关于类的单个构造方法的信息以及它的访问权限 </li>
<li>4）<strong>Method</strong>：提供类或接口中某个方法的信息</li>
</ul>
<p><strong>反射的一些基本操作</strong></p>
<ol>
<li><strong>创建一个我们要使用反射操作的类</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.javaguide;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TargetObject</span><span class="params">()</span> &#123;</span><br><span class="line">        value = <span class="string">&quot;JavaGuide&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publicMethod</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I love &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;value is &quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.使用反射操作这个类的方法以及参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.javaguide;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取 TargetObject 类的 Class 对象并且创建 TargetObject 类实例</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class&lt;?&gt; tagetClass = Class.forName(<span class="string">&quot;cn.javaguide.TargetObject&quot;</span>);</span><br><span class="line">        <span class="type">TargetObject</span> <span class="variable">targetObject</span> <span class="operator">=</span> (TargetObject) tagetClass.newInstance();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取 TargetObject 类中定义的所有方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Method[] methods = targetClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取指定方法并调用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">publicMethod</span> <span class="operator">=</span> targetClass.getDeclaredMethod(<span class="string">&quot;publicMethod&quot;</span>,</span><br><span class="line">                String.class);</span><br><span class="line"></span><br><span class="line">        publicMethod.invoke(targetObject, <span class="string">&quot;JavaGuide&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取指定参数并对参数进行修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> targetClass.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">//为了对类中的参数进行修改我们取消安全检查</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(targetObject, <span class="string">&quot;JavaGuide&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 调用 private 方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">privateMethod</span> <span class="operator">=</span> targetClass.getDeclaredMethod(<span class="string">&quot;privateMethod&quot;</span>);</span><br><span class="line">        <span class="comment">//为了调用private方法我们取消安全检查</span></span><br><span class="line">        privateMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        privateMethod.invoke(targetObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publicMethod</span><br><span class="line">privateMethod</span><br><span class="line">I love JavaGuide</span><br><span class="line">value is JavaGuide</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong> : 有读者提到上面代码运行会抛出 ClassNotFoundException 异常,具体原因是你没有下面把这段代码的包名替换成自己创建的 TargetObject 所在的包 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; targetClass = Class.forName(<span class="string">&quot;cn.javaguide.TargetObject&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p><code>Annontation</code> （注解） 是Java5 开始引入的新特性，可以看作是一种特殊的注释，主要用于修饰类、方法或者变量。</p>
<p>注解本质是一个继承了**<code>Annotation</code>** 的特殊接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Override</span> <span class="keyword">extends</span> <span class="title class_">Annotation</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注解只有被解析之后才会生效，常见的解析方法有两种：</p>
<ul>
<li><strong>编译期直接扫描</strong> ：编译器在编译 Java 代码的时候扫描对应的注解并处理，比如某个方法使用**@Override** 注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。</li>
<li><strong>运行期通过反射处理</strong> ：像框架中自带的注解(比如 Spring 框架的 <strong>@Value</strong>、**@Component**)都是通过反射来进行处理的。</li>
</ul>
<p>JDK 提供了很多内置的注解（比如 <strong>@Override</strong>、**@Deprecated**），同时，我们还可以自定义注解。</p>
<h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h1><h2 id="Java-中-IO-流分为几种"><a href="#Java-中-IO-流分为几种" class="headerlink" title="Java 中 IO 流分为几种?"></a>Java 中 IO 流分为几种?</h2><p>Java 中 IO 流分为几种?</p>
<ul>
<li><p>按照流的流向分，可以分为<strong>输入流和输出流</strong>；</p>
</li>
<li><p>按照操作单元划分，可以划分为<strong>字节流和字符流</strong>；</p>
</li>
<li><p>按照流的角色划分为<strong>节点流和处理流</strong>。</p>
</li>
</ul>
<p>Java IO 流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p>
<ul>
<li><strong>InputStream/Reader</strong>: 所有的输入流的基类，前者是<strong>字节输入流</strong>，后者是<strong>字符输入流</strong>。</li>
<li><strong>OutputStream/Writer</strong>: 所有输出流的基类，前者是<strong>字节输出流</strong>，后者是<strong>字符输出流</strong>。</li>
</ul>
<h2 id="既然有了字节流-为什么还要有字符流"><a href="#既然有了字节流-为什么还要有字符流" class="headerlink" title="既然有了字节流,为什么还要有字符流?"></a>既然有了字节流,为什么还要有字符流?</h2><p>问题本质想问：<strong>不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？</strong></p>
<p>回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果<strong>音频文件、图片</strong>等媒体文件用<strong>字节流</strong>比较好，如果涉及到<strong>字符</strong>的话使用<strong>字符流</strong>比较好。</p>
<h2 id="BIO、NIO、AIO？"><a href="#BIO、NIO、AIO？" class="headerlink" title="BIO、NIO、AIO？"></a>BIO、NIO、AIO？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907210051326.png" alt="image-20220907210051326"></p>
<p><strong>BIO</strong> (blocking I/O) ： 就是传统的IO，同步阻塞，服务器实现模式为一个连接一个线程，即 <strong>客<br>户端有连接请求时服务器端就需要启动一个线程进行处理</strong> ，如果这个连接不做任何事情会造<br>成不必要的线程开销，可以通过连接池机制改善(实现多个客户连接服务器)。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907210209850.png" alt="image-20220907210209850"></p>
<p>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。</p>
<p><strong>NIO</strong> ：全称 java non-blocking IO，是指 JDK 提供的新 API。从JDK1.4开始，Java 提供了一系列改进的输入/输出的新特性，被统称为NIO(即New IO)。</p>
<p>NIO是 <strong>同步非阻塞</strong> 的，服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到连接有IO请求就进行处理：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907210351648.png" alt="image-20220907210351648"></p>
<p>NIO的数据是面向 <strong>缓冲区Buffer</strong> 的，必须从Buffer中读取或写入。</p>
<p>所以完整的NIO示意图：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907210423184.png" alt="image-20220907210423184"></p>
<p>可以看出，NIO的运行机制：</p>
<ul>
<li>每个Channel对应一个Buffer。</li>
<li>Selector对应一个线程，一个线程对应多个Channel。</li>
<li>Selector会根据不同的事件，在各个通道上切换。</li>
<li>Buffer是内存块，底层是数据。</li>
</ul>
<p><strong>AIO</strong> ：JDK 7 引入了 Asynchronous I/O，是 <strong>异步不阻塞</strong> 的 IO。在进行 I/O 编程中，常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p>
<h2 id="IO模型详解"><a href="#IO模型详解" class="headerlink" title="IO模型详解"></a>IO模型详解</h2><h3 id="何为-I-O"><a href="#何为-I-O" class="headerlink" title="何为 I/O?"></a>何为 I/O?</h3><p>I/O（<strong>I</strong>nput/<strong>O</strong>utpu） 即<strong>输入／输出</strong> 。</p>
<p><strong>我们先从计算机结构的角度来解读一下 I/O。</strong></p>
<p>根据冯.诺依曼结构，计算机结构分为 5 大部分：<strong>运算器、控制器、存储器、输入设备、输出设备</strong>。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907211415038.png" alt="image-20220907211415038"></p>
<p>输入设备（比如键盘）和输出设备（比如显示器）都属于外部设备。网卡、硬盘这种既可以属于输入设备，也可以属于输出设备。</p>
<p>输入设备向计算机输入数据，输出设备接收计算机输出的数据。</p>
<p><strong>从计算机结构的视角来看的话， I/O 描述了计算机系统与外部设备之间通信的过程。</strong></p>
<p><strong>我们再先从应用程序的角度来解读一下 I/O。</strong></p>
<p>根据大学里学到的操作系统相关的知识：为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为 <strong>用户空间（User space）</strong> 和 <strong>内核空间（Kernel space ）</strong> 。</p>
<p>像我们平常运行的应用程序都是运行在用户空间，只有内核空间才能进行系统态级别的资源有关的操作，比如文件管理、进程通信、内存管理等等。也就是说，我们想要进行 IO 操作，一定是要依赖内核空间的能力。</p>
<p>并且，用户空间的程序不能直接访问内核空间。</p>
<p>当想要执行 IO 操作时，由于没有执行这些操作的权限，只能发起系统调用请求操作系统帮忙完成。</p>
<p>因此，用户进程想要执行 IO 操作的话，必须通过 <strong>系统调用</strong> 来间接访问内核空间。</p>
<p>我们在平常开发过程中接触最多的就是 <strong>磁盘 IO（读写文件）</strong> 和 <strong>网络 IO（网络请求和响应）</strong>。</p>
<p><strong>从应用程序的视角来看的话，我们的应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就是说，我们的应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的。</strong></p>
<p>当应用程序发起 I/O 调用后，会经历两个步骤：</p>
<ol>
<li><strong>内核等待 I/O 设备准备好数据</strong></li>
<li><strong>内核将数据从内核空间拷贝到用户空间。</strong></li>
</ol>
<h3 id="有哪些常见的-IO-模型"><a href="#有哪些常见的-IO-模型" class="headerlink" title="有哪些常见的 IO 模型?"></a>有哪些常见的 IO 模型?</h3><p>UNIX 系统下， IO 模型一共有 5 种： <strong>同步阻塞 I/O</strong>、<strong>同步非阻塞 I/O</strong>、<strong>I/O 多路复用</strong>、<strong>信号驱动 I/O</strong> 和<strong>异步 I/O</strong>。</p>
<h3 id="Java-中-3-种常见-IO-模型"><a href="#Java-中-3-种常见-IO-模型" class="headerlink" title="Java 中 3 种常见 IO 模型"></a>Java 中 3 种常见 IO 模型</h3><h3 id="BIO-Blocking-I-O"><a href="#BIO-Blocking-I-O" class="headerlink" title="BIO (Blocking I/O)"></a><strong>BIO (Blocking I/O)</strong></h3><p><strong>BIO 属于</strong>同步阻塞 IO 模型 <strong>。</strong></p>
<p>同步阻塞 IO 模型中，应用程序发起 read 调用后，会一直阻塞，直到内核把数据拷贝到用户空间。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907211637713.png" alt="image-20220907211637713"></p>
<p>在客户端连接数量不高的情况下，是没问题的。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</p>
<h3 id="NIO-Non-blocking-New-I-O"><a href="#NIO-Non-blocking-New-I-O" class="headerlink" title="NIO (Non-blocking/New I/O)"></a><strong>NIO (Non-blocking/New I/O)</strong></h3><p>Java 中的 NIO 于 Java 1.4 中引入，对应 <code>java.nio</code> 包，提供了 <code>Channel</code> , <code>Selector</code>，<code>Buffer</code> 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它是支持面向缓冲的，基于通道的 I/O 操作方法。 对于高负载、高并发的（网络）应用，应使用 NIO 。</p>
<p><strong>Java 中的 NIO 可以看作是 I/O 多路复用模型</strong>。也有很多人认为，Java 中的 NIO 属于同步非阻塞 IO 模型。</p>
<p>跟着我的思路往下看看，相信你会得到答案！</p>
<p>我们先来看看 <strong>同步非阻塞 IO 模型</strong>。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907211733470.png" alt="image-20220907211733470"></p>
<p>同步非阻塞 IO 模型中，应用程序会一直发起 <strong>read</strong> 调用，等待数据<strong>从内核空间拷贝到用户空间</strong>的这段时间里，线程依然是阻塞的，直到在内核把数据拷贝到用户空间。</p>
<p>相比于同步阻塞 IO 模型，同步非阻塞 IO 模型确实有了很大改进。<strong>通过轮询操作，避免了一直阻塞。</strong></p>
<p>但是，这种 IO 模型同样存在问题：<strong>应用程序不断进行 I/O 系统调用轮询数据是否已经准备好的过程是十分消耗 CPU 资源的</strong>。</p>
<p>这个时候，<strong>I/O 多路复用模型</strong> 就上场了。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907211839332.png" alt="image-20220907211839332"></p>
<p>IO 多路复用模型中，线程首先发起 select 调用，询问内核数据是否准备就绪，等内核把数据准备好了，用户线程再发起 read 调用。read 调用的过程（数据从内核空间 -&gt; 用户空间）还是阻塞的。</p>
<p>目前支持 IO 多路复用的系统调用，有 select，epoll 等等。select 系统调用，目前几乎在所有的操作系统上都有支持。</p>
<ul>
<li><strong>select 调用</strong> ：内核提供的系统调用，它支持一次查询多个系统调用的可用状态。几乎所有的操作系统都支持。</li>
<li><strong>epoll 调用</strong> ：linux 2.6 内核，属于 select 调用的增强版本，优化了 IO 的执行效率。</li>
</ul>
<p><strong>IO 多路复用模型，通过减少无效的系统调用，减少了对 CPU 资源的消耗。</strong></p>
<p>Java 中的 NIO ，有一个非常重要的<strong>选择器 ( Selector )</strong> 的概念，也可以被称为 <strong>多路复用器</strong>。通过它，只需要一个线程便可以管理多个客户端连接。当客户端数据到了之后，才会为其服务。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907212117819.png" alt="image-20220907212117819"></p>
<h3 id="AIO-Asynchronous-I-O"><a href="#AIO-Asynchronous-I-O" class="headerlink" title="AIO (Asynchronous I/O)"></a>AIO (Asynchronous I/O)</h3><p>AIO 也就是 NIO 2。Java 7 中引入了 NIO 的改进版 NIO 2,它是<strong>异步 IO 模型</strong>。</p>
<p>异步 IO 是基于<strong>事件和回调机制</strong>实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907212236794.png" alt="image-20220907212236794"></p>
<p>目前来说 AIO 的应用还不是很广泛。Netty 之前也尝试使用过 AIO，不过又放弃了。这是因为，Netty 使用了 AIO 之后，在 Linux 系统上的性能并没有多少提升。</p>
<p>最后，来一张图，简单总结一下 Java 中的 BIO、NIO、AIO。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907212354609.png" alt="image-20220907212354609"></p>
<h2 id="获取用键盘输入常用的两种方法"><a href="#获取用键盘输入常用的两种方法" class="headerlink" title="获取用键盘输入常用的两种方法"></a>获取用键盘输入常用的两种方法</h2><p>方法 1：通过 <code>Scanner</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span>  <span class="operator">=</span> input.nextLine();</span><br><span class="line">input.close();</span><br></pre></td></tr></table></figure>

<p>方法 2：通过 <code>BufferedReader</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> input.readLine();</span><br></pre></td></tr></table></figure>

<h2 id="IO流用到了什么设计模式？"><a href="#IO流用到了什么设计模式？" class="headerlink" title="IO流用到了什么设计模式？"></a>IO流用到了什么设计模式？</h2><p>其实，Java的IO流体系还用到了一个设计模式—— <strong>装饰器模式</strong> 。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907212756379.png" alt="image-20220907212756379"></p>
<h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a><strong>序列化</strong></h1><h3 id="什么是序列化-什么是反序列化"><a href="#什么是序列化-什么是反序列化" class="headerlink" title="什么是序列化?什么是反序列化?"></a>什么是序列化?什么是反序列化?</h3><p>如果我们需要<strong>持久化 Java 对象</strong>比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。</p>
<p>简单来说：</p>
<ul>
<li><strong>序列化：</strong> <strong>将数据结构或对象转换成二进制字节流的过程</strong></li>
<li><strong>反序列化：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程</strong></li>
</ul>
<p>对于 Java 这种面向对象编程语言来说，我们序列化的都是对象（Object）也就是实例化后的类(Class)，但是在 C++这种半面向对象的语言中，struct(结构体)定义的是数据结构类型，而 class 对应的是对象类型。</p>
<p>维基百科是如是介绍序列化的：</p>
<p>序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。依照序列化格式重新获取字节的结果时，可以利用它来产生与原始对象相同语义的副本。对于许多对象，像是使用大量引用的复杂对象，这种序列化重建的过程并不容易。面向对象中的对象序列化，并不概括之前原始对象所关系的函数。这种过程也称为对象编组（marshalling）。从一系列字节提取数据结构的反向操作，是反序列化（也称为解编组、deserialization、unmarshalling）。 </p>
<p>综上：<strong>序列化的主要目的是通过网络传输对象或者说是将对象存储到文件系统、数据库、内存中</strong>。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907212950852.png" alt="image-20220907212950852"></p>
<h3 id="Java-序列化中如果有些字段不想进行序列化，怎么办？"><a href="#Java-序列化中如果有些字段不想进行序列化，怎么办？" class="headerlink" title="Java 序列化中如果有些字段不想进行序列化，怎么办？"></a>Java 序列化中如果有些字段不想进行序列化，怎么办？</h3><p>对于不想进行序列化的变量，使用 <strong>transient</strong> 关键字修饰。</p>
<p>transient 关键字的作用是：<strong>阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。</strong></p>
<p>关于 transient 还有几点注意：</p>
<ul>
<li>transient 只能<strong>修饰变量，</strong>不能修饰类和方法。</li>
<li>transient 修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 int 类型，那么反序列后结果就是 0。</li>
<li>static 变量因为不属于任何对象(Object)，所以无论有没有 transient 关键字修饰，均不会被序列化。</li>
</ul>
<h3 id="Serializable接口有什么用？"><a href="#Serializable接口有什么用？" class="headerlink" title="Serializable接口有什么用？"></a>Serializable接口有什么用？</h3><p>这个接口只是一个标记，没有具体的作用，但是如果不实现这个接又，在有些序列化场景会报错，所以一般建议，创建的JavaBean类都实现 Serializable。</p>
<h3 id="serialVersionUID-又有什么用？"><a href="#serialVersionUID-又有什么用？" class="headerlink" title="serialVersionUID 又有什么用？"></a>serialVersionUID 又有什么用？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br></pre></td></tr></table></figure>

<p>serialVersionUID 就是起验证作用。</p>
<p>我们经常会看到这样的代码，这个 ID 其实就是用来验证序列化的对象和反序列化对应的对象ID 是否一致。</p>
<p>这个 ID 的数字其实不重要，无论是 1L 还是 IDE自动生成的，只要序列化时候对象的serialVersionUID 和反序列化时候对象的 serialVersionUID 一致的话就行。</p>
<p>如果没有显示指定 serialVersionUID ，则编译器会根据类的相关信息自动生成一个，可以认为是一个指纹。</p>
<p>所以如果你没有定义一个 serialVersionUID， 结果序列化一个对象之后，在反序列化之前把对象的类的结构改了，比如增加了一个成员变量，则此时的反序列化会失败。</p>
<p>因为类的结构变了，所以 serialVersionUID 就不一致。</p>
<h3 id="Java-序列化不包含静态变量？"><a href="#Java-序列化不包含静态变量？" class="headerlink" title="Java 序列化不包含静态变量？"></a>Java 序列化不包含静态变量？</h3><p>序列化的时候是不包含静态变量的。</p>
<h3 id="说说有几种序列化方式？"><a href="#说说有几种序列化方式？" class="headerlink" title="说说有几种序列化方式？"></a>说说有几种序列化方式？</h3><p>Java序列化方式有很多，常见的有三种：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907213807214.png" alt="image-20220907213807214"></p>
<ul>
<li>Java对象流列化 ：Java原生序列化方法即通过Java原生流(InputStream和OutputStream之间的转化)的方式进行转化，一般是对象输出流 ObjectOutputStream 和对象输入流ObjectInputStream 。</li>
<li>Json序列化：这个可能是我们最常用的序列化方式，Json序列化的选择很多，一般会使用jackson包，通过ObjectMapper类来进行一些操作，比如将对象转化为byte数组或者将json串转化为对象。</li>
<li>ProtoBuff序列化：ProtocolBuffer是一种轻便高效的结构化数据存储格式，ProtoBuff序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。</li>
</ul>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a><strong>异常</strong></h1><h2 id="Java的异常机制"><a href="#Java的异常机制" class="headerlink" title="Java的异常机制"></a>Java的异常机制</h2><p><strong>关于异常处理：</strong></p>
<p>在Java中，处理异常的语句由<strong>try、catch、finally</strong>三部分组成。其中，<strong>try块用于包裹业务代码，catch块用于捕获并处理某个类型的异常，finally块则用于回收资源</strong>。当业务代码发生异常时，系统会创建一个异常对象，然后由JVM寻找可以处理这个异常的catch块，并将异常对象交给这个catch块处理。若业务代码打开了某项资源，则可以在finally块中关闭这项资源，因为无论是否发生异常，finally块一定会执行。</p>
<p><strong>关于抛出异常：</strong></p>
<p>当程序出现错误时，系统会自动抛出异常。除此以外，Java也允许程序主动抛出异常。当业务代码中，判断某项错误的条件成立时，可以使用<strong>throw</strong>关键字向外抛出异常。在这种情况下，如果当前方法不知道该如何处理这个异常，可以在方法签名上通过<strong>throws</strong>关键字声明抛出异常，则该异常将交给JVM处理。</p>
<p><strong>关于异常跟踪栈：</strong></p>
<p>程序运行时，经常会发生一系列方法调用，从而形成方法调用栈。异常机制会导致异常在这些方法之间传播，而异常传播的顺序与方法的调用相反。异常从发生异常的方法向外传播，首先传给该方法的调用者，再传给上层调用者，以此类推。最终会传到main方法，若依然没有得到处理，则JVM会终止程序，并打印异常跟踪栈的信息</p>
<h2 id="Excption与Error"><a href="#Excption与Error" class="headerlink" title="Excption与Error"></a>Excption与Error</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907214913794.png" alt="image-20220907214913794"></p>
<p>在 Java 中，所有的异常都有一个共同的祖先 <code>java.lang</code> 包中的 <strong><code>Throwable</code></strong> <strong>类</strong>。<code>Throwable</code> 类有两个重要的子类:</p>
<ul>
<li><p><strong>Exception</strong>: 程序本身可以处理的异常，可以通过 catch来进行捕获。<strong>Exception</strong>又可以分为 <strong>Checked Exception (受检查异常，必须处理)**和 **Unchecked Exception (不受检查异常，可以不处理)。</strong></p>
<ul>
<li><p><strong>Unchecked Exception</strong>：</p>
<ul>
<li><p><strong>NullPointerException：空指针异常；</strong>  </p>
</li>
<li><p><strong>ArithmeticException：算数异常；</strong>  </p>
</li>
<li><p><strong>ArrayIndexOutOfBoundsException：数组下标越界异常；</strong>  </p>
</li>
<li><p><strong>ClassCastException：类型转换异常。</strong></p>
</li>
</ul>
</li>
<li><p><strong>Checked Exception</strong>：</p>
<ul>
<li><strong>IOException：IO 异常</strong></li>
<li><strong>SQLException：SQL 异常</strong></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Error</strong> ：Error属于程序无法处理的错误，我们没办法通过 <code>catch</code> 来进行捕获 。</p>
<ul>
<li><strong>Java 虚拟机运行错误（Virtual MachineError）</strong></li>
<li><strong>虚拟机内存不够错误(<code>OutOfMemoryError</code>)</strong></li>
<li><strong>类定义错误（NoClassDefFoundError）</strong> </li>
</ul>
</li>
</ul>
<h2 id="Throwable-类常用方法有哪些？"><a href="#Throwable-类常用方法有哪些？" class="headerlink" title="Throwable 类常用方法有哪些？"></a>Throwable 类常用方法有哪些？</h2><ul>
<li><code>String getMessage()</code>: 返回异常发生时的简要描述</li>
<li><code>String toString()</code>: 返回异常发生时的详细信息</li>
<li><code>String getLocalizedMessage()</code>: 返回异常对象的本地化信息。使用 <code>Throwable</code> 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 <code>getMessage()</code>返回的结果相同</li>
<li><code>void printStackTrace()</code>: 在控制台上打印 <code>Throwable</code> 对象封装的异常信息</li>
</ul>
<h2 id="说说你平时是怎么处理-Java-异常的？"><a href="#说说你平时是怎么处理-Java-异常的？" class="headerlink" title="说说你平时是怎么处理 Java 异常的？"></a><strong>说说你平时是怎么处理 Java 异常的？</strong></h2><p><strong>try-catch-finally</strong></p>
<ol>
<li><p><strong>捕获异常</strong></p>
<p>将业务代码包裹在try块内部，当业务代码中发生任何异常时，系统都会为此异常创建一个异常对象。创建异常对象之后，JVM会在try块之后寻找可以处理它的catch块，并将异常对象交给这个catch块处理。</p>
</li>
<li><p><strong>处理异常</strong></p>
<p>在catch块中处理异常时，应该先记录日志，便于以后追溯这个异常。然后根据异常的类型、结合当前的业务情况，进行相应的处理。比如，给变量赋予一个默认值、直接返回空值、向外抛出一个新的业务异常交给调用者处理，等等。</p>
</li>
<li><p><strong>回收资源</strong></p>
<p>如果业务代码打开了某个资源，比如数据库连接、网络连接、磁盘文件等，则需要在这段业务代码执行完毕后关闭这项资源。并且，无论是否发生异常，都要尝试关闭这项资源。将关闭资源的代码写在finally块内，可以满足这种需求，即无论是否发生异常，finally块内的代码总会被执行。</p>
</li>
</ol>
<p>其中 try 块是必须的， 阿里内部资料 catch 和 finally 至少存在一个标准异常处理流程</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907220715855.png" alt="image-20220907220715855"></p>
<p>抛出异常→捕获异常→捕获成功（当 catch 的异常类型与抛出的异常类型匹配时，捕获成功） →异常被处理，程序继续运行 抛出异常→捕获异常→捕获失败（当 catch 的异常类型与抛出异 常类型不匹配时，捕获失败）→异常未被处理，程序中断运行。</p>
<p>在开发过程中会使用到自定义异常，在通常情况下，程序很少会自己抛出异常，因为异常的类名通常也包含了该异常的有用信息，所以在选择抛出异常的时候，应该选择合适的异常类，从而可以明确地描述该异常情况，所以这时候往往都是自定义异常。 自定义异常通常是通过继承 java.lang.Exception 类，如果想自定义 Runtime 异常的话，可以继承 java.lang.RuntimeException类，实现一个无参构造和一个带字符串参数的有参构造方法。 在业务代码里，可以针对性的使用自定义异常。比如说：该用户不具备某某权限、余额不足等。</p>
<h2 id="try-catch-finally，try里有return，finally还执行么？"><a href="#try-catch-finally，try里有return，finally还执行么？" class="headerlink" title="try catch finally，try里有return，finally还执行么？"></a><strong>try catch finally，try里有return，finally还执行么？</strong></h2><p>执行，并且finally的执行早于try里面的return</p>
<p>结论：</p>
<ul>
<li>1、不管有木有出现异常，finally块中代码都会执行； </li>
<li>2、当try和catch中有return时，finally仍然会执行； </li>
<li>3、finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的 值保存起来，管finally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数 返回值是在finally执行前确定的； </li>
<li>4、finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。</li>
</ul>
<p><strong>注意事项</strong></p>
<p>如果在try块或catch块中使用 System.exit(1); 来退出虚拟机，则finally块将失去执行的机会。但是我们在实际的开发中，重来都不会这样做，所以尽管存在这种导致finally块无法执行的可能，也只是一种可能而已。</p>
<h2 id="如何使用-try-with-resources-代替try-catch-finally？"><a href="#如何使用-try-with-resources-代替try-catch-finally？" class="headerlink" title="如何使用 try-with-resources 代替try-catch-finally？"></a>如何使用 try-with-resources 代替try-catch-finally？</h2><p><strong>适用范围（资源的定义）：</strong> 任何实现 <code>java.lang.AutoCloseable</code>或者 <code>java.io.Closeable</code> 的对象</p>
<p><strong>关闭资源和 finally 块的执行顺序：</strong> 在 <code>try-with-resources</code> 语句中，任何 catch 或 finally 块在声明的资源关闭后运行</p>
<p>《Effective Java》中明确指出：</p>
<p>面对必须要关闭的资源，我们总是应该优先使用 <code>try-with-resources</code> 而不是<code>try-finally</code>。随之产生的代码更简短，更清晰，产生的异常对我们也更有用。<code>try-with-resources</code>语句让我们更容易编写必须要关闭的资源的代码，若采用<code>try-finally</code>则几乎做不到这点。 </p>
<p>Java 中类似于<code>InputStream</code>、<code>OutputStream</code> 、<code>Scanner</code> 、<code>PrintWriter</code>等的资源都需要我们调用<code>close()</code>方法来手动关闭，一般情况下我们都是通过<code>try-catch-finally</code>语句来实现这个需求，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取文本文件的内容</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    scanner = <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://read.txt&quot;</span>));</span><br><span class="line">    <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">        System.out.println(scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (scanner != <span class="literal">null</span>) &#123;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 Java 7 之后的 <code>try-with-resources</code> 语句改造上面的代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test.txt&quot;</span>))) &#123;</span><br><span class="line">    <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">        System.out.println(scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException fnfe) &#123;</span><br><span class="line">    fnfe.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然多个资源需要关闭的时候，使用 <code>try-with-resources</code> 实现起来也非常简单，如果你还是用<code>try-catch-finally</code>可能会带来很多问题。</p>
<p>通过使用分号分隔，可以在<code>try-with-resources</code>块中声明多个资源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">BufferedInputStream</span> <span class="variable">bin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test.txt&quot;</span>)));</span><br><span class="line">             <span class="type">BufferedOutputStream</span> <span class="variable">bout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;out.txt&quot;</span>)))) &#123;</span><br><span class="line">            <span class="type">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = bin.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bout.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a><strong>动态代理</strong></h1><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式是一种比较好理解的设计模式。简单来说就是 <strong>我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</strong></p>
<p><strong>代理模式的主要作用是</strong>扩展目标对象的功能<strong>，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</strong></p>
<p><strong>举个例子：你找了小红来帮你问话，小红就可以看作是代理你的代理对象，代理的行为（方法）是问话。</strong></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80/image-20220907221423842.png" alt="image-20220907221423842"></p>
<p>代理模式有静态代理和动态代理两种实现方式，我们 先来看一下静态代理模式的实现。</p>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p><strong>静态代理中，我们对目标对象的每个方法的增强都是手动完成的（*后面会具体演示代码*），非常不灵活（*比如接口一旦新增加方法，目标对象和代理对象都要进行修改*）且麻烦(*需要对每个目标类都单独写一个代理类*)。</strong> 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。</p>
<p>上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， <strong>静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。</strong></p>
<p><strong>静态代理实现步骤:</strong></p>
<ul>
<li><strong>定义一个接口及其实现类；</strong></li>
<li><strong>创建一个代理类同样实现这个接口</strong></li>
<li><strong>将目标对象注入进代理类，然后在代理类的对应方法调用目标类中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情。</strong></li>
</ul>
<p>下面通过代码展示！</p>
<p><strong>1.定义发送短信的接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    String <span class="title function_">send</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.实现发送短信的接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send message:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.创建代理类并同样实现发送短信的接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsProxy</span> <span class="keyword">implements</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SmsService smsService;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SmsProxy</span><span class="params">(SmsService smsService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.smsService = smsService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="comment">//调用方法之前，我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method send()&quot;</span>);</span><br><span class="line">        smsService.send(message);</span><br><span class="line">        <span class="comment">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method send()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.实际使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SmsService</span> <span class="variable">smsService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmsServiceImpl</span>();</span><br><span class="line">        <span class="type">SmsProxy</span> <span class="variable">smsProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmsProxy</span>(smsService);</span><br><span class="line">        smsProxy.send(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行上述代码之后，控制台打印出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">before method send()</span><br><span class="line">send message:java</span><br><span class="line">after method send()</span><br></pre></td></tr></table></figure>

<p>可以输出结果看出，我们已经增加了 <code>SmsServiceImpl</code> 的<code>send()</code>方法。</p>
<h2 id="动态代理-1"><a href="#动态代理-1" class="headerlink" title="动态代理"></a>动态代理</h2><p>相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类( <em>CGLIB 动态代理机制</em>)。</p>
<p><strong>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</strong></p>
<p><strong>说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。</strong></p>
<p><strong>动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。</strong></p>
<p><strong>就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。</strong></p>
<p>guide-rpc-framework<a href="https://github.com/Snailclimb/guide-rpc-framework"> </a> (opens new window) 使用的是 JDK 动态代理，我们先来看看 JDK 动态代理的使用。</p>
<p>另外，虽然 guide-rpc-framework<a href="https://github.com/Snailclimb/guide-rpc-framework"> </a> (opens new window) 没有用到 CGLIB 动态代理，我们这里还是简单介绍一下其使用以及和JDK 动态代理的对比。</p>
<h3 id="JDK-动态代理机制"><a href="#JDK-动态代理机制" class="headerlink" title="JDK 动态代理机制"></a>JDK 动态代理机制</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><strong>在 Java 动态代理机制中 <code>InvocationHandler</code> 接口和 <code>Proxy</code> 类是核心。</strong></p>
<p><code>Proxy</code> 类中使用频率最高的方法是：<code>newProxyInstance()</code> ，这个方法主要用来生成一个代理对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                      Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                      InvocationHandler h)</span></span><br><span class="line">    <span class="keyword">throws</span> IllegalArgumentException</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法一共有 3 个参数：</p>
<ul>
<li><strong>loader</strong> :类加载器，用于加载代理对象。</li>
<li><strong>interfaces</strong> : 被代理类实现的一些接口；</li>
<li><strong>h</strong> : 实现了 <code>InvocationHandler</code> 接口的对象；</li>
</ul>
<p><strong>要实现动态代理的话，还必须需要实现<code>InvocationHandler</code> 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现<code>InvocationHandler</code> 接口类的 <code>invoke</code> 方法来调用。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当你使用代理对象调用方法的时候实际会调用到这个方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**invoke()方法有下面三个参数： **</p>
<ul>
<li><p><strong>proxy:动态生成的代理类</strong> </p>
</li>
<li><p><strong>method : 与代理类对象调用的方法相对应</strong> </p>
</li>
<li><p><strong>args : 当前 method 方法的参数</strong></p>
</li>
</ul>
<p>也就是说：你通过<code>Proxy</code> 类的 <code>newProxyInstance()</code> 创建的代理对象在调用方法的时候，实际会调用到实现<code>InvocationHandler</code> 接口的类的 <code>invoke()</code>方法。你可以在 <code>invoke()</code> 方法中自定义处理逻辑，比如在方法执行前后做什么事情。 </p>
<h4 id="JDK-动态代理类使用步骤"><a href="#JDK-动态代理类使用步骤" class="headerlink" title="JDK 动态代理类使用步骤"></a>JDK 动态代理类使用步骤</h4><ul>
<li><strong>定义一个接口及其实现类；</strong></li>
<li><strong>自定义</strong> <strong><code>InvocationHandler</code></strong> <strong>并重写</strong><code>invoke</code><strong>方法，在</strong> <strong><code>invoke</code></strong> <strong>方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑；</strong></li>
<li><strong>通过</strong> <strong><code>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code></strong> <strong>方法创建代理对象；</strong></li>
</ul>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>这样说可能会有点空洞和难以理解，我上个例子，大家感受一下吧！</p>
<p><strong>1.定义发送短信的接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    String <span class="title function_">send</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.实现发送短信的接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send message:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.定义一个 JDK 动态代理类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shuang.kou</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2020年05月11日 11:23:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DebugInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理类中的真实对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DebugInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//调用方法之前，我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method &quot;</span> + method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        <span class="comment">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>invoke()</code> 方法: 当我们的动态代理对象调用原生方法的时候，最终实际上调用到的是 <code>invoke()</code> 方法，然后 <code>invoke()</code> 方法代替我们去调用了被代理对象的原生方法。</p>
<p><strong>4.获取代理对象的工厂类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(), <span class="comment">// 目标类的类加载</span></span><br><span class="line">                target.getClass().getInterfaces(),  <span class="comment">// 代理需要实现的接口，可指定多个</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DebugInvocationHandler</span>(target)   <span class="comment">// 代理对象对应的自定义 InvocationHandler</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getProxy()</code> ：主要通过<code>Proxy.newProxyInstance（）</code>方法获取某个类的代理对象</p>
<p><strong>5.实际使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SmsService</span> <span class="variable">smsService</span> <span class="operator">=</span> (SmsService) JdkProxyFactory.getProxy(<span class="keyword">new</span> <span class="title class_">SmsServiceImpl</span>());</span><br><span class="line">smsService.send(<span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>运行上述代码之后，控制台打印出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">before method send</span><br><span class="line">send message:java</span><br><span class="line">after method send</span><br></pre></td></tr></table></figure>

<h3 id="CGLIB-动态代理机制"><a href="#CGLIB-动态代理机制" class="headerlink" title="CGLIB 动态代理机制"></a>CGLIB 动态代理机制</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p><strong>JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。</strong></p>
<p><strong>为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。</strong></p>
<p>CGLIB<a href="https://github.com/cglib/cglib"> </a> (opens new window)(Code Generation Library)是一个基于ASM<a href="http://www.baeldung.com/java-asm"> </a> (opens new window)的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了CGLIB<a href="https://github.com/cglib/cglib"> </a> (opens new window)， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。</p>
<p><strong>在 CGLIB 动态代理机制中</strong> <code>MethodInterceptor</code> <strong>接口和</strong> <code>Enhancer</code> <strong>类是核心。</strong></p>
<p>你需要自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MethodInterceptor</span> <span class="keyword">extends</span> <span class="title class_">Callback</span>&#123;</span><br><span class="line">    <span class="comment">// 拦截被代理类中的方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, java.lang.reflect.Method method, Object[] args,MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>obj</strong> :被代理的对象（需要增强的对象）</li>
<li><strong>method</strong> :被拦截的方法（需要增强的方法）</li>
<li><strong>args</strong> :方法入参</li>
<li><strong>proxy</strong> :用于调用原始方法</li>
</ol>
<p>你可以通过 <code>Enhancer</code>类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 <code>MethodInterceptor</code> 中的 <code>intercept</code> 方法。</p>
<h4 id="CGLIB-动态代理类使用步骤"><a href="#CGLIB-动态代理类使用步骤" class="headerlink" title="CGLIB 动态代理类使用步骤"></a>CGLIB 动态代理类使用步骤</h4><ul>
<li><p><strong>定义一个类；</strong></p>
</li>
<li><p><strong>自定义</strong> <strong><code>MethodInterceptor</code></strong> <strong>并重写</strong> <strong><code>intercept</code></strong> <strong>方法，</strong><code>intercept</code> <strong>用于拦截增强被代理类的方法，和 JDK 动态代理中的</strong> <strong><code>invoke</code></strong> 方法类似；</p>
</li>
<li><p><strong>通过</strong> <strong><code>Enhancer</code></strong> <strong>类的</strong> **<code>create()</code>**创建代理类；</p>
</li>
</ul>
<h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><p>不同于 JDK 动态代理不需要额外的依赖。CGLIB<a href="https://github.com/cglib/cglib"> </a> (opens new window)(<em>Code Generation Library</em>) 实际是属于一个开源项目，如果你要使用它的话，需要手动添加相关依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>1.实现一个使用阿里云发送短信的类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> github.javaguide.dynamicProxy.cglibDynamicProxy;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliSmsService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send message:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.自定义 <code>MethodInterceptor</code>（方法拦截器）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义MethodInterceptor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DebugMethodInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o           代理对象（增强的对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method      被拦截的方法（需要增强的方法）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args        方法入参</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodProxy 用于调用原始方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//调用方法之前，我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method &quot;</span> + method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> methodProxy.invokeSuper(o, args);</span><br><span class="line">        <span class="comment">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.获取代理类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建动态代理增强类</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">// 设置类加载器</span></span><br><span class="line">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class="line">        <span class="comment">// 设置被代理类</span></span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        <span class="comment">// 设置方法拦截器</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">DebugMethodInterceptor</span>());</span><br><span class="line">        <span class="comment">// 创建代理类</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.实际使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AliSmsService</span> <span class="variable">aliSmsService</span> <span class="operator">=</span> (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class);</span><br><span class="line">aliSmsService.send(<span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>运行上述代码之后，控制台打印出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">before method send</span><br><span class="line">send message:java</span><br><span class="line">after method send</span><br></pre></td></tr></table></figure>

<h3 id="JDK-动态代理和-CGLIB-动态代理对比"><a href="#JDK-动态代理和-CGLIB-动态代理对比" class="headerlink" title="JDK 动态代理和 CGLIB 动态代理对比"></a>JDK 动态代理和 CGLIB 动态代理对比</h3><p><strong>JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类</strong>。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。</p>
<p>就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。</p>
<h2 id="静态代理和动态代理的对比"><a href="#静态代理和动态代理的对比" class="headerlink" title="静态代理和动态代理的对比"></a>静态代理和动态代理的对比</h2><p><strong>灵活性</strong> ：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！</p>
<p><strong>JVM 层面</strong> ：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>面试-Java并发编程</title>
    <url>/2022/09/02/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="使用多线程的意义"><a href="#使用多线程的意义" class="headerlink" title="使用多线程的意义"></a>使用多线程的意义</h2><p>先从总体上来说：</p>
<ul>
<li><p><strong>从计算机底层来说：</strong> 线程可以比作是轻量级的进程，是程序执行的最小单位,线程间的切换和调度的成本远远小于进程。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。</p>
</li>
<li><p><strong>从当代互联网发展趋势来说：</strong> 现在的系统动不动就要求百万级甚至千万级的并发量，而<strong>多线程并发编程</strong>正是开发高并发系统的基础，利用好多线程机制可以大大提高系统整体的并发能力以及性能。</p>
</li>
</ul>
<p>再深入到计算机底层来探讨：</p>
<ul>
<li><p><strong>单核时代</strong>： 在单核时代多线程主要是为了提高单进程利用 CPU 和 IO 系统的效率。 假设只运行了一个 Java 进程的情况，当我们请求 IO 的时候，如果 Java 进程中只有一个线程，此线程被 IO 阻塞则整个进程被阻塞。CPU 和 IO 设备只有一个在运行，那么可以简单地说系统整体效率只有 50%。当使用多线程的时候，一个线程被 IO 阻塞，其他线程还可以继续使用 CPU。从而提高了 Java 进程利用系统资源的整体效率。</p>
</li>
<li><p><strong>多核时代</strong>: 多核时代多线程主要是为了提高进程利用多核 CPU 的能力。举个例子：假如我们要计算一个复杂的任务，我们只用一个线程的话，不论系统有几个 CPU 核心，都只会有一个 CPU 核心被利用到。而创建多个线程，这些线程可以被映射到底层多个 CPU 上执行，在任务中的多个线程没有资源竞争的情况下，任务执行的效率会有显著性的提高，约等于（单核时执行时间/CPU 核心数）。</p>
</li>
</ul>
<h2 id="使用多线程带来的问题"><a href="#使用多线程带来的问题" class="headerlink" title="使用多线程带来的问题"></a>使用多线程带来的问题</h2><p>并发编程的目的就是为了能提高程序的执行效率提高程序运行速度，但是并发编程并不总是能提高程序运行速度的，而且并发编程可能会遇到很多问题，比如：<strong>内存泄漏、死锁、线程不安全</strong>等等。</p>
<h2 id="并行跟并发"><a href="#并行跟并发" class="headerlink" title="并行跟并发"></a>并行跟并发</h2><p>从操作系统的角度来看，线程是CPU分配的最小单位。</p>
<ul>
<li>并行就是同一时刻，两个线程都在执行。这就要求有两个CPU去分别执行两个线程。</li>
<li>并发就是同一时刻，只有一个执行，但是一个时间段内，两个线程都执行了。并发的实现依赖于CPU切换线程，因为切换的时间特别短，所以基本对于用户是无感知的。</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902114109343.png" alt="image-20220902114109343"></p>
<p>就好像我们去食堂打饭，并行就是我们在多个窗又排队，几个阿姨同时打菜；并发就是我们挤在一个窗又，阿姨给这个打一勺，又手忙脚乱地给那个打一勺。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902114143558.png" alt="image-20220902114143558"></p>
<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>要说线程，必须得先说说进程。</p>
<ul>
<li>进程：进程是代码在数据集合上的一次运行活动，是<strong>系统进行资源分配和调度的基本单位</strong>。</li>
<li>线程：线程是进程的一个执行路径，一个进程中至少有一个线程，进程中的多个线程共享进程的资源。</li>
</ul>
<p>操作系统在分配资源时是把资源分配给进程的， 但是 CPU 资源比较特殊，它是被分配到线程的，因为真正要占用CPU运行的是线程，所以也说线程是 CPU分配的基本单位。</p>
<p>比如在Java中，当我们启动 main 函数其实就启动了一个JVM进程，而 main 函数在的线程就是这个进程中的一个线程，也称主线程。</p>
<p>一个进程中有多个线程，多个线程共用进程的堆和方法区资源，但是每个线程有自己的程序计数器和栈。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902140118921.png"></p>
<h2 id="线程创建方式"><a href="#线程创建方式" class="headerlink" title="线程创建方式"></a>线程创建方式</h2><p>Java中创建线程主要有三种方式，分别为继承<strong>Thread</strong>类、实现<strong>Runnable</strong>接口、实现<strong>Callable</strong>接口。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902140459345.png"></p>
<ul>
<li><h3 id="继承Thread类，重写run-方法，调用start-方法启动线程"><a href="#继承Thread类，重写run-方法，调用start-方法启动线程" class="headerlink" title="继承Thread类，重写run()方法，调用start()方法启动线程"></a>继承Thread类，重写run()方法，调用start()方法启动线程</h3></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    继承Thread类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;This is child thread&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h3 id="实现-Runnable-接口，重写run-方法"><a href="#实现-Runnable-接口，重写run-方法" class="headerlink" title="实现 Runnable 接口，重写run()方法"></a>实现 Runnable 接口，重写run()方法</h3></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Runnable!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">RunnableTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableTask</span>();</span><br><span class="line">    	<span class="keyword">new</span> <span class="title class_">Thread</span>(task).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面两种都是没有返回值的，但是如果我们需要获取线程的执行结果，该怎么办呢？</p>
<ul>
<li><h3 id="实现Callable接又，重写call-方法，这种方式可以通过FutureTask获取任务执行的返回值"><a href="#实现Callable接又，重写call-方法，这种方式可以通过FutureTask获取任务执行的返回值" class="headerlink" title="实现Callable接又，重写call()方法，这种方式可以通过FutureTask获取任务执行的返回值"></a>实现Callable接又，重写call()方法，这种方式可以通过FutureTask获取任务执行的返回值</h3></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallerTask</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">&quot;Hello,i am running!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                <span class="comment">//创建异步任务</span></span><br><span class="line">                FutureTask&lt;String&gt; task=<span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;String&gt;(<span class="keyword">new</span> <span class="title class_">CallerTask</span>());</span><br><span class="line">                <span class="comment">//启动线程</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(task).start();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//等待执行完成，并获取返回结果</span></span><br><span class="line">                String result=task.get();</span><br><span class="line">                System.out.println(result);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么调用start-方法时会执行run-方法，那怎么不直接调用run-方法？"><a href="#为什么调用start-方法时会执行run-方法，那怎么不直接调用run-方法？" class="headerlink" title="为什么调用start()方法时会执行run()方法，那怎么不直接调用run()方法？"></a>为什么调用start()方法时会执行run()方法，那怎么不直接调用run()方法？</h3><p>JVM执行start方法，会先创建一条线程，由创建出来的新线程去执行thread的run方法，这才起到多线程的效果。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902141434005.png"></p>
<p><strong>为什么我们不能直接调用run()方法？</strong> 也很清楚， 如果直接调用Thread的run()方法，那么run方法还是运行在主线程中，相当于顺序执行，就起不到多线程的效果。</p>
<h2 id="线程的调度方法"><a href="#线程的调度方法" class="headerlink" title="线程的调度方法"></a>线程的调度方法</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902141608203.png" alt="image-20220902141608203"></p>
<h3 id="线程等待与通知"><a href="#线程等待与通知" class="headerlink" title="线程等待与通知"></a>线程等待与通知</h3><p>在Object类中有一些函数可以用于线程的等待与通知。</p>
<ul>
<li><p>**wait()**：当一个线程A调用一个共享变量的 wait()方法时， 线程A会被阻塞挂起， 发生下面几种情况才会返回 ：</p>
<ul>
<li><p>（ 1 ） 线程A调用了共享对象 notify()或者 notifyAll()方法；</p>
</li>
<li><p>（ 2 ）其他线程调用了线程A的 interrupt() 方法，线程A抛出InterruptedException异常返回。</p>
</li>
</ul>
</li>
<li><p><strong>wait(long timeout)</strong> ：这个方法相比 wait() 方法多了一个超时参数，它的不同之处在于，如果线程A调用共享对象的wait(long timeout)方法后，没有在指定的 timeout ms时间内被其它线程唤醒，那么这个方法还是会因为超时而返回。</p>
</li>
<li><p>**wait(long timeout, int nanos)**，其内部调用的是 wait(long timout）函数。</p>
</li>
</ul>
<p>上面是线程等待的方法，而唤醒线程主要是下面两个方法：</p>
<ul>
<li><strong>notify()</strong> : 一个线程A调用共享对象的 notify() 方法后，会唤醒一个在这个共享变量上调用wait 系列方法后被挂起的线程。 一个共享变量上可能会有多个线程在等待，具体唤醒哪个等待的线程是随机的。</li>
<li><strong>notifyAll()</strong> ：不同于在共享变量上调用 notify() 函数会唤醒被阻塞到该共享变量上的一个线程，notifyAll()方法则会唤醒所有在该共享变量上由于调用 wait 系列方法而被挂起的线程。</li>
</ul>
<p>Thread类也提供了一个方法用于等待的方法：</p>
<ul>
<li>**join()**：如果一个线程A执行了thread.join()语句，其含义是：当前线程A等待thread线程终止之后才从thread.join()返回。</li>
</ul>
<h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><ul>
<li><strong>sleep(long millis)</strong> :Thread类中的静态方法，当一个执行中的线程A调用了Thread 的sleep方法后，线程A会暂时让出指定时间的执行权，但是线程A所拥有的监视器资源，比如锁还是持有不让出的。指定的睡眠时间到了后该函数会正常返回，接着参与 CPU 的调度，获取到 CPU 资源后就可以继续运行。</li>
</ul>
<h3 id="让出优先权"><a href="#让出优先权" class="headerlink" title="让出优先权"></a>让出优先权</h3><ul>
<li><strong>yield()</strong> ：Thread类中的静态方法，当一个线程调用 yield 方法时，实际就是在暗示线程调度器当前线程请求让出自己的CPU ，但是线程调度器可以无条件忽略这个暗示。</li>
</ul>
<h3 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h3><p>Java 中的线程中断是一种线程间的协作模式，通过设置线程的中断标志并不能直接终止该线程的执行，而是被中断的线程根据中断状态自行处理。</p>
<ul>
<li><strong>void interrupt()</strong> ：中断线程，例如，当线程A运行时，线程B可以调用钱程interrupt() 方法来设置线程的中断标志为true 并立即返回。设置标志仅仅是设置标志, 线程A实际并没有被中断， 会继续往下执行。</li>
<li><strong>boolean isInterrupted() 方法</strong>： 检测当前线程是否被中断。</li>
<li><strong>boolean interrupted() 方法</strong>： 检测当前线程是否被中断，与 <strong>isInterrupted</strong> 不同的是，该方法如果发现当前线程被中断，则会清除中断标志。</li>
</ul>
<h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p>在Java中，线程共有六种状态：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902145605462.png" alt="image-20220902145605462"></p>
<p>线程在自身的生命周期中， 并不是固定地处于某个状态，而是随着代码的执行在不同的状态之间进行切换，Java线程状态变化如图示：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902160048587.png" alt="image-20220902160048587"></p>
<h2 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h2><p>使用多线程的目的是为了充分利用CPU，但是我们知道，并发其实是一个CPU来应付多个线程。<img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902160358011.png" alt="image-20220902160358011"></p>
<p>为了让用户感觉多个线程是在同时执行的， CPU 资源的分配采用了时间片轮转也就是给每个线程分配一个时间片，线程在时间片内占用 CPU 执行任务。当线程使用完时间片后，就会处于就绪状态并让出 CPU 让其他线程占用，这就是上下文切换。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902160517970.png" alt="image-20220902160517970"></p>
<h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><ul>
<li>Java中的线程分为两类，分别为 daemon 线程（守护线程）和 user 线程（用户线程）。</li>
<li>在JVM 启动时会调用 main 函数，main函数所在的钱程就是一个用户线程。其实在 JVM 内部同时还启动了很多守护线程， 比如垃圾回收线程。</li>
<li>那么守护线程和用户线程有什么区别呢？区别之一是当最后一个非守护线程束时， JVM会正常退出，而不管当前是否存在守护线程，也就是说守护线程是否结束并不影响 JVM退出。换而言之，只要有一个用户线程还没结束，正常情况下JVM就不会退出。</li>
</ul>
<h2 id="线程间通信方式"><a href="#线程间通信方式" class="headerlink" title="线程间通信方式"></a>线程间通信方式</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902160908374.png" alt="image-20220902160908374"></p>
<h3 id="volatile和synchronized关键字"><a href="#volatile和synchronized关键字" class="headerlink" title="volatile和synchronized关键字"></a>volatile和synchronized关键字</h3><ul>
<li><p>关键字volatile可以用来修饰字段（成员变量），就是告知程序任何对该变量的访问均需要从共享内存中获取，而对它的改变必须同步刷新回共享内存，它能保证所有线程对变量访问的可见性。</p>
</li>
<li><p>关键字synchronized可以修饰方法或者以同步块的形式来进行使用，它主要确保多个线程在同一个时刻，只能有一个线程处于方法或者同步块中，它保证了线程对变量访问的可见性和排他性。</p>
</li>
</ul>
<h3 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a><strong>等待/通知机制</strong></h3><ul>
<li>可以通过Java内置的等待/通知机制（wait()/notify()）实现一个线程修改一个对象的值，而另一个线程感知到了变化，然后进行相应的操作。</li>
</ul>
<h3 id="管道输入-输出流"><a href="#管道输入-输出流" class="headerlink" title="管道输入/输出流"></a><strong>管道输入/输出流</strong></h3><ul>
<li><p><strong>管道输入/输出流</strong>和<strong>普通的文件输入/输出流</strong>或者网络输入/输出流不同之处在于，它主要用于线程之间的数据传输，而传输的媒介为内存。</p>
</li>
<li><p>管道输入/输出流主要包括了如下 4 种具体实现：<strong>PipedOutputStream、PipedInputStream、PipedReader和PipedWriter</strong>，前两种面向字节，而后两种面向字符。</p>
</li>
</ul>
<h3 id="使用Thread-join"><a href="#使用Thread-join" class="headerlink" title="使用Thread.join()"></a>使用Thread.join()</h3><ul>
<li>如果一个线程A执行了<strong>thread.join()**语句，其含义是：当前线程A等待thread线程终止之后才从thread.join()返回。线程Thread除了提供join()方法之外，还提供了</strong>join(long millis)<strong>和</strong>join(long millis,int nanos)**两个具备超时特性的方法。</li>
</ul>
<h3 id="使用ThreadLocal"><a href="#使用ThreadLocal" class="headerlink" title="使用ThreadLocal"></a>使用ThreadLocal</h3><ul>
<li><p><strong>ThreadLocal</strong>，即线程变量，是一个以ThreadLocal对象为键、任意对象为值的存储结构。这个结构被附带在线程上，也就是说一个线程可以根据一个ThreadLocal对象查询到绑定在这个线程上的一个值。</p>
</li>
<li><p>可以通过set(T)方法来设置一个值，在当前线程下再通过get()方法获取到原先设置的值。</p>
</li>
</ul>
<h2 id="sleep-方法和-wait-方法区别和共同点"><a href="#sleep-方法和-wait-方法区别和共同点" class="headerlink" title="sleep() 方法和 wait() 方法区别和共同点"></a>sleep() 方法和 wait() 方法区别和共同点</h2><ul>
<li><p>两者最主要的区别在于：<strong>sleep() 方法没有释放锁，而 wait() 方法释放了锁</strong> 。</p>
</li>
<li><p>两者都可以<strong>暂停线程</strong>的执行。</p>
</li>
<li><p><strong>wait()</strong> 通常被用于线程间交互/通信，<strong>sleep()</strong> 通常被用于暂停执行。</p>
</li>
<li><p><strong>wait()</strong> 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 <strong>notify()</strong> 或者 <strong>notifyAll()</strong> 方法。<strong>sleep()</strong> 方法执行完成后，线程会自动苏醒。或者可以使用 <strong>wait(long timeout)</strong> 超时后线程会自动苏醒。</p>
</li>
</ul>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器主要有下面两个作用：</p>
<p>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。<br>在多线程的情况下，<strong>程序计数器用于记录当前线程执行的位置</strong>，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。<br>需要注意的是，如果执行的是 <strong>native</strong> 方法，那么程序计数器记录的是 <strong>undefined</strong> 地址，只有执行的是 Java 代码时程序计数器记录的才是下一条指令的地址。</p>
<p>所以，<strong>程序计数器私有主要是为了线程切换后能恢复到正确的执行位置</strong>。</p>
<h2 id="虚拟机栈和本地方法栈"><a href="#虚拟机栈和本地方法栈" class="headerlink" title="虚拟机栈和本地方法栈"></a>虚拟机栈和本地方法栈</h2><ul>
<li><strong>虚拟机栈：</strong> 每个 Java 方法在执行的同时会创建一个<strong>栈帧</strong>用于存储<strong>局部变量表、操作数栈、常量池</strong>引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。</li>
<li><strong>本地方法栈：</strong> 和虚拟机栈所发挥的作用非常相似，区别是： <strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</li>
</ul>
<p>所以，为了<strong>保证线程中的局部变量不被别的线程访问到</strong>，虚拟机栈和本地方法栈是<strong>线程私有的</strong>。</p>
<h2 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h2><h3 id="认识线程死锁"><a href="#认识线程死锁" class="headerlink" title="认识线程死锁"></a>认识线程死锁</h3><p>线程死锁描述的是这样一种情况：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。</p>
<p>如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2019-4%E6%AD%BB%E9%94%811.png" alt="线程死锁示意图 "></p>
<p>下面通过一个例子来说明线程死锁,代码模拟了上图的死锁的情况 (代码来源于《并发编程之美》)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">resource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//资源 1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">resource2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//资源 2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (resource1) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;get resource1&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;waiting get resource2&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resource2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;get resource2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (resource2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;get resource2&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;waiting get resource1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resource1) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;get resource1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Output</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread[线程 <span class="number">1</span>,<span class="number">5</span>,main]get resource1</span><br><span class="line">Thread[线程 <span class="number">2</span>,<span class="number">5</span>,main]get resource2</span><br><span class="line">Thread[线程 <span class="number">1</span>,<span class="number">5</span>,main]waiting get resource2</span><br><span class="line">Thread[线程 <span class="number">2</span>,<span class="number">5</span>,main]waiting get resource1</span><br></pre></td></tr></table></figure>

<p>线程 A 通过 <code>synchronized (resource1)</code> 获得 <code>resource1</code> 的监视器锁，然后通过<code>Thread.sleep(1000);</code>让线程 A 休眠 1s 为的是让线程 B 得到执行然后获取到 resource2 的监视器锁。线程 A 和线程 B 休眠结束了都开始企图请求获取对方的资源，然后这两个线程就会陷入互相等待的状态，这也就产生了死锁。</p>
<p>上面的例子符合产生死锁的四个必要条件：</p>
<ol>
<li>互斥条件：该资源任意一个时刻只由一个线程占用。</li>
<li>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</li>
<li>不剥夺条件:线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</li>
<li>循环等待条件:若干线程之间形成一种头尾相接的循环等待资源关系。</li>
</ol>
<h3 id="如何预防和避免线程死锁"><a href="#如何预防和避免线程死锁" class="headerlink" title="如何预防和避免线程死锁?"></a>如何预防和避免线程死锁?</h3><p><strong>如何预防死锁？</strong> 破坏死锁的产生的必要条件即可：</p>
<ol>
<li><strong>破坏请求与保持条件</strong> ：一次性申请所有的资源。</li>
<li><strong>破坏不剥夺条件</strong> ：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。</li>
<li><strong>破坏循环等待条件</strong> ：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。</li>
</ol>
<p><strong>如何避免死锁？</strong></p>
<p>避免死锁就是在资源分配时，借助于算法（比如银行家算法）对资源分配进行计算评估，使其进入安全状态。</p>
<blockquote>
<p><strong>安全状态</strong> 指的是系统能够按照某种线程推进顺序（P1、P2、P3…..Pn）来为每个线程分配所需资源，直到满足每个线程对资源的最大需求，使每个线程都可顺利完成。称 <code>&lt;P1、P2、P3.....Pn&gt;</code> 序列为安全序列。</p>
</blockquote>
<p>我们对线程 2 的代码修改成下面这样就不会产生死锁了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (resource1) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;get resource1&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;waiting get resource2&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resource2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;get resource2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 2&quot;</span>).start();</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread[线程 <span class="number">1</span>,<span class="number">5</span>,main]get resource1</span><br><span class="line">Thread[线程 <span class="number">1</span>,<span class="number">5</span>,main]waiting get resource2</span><br><span class="line">Thread[线程 <span class="number">1</span>,<span class="number">5</span>,main]get resource2</span><br><span class="line">Thread[线程 <span class="number">2</span>,<span class="number">5</span>,main]get resource1</span><br><span class="line">Thread[线程 <span class="number">2</span>,<span class="number">5</span>,main]waiting get resource2</span><br><span class="line">Thread[线程 <span class="number">2</span>,<span class="number">5</span>,main]get resource2</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>我们分析一下上面的代码为什么避免了死锁的发生?</p>
<p>线程 1 首先获得到 resource1 的监视器锁,这时候线程 2 就获取不到了。然后线程 1 再去获取 resource2 的监视器锁，可以获取到。然后线程 1 释放了对 resource1、resource2 的监视器锁的占用，线程 2 获取到就可以执行了。这样就破坏了破坏循环等待条件，因此避免了死锁。</p>
<h3 id="死锁排查"><a href="#死锁排查" class="headerlink" title="死锁排查"></a>死锁排查</h3><p>可以使用jk自带的命令行工具排查:</p>
<ul>
<li>使用<code>jps</code>查找运行的Java进程:<code>jps -l</code></li>
<li>使用<code>jstack</code>查看线程堆栈信息:<code>jstack -1 进程id</code></li>
</ul>
<p>基本就可以看到死锁的信息。</p>
<p>还可以利用图形化工具，比如<code>JConsole</code>。出现线程死锁以后，点击<code>JConsole</code>线程面板的检测到死锁按钮，将会看到线程的死锁信息。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918115033820.png" alt="image-20220918115033820"></p>
<h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><h2 id="ThreadLocal定义"><a href="#ThreadLocal定义" class="headerlink" title="ThreadLocal定义"></a>ThreadLocal定义</h2><p>ThreadLocal，也就是线程本地变量。如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的一个本地拷贝，多个线程操作这个变量的时候，实际是操作自己本地内存里面的变量，从而起到线程隔离的作用，避免了线程安全问题。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902163020732.png" alt="image-20220902163020732"></p>
<ul>
<li><p>创建</p>
<p>创建了一个<strong>ThreadLocal</strong>变量<strong>localVariable</strong>，任何一个线程都能并发访问<strong>localVariable</strong>。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个ThreadLocal变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; localVariable = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>写入</p>
<p>线程可以在任何地方使用<strong>localVariable</strong>，写入变量。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">localVariable.set(<span class="string">&quot;鄙人三某”);</span></span><br></pre></td></tr></table></figure>

<ul>
<li>读取<br>线程在任何地方读取的都是它写入的变量。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">localVariable.get();</span><br></pre></td></tr></table></figure>

<h2 id="ThreadLocal的实际使用场景"><a href="#ThreadLocal的实际使用场景" class="headerlink" title="ThreadLocal的实际使用场景"></a>ThreadLocal的实际使用场景</h2><p>有用到过的，用来做用户信息上下文的存储。</p>
<p>我们的系统应用是一个典型的MVC架构，登录后的用户每次访问接又，都会在请求头中携带</p>
<p>一个token，在控制层可以根据这个token，解析出用户的基本信息。那么问题来了，假如在服务层和持久层都要用到用户信息，比如rpc调用、更新用户获取等等，那应该怎么办呢？</p>
<p>一种办法是显式定义用户相关的参数，比如账号、用户名……这样一来，我们可能需要大面积地修改代码，多少有点瓜皮，那该怎么办呢？</p>
<p>这时候我们就可以用到ThreadLocal，在控制层拦截请求把用户信息存入ThreadLocal，这样我们在任何一个地方，都可以取ThreadLocal中存的用户数据。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902170811800.png" alt="image-20220902170811800"></p>
<p>很多其它场景的cookie、session等等数据隔离也都可以通过ThreadLocal去实现。</p>
<p>我们常用的数据库连接池也用到了ThreadLocal：</p>
<ul>
<li>数据库连接池的连接交给ThreadLoca进行管理，保证当前线程的操作都是同一个Connnection。</li>
</ul>
<h2 id="ThreadLocal的实现方式"><a href="#ThreadLocal的实现方式" class="headerlink" title="ThreadLocal的实现方式"></a>ThreadLocal的实现方式</h2><p>我们看一下ThreadLocal的set(T)方法，发现先获取到当前线程，再获取ThreadLocalMap，然后把元素存到这个map中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前线程</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="comment">//获取ThreadLocalMap</span></span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="comment">//讲当前元素存入map</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">    	map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    	createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ThreadLocal</strong>实现的秘密都在这个<strong>ThreadLocalMap</strong>了，Thread类中定义了一个类型为<strong>ThreadLocal.ThreadLocalMap</strong>的成员变量<strong>threadLocals</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//ThreadLocal.ThreadLocalMap是Thread的属性</span></span><br><span class="line">    ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">threadLocals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ThreadLocalMap既然被称为Map，那么毫无疑问它是&lt;key,value&gt;型的数据结构。我们都知道map的本质是一个个&lt;key,value&gt;形式的节点组成的数组，那ThreadLocalMap的节点是什么样的呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> <span class="keyword">extends</span> <span class="title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line">    <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">    Object value;</span><br><span class="line">    <span class="comment">//节点类</span></span><br><span class="line">    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">        <span class="comment">//key赋值</span></span><br><span class="line">        <span class="built_in">super</span>(k);</span><br><span class="line">        <span class="comment">//value赋值</span></span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的节点，key可以简单低视作ThreadLocal，value为代码中放入的值，当然实际上key并不是ThreadLocal本身，而是它的一个 <strong>弱引用</strong> ，可以看到Entry的key继承了 WeakReference（弱引用），再来看一下key怎么赋值的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">WeakReference</span><span class="params">(T referent)</span> &#123;</span><br><span class="line">	<span class="built_in">super</span>(referent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>key的赋值，使用的是WeakReference的赋值。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902173027266.png" alt="image-20220902173027266"></p>
<p>所以，怎么回答ThreadLocal原理？要答出这几个点：</p>
<ul>
<li>Thread类有一个类型为<strong>ThreadLocal.ThreadLocalMap</strong>的实例变量<strong>threadLocals</strong>，每个线程都有一个属于自己的<strong>ThreadLocalMap</strong>。</li>
<li><strong>ThreadLocalMap</strong>内部维护着Entry数组，每个Entry代表一个完整的对象，key是<strong>ThreadLocal的弱引用</strong>，value是<strong>ThreadLocal的泛型值</strong>。</li>
<li>每个线程在往<strong>ThreadLocal</strong>里设置值的时候，都是往自己的<strong>ThreadLocalMap</strong>里存，读也是以某个<strong>ThreadLocal</strong>作为引用，在自己的map里找对应的key，从而实现了线程隔离。</li>
<li>ThreadLocal本身不存储值，它只是作为一个<strong>key</strong>来让线程往<strong>ThreadLocalMap</strong>里存取值。</li>
</ul>
<h2 id="ThreadLocal的内存泄露问题"><a href="#ThreadLocal的内存泄露问题" class="headerlink" title="ThreadLocal的内存泄露问题"></a>ThreadLocal的内存泄露问题</h2><p>我们先来分析一下使用<strong>ThreadLocal</strong>时的内存，我们都知道，在<strong>JVM</strong>中，<strong>栈内存线程私有</strong>，存储了对象的引用，<strong>堆内存线程共享</strong>，存储了对象实例。</p>
<p>所以呢，栈中存储了ThreadLocal、Thread的引用，堆中存储了它们的具体实例。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902193325147.png" alt="image-20220902193325147"></p>
<p><strong>ThreadLocalMap</strong>中使用的 key 为 <strong>ThreadLocal</strong> 的弱引用。</p>
<p><em>“弱引用：只要垃圾回收机制一运行，不管JVM的内存空间是否充足，都会回收该对象占用的内存。”</em></p>
<p>那么现在问题就来了，弱引用很容易被回收，如果<strong>ThreadLocal（ThreadLocalMap的Key）</strong>被垃圾回收器回收了，但是<strong>ThreadLocalMap</strong>生命周期和<strong>Thread</strong>是一样的，它这时候如果不被回收，就会出现这种情况：<strong>ThreadLocalMap</strong>的<strong>key</strong>没了，<strong>value</strong>还在，这就会 <strong>造成了内存泄漏问题</strong> 。</p>
<h3 id="内存泄漏问题的解决"><a href="#内存泄漏问题的解决" class="headerlink" title="内存泄漏问题的解决"></a>内存泄漏问题的解决</h3><p>很简单，使用完<strong>ThreadLocal</strong>后，及时调用<strong>remove</strong>()方法释放内存空间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadLocal&lt;String&gt; localVariable = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    	localVariable.set(<span class="string">&quot;鄙人三某”);</span></span><br><span class="line"><span class="string">    	......</span></span><br><span class="line"><span class="string">    &#125; finally &#123;</span></span><br><span class="line"><span class="string">    	localVariable.remove();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>那为什么key还要设计成弱引用？</p>
<p>key设计成弱引用同样是为了防止内存泄漏。</p>
<p>假如key被设计成强引用，如果ThreadLocal Reference被销毁，此时它指向ThreadLoca的强引用就没有了，但是此时key还强引用指向ThreadLoca，就会导致ThreadLocal不能被回收，这时候就发生了内存泄漏的问题。</p>
<h2 id="ThreadLocalMap的结构"><a href="#ThreadLocalMap的结构" class="headerlink" title="ThreadLocalMap的结构"></a>ThreadLocalMap的结构</h2><p>ThreadLocalMap虽然被叫做Map，其实它是没有实现Map接又的，但是结构还是和HashMap比较类似的，主要关注的是两个要素：<strong>元素数组和散列方法。</strong></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902194739313.png" alt="image-20220902194739313"></p>
<p><strong>元素数组</strong></p>
<p>一个table数组，存储Entry类型的元素，Entry是ThreaLocal弱引用作为key，Object作为value的结构。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Entry[] table;</span><br></pre></td></tr></table></figure>

<p><strong>散列方法</strong></p>
<p>散列方法就是怎么把对应的key映射到table数组的相应下标，ThreadLocalMap用的是哈希取余法，取出key的threadLocalHashCode，然后和table数组长度减一&amp;运算（相当于取余）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> key.threadLocalHashCode &amp; (table.length - <span class="number">1</span> );</span><br></pre></td></tr></table></figure>

<p>这里的<strong>threadLocalHashCode</strong>计算有点东西，每创建一个<strong>ThreadLocal</strong>对象，它就会新增<strong>0x61c88647</strong>，这个值很特殊，它是 <strong>斐波那契数</strong> 也叫 <strong>黄金分割数</strong> 。hash增量为 这个数字，带来的好处就是 hash <strong>分布非常均匀</strong> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">HASH_INCREMENT</span> <span class="operator">=</span> <span class="number">0x61c88647</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nextHashCode</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ThreadLocalMap解决Hash冲突的方式"><a href="#ThreadLocalMap解决Hash冲突的方式" class="headerlink" title="ThreadLocalMap解决Hash冲突的方式"></a>ThreadLocalMap解决Hash冲突的方式</h2><p>我们可能都知道<strong>HashMap</strong>使用了链表来解决冲突，也就是所谓的链地址法。</p>
<p><strong>ThreadLocalMap</strong>没有使用链表，自然也不是用链地址法来解决冲突了，它用的是另外一种方式—— <strong>开放定址法</strong> 。开放定址法是什么意思呢？简单来说，就是这个坑被人占了，那就接着去找空着的坑。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902212750305.png" alt="image-20220902212750305"></p>
<p>如上图所示，如果我们插入一个value=27的数据，通过 hash计算后应该落入第 4 个槽位中，而槽位 4 已经有了 Entry数据，而且Entry数据的key和当前不相等。此时就会线性向后查找，一直找到 Entry为 null的槽位才会停止查找，把元素放到空的槽中。</p>
<p>在get的时候，也会根据ThreadLocal对象的hash值，定位到table中的位置，然后判断该槽位Entry对象中的key是否和get的key一致，如果不一致，就判断下一个位置。</p>
<h2 id="ThreadLocalMap扩容机制"><a href="#ThreadLocalMap扩容机制" class="headerlink" title="ThreadLocalMap扩容机制"></a>ThreadLocalMap扩容机制</h2><p>在<strong>ThreadLocalMap.set()**方法的最后，如果执行完启发式清理工作后，未清理到任何数据，且当前散列数组中</strong>Entry<strong>的数量已经达到了列表的扩容阈值</strong>(len*2/3)<strong>，就开始执行</strong>rehash()**逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">rehash();</span><br></pre></td></tr></table></figure>

<p>再着看<strong>rehash</strong>()具体实现：这里会先去清理过期的<strong>Entry</strong>，然后还要根据条件判断<strong>size &gt;=threshold - threshold / 4</strong> 也就是*<em>size &gt;= threshold</em> 3/4**来决定是否需要扩容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">    rehash();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//清理过期Entry</span></span><br><span class="line">        expungeStaleEntries();</span><br><span class="line">        <span class="comment">//扩容</span></span><br><span class="line">        <span class="keyword">if</span> (size &gt;= threshold - threshold / <span class="number">4</span> )</span><br><span class="line">        resize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清理过期Entry</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">expungeStaleEntries</span><span class="params">()</span> &#123;</span><br><span class="line">        Entry[] tab = table;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ; j &lt; len; j++) &#123;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> tab[j];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span> &amp;&amp; e.get() == <span class="literal">null</span>)</span><br><span class="line">        expungeStaleEntry(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着看看具体的<strong>resize</strong>()方法，扩容后的<strong>newTab</strong>的大小为老数组的两倍，然后遍历老的table数组，散列方法重新计算位置，开放地址解决冲突，然后放到新的newTab，遍历完成之后，<strong>oldTab</strong>中所有的<strong>entry</strong>数据都已经放入到<strong>newTab</strong>中了，然后table引用指向<strong>newTab</strong></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902213343066.png" alt="image-20220902213343066"></p>
<p>具体代码：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220902213432939.png" alt="image-20220902213432939"></p>
<h2 id="父子线程怎么共享数据"><a href="#父子线程怎么共享数据" class="headerlink" title="父子线程怎么共享数据"></a>父子线程怎么共享数据</h2><p>父线程能用ThreadLocal来给子线程传值吗？毫无疑问，不能。那该怎么办？</p>
<p>这时候可以用到另外一个类——<code>InheritableThreadLocal</code>。</p>
<p>使用起来很简单，在主线程的<code>InheritableThreadLocal</code>实例设置值，在子线程中就可以拿到了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritableThreadLocalTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadLocal</span> <span class="variable">threadLocal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InheritableThreadLocal</span>();</span><br><span class="line">            <span class="comment">// 主线程</span></span><br><span class="line">            threadLocal.set(<span class="string">&quot;不擅技术&quot;</span>);</span><br><span class="line">            <span class="comment">//子线程</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.run();</span><br><span class="line">            System.out.println(<span class="string">&quot;鄙人三某 ，&quot;</span> + threadLocal.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原理很简单，在Thread类里还有另外一个变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">inheritableThreadLocals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>在<strong>Thread.init</strong>的时候，如果父线程的<strong>inheritableThreadLocals</strong>不为空，就把它赋给当前线程（子线程）的<strong>inheritableThreadLocals</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class="literal">null</span>)</span><br><span class="line"><span class="built_in">this</span>.inheritableThreadLocals = ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span><br></pre></td></tr></table></figure>

<h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h1><h2 id="Java内存模型（JMM）"><a href="#Java内存模型（JMM）" class="headerlink" title="Java内存模型（JMM）"></a>Java内存模型（JMM）</h2><p>Java内存模型（<strong>Java Memory Model</strong>，JMM），是一种<strong>抽象的模型</strong>，被定义出来屏蔽各种硬件和操作系统的<strong>内存访问差异</strong>。</p>
<p>JMM定义了<strong>线程和主内存</strong>之间的抽象关系：线程之间的<strong>共享变量</strong>存储在主内存（<strong>Main Memory</strong>）中，每个线程都有一个私有的本地内存（<strong>Local Memory</strong>），本地内存中存储了该线程<strong>以读/写共享变量的副本</strong>。</p>
<p>Java内存模型的抽象图：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903114356751.png" alt="image-20220903114356751"></p>
<p>本地内存是JMM的 一个抽象概念，并不真实存在。它其实涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903114449779.png" alt="image-20220903114449779"></p>
<p>图里面的是一个<strong>双核 CPU 系统架构</strong> ，每个核有自己的<strong>控制器和运算器</strong>，其中控制器包含一组寄存器和操作控制器，运算器执行算术逻辅运算。每个核都有自己的<strong>一级缓存</strong>，在有些架构里面还有一个<strong>所有 CPU 共享的二级缓存</strong>。 那么 Java 内存模型里面的工作内存，就对应这里的 Ll 缓存或者 L2 缓存或者 CPU 寄存器。</p>
<h2 id="原子性、可见性、有序性"><a href="#原子性、可见性、有序性" class="headerlink" title="原子性、可见性、有序性"></a>原子性、可见性、有序性</h2><p>原子性、有序性、可见性是并发编程中非常重要的基础概念，JMM的很多技术都是围绕着这三大特性展开。</p>
<ul>
<li><strong>原子性</strong>：原子性指的是一个操作是不可分割、不可中断的，要么全部执行并且执行的过程不会被任何因素打断，要么就全不执行。</li>
<li><strong>可见性</strong>：可见性指的是一个线程修改了某一个共享变量的值时，其它线程能够立即知道这个修改。</li>
<li><strong>有序性</strong>：有序性指的是对于一个线程的执行代码，从前往后依次执行，单线程下可以认为程序是有序的，但是并发时有可能会发生指令重排。</li>
</ul>
<h3 id="分析下面几行代码的原子性？"><a href="#分析下面几行代码的原子性？" class="headerlink" title="分析下面几行代码的原子性？"></a>分析下面几行代码的原子性？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span> ;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">i++;</span><br><span class="line">i = i + <span class="number">1</span> ;</span><br></pre></td></tr></table></figure>

<ul>
<li>第 1 句是基本类型赋值，是原子性操作。</li>
<li>第 2 句先读i的值，再赋值到j，两步操作，不能保证原子性。</li>
<li>第 3 和第 4 句其实是等效的，先读取i的值，再+1，最后赋值到i，三步操作了，不能保证原子性。</li>
</ul>
<h3 id="原子性、可见性、有序性的实现原理"><a href="#原子性、可见性、有序性的实现原理" class="headerlink" title="原子性、可见性、有序性的实现原理"></a>原子性、可见性、有序性的实现原理</h3><ul>
<li><strong>原子性</strong>：JMM只能保证基本的原子性，如果要保证一个代码块的原子性，需要使用<strong>synchronized</strong> 。</li>
<li><strong>可见性</strong>：Java是利用<strong>volatile</strong> 关键字来保证可见性的，除此之外，<strong>final</strong> 和<strong>synchronized</strong> 也能保证可见性。</li>
<li><strong>有序性</strong>：<strong>synchronized</strong> 或者<strong>volatile</strong> 都可以保证多线程之间操作的有序性。</li>
</ul>
<h2 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h2><p>在执行程序时，为了提高性能，<strong>编译器和处理器</strong>常常会对指令做重排序。重排序分 3 种类型。</p>
<ol>
<li><p><strong>编译器优化的重排序</strong>。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</p>
</li>
<li><p><strong>指令级并行的重排序</strong>。现代处理器采用了指令级并行技术（Instruction-Level Parallelism，ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应 机器指令的执行顺序。</p>
</li>
<li><p><strong>内存系统的重排序</strong>。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</p>
</li>
</ol>
<p>从Java源代码到最终实际执行的指令序列，会分别经历下面 3 种重排序，如图：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903115952545.png" alt="image-20220903115952545"></p>
<p>我们比较熟悉的<strong>双重校验单例模式</strong>就是一个经典的指令重排的例子，<strong>Singleton instance=new Singleton()；</strong>对应的JVM指令分为三步：<strong>分配内存空间–&gt;初始化对象—&gt;对象指向分配的内存空间</strong>，但是经过了编译器的指令重排序，第二步和第三步就可能会重排序。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903133213700.png" alt="image-20220903133213700"></p>
<p>JMM属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。</p>
<h4 id="指令重排有限制吗？happens-before了解吗？"><a href="#指令重排有限制吗？happens-before了解吗？" class="headerlink" title="指令重排有限制吗？happens-before了解吗？"></a>指令重排有限制吗？happens-before了解吗？</h4><p>指令重排也是有一些限制的，有两个规则<strong>happens-before和as-if-serial</strong>来约束。</p>
<p><strong>happens-before</strong>的定义：</p>
<ul>
<li>如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。</li>
<li>两个操作之间存在happens-before关系，并不意味着Java平台的具体实现必须要按照happens-before关系指定的顺序来执行。如果重排序之后的执行结果，与按happens-before关系来执行的结果一致，那么这种重排序并不非法。</li>
</ul>
<p>happens-before和我们息息相关的有<strong>六大规则</strong>：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903133644636.png" alt="image-20220903133644636"></p>
<ul>
<li><strong>程序顺序规则</strong>：一个线程中的每个操作，happens-before于该线程中的任意后续操作。</li>
<li><strong>监视器锁规则</strong>：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li>
<li><strong>volatile变量规则</strong>：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li>
<li><strong>传递性</strong>：如果A happens-before B，且B happens-before C，那么A happens-before C。</li>
<li><strong>start()规则</strong>：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。</li>
<li><strong>join()规则</strong>：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。</li>
</ul>
<h4 id="as-if-serial又是什么？单线程的程序一定是顺序的吗"><a href="#as-if-serial又是什么？单线程的程序一定是顺序的吗" class="headerlink" title="as-if-serial又是什么？单线程的程序一定是顺序的吗"></a>as-if-serial又是什么？单线程的程序一定是顺序的吗</h4><p>as-if-serial语义的意思是：<strong>不管怎么重排序（编译器和处理器为了提高并行度）</strong>， <strong>单线程程序的执行结果不能被改变</strong> 。编译器、runtime和处理器都必须遵守as-if-serial语义。</p>
<p>为了遵守as-if-serial语义，编译器和处理器不会对存在数据依赖关系的操作做重排序，因为这种重排序会改变执行结果。但是，如果操作之间不存在数据依赖关系，这些操作就可能被编译器和处理器重排序。为了具体说明，请看下面计算圆面积的代码示例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="number">3.14</span>; <span class="comment">// A</span></span><br><span class="line"><span class="type">double</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">1.0</span>; <span class="comment">// B</span></span><br><span class="line"><span class="type">double</span> <span class="variable">area</span> <span class="operator">=</span> pi * r * r; <span class="comment">// C</span></span><br></pre></td></tr></table></figure>

<p>上面 3 个操作的数据依赖关系：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903134841710.png" alt="image-20220903134841710"></p>
<p>A和C之间存在数据依赖关系，同时B和C之间也存在数据依赖关系。因此在最终执行的指令序列中，C不能被重排序到A和B的前面（C排到A和B的前面，程序的结果将会被改变）。但A和B之间没有数据依赖关系，编译器和处理器可以重排序A和B之间的执行顺序。所以最终，程序可能会有两种执行顺序：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903134956909.png" alt="image-20220903134956909"></p>
<p>as-if-serial语义把单线程程序保护了起来，遵守as-if-serial语义的编译器、runtime和处理器共同编织了这么一个“楚门的世界”：单线程程序是按程序的“顺序”来执行的。as- if-serial语义使单线程情况下，我们不需要担心重排序的问题，可见性的问题。</p>
<h2 id="volatile实现原理"><a href="#volatile实现原理" class="headerlink" title="volatile实现原理"></a>volatile实现原理</h2><p>volatile有两个作用，保证 <strong>可见性</strong> 和 <strong>有序性</strong> 。</p>
<h3 id="volatile怎么保证可见性"><a href="#volatile怎么保证可见性" class="headerlink" title="volatile怎么保证可见性"></a>volatile怎么保证可见性</h3><p>相比synchronized的加锁方式来解决共享变量的内存可见性问题，volatile就是更轻量的选择，它没有上下文切换的额外开销成本。</p>
<p>volatile可以确保对某个变量的更新对其他线程马上可见，一个变量被声明为volatile 时，线程在写入变量时不会把值缓存在寄存器或者其他地方，而是会把值刷新回主内存 当其它线程读取该共享变量 ，会从主内存重新获取最新值，而不是使用当前线程的本地内存中的值。</p>
<p>例如，我们声明一个 volatile 变量 volatile int x = 0，线程A修改x=1，修改完之后就会把新的值刷新回主内存，线程B读取x的时候，就会清空本地内存变量，然后再从主内存获取最新值。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903135524735.png" alt="image-20220903135524735"></p>
<h3 id="volatile怎么保证有序性"><a href="#volatile怎么保证有序性" class="headerlink" title="volatile怎么保证有序性"></a>volatile怎么保证有序性</h3><p>重排序可以分为编译器重排序和处理器重排序，valatile保证有序性，就是通过分别限制这两种类型的重排序。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903140353177.png" alt="image-20220903140353177"></p>
<p>为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。</p>
<p><strong>1.</strong> 在每个volatile写操作的前面插入一个StoreStore 屏障<br><strong>2.</strong> 在每个volatile写操作的后面插入一个StoreLoad 屏障<br><strong>3.</strong> 在每个volatile读操作的后面插入一个LoadLoad 屏障<br><strong>4.</strong> 在每个volatile读操作的后面插入一个LoadStore 屏障</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903140503354.png" alt="image-20220903140503354"></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903140518029.png" alt="image-20220903140518029"></p>
<h3 id="双重校验锁实现对象单例（线程安全）"><a href="#双重校验锁实现对象单例（线程安全）" class="headerlink" title="双重校验锁实现对象单例（线程安全）"></a>双重校验锁实现对象单例（线程安全）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> Singleton <span class="title function_">getUniqueInstance</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//先判断对象是否已经实例过，没有实例化过才进入加锁代码</span></span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//类对象加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>uniqueInstance 采用 volatile 关键字修饰也是很有必要的， uniqueInstance = new Singleton(); 这段代码其实是分为三步执行：</p>
<ol>
<li>为 uniqueInstance 分配内存空间</li>
<li>初始化 uniqueInstance</li>
<li>将 uniqueInstance 指向分配的内存地址</li>
</ol>
<p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1-&gt;3-&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 <code>getUniqueInstance</code>() 后发现 <code>uniqueInstance</code> 不为空，因此返回 uniqueInstance，但此时 uniqueInstance 还未被初始化。</p>
<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="基于synchronized"><a href="#基于synchronized" class="headerlink" title="基于synchronized"></a>基于synchronized</h2><h3 id="synchronized的用法"><a href="#synchronized的用法" class="headerlink" title="synchronized的用法"></a>synchronized的用法</h3><p>synchronized经常用的，用来保证代码的原子性。</p>
<p>synchronized主要有三种用法：</p>
<ul>
<li><strong>修饰实例方法</strong>: 作用于当前<strong>对象实例</strong>加锁，进入同步代码前要获得 当前对象实例的锁</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//业务代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>修饰静态方法</strong> ：也就是给<strong>当前类加锁</strong>，会作用于类的所有对象实例 ，进入同步代码前要获得当前 class 的锁。因为静态成员不属于任何一个实例对象，是类成员（ static 表明这是该类的一个静态资源，不管 new 了多少个对象，只有一份）。如果一个线程 A 调用一个实例对象的非静态 synchronized 方法，而线程 B 需要调用这个实例对象所属类的静态 synchronized 方法，是允许的，不会发生互斥现象，因为访问静态synchronized 方法占用的锁是当前类的锁，而访问非静态 synchronized 方法占用的锁是当前实例对象锁。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">void</span> staic <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//业务代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>修饰代码块</strong> ：<strong>指定加锁对象，对给定对象/类加锁</strong>。 <strong>synchronized(this|object)</strong> 表示进入同步代码库前要获得给定对象的锁。 <strong>synchronized(类.class)</strong> 表示进入同步代码前要获得 当前<strong>class</strong> 的锁</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//业务代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="synchronized的实现原理"><a href="#synchronized的实现原理" class="headerlink" title="synchronized的实现原理"></a>synchronized的实现原理</h3><h3 id="synchronized的加锁方式"><a href="#synchronized的加锁方式" class="headerlink" title="synchronized的加锁方式"></a>synchronized的加锁方式</h3><p>我们使用synchronized的时候，发现不用自己去lock和unlock，是因为JVM帮我们把这个事情做了。</p>
<p><strong>1.</strong> <strong>synchronized修饰代码块时</strong>，JVM采用<strong>monitorenter、monitorexit</strong>两个指令来实现同步，monitorenter 指令指向同步代码块的开始位置， monitorexit 指令则指向同步代码块的结束位置。反编译一段synchronized修饰代码块代码，<strong>javap -c -s -v -l</strong><br><strong>SynchronizedDemo.class</strong>，可以看到相应的字节码指令。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903180902786.png" alt="image-20220903180902786"></p>
<p><strong>2.</strong> <strong>synchronized修饰同步方法时</strong>，JVM采用ACC_SYNCHRONIZED标记符来实现同步，这个标识指明了该方法是一个同步方法。<br>同样可以写段代码反编译看一下。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903181654514.png" alt="image-20220903181654514"></p>
<h3 id="synchronized锁住的是什么呢？"><a href="#synchronized锁住的是什么呢？" class="headerlink" title="synchronized锁住的是什么呢？"></a>synchronized锁住的是什么呢？</h3><p>monitorenter、monitorexit或者ACC_SYNCHRONIZED都是 <strong>基于Monitor实现</strong> 的。</p>
<p>实例对象结构里有对象头，对象头里面有一块结构叫Mark Word，Mark Word指针指向了<strong>monitor</strong> 。</p>
<p>所谓的Monitor其实是一种 <strong>同步工具</strong> ，也可以说是一种 <strong>同步机制</strong> 。在Java虚拟机（HotSpot）中，Monitor是由 <strong>ObjectMonitor实现</strong> 的，可以叫做内部锁，或者Monitor锁。</p>
<p>ObjectMonitor的工作原理：</p>
<ul>
<li>ObjectMonitor有两个队列：WaitSet、EntryList，用来保存ObjectWaiter 对象列表。</li>
<li>_owner，获取 Monitor 对象的线程进入 _owner 区时， _count + 1。如果线程调用了 wait()方法，此时会释放 Monitor 对象， _owner 恢复为空， _count - 1。同时该等待线程进入WaitSet 中，等待被唤醒。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMonitor() &#123;</span><br><span class="line">_header = NULL;</span><br><span class="line">_count = <span class="number">0</span> ; <span class="comment">// 记录线程获取锁的次数</span></span><br><span class="line">_waiters = <span class="number">0</span> ,</span><br><span class="line">_recursions = <span class="number">0</span> ; <span class="comment">//锁的重入次数</span></span><br><span class="line">_object = NULL;</span><br><span class="line">_owner = NULL; <span class="comment">// 指向持有ObjectMonitor对象的线程</span></span><br><span class="line">_WaitSet = NULL; <span class="comment">// 处于wait状态的线程，会被加入到_WaitSet</span></span><br><span class="line">_WaitSetLock = <span class="number">0</span> ;</span><br><span class="line">_Responsible = NULL ;</span><br><span class="line">_succ = NULL ;</span><br><span class="line">_cxq = NULL ;</span><br><span class="line">FreeNext = NULL ;</span><br><span class="line">_EntryList = NULL ; <span class="comment">// 处于等待锁block状态的线程，会被加入到该列表</span></span><br><span class="line">_SpinFreq = <span class="number">0</span> ;</span><br><span class="line">_SpinClock = <span class="number">0</span> ;</span><br><span class="line">OwnerIsThread = <span class="number">0</span> </span><br></pre></td></tr></table></figure>

<p>可以类比一个去医院就诊的例子[18]：</p>
<ul>
<li><p>首先，患者在 门诊大厅 前台或自助挂号机 进行挂号 ；</p>
</li>
<li><p>随后，挂号结束后患者找到对应的 诊室就诊 ：</p>
<ul>
<li>诊室每次只能有一个患者就诊；</li>
<li>如果此时诊室空闲，直接进入就诊；</li>
<li>如果此时诊室内有其它患者就诊，那么当前患者进入候诊室，等待叫号；</li>
</ul>
</li>
<li><p>就诊结束后， 走出就诊室 ，候诊室的 下一位候诊患者 进入就诊室。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903190305715.png" alt="image-20220903190305715"></p>
</li>
</ul>
<p>这个过程就和<strong>Monitor机制</strong>比较相似：</p>
<ul>
<li>门诊大厅：所有待进入的线程都必须先在入口Entry Set挂号才有资格；</li>
<li>就诊室：就诊室_Owner里里只能有一个线程就诊，就诊完线程就自行离开</li>
<li>候诊室：就诊室繁忙时，进入等待区（Wait Set），就诊室空闲的时候就从等待区（Wait Set）叫新的线程</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903190457240.png" alt="image-20220903190457240"></p>
<p>所以我们就知道了，同步是锁住的什么东西：</p>
<ul>
<li><strong>monitorenter</strong>，在判断拥有同步标识 <strong>ACC_SYNCHRONIZED</strong> 抢先进入此方法的线程会优先拥有 <strong>Monitor</strong> 的 <strong>owner</strong> ，此时计数器 +1。</li>
<li><strong>monitorexit</strong>，当执行完退出后，计数器 -1，归 0 后被其他进入的线程获得。</li>
</ul>
<h3 id="除了原子性，synchronized可见性，有序性，可重入性怎么实现？"><a href="#除了原子性，synchronized可见性，有序性，可重入性怎么实现？" class="headerlink" title="除了原子性，synchronized可见性，有序性，可重入性怎么实现？"></a>除了原子性，synchronized可见性，有序性，可重入性怎么实现？</h3><h3 id="synchronized怎么保证可见性？"><a href="#synchronized怎么保证可见性？" class="headerlink" title="synchronized怎么保证可见性？"></a>synchronized怎么保证可见性？</h3><ul>
<li>线程加锁前，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值。</li>
<li>线程加锁后，其它线程无法获取主内存中的共享变量。</li>
<li>线程解锁前，必须把共享变量的最新值刷新到主内存中。</li>
</ul>
<h3 id="synchronized怎么保证有序性？"><a href="#synchronized怎么保证有序性？" class="headerlink" title="synchronized怎么保证有序性？"></a>synchronized怎么保证有序性？</h3><ul>
<li>synchronized同步的代码块，具有排他性，一次只能被一个线程拥有，所以synchronized保证同一时刻，代码是单线程执行的。</li>
<li>因为as-if-serial语义的存在，单线程的程序能保证最终结果是有序的，但是不保证不会指令重排。</li>
<li>所以synchronized保证的有序是执行结果的有序性，而不是防止指令重排的有序性。</li>
</ul>
<h3 id="synchronized怎么实现可重入的呢？"><a href="#synchronized怎么实现可重入的呢？" class="headerlink" title="synchronized怎么实现可重入的呢？"></a>synchronized怎么实现可重入的呢？</h3><ul>
<li>synchronized 是可重入锁，也就是说，允许一个线程二次请求自己持有对象锁的临界资源，这种情况称为可重入锁。</li>
<li>synchronized 锁对象的时候有个计数器，他会记录下线程获取锁的次数，在执行完对应的代码、块之后，计数器就会-1，直到计数器清零，就释放锁了。</li>
<li>之所以，是可重入的。是因为 synchronized 锁对象有个计数器，会随着线程获取锁后 +1 计数，当线程执行完毕后 -1，直到清零释放锁。</li>
</ul>
<h3 id="锁升级？synchronized优化了解吗？"><a href="#锁升级？synchronized优化了解吗？" class="headerlink" title="锁升级？synchronized优化了解吗？"></a>锁升级？synchronized优化了解吗？</h3><p>了解锁升级，得先知道，不同锁的状态是什么样的。这个状态指的是什么呢？</p>
<p>Java对象头里，有一块结构，叫<strong>Mark Word</strong>标记字段，这块结构会随着锁的状态变化而变化。64 位虚拟机 Mark Word 是 64bit，我们来看看它的状态变化：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903215849935.png" alt="image-20220903215849935"></p>
<p>Mark Word存储对象自身的运行数据，如<strong>哈希码、GC分代年龄、锁状态标志、偏向时间戳（Epoch）</strong> 等。</p>
<h3 id="synchronized做了哪些优化？"><a href="#synchronized做了哪些优化？" class="headerlink" title="synchronized做了哪些优化？"></a>synchronized做了哪些优化？</h3><p>在JDK1.6之前，synchronized的实现直接调用ObjectMonitor的enter和exit，这种锁被称之为<strong>重量级锁</strong> 。从JDK6开始，HotSpot虚拟机开发团队对Java中的锁进行优化，如增加了适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁等优化策略，提升了synchronized的性能。</p>
<ul>
<li><strong>偏向锁</strong>：在无竞争的情况下，只是在Mark Word里存储当前线程指针，CAS操作都不做。</li>
<li><strong>轻量级锁</strong>：在没有多线程竞争时，相对重量级锁，减少操作系统互斥量带来的性能消耗。但是，如果存在锁竞争，除了互斥量本身开销，还额外有CAS操作的开销。</li>
<li><strong>自旋锁</strong>：减少不必要的CPU上下文切换。在轻量级锁升级为重量级锁时，就使用了自旋加锁的方式</li>
<li><strong>锁粗化</strong>：将多个连续的加锁、解锁操作连接在一起，扩展成一个范围更大的锁。</li>
<li><strong>锁消除</strong>：虚拟机即时编译器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。</li>
</ul>
<h3 id="锁升级的过程是什么样的？"><a href="#锁升级的过程是什么样的？" class="headerlink" title="锁升级的过程是什么样的？"></a>锁升级的过程是什么样的？</h3><p>锁升级方向：无锁–&gt;偏向锁—&gt; 轻量级锁—-&gt;重量级锁，这个方向基本上是不可逆的。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220903221140669.png" alt="image-20220903221140669"></p>
<p>我们看一下升级的过程：</p>
<p><strong>偏向锁：</strong></p>
<p><strong>偏向锁的获取：</strong></p>
<p><strong>1.</strong> 判断是否为可偏向状态–MarkWord中锁标志是否为‘01’，是否偏向锁是否为‘1’<br><strong>2.</strong> 如果是可偏向状态，则查看线程ID是否为当前线程，如果是，则进入步骤’5’，否则进入步骤‘3’<br><strong>3.</strong> 通过CAS操作竞争锁，如果竞争成功，则将MarkWord中线程ID设置为当前线程ID，然后执行‘5’；竞争失败，则执行‘4’<br><strong>4.</strong> CAS获取偏向锁失败表示有竞争。当达到safepoint时获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码块<br>**5. ** 执行同步代码</p>
<p><strong>偏向锁的撤销：</strong></p>
<ol>
<li> 偏向锁不会主动释放(撤销)，只有遇到其他线程竞争时才会执行撤销，由于撤销需要知道当前持有该偏向锁的线程栈状态，因此要等到<strong>safepoint</strong>时执行，此时持有该偏向锁的线程（T）有‘2’，‘3’两种情况；</li>
<li>撤销—-T线程已经退出同步代码块，或者已经不再存活，则直接撤销偏向锁，变成无锁状态—-该状态达到阈值 20 则执行批量重偏向</li>
<li>升级—-T线程还在同步代码块中，则将T线程的偏向锁升级为轻量级锁，当前线程执行轻量级锁状态下的锁获取步骤—-该状态达到阈值 40 则执行批量撤销</li>
</ol>
<p><strong>轻量级锁：</strong></p>
<p><strong>轻量级锁的获取：</strong></p>
<p><strong>1.</strong> 进行加锁操作时，jvm会判断是否已经时重量级锁，如果不是，则会在当前线程栈帧中划出一块空间，作为该锁的锁记录，并且将锁对象MarkWord复制到该锁记录中<br><strong>2.</strong> 复制成功之后，jvm使用CAS操作将对象头MarkWord更新为指向锁记录的指针，并将锁记录里的owner指针指向对象头的MarkWord。如果成功，则执行‘3’，否则执行‘4’<br><strong>3.</strong> 更新成功，则当前线程持有该对象锁，并且对象MarkWord锁标志设置为‘00’，即表示此对象处于轻量级锁状态<br><strong>4.</strong> 更新失败，jvm先检查对象MarkWord是否指向当前线程栈帧中的锁记录，如果是则执行‘5’，否则执行‘6’<br><strong>5.</strong> 表示锁重入；然后当前线程栈帧中增加一个锁记录第一部分（Displaced Mark Word）为null，并指向Mark Word的锁对象，起到一个重入计数器的作用。<br><strong>6.</strong> 表示该锁对象已经被其他线程抢占，则进行自旋等待（默认 10 次），等待次数达到阈值仍未获取到锁，则升级为重量级锁</p>
<p>大体上省简的升级过程：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220904142059373.png" alt="image-20220904142059373"></p>
<p>完整的升级过程：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220904142838070.png" alt="image-20220904142838070"></p>
<h3 id="说说synchronized和ReentrantLock的区别？"><a href="#说说synchronized和ReentrantLock的区别？" class="headerlink" title="说说synchronized和ReentrantLock的区别？"></a>说说synchronized和ReentrantLock的区别？</h3><p>可以从<strong>锁的实现、功能特点、性能</strong>等几个维度去回答这个问题：</p>
<ul>
<li><strong>锁的实现</strong>： synchronized是<strong>Java语言的关键字</strong>，基于<strong>JVM</strong>实现。而ReentrantLock是基于JDK的<strong>API层面</strong>实现的（一般是lock()和unlock()方法配合try/finally 语句块来完成。）</li>
<li><strong>性能</strong>： 在JDK1.6锁优化以前，synchronized的性能比ReenTrantLock差很多。但是JDK6开始，增加了适应性自旋、锁消除等，两者性能就差不多了。</li>
<li><strong>功能特点</strong>： ReentrantLock 比 synchronized 增加了一些高级功能，如等待可中断、可实现公平锁、可实现选择性通知。<ul>
<li>ReentrantLock提供了一种能够中断等待锁的线程的机制，通过lock.lockInterruptibly()来实现这个机制</li>
<li>ReentrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。</li>
<li>synchronized与wait()和notify()/notifyAll()方法结合实现等待/通知机制，ReentrantLock类借助Condition接又与newCondition()方法实现。</li>
<li>ReentrantLock需要手工声明来加锁和释放锁，一般跟finally配合释放锁。而synchronized不用手动释放锁。</li>
</ul>
</li>
</ul>
<p>下面的表格列出出了两种锁之间的区别：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220904163310518.png" alt="image-20220904163310518"></p>
<h2 id="基于AQS"><a href="#基于AQS" class="headerlink" title="基于AQS"></a>基于AQS</h2><h3 id="AQS了解多少？"><a href="#AQS了解多少？" class="headerlink" title="AQS了解多少？"></a>AQS了解多少？</h3><p>AbstractQueuedSynchronizer <strong>抽象同步队列</strong>，简称 AQS ，它是Java并发包的根基，并发包中的锁就是基于AQS实现的。</p>
<ul>
<li>AQS是基于一个<strong>FIFO的双向队列</strong>，其内部定义了一个节点类Node，Node 节点内部的SHARED 用来标记该线程是获取共享资源时被阻挂起后放入AQS 队列的， EXCLUSIVE用来标记线程是 取独占资源时被挂起后放入AQS 队列</li>
<li>AQS 使用一个 volatile 修饰的 int 类型的成员变量 state 来表示同步状态，修改同步状态成功即为获得锁，volatile 保证了变量在多线程之间的可见性，修改 State 值时通过 CAS 机制来保证修改的原子性</li>
<li>获取state的方式分为两种，独占方式和共享方式，一个线程使用独占方式获取了资源，其它线程就会在获取失败后被阻塞。一个线程使用共享方式获取了资源，另外一个线程还可以通过CAS的方式进行获取。</li>
<li>如果共享资源被占用，需要一定的阻塞等待唤醒机制来保证锁的分配，AQS 中会将竞争共享资源失败的线程添加到一个变体的 CLH 队列中。</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220904165058873.png" alt="image-20220904165058873"></p>
<p>先简单了解一下CLH：Craig、Landin and Hagersten 队列，是 <strong>单向链表实现的队列</strong> 。申请线程只在本地变量上自旋， <strong>它不断轮询前驱的状态</strong> ，如果发现 <strong>前驱节点释放了锁就结束自旋</strong></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220904165133380.png" alt="image-20220904165133380"></p>
<p>AQS 中的队列是 CLH 变体的虚拟双向队列，通过将每条请求共享资源的线程封装成一个节点来实现锁的分配：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220904165250668.png" alt="image-20220904165250668"></p>
<p>AQS 中的 CLH 变体等待队列拥有以下特性：</p>
<ul>
<li>AQS 中队列是个双向链表，也是 FIFO 先进先出的特性</li>
<li>通过 Head、Tail 头尾两个节点来组成队列结构，通过 volatile 修饰保证可见性</li>
<li>Head 指向节点为已获得锁的节点，是一个虚拟节点，节点本身不持有具体线程</li>
<li>获取不到同步状态，会将节点进行自旋获取锁，自旋一定次数失败后会将线程阻塞，相对于 CLH 队列性能较好</li>
</ul>
<h3 id="ReentrantLock实现原理？"><a href="#ReentrantLock实现原理？" class="headerlink" title="ReentrantLock实现原理？"></a>ReentrantLock实现原理？</h3><p>ReentrantLock 是可重入的独占锁，只能有一个线程可以获取该锁，其它获取该锁的线程会被阻塞而被放入该锁的阻塞队列里面。</p>
<p>看看ReentrantLock的加锁操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建非公平锁</span></span><br><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="comment">// 获取锁操作</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行代码逻辑</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 解锁操作</span></span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>new ReentrantLock()构造函数默认创建的是非公平锁 NonfairSync。</p>
<h3 id="公平锁-FairSync"><a href="#公平锁-FairSync" class="headerlink" title="公平锁 FairSync"></a>公平锁 FairSync</h3><ul>
<li>公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁</li>
<li>公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞,CPU 唤醒阻塞线程的开销比非公平锁大</li>
</ul>
<h3 id="非公平锁-NonfairSync"><a href="#非公平锁-NonfairSync" class="headerlink" title="非公平锁 NonfairSync"></a><strong>非公平锁 NonfairSync</strong></h3><ul>
<li>非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁</li>
<li>非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU 不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁</li>
</ul>
<p>默认创建的对象lock()的时候：</p>
<ul>
<li>如果锁当前没有被其它线程占用，并且当前线程之前没有获取过该锁，则当前线程会获取到该锁，然后设置当前锁的拥有者为当前线程，并设置 AQS 的状态值为 1 ，然后直接返回。</li>
<li>如果当前线程之前己经获取过该锁，则这次只是简单地把 AQS 的状态值加 1 后返回。如果该锁己经被其他线程持有，非公平锁会尝试去获取锁，获取失败的话，则调用该方法程会被放入 AQS 队列阻塞挂起。</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220904184232357.png"></p>
<h3 id="ReentrantLock怎么实现公平锁的？"><a href="#ReentrantLock怎么实现公平锁的？" class="headerlink" title="ReentrantLock怎么实现公平锁的？"></a>ReentrantLock怎么实现公平锁的？</h3><p>new ReentrantLock()构造函数默认创建的是非公平锁 NonfairSync</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">()</span> &#123;</span><br><span class="line">	sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时也可以在创建锁构造函数中传入具体参数创建公平锁 FairSync</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);</span><br><span class="line">--- ReentrantLock</span><br><span class="line"><span class="comment">// true 代表公平锁，false 代表非公平锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">(<span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">sync = fair? <span class="keyword">new</span> <span class="title class_">FairSync</span>() : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FairSync、NonfairSync 代表公平锁和非公平锁，两者都是 ReentrantLock 静态内部类，只不过实现不同锁语义。</p>
<p><strong>非公平锁和公平锁的两处不同：</strong></p>
<ul>
<li>非公平锁在调用 lock 后，首先就会调用 CAS 进行一次抢锁，如果这个时候恰巧锁没有被占用，那么直接就获取到锁返回了。</li>
<li>非公平锁在 CAS 失败后，和公平锁一样都会进入到 tryAcquire 方法，在 tryAcquire 方法中，如果发现锁这个时候被释放了（state == 0），非公平锁会直接 CAS 抢锁，但是公平锁会判断等待队列是否有线程处于等待状态，如果有则不去抢锁，乖乖排到后面。</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220904184726138.png" alt="image-20220904184726138"></p>
<p>相对来说，非公平锁会有更好的性能，因为它的吞吐量比较大。当然，非公平锁让获取锁的时间变得更加不确定，可能会导致在阻塞队列中的线程长期处于饥饿状态。</p>
<h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><h2 id="CAS的定义"><a href="#CAS的定义" class="headerlink" title="CAS的定义"></a>CAS的定义</h2><p>CAS叫做<strong>CompareAndSwap</strong>，<strong>比较并交换</strong>，主要是通过处理器的指令来保证操作的原子性的。</p>
<p>CAS 指令包含 3 个参数：<strong>共享变量的内存地址 A、预期的值 B 和共享变量的新值 C</strong>。只有当内存中地址 A 处的值等于 B 时，才能将内存中地址 A 处的值更新为新值 C。作为一条CPU 指令，CAS 指令本身是能够保证原子性的 。</p>
<h2 id="CAS-产生的问题"><a href="#CAS-产生的问题" class="headerlink" title="CAS 产生的问题"></a>CAS 产生的问题</h2><p>CAS的经典三大问题：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220904192625392.png" alt="image-20220904192625392"></p>
<h3 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h3><p>并发环境下，假设初始条件是A，去修改数据时，发现是A就会执行修改。但是看到的虽然是A，中间可能发生了A变B，B又变回A的情况。此时A已经非彼A，数据即使成功修改，也可能有问题。</p>
<h4 id="怎么解决ABA问题？"><a href="#怎么解决ABA问题？" class="headerlink" title="怎么解决ABA问题？"></a>怎么解决ABA问题？</h4><ul>
<li>加版本号</li>
</ul>
<p>每次修改变量，都在这个变量的版本号上加 1 ，这样，刚刚A-&gt;B-&gt;A，虽然A的值没变，但是它的版本号已经变了，再判断版本号就会发现此时的A已经被改过了。参考乐观锁的版本号，这种做法可以给数据带上了一种实效性的检验。</p>
<p>Java提供了AtomicStampReference类，它的compareAndSet方法首先检查当前的对象引用值是否等于预期引用，并且当前印戳（Stamp）标志是否等于预期标志，如果全部相等，则以原子方式将引用值和印戳标志的值更新为给定的更新值。</p>
<h3 id="循环性能开销"><a href="#循环性能开销" class="headerlink" title="循环性能开销"></a>循环性能开销</h3><p>自旋CAS，如果一直循环执行，一直不成功，会给CPU带来非常大的执行开销。</p>
<h4 id="怎么解决循环性能开销问题？"><a href="#怎么解决循环性能开销问题？" class="headerlink" title="怎么解决循环性能开销问题？"></a>怎么解决循环性能开销问题？</h4><p>在Java中，很多使用自旋CAS的地方，会有一个自旋次数的限制，超过一定次数，就停止自旋。</p>
<h3 id="只能保证一个变量的原子操作"><a href="#只能保证一个变量的原子操作" class="headerlink" title="只能保证一个变量的原子操作"></a><strong>只能保证一个变量的原子操作</strong></h3><p>CAS 保证的是对一个变量执行操作的原子性，如果对多个变量操作时，CAS 目前无法直接保证操作的原子性的。</p>
<h4 id="怎么解决只能保证一个变量的原子操作问题？"><a href="#怎么解决只能保证一个变量的原子操作问题？" class="headerlink" title="怎么解决只能保证一个变量的原子操作问题？"></a>怎么解决只能保证一个变量的原子操作问题？</h4><ul>
<li>可以考虑改用锁来保证操作的原子性</li>
<li>可以考虑合并多个变量，将多个变量封装成一个对象，通过AtomicReference来保证原子性。</li>
</ul>
<h2 id="Java有哪些保证原子性的方法？如何保证多线程下i-结果正确？"><a href="#Java有哪些保证原子性的方法？如何保证多线程下i-结果正确？" class="headerlink" title="Java有哪些保证原子性的方法？如何保证多线程下i++ 结果正确？"></a>Java有哪些保证原子性的方法？如何保证多线程下i++ 结果正确？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220904223156739.png"></p>
<ul>
<li>使用循环原子类，例如AtomicInteger，实现i++原子操作</li>
<li>使用juc包下的锁，如ReentrantLock ，对i++操作加锁lock.lock()来实现原子性</li>
<li>使用synchronized，对i++操作加锁</li>
</ul>
<h1 id="原子操作类"><a href="#原子操作类" class="headerlink" title="原子操作类"></a>原子操作类</h1><h2 id="原子操作类-1"><a href="#原子操作类-1" class="headerlink" title="原子操作类"></a>原子操作类</h2><p>当程序更新一个变量时，如果多线程同时更新这个变量，可能得到期望之外的值，比如变量i=1，A线程更新i+1，B线程也更新i+1，经过两个线程操作之后可能i不等于 3 ，而是等于 2 。因为A和B线程在更新变量i的时候拿到的i都是 1 ，这就是线程不安全的更新操作，一般我们会使用synchronized来解决这个问题，synchronized会保证多线程不会同时更新变量i。</p>
<p>其实除此之外，还有更轻量级的选择，Java从JDK 1.5开始提供了java.util.concurrent.atomic包，这个包中的原子操作类提供了一种用法简单、性能高效、线程安全地更新一个变量的方式。</p>
<p>因为变量的类型有很多种，所以在Atomic包里一共提供了 13 个类，属于 4 种类型的原子更新方式，分别是原子更新基本类型、原子更新数组、原子更新引用和原子更新属性（字段）。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220904223443822.png" alt="image-20220904223443822"></p>
<p>Atomic包里的类基本都是使用Unsafe实现的包装类。</p>
<p>使用原子的方式更新基本类型，Atomic包提供了以下 3 个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicBoolean：原子更新布尔类型。</span><br><span class="line">AtomicInteger：原子更新整型。</span><br><span class="line">AtomicLong：原子更新长整型。</span><br></pre></td></tr></table></figure>

<p>通过原子的方式更新数组里的某个元素，Atomic包提供了以下 4 个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicIntegerArray：原子更新整型数组里的元素。</span><br><span class="line">AtomicLongArray：原子更新长整型数组里的元素。</span><br><span class="line">AtomicReferenceArray：原子更新引用类型数组里的元素。</span><br><span class="line">AtomicIntegerArray类主要是提供原子的方式更新数组里的整型</span><br></pre></td></tr></table></figure>

<p>原子更新基本类型的AtomicInteger，只能更新一个变量，如果要原子更新多个变量，就需要使用这个原子更新引用类型提供的类。Atomic包提供了以下 3 个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicReference：原子更新引用类型。</span><br><span class="line">AtomicReferenceFieldUpdater：原子更新引用类型里的字段。</span><br><span class="line">AtomicMarkableReference：原子更新带有标记位的引用类型。可以原子更新一个布尔类型</span><br><span class="line">的标记位和引用类型。构造方法是AtomicMarkableReference（V initialRef，<span class="type">boolean</span></span><br><span class="line">initialMark）。</span><br></pre></td></tr></table></figure>

<p>如果需原子地更新某个类里的某个字段时，就需要使用原子更新字段类，Atomic包提供了以下 3 个类进行原子字段更新：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicIntegerFieldUpdater：原子更新整型的字段的更新器。</span><br><span class="line">AtomicLongFieldUpdater：原子更新长整型字段的更新器。</span><br><span class="line">AtomicStampedReference：原子更新带有版本号的引用类型。该类将整数值与引用关联起</span><br><span class="line">来，可用于原子的更新数据和数据的版本号，可以解决使用CAS进行原子更新时可能出现</span><br><span class="line">的 ABA问题。</span><br></pre></td></tr></table></figure>



<h2 id="AtomicInteger-的原理"><a href="#AtomicInteger-的原理" class="headerlink" title="AtomicInteger 的原理"></a>AtomicInteger 的原理</h2><p><strong>一句话概括： 使用CAS实现 。</strong></p>
<p>以AtomicInteger的添加方法为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, <span class="number">1</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过Unsafe类的实例来进行添加操作，来看看具体的CAS操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4)</span> &#123;</span><br><span class="line">    <span class="type">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">    	var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">&#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>compareAndSwapInt</code> 是一个<code>native</code>方法，基于<code>CAS</code>来操作 <code>int</code>类型变量。其它的原子操作类基本都是大同小异。</p>
<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="线程池的含义"><a href="#线程池的含义" class="headerlink" title="线程池的含义"></a>线程池的含义</h2><p>线程池:简单理解,它就是一个管理线程的池子。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918121651211.png" alt="image-20220918121651211"></p>
<ul>
<li><strong>它帮我们管理线程，避免增加创建线程和销毁线程的资源损耗</strong>。因为线程其实也是一个对象，创建一个对象，需要经过类加载过程，销毁一个对象，需要走GC垃圾回收流程，都是需要资源开销的。</li>
<li><strong>提高响应速度</strong>。如果任务到达了，相对于从线程池拿线程，里新去创建一余线住执门，速度肯定慢很多。</li>
<li><strong>重复利用</strong>。线程用完，再放回池子，可以达到重复利用的效果，节省资源。</li>
</ul>
<h2 id="线程池的实际应用场景"><a href="#线程池的实际应用场景" class="headerlink" title="线程池的实际应用场景"></a>线程池的实际应用场景</h2><p>之前我们有一个和第三方对接的需求，需要向第三方推送数据，引入了多线程来提升数据推送的效率，其中用到了线程池来管理线程。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918121920193.png" alt="image-20220918121920193"></p>
<p>主要代码如下：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918122012568.png" alt="image-20220918122012568"></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918122033551.png" alt="image-20220918122033551"></p>
<p>完整可运行代码地址: <a href="https://gitee.com/fighter3/thread-demo.git">https://gitee.com/fighter3/thread-demo.git</a></p>
<p>线程池的参数如下:</p>
<ul>
<li><code>corePoolSize</code>:线程核心参数选择了CPU数×2</li>
<li><code>maximumPoolSize</code>:最大线程数选择了和核心线程数相同</li>
<li><code>keepAliveTime</code>:非核心闲置线程存活时间直接置为0</li>
<li><code>unit</code>:非核心线程保持存活的时间选择了<code>TimeUnit.SECONDS</code>秒.</li>
<li><code>workQueue</code>:线程池等待队列，使用<code>LinkedBlockingQueue</code>阻塞队列</li>
</ul>
<p>同时还用了<code>synchronized</code>来加锁,保证数据不会被重复推送:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (PushProcessServiceImpl.class)&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>ps:这个例子只是简单地进行了数据推送，实际上还可以结合其他的业务，像什么数据清洗啊、数据统计啊，都可以套用。</p>
<h2 id="线程池的工作流程"><a href="#线程池的工作流程" class="headerlink" title="线程池的工作流程"></a>线程池的工作流程</h2><p>用一个通俗的比喻:</p>
<p>有一个营业厅，总共有六个窗口，现在开放了三个窗口，现在有三个窗口坐着三个营业员小姐姐在营业。<br>老三去办业务，可能会遇到什么情况呢?</p>
<p>1.老三发现有空间的在营业的窗口，直接去找小姐姐办理业务。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918135430290.png" alt="image-20220918135430290"></p>
<ol start="2">
<li>老三发现没有空闲的窗口，就在排队区排队等。</li>
</ol>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918135520635.png" alt="image-20220918135520635"></p>
<p>3.老三发现没有空闲的窗口，等待区也满了，蚌埠住了，经理一看，就让休息的小姐姐赶紧回来上班，等待区号靠前的赶紧去新窗口办，老三去排队区排队。小姐姐比较辛苦，假如一段时间发现他们可以不用接着营业，经理就让她们接着休息。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918142156123.png" alt="image-20220918142156123"></p>
<p>4．老三一看，六个窗口都满了，等待区也没位置了。老三急了，要闹，经理赶紧出来了，经理该怎么办呢?</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918142311472.png" alt="image-20220918142311472"></p>
<ul>
<li><p>1.我们银行系统已经瘫痪</p>
</li>
<li><p>2.谁叫你来办的你找谁去</p>
</li>
<li><p>3.看你比较急,去队里加个塞</p>
</li>
<li><p>4.今天没办法,不行你看改一天</p>
</li>
<li><p>上面的这个流程几乎就跟JDK线程池的人致流程类似，</p>
</li>
<li><p>营业中的3个窗口对应核心线程池数: <code>corePoolSize</code></p>
</li>
<li><p>总的营业窗口数6对应: <code>maximumPoolSize</code></p>
</li>
<li><p>打开的临时窗口在多少时问内无人办理则关闭对应: <code>unit</code></p>
</li>
<li><p>排队区就是等待队列: <code>workQueue</code></p>
</li>
<li><p>无法办理的时候银行给出的解决方法对应:<code>RejectedExecutionHandler</code></p>
</li>
<li><p><code>threadFactory</code>该参数在<code>JDK</code>中是线程工厂，用来创建线程对象，一般不会动。</p>
</li>
</ul>
<p>所以我们线程池的工作流程也比较好理解了:</p>
<ol>
<li><p>线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。</p>
</li>
<li><p>当调用<code>execute()</code>方法添加一个任务时，线程池会做如下判断:</p>
</li>
</ol>
<ul>
<li><p>如果正在运行的线程数量小于<code>corePoolSize</code>，那么马上创建线程运行这个任务;</p>
</li>
<li><p>如果正在运行的线程数量大于或等于<code>corePoolSize</code>，那么将这个任务放入队列;</p>
</li>
<li><p>如果这时候队列满了，而且正在运行的线程数量小于<code>maximumPoolSize</code>，那么还是要创建非核心线程立刻运行这个任务;</p>
</li>
<li><p>如果队列满了，而且正在运行的线程数量大于或等于<code>maximumPoolSize</code>，那么线程池会根据拒绝策略来对应处理。</p>
</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918142854632.png" alt="image-20220918142854632"></p>
<ol start="3">
<li>当一个线程完成任务时，它会从队列中取下一个任务来执行。</li>
<li>当一个线程无事可做，超过一定的时间<code>(keepAliveTime)</code>时，线程池会判断，如果当前运行的线程数大于<code>corePoolSize</code>,那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到<code>corePoolSize</code> 的大小。</li>
</ol>
<h2 id="线程池主要参数"><a href="#线程池主要参数" class="headerlink" title="线程池主要参数"></a>线程池主要参数</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918143618945.png" alt="image-20220918143618945"></p>
<p>线程池有七大参数，需要重点关注<br><code>corePoolSize</code>、<code>maximumPoolSize</code> 、<code>workQueue</code> 、<code>handler</code>这四个。</p>
<ol>
<li><p><strong>corePoolSize</strong><br>此值是用来初始化线程池中核心线程数，当线程池中线程池数&lt;<code>corePoolSize</code>时，系统默认是添加一个任务才创建一个线程池。当线程数= <code>corePoolSize</code>时，新任务会追加到<code>workQueue</code>中。</p>
</li>
<li><p><strong>maximumPoolSize</strong></p>
<p><code>maximumPoolSize</code>表示允许的**最大线程数=(非核心线程数+核心线程数)**，<br>当<code>BlockingQueue</code>也满了，但线程池中总线程数&lt;<code>maximumPoolSize</code>时候就会再次创建新的线程。</p>
</li>
<li><p><strong>keepAliveTime</strong><br>非核心线程=(<code>maximumPoolSize</code> - <code>corePoolSize</code> ) ,非核心线程闲置下来不干活最多存活时间。</p>
</li>
<li><p><strong>unit</strong><br> 线程池中非核心线程保持存活的时间的单位</p>
<p><code>TimeUnit.DAYS;天</code></p>
<p><code>TimeUnit.HOURS;小时</code></p>
<p><code>TimeUnit.MINUTES;分钟</code></p>
<p><code>TimeUnit.SECONDS;秒</code></p>
<p><code>TimeUnit.MILLISECONDS;毫秒</code></p>
<p><code>TimeUnit.MICROSECONDS;微秒</code></p>
<p><code>TimeUnit.NANOSECONDS;纳秒</code></p>
</li>
<li><p><strong>workQueue</strong><br>线程池等待队列，维护着等待执行的<code>Runnable</code>对象。当运行当线程数= <code>corePoolSize</code>时，新的任务会被添加到<code>workQueue</code>中，如果workQueue也满了则尝试用非核心线程执行任务，等待队列应该尽量用有界的。</p>
</li>
<li><p><strong>threadFactory</strong><br>创建一个新线程时使用的工厂，可以用来设定线程名、是否为<code>daemon</code>线程等等。</p>
</li>
<li><p><strong>handler</strong><br><code>corePoolSize</code> 、 <code>workQueue</code> 、<code>maximumPoolSize</code>都不可用的时候执行的饱和策略。</p>
</li>
</ol>
<h2 id="线程池的线程数的配置"><a href="#线程池的线程数的配置" class="headerlink" title="线程池的线程数的配置"></a>线程池的线程数的配置</h2><p>线程在Java中属于稀缺资源﹐线程池不是越大越好也不是越小越好。任务分为计算<strong>密集型、IO密集型、混合型</strong>。</p>
<ol>
<li>计算密集型:大部分都在用CPU跟内存，加密，逻辑操作业务处理等。</li>
<li>IO密集型:数据库链接，网络通讯传输等。</li>
</ol>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918152257483.png" alt="image-20220918152257483"></p>
<p>一般的经验，不同类型线程池的参数配置：</p>
<ol>
<li><strong>计算密集型</strong>一般推荐线程池不要过大，一般是<code>CPU数 + 1</code>，<code>+1</code>是因为可能存在页缺失(就是可能存在有些数据在硬盘中需要多来一个线程将数据读入内存)。如果线程池数太大，可能会频繁的 进行线程上下文切换跟任务调度。获得当前<code>CPU核心数</code>代码如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().availableProcessors();</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>IO密集型</strong>：线程数适当大一点，机器的<code>Cpu核心数*2</code>。</li>
<li><strong>混合型</strong>：可以考虑根绝情况将它拆分成<code>CPU密集型</code>和<code>IO密集型任务</code>，如果执行时间相差不大，拆分可以提升吞吐量，反之没有必要。</li>
</ol>
<p>当然，实际应用中没有固定的公式，需要结合测试和监控来进行调整。</p>
<h2 id="线程池的拒绝策略"><a href="#线程池的拒绝策略" class="headerlink" title="线程池的拒绝策略"></a>线程池的拒绝策略</h2><p>类比前面的例子，无法办理业务时的处理方式，帮助记忆:</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918144833661.png" alt="image-20220918144833661"></p>
<ul>
<li><strong>AbortPolicy</strong> :直接抛出异常，默认使用此策略. </li>
<li><strong>CallerRunsPolicy</strong>:用调用者所在的线程来执行任务</li>
<li><strong>DiscardOldestPolicy</strong>:丢弃阻塞队列里最老的任务，也就是队列里靠前的任务. </li>
<li><strong>DiscardPolicy</strong> :当前任务直接丢弃</li>
</ul>
<p>想实现自己的拒绝策略，实现<code>RejectedExecutionHandler</code>接口即可。</p>
<h2 id="线程池的工作队列"><a href="#线程池的工作队列" class="headerlink" title="线程池的工作队列"></a>线程池的工作队列</h2><p>常用的阻塞队列主要有以下几种:</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918145055227.png" alt="image-20220918145055227"></p>
<ul>
<li><code>ArrayBlockingQueue</code>: ArrayBlockingQueue(有界队列）是一个用数组实现的有界阻塞队列，按FIFO排序量。</li>
<li><code>LinkedBlockingQueue</code>: LinkedBlockingQueue(可设置容量队列）是基于链表结构的阻塞队列，按FIFO排序任务，容量可以选择进行设置，不设置的话，将是一个无边界的阻塞队列，最大长度为Integer.MAX_VALUE，吞吐量通常要高于ArrayBlockingQuene;newFixedThreadPool线程池使用了这个队列</li>
<li><code>DelayQueue</code>: DelayQueue(延迟队列）是一个任务定时周期的延迟执行的队列。根据指定的执行时间从小到大排序，否则根据插入到队列的先后排序。newScheduledThreadPool线程池使用了这个队列。</li>
<li><code>PriorityBlockingQueue</code>: PriorityBlockingQueue(优先级队列）是具有优先级的无界阻塞队列</li>
<li><code>SynchronousQueue</code>: SynchronousQueue(同步队列）是一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQuene，newCachedThreadPool线程池使用了这个队列。</li>
</ul>
<h2 id="线程池提交execute和submit"><a href="#线程池提交execute和submit" class="headerlink" title="线程池提交execute和submit"></a>线程池提交execute和submit</h2><p><strong>1.</strong> <code>execute</code>用于提交不需要返回值的任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">threadsPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>2.</strong> <code>submit()</code>方法用于提交需要返回值的任务。线程池会返回一个<code>future</code>类型的对象，通过这个<code>future</code>对象可以判断任务是否执行成功，并且可以通过<code>future</code>的<code>get()</code>方法来获取返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Future&lt;Object&gt; future = executor.submit(harReturnValuetask);</span><br><span class="line"><span class="keyword">try</span> &#123; <span class="type">Object</span> <span class="variable">s</span> <span class="operator">=</span> future.get(); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// 处理中断异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line"><span class="comment">// 处理无法执行任务异常</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭线程池 executor.shutdown();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程池的关闭"><a href="#线程池的关闭" class="headerlink" title="线程池的关闭"></a>线程池的关闭</h2><p>可以通过调用线程池的<code>shutdown</code> 或<code>shutdownNow</code>方法来关闭线程池。它们的原理是遍历线程池中的工作线程，然后逐个调用线程的<code>interrupt</code>方法来中断线程，所以无法响应中断的任务可能永远无法终止。</p>
<p><strong>shutdown()将线程池状态置为shutdown,并不会立即停止</strong>∶</p>
<ol>
<li>停止接收外部<code>submit</code>的任务</li>
<li>内部正在跑的任务和队列里等待的任务，会执行完</li>
<li>等到第二步完成后，才真正停止</li>
</ol>
<p><strong>shutdownNow()将线程池状态置为stop。一般会立即停止，事实上不一定</strong>:</p>
<ol>
<li>和<code>shutdown()</code>一样，先停止接收外部提交的任务</li>
<li>忽略队列里等待的任务</li>
<li>尝试将正在跑的任务interrupt中断</li>
<li>返回未执行的任务列表</li>
</ol>
<p><strong>shutdown和shutdownnow简单来说区别如下</strong>:</p>
<ul>
<li><code>shutdownNow()</code>能立即停止线程池，正在跑的和正在等待的任务都停下了。这样做立即生效，但是风险也比较大。</li>
<li><code>shutdown()</code>只是关闭了提交通道，用<code>submit()</code>是无效的;而内部的任务该怎么跑还是怎么跑，跑完再彻底停止线程池。</li>
</ul>
<h2 id="四种常见的线程池"><a href="#四种常见的线程池" class="headerlink" title="四种常见的线程池"></a>四种常见的线程池</h2><p>面试常问，主要有四种，都是通过工具类<code>Excutors</code>创建出来的，需要注意，阿里巴巴《Java开发手册》里禁止使用这种方式来创建线程池。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918160628630.png" alt="image-20220918160628630"></p>
<ul>
<li><strong>newFixedThreadPool(固定数目线程的线程池)</strong></li>
<li><strong>newCachedThreadPool (可缓存线程的线程池)</strong></li>
<li><strong>newSingleThreadExecutor(单线程的线程池)</strong></li>
<li><strong>newScheduledThreadPool(定时及周期执行的线程池)</strong></li>
</ul>
<h2 id="四种常见线程池的原理"><a href="#四种常见线程池的原理" class="headerlink" title="四种常见线程池的原理"></a>四种常见线程池的原理</h2><p>前三种线程池的构造直接调用<code>ThreadPoolExecutor</code>的构造方法</p>
<h3 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a><strong>newSingleThreadExecutor</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">(ThreadFactory threadFactory)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>( <span class="number">1</span> , <span class="number">1</span> ,<span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),threadFactory));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="线程池特点"><a href="#线程池特点" class="headerlink" title="线程池特点"></a>线程池特点</h5><ul>
<li>核心线程数为 1</li>
<li>最大线程数也为 1</li>
<li>阻塞队列是无界队列LinkedBlockingQueue，可能会导致OOM</li>
<li>keepAliveTime为 0</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918161137672.png" alt="image-20220918161137672"></p>
<h5 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h5><ul>
<li>提交任务</li>
<li>线程池是否有一条线程在，如果没有，新建线程执行任务</li>
<li>如果有，将任务加到阻塞队列</li>
<li>当前的唯一线程，从队列取任务，执行完一个，再继续取，一个线程执行任务。</li>
</ul>
<h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><p>适用于串行执行任务的场景，一个任务一个任务地执行。</p>
<h3 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a><strong>newFixedThreadPool</strong></h3><h4 id="线程池特点-1"><a href="#线程池特点-1" class="headerlink" title="线程池特点"></a>线程池特点</h4><ul>
<li>核心线程数和最大线程数大小一样</li>
<li>没有所谓的非空闲时间，即<code>keepAliveTime</code>为 0</li>
<li>阻塞队列为无界队列<code>LinkedBlockingQueue</code>，可能会导致<code>OOM</code></li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918161756915.png" alt="image-20220918161756915"></p>
<h4 id="工作流程-1"><a href="#工作流程-1" class="headerlink" title="工作流程"></a>工作流程</h4><ul>
<li>提交任务</li>
<li>如果线程数少于核心线程，创建核心线程执行任务</li>
<li>如果线程数等于核心线程，把任务添加到<code>LinkedBlockingQueue</code>阻塞队列</li>
<li>如果线程执行完任务，去阻塞队列取任务，继续执行。</li>
</ul>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p><code>FixedThreadPool</code> 适用于处理CPU密集型的任务，确保CPU在长期被工作线程使用的情况下，尽可能的少的分配线程，即适用执行长期的任务。</p>
<h3 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a><strong>newCachedThreadPool</strong></h3><h4 id="线程池特点-2"><a href="#线程池特点-2" class="headerlink" title="线程池特点"></a>线程池特点</h4><ul>
<li>核心线程数为 0</li>
<li>最大线程数为<code>Integer.MAX_VALUE</code>，即无限大，可能会因为无限创建线程，导致<code>OOM</code></li>
<li>阻塞队列是<code>SynchronousQueue</code></li>
<li>非核心线程空闲存活时间为 60 秒</li>
</ul>
<p>当提交任务的速度大于处理任务的速度时，每次提交一个任务，就必然会创建一个线程。极端情况下会创建过多的线程，耗尽 CPU 和内存资源。由于空闲 60 秒的线程会被终止，长时间保持空闲的 <code>CachedThreadPool</code> 不会占用任何资源。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918162414278.png" alt="image-20220918162414278"></p>
<h4 id="工作流程-2"><a href="#工作流程-2" class="headerlink" title="工作流程"></a>工作流程</h4><ul>
<li>提交任务</li>
<li>因为没有核心线程，所以任务直接加到<code>SynchronousQueue</code>队列。</li>
<li>判断是否有空闲线程，如果有，就去取出任务执行。</li>
<li>如果没有空闲线程，就新建一个线程执行。</li>
<li>执行完任务的线程，还可以存活 60 秒，如果在这期间，接到任务，可以继续活下去；否则，被销毁。</li>
</ul>
<h4 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h4><p>用于并发执行大量短期的小任务。</p>
<h3 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a><strong>newScheduledThreadPool</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ScheduledThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize)</span> &#123;</span><br><span class="line">	<span class="built_in">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span> , NANOSECONDS,</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">DelayedWorkQueue</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="线程池特点-3"><a href="#线程池特点-3" class="headerlink" title="线程池特点"></a>线程池特点</h4><ul>
<li>最大线程数为<code>Integer.MAX_VALUE</code>，也有<code>OOM</code>的风险</li>
<li>阻塞队列是<code>DelayedWorkQueue</code></li>
<li><code>keepAliveTime</code>为 0</li>
<li><code>scheduleAtFixedRate()</code> ：按某种速率周期执行</li>
<li><code>scheduleWithFixedDelay()</code>：在某个延迟后执行</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918162917701.png" alt="image-20220918162917701"></p>
<h4 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h4><ul>
<li>线程从<code>DelayQueue</code>中获取已到期的<code>ScheduledFutureTask（DelayQueue.take()）</code>。到期任务是指<code>ScheduledFutureTask</code>的<code>time</code>大于等于当前时间。</li>
<li>线程执行这个<code>ScheduledFutureTask</code>。</li>
<li>线程修改<code>ScheduledFutureTask</code>的<code>time</code>变量为下次将要被执行的时间。</li>
<li>线程把这个修改<code>time</code>之后的<code>ScheduledFutureTask</code>放回<code>DelayQueue</code>中（<code>DelayQueue.add()</code>）。</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918163436617.png" alt="image-20220918163436617"></p>
<h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><p>周期性执行任务的场景，需要限制线程数量的场景</p>
<blockquote>
<p>使用无界队列的线程池会导致什么问题吗？</p>
</blockquote>
<p>例如<code>newFixedThreadPool</code>使用了无界的阻塞队列<code>LinkedBlockingQueue</code>，如果线程获取一个任务后，任务的执行时间比较长，会导致队列的任务越积越多，导致机器内存使用不停飙升，最终导致<code>OOM</code>。</p>
<h2 id="线程的池异常处理"><a href="#线程的池异常处理" class="headerlink" title="线程的池异常处理"></a>线程的池异常处理</h2><p>在使用线程池处理任务的时候，任务代码可能抛出RuntimeException，抛出异常后，线程池可能捕获它，也可能创建一个新的线程来代替异常的线程，我们可能无法感知任务出现了异常，因此我们需要考虑线程池异常情况。</p>
<p>常见的异常处理方式:</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918184846167.png" alt="image-20220918184846167"></p>
<h2 id="线程池的状态"><a href="#线程池的状态" class="headerlink" title="线程池的状态"></a>线程池的状态</h2><p>线程池有这几个状态:<code>RUNNING</code>,<code>SHUTDOWN</code>,<code>STOP</code>,<code>TIDYING</code>,<code>TERMINATED</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程池状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RUNNING</span> <span class="operator">=</span> - <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHUTDOWN</span> <span class="operator">=</span> <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STOP</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIDYING</span> <span class="operator">=</span> <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TERMINATED</span> <span class="operator">=</span> <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br></pre></td></tr></table></figure>

<p>线程池各个状态切换图:</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918185038624.png" alt="image-20220918185038624"></p>
<p><strong>RUNNING</strong></p>
<ul>
<li>该状态的线程池会接收新任务，并处理阻塞队列中的任务;</li>
<li>调用线程池的shutdown()方法，可以切换到SHUTDOWN状态;</li>
<li>调用线程池的shutdownNow()方法，可以切换到STOP状态;</li>
</ul>
<p><strong>SHUTDOWN</strong></p>
<ul>
<li>该状态的线程池不会接收新任务，但会处理阻塞队列中的任务;</li>
<li>队列为空，并且线程池中执行的任务也为空.进入TIDYING状态;</li>
</ul>
<p><strong>STOP</strong></p>
<ul>
<li>该状态的线程不会接收新任务，也不会处理阻塞队列中的任务，而且会中断正在运行的任务;</li>
<li>线程池中执行的任务为空,进入<code>TIDYING</code>状态;</li>
</ul>
<p><strong>TIDYING</strong></p>
<ul>
<li>该状态表明所有的任务已经运行终止，记录的任务数量为0。</li>
<li><code>terminated()</code>执行完毕，进入<code>TERMINATED</code>状态</li>
</ul>
<p><strong>TERMINATED</strong></p>
<ul>
<li>该状态表示线程池彻底终止</li>
</ul>
<h2 id="线程池实现参数的动态修改"><a href="#线程池实现参数的动态修改" class="headerlink" title="线程池实现参数的动态修改"></a>线程池实现参数的动态修改</h2><p>线程池提供了几个setter方法来设置线程池的参数。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918191909826.png" alt="image-20220918191909826"></p>
<p>这里主要有两个思路:</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918191935001.png" alt="image-20220918191935001"></p>
<ul>
<li>在我们微服务的架构下，可以利用配置中心如Nacos、Apollo等等，也可以自己开发配置中心。业务服务读取线程池配置，获取相应的线程池实例来修改线程池的参数。</li>
<li>如果限制了配置中心的使用，也可以自己去扩展ThreadPoolExecutor ,重写方法，监听线程池参数变化,来动态修改线程池参数。</li>
</ul>
<h2 id="线程池调优"><a href="#线程池调优" class="headerlink" title="线程池调优"></a>线程池调优</h2><p>线程池配置没有固定的公式，通常事前会对线程池进行一定评估，常见的评估方案如下:</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918192126850.png" alt="image-20220918192126850"></p>
<p>上线之前也要进行充分的测试，上线之后要建立完善的线程池监控机制。<br>事中结合监控告警机制，分析线程池的问题，或者可优化点，结合线程池动态参数配置机制来调整配置。<br>事后要注意仔细观察，随时调整。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918192216120.png" alt="image-20220918192216120"></p>
<p>具体的调优案例可以查看参考[7]美团技术博客。</p>
<h2 id="单机线程池执行断电了应该怎么处理"><a href="#单机线程池执行断电了应该怎么处理" class="headerlink" title="单机线程池执行断电了应该怎么处理"></a>单机线程池执行断电了应该怎么处理</h2><p>我们可以对正在处理和阻塞队列的任务做事务管理或者对阻塞队列中的任务持久化处理，并且当断电或者系统崩溃，操作无法继续下去的时候，可以通过回溯日志的方式来撤销正在处理的已经执行成功的操作。然后重新执行整个阻塞队列。</p>
<p>也就是说，对阻塞队列持久化;正在处理任务事务控制;断电之后正在处理任务的回滚，通过日志恢复该次操作;服务器重启后阻塞队列中的数据再加载。</p>
<h2 id="Fork-Join框架"><a href="#Fork-Join框架" class="headerlink" title="Fork/Join框架"></a>Fork/Join框架</h2><p><code>Fork/Join</code>框架是<code>Java7</code>提供的一个用于并行执行任务的框架，是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。</p>
<p>要想掌握<code>Fork/Join</code>框架，首先需要理解两个点，<code>分而治之</code>和<code>工作窃取算法</code>。</p>
<p><strong>分而治之</strong></p>
<p><code>Fork/Join</code>框架的定义，其实就体现了分治思想:将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918205234717.png" alt="image-20220918205234717"></p>
<p><strong>工作窃取算法</strong></p>
<p>大任务拆成了若干个小任务，把这些小任务放到不同的队列里，各自创建单独线程来执行队列里的任务。</p>
<p>那么问题来了，有的线程干活块，有的线程干活慢。干完活的线程不能让它空下来，得让它去帮没干完活的线程干活。它去其它线程的队列里窃取一个任务来执行，这就是所谓的<code>工作窃取</code>。<br>工作窃取发生的时候，它们会访问同一个队列，为了减少窃取任务线程和被窃取任务线程之间的竞争，通常任务会使用双端队列，被窃取任务线程永远从双端队列的头部拿，而窃取任务的线程永远从双端队列的尾部拿任务执行。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918205449640.png" alt="image-20220918205449640"></p>
<p>看一个<code>Fork/Join</code>框架应用的例子，计算1~n之间的和:1+2+3+…+n</p>
<ul>
<li>设置一个分割阈值，任务大于阈值就拆分任务</li>
<li>任务有结果，所以需要继承<code>RecursiveTask</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountTask</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THRESHOLD</span> <span class="operator">=</span> <span class="number">16</span> ; <span class="comment">// 阈值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CountTask</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Integer <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    	<span class="comment">// 如果任务足够小就计算任务</span></span><br><span class="line">    	<span class="type">boolean</span> <span class="variable">canCompute</span> <span class="operator">=</span> (end - start) &lt;= THRESHOLD;</span><br><span class="line">    <span class="keyword">if</span> (canCompute) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果任务大于阈值，就分裂成两个子任务计算</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (start + end) / <span class="number">2</span> ;</span><br><span class="line">        <span class="type">CountTask</span> <span class="variable">leftTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountTask</span>(start, middle);</span><br><span class="line">        <span class="type">CountTask</span> <span class="variable">rightTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountTask</span>(middle + <span class="number">1</span> , end);</span><br><span class="line">        <span class="comment">// 执行子任务</span></span><br><span class="line">        leftTask.fork();</span><br><span class="line">        rightTask.fork(); <span class="comment">// 等待子任务执行完，并得到其结果</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftResult</span> <span class="operator">=</span> leftTask.join();</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightResult</span> <span class="operator">=</span> rightTask.join(); <span class="comment">// 合并子任务</span></span><br><span class="line">        sum = leftResult + rightResult;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">forkJoinPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>(); <span class="comment">// 生成一个计算任务，负责计算1+2+3+4</span></span><br><span class="line">        <span class="type">CountTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountTask</span>( <span class="number">1</span> , <span class="number">100</span> ); <span class="comment">// 执行一个任务</span></span><br><span class="line">        <span class="type">Future</span> <span class="variable">result</span> <span class="operator">=</span> forkJoinPool.submit(task);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	System.out.println(result.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ForkJoinTask</code>与一般<code>Task</code>的主要区别在于它需要实现<code>compute</code>方法，在这个方法里，首先需要判断任务是否足够小，如果足够小就直接执行任务。如果比较大，就必须分割成两个子任务，每个子任务在调用<code>fork</code>方法时，又会进<code>compute</code>方法，看看当前子任务是否需要继续分割成子任务，如果不需要继续分割，则执行当前子任务并返回结果。使用<code>join</code>方法会等待子任务执行完并得到其结果。</p>
<h1 id="并发工具类"><a href="#并发工具类" class="headerlink" title="并发工具类"></a>并发工具类</h1><h2 id="CountDownLatch-倒计数器"><a href="#CountDownLatch-倒计数器" class="headerlink" title="CountDownLatch(倒计数器)"></a>CountDownLatch(倒计数器)</h2><p><code>CountDownLatch</code>，倒计数器，有两个常见的应用场景[18]:</p>
<h3 id="场景1-协调子线程结束动作-等待所有手线程运行结束"><a href="#场景1-协调子线程结束动作-等待所有手线程运行结束" class="headerlink" title="场景1:协调子线程结束动作:等待所有手线程运行结束"></a>场景1:协调子线程结束动作:等待所有手线程运行结束</h3><p><code>CountDownLatch</code>允许一个或多个线程等待其他线程完成操作。<br>例如，我们很多人喜欢玩的王者荣耀，开黑的时候，得等所有人都上线之后，才能开打。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918215540646.png" alt="image-20220918215540646"></p>
<p>CountDownLatch模仿这个场景(参考[18]):</p>
<p>创建大乔、兰陵王、安其拉、哪吒和铠等五个玩家，主线程必须在他们都完成确认后，才可以继续运行。</p>
<p>在这段代码中，<code>new CountDownLatch(5)</code>用户创建初始的<code>latch</code>数量，各玩家通过<code>countDownLatch.countDown()</code>完成状态确认，主线程通过<code>countDownLatch.await()</code>等待。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>( <span class="number">5</span> );</span><br><span class="line">    Thread 大乔 = <span class="keyword">new</span> <span class="title class_">Thread</span>(countDownLatch::countDown);</span><br><span class="line">    Thread 兰陵王 = <span class="keyword">new</span> <span class="title class_">Thread</span>(countDownLatch::countDown);</span><br><span class="line">    Thread 安其拉 = <span class="keyword">new</span> <span class="title class_">Thread</span>(countDownLatch::countDown);</span><br><span class="line">    Thread 哪吒 = <span class="keyword">new</span> <span class="title class_">Thread</span>(countDownLatch::countDown);</span><br><span class="line">    Thread 铠 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 稍等，上个卫生间，⻢上到...</span></span><br><span class="line">    Thread.sleep( <span class="number">1500</span> );</span><br><span class="line">    	countDownLatch.countDown();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">        大乔.start();</span><br><span class="line">        兰陵王.start();</span><br><span class="line">        安其拉.start();</span><br><span class="line">        哪吒.start();</span><br><span class="line">        铠.start();</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">    	System.out.println(<span class="string">&quot;所有玩家已经就位！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="场景2-协调子线程开始动作-统一各线程动作开始的时机"><a href="#场景2-协调子线程开始动作-统一各线程动作开始的时机" class="headerlink" title="场景2.协调子线程开始动作:统一各线程动作开始的时机"></a>场景2.协调子线程开始动作:统一各线程动作开始的时机</h3><p>王者游戏中也有类似的场景，游戏开始时，各玩家的初始状态必须一致。不能有的玩家都出完装了，有的才降生。</p>
<p>所以大家得一块出生，在这个场景中，仍然用五个线程代表大乔、兰陵王、安其拉、哪吒和铠等五个玩家。需要注意的是，各玩家虽然都调用了start()线程，但是它们在运行时都在等待countDownLatch的信号，在信号未收到前，它们不会往下执行。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220918220618330.png" alt="image-20220918220618330"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>( <span class="number">1</span> );</span><br><span class="line">    Thread 大乔 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; waitToFight(countDownLatch));</span><br><span class="line">    Thread 兰陵王 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; waitToFight(countDownLatch));</span><br><span class="line">    Thread 安其拉 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; waitToFight(countDownLatch));</span><br><span class="line">    Thread 哪吒 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; waitToFight(countDownLatch));</span><br><span class="line">    Thread 铠 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; waitToFight(countDownLatch));</span><br><span class="line">    大乔.start();</span><br><span class="line">    兰陵王.start();</span><br><span class="line">    安其拉.start();</span><br><span class="line">    哪吒.start();</span><br><span class="line">    铠.start();</span><br><span class="line">	Thread.sleep( <span class="number">1000</span> );</span><br><span class="line">	countDownLatch.countDown();</span><br><span class="line">	System.out.println(<span class="string">&quot;敌方还有 5 秒达到战场，全军出击！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">waitToFight</span><span class="params">(CountDownLatch countDownLatch)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    	countDownLatch.await(); <span class="comment">// 在此等待信号再继续</span></span><br><span class="line">    	System.out.println(<span class="string">&quot;收到，发起进攻！&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    	e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>CountDownLatch</code>的 <strong>核心方法</strong> 也不多：</p>
<ul>
<li><code>await()</code> ：等待<code>latch</code>降为 0 ；</li>
<li><code>boolean await(long timeout, TimeUnit unit)</code> ：等待<code>latch</code>降为 0 ，但是可以设置超时时间。比如有玩家超时未确认，那就重新匹配，总不能为了某个玩家等到天荒地老。</li>
<li><code>countDown()</code> ：<code>latch</code>数量减 1 ；</li>
<li><code>getCount()</code> ：获取当前的<code>latch</code>数量。</li>
</ul>
<h2 id="CyclicBarrier-同步屏障"><a href="#CyclicBarrier-同步屏障" class="headerlink" title="CyclicBarrier(同步屏障)"></a>CyclicBarrier(同步屏障)</h2><p><code>CyclicBarrier</code>的字面意思是可循环使用<code>(Cyclic</code>）的屏障<code>(Barrier)</code>。它要做的事情是，让组线程到达一个屏障（也可以叫<code>同步点</code>)时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。<br>它和<code>CountDownLatch</code>类似，都可以协调多线程的结束动作，在它们结束后都可以执行特定动作，但是为什么要有<code>CyclicBarrier</code>，自然是它有和<code>CountDownLatch</code>不同的地方。<br>不知道你听没听过一个新人UP主小约翰可汗，小约翰生平有两大恨――“想结衣结衣不依.迷爱理爱理不理。”我们来还原一下事情的经过:小约翰在亲政后认识了新垣结衣，于是决定第一次选妃，向结衣表白，等待回应。然而新垣结衣回应嫁给了星野源，小约翰伤心欲绝，发<br>誓生平不娶，突然发现了铃木爱理，于是小约翰决定第二次选妃，求爱理搭理，等待回应。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220920095255427.png" alt="image-20220920095255427"></p>
<p>我们拿代码模拟这一场景，发现<code>CountDownLatch</code>无能为力了，因为<code>CountDownLatch</code>的使用是一次性的，无法重复利用，而这里等待了两次。此时，我们用<code>CyclicBarrier</code>就可以实现，因为它可以重复利用。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220920095502269.png" alt="image-20220920095502269"></p>
<p>运行结果:</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220920131528319.png" alt="image-20220920131528319"></p>
<p><code>CyclicBarrier</code>最最核心的方法，仍然是<code>await()</code> :</p>
<p>如果当前线程不是第一个到达屏障的话，它将会进入等待，直到其他线程都到达，除非发生被中断、屏障被拆除、屏障被重设等情况;<br>上面的例子抽象一下，本质上它的流程就是这样就是这样:</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220920131709222.png" alt="image-20220920131709222"></p>
<h2 id="CyclicBarrier和CountDownLatch有什么区别"><a href="#CyclicBarrier和CountDownLatch有什么区别" class="headerlink" title="CyclicBarrier和CountDownLatch有什么区别"></a>CyclicBarrier和CountDownLatch有什么区别</h2><p>两者最核心的区别:</p>
<ul>
<li><code>CountDownLatch</code>是一次性的，而<code>CyclicBarrier</code>则可以多次设置屏障,实现重复利用;</li>
<li><code>CountDownLatch</code>中的各个子线程不可以等待其他线程，只能完成自己的任务;而CyclicBarrier中的各个线程可以等待其他线程</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220920131947647.png" alt="image-20220920131947647"></p>
<h2 id="Semaphore-信号量"><a href="#Semaphore-信号量" class="headerlink" title="Semaphore(信号量)"></a>Semaphore(信号量)</h2><p><code>Semaphore(信号量)</code>是用来控制同时访问特定资源的线程数量，它通过协调各个线程，以保证合理的使用公共资源。<br>听起来似乎很抽象，现在汽车多了，开车出门在外的一个老大难问题就是停车。停车场的车位是有限的，只能允许若干车辆停泊，如果停车场还有空位，那么显示牌显示的就是绿灯和剩余的车位，车辆就可以驶入;如果停车场没位了，那么显示牌显示的就是绿灯和数字0，车辆就得等待。如果满了的停车场有车离开，那么显示牌就又变绿,显示空车位数量，等待的车辆就能进停车场。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220920132118614.png" alt="image-20220920132118614"></p>
<p>我们把这个例子类比一下，车辆就是线程，进入停车场就是线程在执行，离开停车场就是线程执行完毕，看见红灯就表示线程被阻塞，不能执行，<code>Semaphore</code>的本质就是<code>协调多个线程对共享资源的获取</code>。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220920132354314.png" alt="image-20220920132354314"></p>
<p>我们再来看一个<code>Semaphore的</code>用途:它可以用于做流量控制，特别是公用资源有限的应用场景，比如数据库连接。<br>假如有一个需求，要读取几万个文件的数据，因为都是IO密集型任务，我们可以启动几十个线程并发地读取，但是如果读到内存后，还需要存储到数据库中，而数据库的连接数只有10个，这时我们必须控制只有10个线程同时获取数据库连接保存数据，否则会报错无法获取数据库连接。这个时候，就可以使用<code>Semaphore</code>来做流量控制，如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THREAD_COUNT</span> <span class="operator">=</span> <span class="number">30</span> ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span>Executors.newFixedThreadPool(THREAD_COUNT);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Semaphore</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>( <span class="number">10</span> );</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">    	threadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s.acquire();</span><br><span class="line">            System.out.println(<span class="string">&quot;save data&quot;</span>);</span><br><span class="line">            s.release();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在代码中，虽然有30个线程在执行，但是只允许10个并发执行。<code>Semaphore</code>的构造方法<code>Semaphore (int permits)</code>接受一个整型的数字，表示可用的许可证数量。<code>Semaphore(10)</code>表示允许10个线程获取许可证，也就是最大并发数是10。<code>Semaphore</code>的用法也很简单，首先线程使用<code>Semaphore</code>的<code>acquire()</code>方法获取一个许可证，使用完之后调用<code>release()</code>方法归还许可证。还可以用<code>tryAcquire()</code>方法尝试获取许可证。</p>
<h2 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h2><p><code>Exchanger(交换者</code>）是一个用于线程间协作的工具类。<code>Exchanger</code>用于进行线程间的数据交换。它提供一个同步点，在这个同步点，两个线程可以交换彼此的数据。</p>
<p><img src="/weiblog/img/%E9%9D%A2%E8%AF%95-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220920134119485.png" alt="image-20220920134119485"></p>
<p>这两个线程通过<code>exchange</code>方法交换数据，如果第一个线程先执行<code>exchange()</code>方法，它会一直等待第二个线程也执行<code>exchange</code>方法，当`两个线程都到达同步点时，这两个线程就可以交换数据，将本线程生产出来的数据传递给对方。</p>
<p><code>Exchanger</code>可以用于遗传算法，遗传算法里需要选出两个人作为交配对象，这时候会交换两人的数据，并使用交叉规则得出2个交配结果。<code>Exchanger</code>也可以用于校对工作，比如我们需要将纸制银行流水通过人工的方式录入成电子银行流水，为了避免错误，采用AB岗两人进行录入，录入到Excel之后，系统需要加载这两个Excel，并对两个Excel数据进行校对，看看是否录入一致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExchangerTest</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Exchanger&lt;String&gt; exgr = <span class="keyword">new</span> <span class="title class_">Exchanger</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool( <span class="number">2</span> );</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    threadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">A</span> <span class="operator">=</span> <span class="string">&quot;银行流水A&quot;</span>; <span class="comment">// A录入银行流水数据</span></span><br><span class="line">        exgr.exchange(A);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">threadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">B</span> <span class="operator">=</span> <span class="string">&quot;银行流水B&quot;</span>; <span class="comment">// B录入银行流水数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">A</span> <span class="operator">=</span> exgr.exchange(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;A和B数据是否一致：&quot;</span> + A.equals(B) + <span class="string">&quot;，A录入的是：&quot;</span>+ A + <span class="string">&quot;，B录入是：&quot;</span> + B);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	threadPool.shutdown();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假如两个线程有一个没有执行<code>exchange()</code>方法，则会一直等待，如果担心有特殊情况发生，避免一直等待，可以使用<code>exchange(V x, long timeOut，TimeUnit unit)</code>设置最大等待时长。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>面试-Java容器</title>
    <url>/2022/09/12/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a><strong>集合概述</strong></h1><h2 id="常见的集合"><a href="#常见的集合" class="headerlink" title="常见的集合"></a>常见的集合</h2><p>集合相关类和接又都在java.util中，主要分为 3 种：List（列表）、Map（映射）、Set(集)。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912123038570.png" alt="image-20220912123038570"></p>
<p>其中Collection是集合List、Set的父接口，它主要有两个子接口：</p>
<ul>
<li><p>List ：存储的元素有序，可重复。</p>
</li>
<li><p>Set ：存储的元素无序，不可重复。</p>
<p>Map是另外的接口，是键值对映射结构的集合。</p>
</li>
</ul>
<h2 id="List-Set-Queue-Map-四者的区别"><a href="#List-Set-Queue-Map-四者的区别" class="headerlink" title="List, Set, Queue, Map 四者的区别"></a>List, Set, Queue, Map 四者的区别</h2><ul>
<li><strong>list</strong> (对付顺序的好帮手): 存储的元素是有序的、可重复的。</li>
<li><strong>Set</strong> (注重独一无二的性质): 存储的元素是无序的、不可重复的。</li>
<li><strong>Queue</strong> (实现排队功能的叫号机): 按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。</li>
<li><strong>Map</strong> (用 key 来搜索的专家): 使用键值对（key-value）存储，类似于数学上的函数 y=f(x)，”x” 代表 key，”y” 代表 value，key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。</li>
</ul>
<h2 id="如何选用集合"><a href="#如何选用集合" class="headerlink" title="如何选用集合?"></a>如何选用集合?</h2><p>主要根据集合的特点来选用，比如我们需要根据键值获取到元素值时就选用 Map 接口下的集合，需要排序时选择TreeMap,不需要排序时就选择HashMap,需要保证线程安全就选用ConcurrentHashMap。</p>
<p>当我们只需要存放元素值时，就选择实现Collection接口的集合，需要<strong>保证元素唯一时</strong>选择实现 Set 接口的集合比如 TreeSet 或HashSet，不需要就选择实现 List 接口的比如 ArrayList或 LinkedList，然后再根据实现这些接口的集合的特点来选用。</p>
<h2 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h2><p>先来看一下 Collection 接口下面的集合。</p>
<p><strong>List</strong></p>
<ul>
<li>Arraylist： <strong>Object[]</strong> <strong>数组</strong></li>
<li>Vector：<strong>Object[] 数组</strong></li>
<li>LinkedList： <strong>双向链表</strong>(JDK1.6 之前为循环链表，JDK1.7 取消了循环)</li>
</ul>
<p><strong>Set</strong></p>
<ul>
<li>HashSet(<strong>无序，唯一</strong>): 基于 HashMap实现的，底层采用 HashMap 来保存元素</li>
<li>LinkedHashSet: LinkedHashSet是 HashSet 的子类，并且其内部是通过 LinkedHashMap来实现的。有点类似于我们之前说的 LinkedHashMap其内部是基于 HashMap实现一样，不过还是有一点点区别的</li>
<li>TreeSet(有序，唯一): <strong>红黑树</strong>(自平衡的排序二叉树)。</li>
</ul>
<p><strong>Queue</strong></p>
<ul>
<li>PriorityQueue: Object[] <strong>数组来实现二叉堆</strong></li>
<li>ArrayQueue: Object[] 数组 + 双指针</li>
</ul>
<p><strong>Map</strong></p>
<ul>
<li>HashMap： <strong>JDK1.8</strong> 之前 HashMap由<strong>数组+链表</strong>组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的（“<strong>拉链法</strong>”解决冲突）。<strong>JDK1.8 以后</strong>在解决哈希冲突时有了较大的变化，当<strong>链表长度大于阈值（默认为 8）</strong>（将链表转换成红黑树前会判断，如果当前<strong>数组的长度小于 64</strong>，那么会选择先进行<strong>数组扩容</strong>，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间</li>
<li>LinkedHashMap： LinkedHashMap 继承自 HashMap，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。<strong>另外，LinkedHashMap</strong>在上面结构的基础上，增加了一条双向链表<strong>，</strong>使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。详细可以查看：《LinkedHashMap 源码详细分析（JDK1.8）》</li>
</ul>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>java.util包下的集合类大部分都是<strong>线程不安全</strong>的，例如我们常用的<strong>HashSet、TreeSet、ArrayList、LinkedList、ArrayDeque、HashMap、TreeMap</strong>，这些都是线程不安全的集合类<strong>，但是它们的优点是性能好。如果需要使用线程安全的集合类，则可以使用</strong>Collections工具类提供的**synchronizedXxx()**方法，将这些集合类包装成线程安全的集合类。</p>
<p>java.util包下也有线程安全的集合类，例如<strong>Vector、Hashtable</strong>。这些集合类都是比较古老的API，虽然实现了线程安全，但是<strong>性能很差</strong>。所以即便是需要使用线程安全的集合类，也建议将线程不安全的集合类包装成线程安全集合类的方式，而不是直接使用这些古老的API。</p>
<p>从Java5开始，Java在<strong>java.util.concurrent</strong>包下提供了大量支持高效并发访问的集合类，它们既能包装良好的访问性能，有能包装线程安全。这些集合类可以分为两部分，它们的特征如下：</p>
<ul>
<li><p><strong>以Concurrent开头的集合类</strong>：</p>
<p>以Concurrent开头的集合类代表了支持并发访问的集合，它们可以支持多个线程并发写入访问，这些写入线程的所有操作都是线程安全的，但读取操作不必锁定。以Concurrent开头的集合类采用了更复杂的算法来保证永远不会锁住整个集合，因此在并发写入时有较好的性能。</p>
</li>
<li><p><strong>以CopyOnWrite开头的集合类</strong>：</p>
<p>以CopyOnWrite开头的集合类采用<strong>复制底层数组的方式</strong>来实现写操作。当线程对此类集合执行读取操作时，线程将会直接读取集合本身，无须加锁与阻塞。当线程对此类集合执行写入操作时，集合会在底层复制一份新的数组，接下来对新的数组执行写入操作。由于对集合的写入操作都是对数组的副本执行操作，因此它是线程安全的。</p>
</li>
</ul>
<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><h2 id="ArrayList和LinkedList"><a href="#ArrayList和LinkedList" class="headerlink" title="ArrayList和LinkedList"></a>ArrayList和LinkedList</h2><p><strong>（ 1 ） 数据结构不同</strong></p>
<ul>
<li>ArrayList基于数组实现</li>
<li>LinkedList基于双向链表实现</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912144741368.png" alt="image-20220912144741368"></p>
<p><strong>（ 2 ） 多数情况下，ArrayList更利于查找，LinkedList更利于增删</strong></p>
<ul>
<li>ArrayList基于数组实现，get(int index)可以直接通过数组下标获取，时间复杂度是O(1)；LinkedList基于链表实现，get(int index)需要遍历链表，时间复杂度是O(n)；当然，get(Eelement)这种查找，两种集合都需要遍历，时间复杂度都是O(n)。</li>
<li>ArrayList增删如果是数组末尾的位置，直接插入或者删除就可以了，但是如果插入中间的位置，就需要把插入位置后的元素都向前或者向后移动，甚至还有可能触发扩容；双向链表的插入和删除只需要改变前驱节点、后继节点和插入节点的指向就行了，不需要移动元素。</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912145007734.png" alt="image-20220912145007734"></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912145021262.png" alt="image-20220912145021262"></p>
<p>注意，这个地方可能会出陷阱，LinkedList更利于增删更多是体现在平均步长上，不是体现在时间复杂度上，二者增删的时间复杂度都是O(n)</p>
<p><strong>（ 3 ） 是否支持随机访问</strong></p>
<ul>
<li>ArrayList基于数组，所以它可以根据下标查找，支持随机访问，当然，它也实现了RandmoAccess 接口，这个接口只是用来标识是否支持随机访问。</li>
<li>LinkedList基于链表，所以它没法根据序号直接获取元素，它没有实现RandmoAccess 接口，标记不支持随机访问。</li>
</ul>
<p><strong>（ 4 ）</strong> <strong>内存占用</strong>，ArrayList基于数组，是一块连续的内存空间，LinkedList基于链表，内存空<br>间不连续，它们在空间占用上都有一些额外的消耗：</p>
<ul>
<li>ArrayList是预先定义好的数组，可能会有空的内存空间，存在一定空间浪费</li>
<li>LinkedList每个节点，需要存储前驱和后继，所以每个节点会占用更多的空间</li>
</ul>
<h2 id="ArrayList的扩容机制"><a href="#ArrayList的扩容机制" class="headerlink" title="ArrayList的扩容机制"></a>ArrayList的扩容机制</h2><p>ArrayList是基于数组的集合，数组的容量是在定义的时候确定的，如果数组满了，再插入，就会数组溢出。所以在插入时候，会先检查是否需要扩容，如果当前容量+1超过数组长度，就会进行扩容。</p>
<p>ArrayList的扩容是创建一个 <strong>1.5倍</strong> 的新数组，然后把原数组的值拷贝过去。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912145559914.png" alt="image-20220912145559914"></p>
<h2 id="ArrayList序列化"><a href="#ArrayList序列化" class="headerlink" title="ArrayList序列化"></a>ArrayList序列化</h2><p>ArrayList的序列化不太一样，它使用transient修饰存储元素的elementData的数组，transient关键字的作用是让被修饰的成员属性不被序列化。</p>
<h3 id="为什么ArrayList不直接序列化元素数组呢？"><a href="#为什么ArrayList不直接序列化元素数组呢？" class="headerlink" title="为什么ArrayList不直接序列化元素数组呢？"></a>为什么ArrayList不直接序列化元素数组呢？</h3><p>出于效率的考虑，数组可能长度 100 ，但实际只用了 50 ，剩下的 50 不用其实不用序列化，这样可以提高序列化和反序列化的效率，还可以节省内存空间。</p>
<h3 id="那ArrayList怎么序列化呢？"><a href="#那ArrayList怎么序列化呢？" class="headerlink" title="那ArrayList怎么序列化呢？"></a>那ArrayList怎么序列化呢？</h3><p>ArrayList通过两个方法 <strong>readObject、writeObject</strong> 自定义序列化和反序列化策略，实际直接使用两个流ObjectOutputStream和ObjectInputStream来进行序列化和反序列化。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912145942393.png" alt="image-20220912145942393"></p>
<h2 id="快速失败-fail-fast-和安全失败-fail-safe"><a href="#快速失败-fail-fast-和安全失败-fail-safe" class="headerlink" title="快速失败(fail-fast)和安全失败(fail-safe)"></a>快速失败(fail-fast)和安全失败(fail-safe)</h2><p><strong>快速失败（fail—fast） ：快速失败是Java集合的一种错误检测机制</strong></p>
<ul>
<li>在用迭代器遍历一个集合对象时，如果线程A遍历过程中，线程B对集合对象的内容进行了修改（增加、删除），则会抛出<strong>Concurrent Modification Exception</strong>。</li>
<li>原理：迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 <strong>modCount</strong>变量。集合在被遍历期间如果内容发生变化，就会改变modCount 的值。每当迭代器使用**hashNext()/next()**遍历下一个元素之前，都会检测modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。</li>
<li>注意：这里异常的抛出条件是检测到 <strong>modCount！=expectedmodCount</strong> 这个条件。如果集合发生变化时修改modCount值刚好又设置为了expectedmodCount值，则异常不会抛出。因此，不能依赖于这个异常是否抛出而进行并发操作的编程，这个异常只建议用于检测并发修改的bug。</li>
<li>场景：java.util包下的集合类都是快速失败的，不能在多线程下发生并发修改（迭代过程中被修改），比如ArrayList 类。</li>
</ul>
<p><strong>安全失败（fail—safe）</strong></p>
<ul>
<li>采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。</li>
<li>原理：由于迭代器是对原集合的拷贝进行遍历，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发Concurrent Modification Exception。</li>
<li>缺点：基于拷贝内容的优点是避免了Concurrent Modification Exception，但同样地，迭代器并不能访问到修改后的内容，即：迭代器遍历的是开始遍历那一刻拿到的集合拷贝，在遍历期间原集合发生的修改迭代器是不知道的。</li>
<li>场景：java.util.concurrent包下的容器都是安全失败，可以在多线程下并发使用，并发修改，比如CopyOnWriteArrayList类。</li>
</ul>
<p><strong>官方文档解释</strong></p>
<p>当Iterator这个迭代器被创建后，除了<strong>迭代器本身的方法(remove)**可以改变集合的结构外，其他的因素如若</strong>改变了集合的结构<strong>，都被抛出</strong>ConcurrentModificationException**异常。</p>
<p>迭代器的快速失败行为是不一定能够得到保证的，一般来说，存在非同步的并发修改时，不可能做出任何坚决的保证的。但是快速失败迭代器会做出最大的努力来抛出ConcurrentModificationException。因此，编写依赖于此异常的程序的做法是不正确的。正确的做法应该是：迭代器的快速失败行为应该仅用于检测程序中的bug.</p>
<p><strong>结构上的改变</strong><br>例如集合上的插入和删除就是结构上的改变，但是，如果是对集合中某个元素进行修改的话，并不是结构上的改变。</p>
<p><strong>1、单线程的环境下，fail-fast抛出异常的实例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">        list.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp == <span class="number">3</span>)&#123;</span><br><span class="line">            temp++;</span><br><span class="line">            list.remove(<span class="number">3</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            temp++;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912160829889.png" alt="image-20220912160829889"></p>
<p><strong>结果分析：</strong>因为当temp==3的时候，执行list.remove()方法，集合的结构被改变了，所以再次遍历迭代器的时候，就会抛出异常。</p>
<p><strong>HashMap发生fail-fast：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">           Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i ++ ) &#123;</span><br><span class="line">                map.put(i+<span class="string">&quot;&quot;</span>, i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           Iterator&lt;Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line">           <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">                     map.remove(<span class="number">3</span>+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line">                System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">                i++;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>该段代码定义了一个hashmap对象并存放了10个键值对，在迭代遍历过程中，使用map的remove方法移除了一个元素，导致抛出了 ConcurrentModificationException异常：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912160949231.png" alt="image-20220912160949231"></p>
<p><strong>2、多线程环境下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FailFastTest</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line">                <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">                     <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                     System.out.println(<span class="built_in">this</span>.getName() + <span class="string">&quot;:&quot;</span> + s);</span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">super</span>.run();</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                     System.out.println(<span class="string">&quot;thread2:&quot;</span> + i);</span><br><span class="line">                     <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                           list.remove(i);</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                     i ++;</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">            list.add(i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">           <span class="type">MyThread1</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">           <span class="type">MyThread2</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">           thread1.setName(<span class="string">&quot;thread1&quot;</span>);</span><br><span class="line">           thread2.setName(<span class="string">&quot;thread2&quot;</span>);</span><br><span class="line">           thread1.start();</span><br><span class="line">           thread2.start();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动两个线程，分别对其中一个对list进行迭代，另一个在线程1的迭代过程中去remove一个元素，结果也是抛出了java.util.ConcurrentModificationException</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912161045734.png" alt="image-20220912161045734"></p>
<h3 id="fail-fast的工作原理"><a href="#fail-fast的工作原理" class="headerlink" title="fail-fast的工作原理"></a>fail-fast的工作原理</h3><p>fail-fast是如何抛出<strong>ConcurrentModificationException</strong>异常的，又是在什么情况下才会抛出?</p>
<p>我们知道，对于集合如list，map类，我们都可以通过迭代器来遍历，而Iterator其实只是一个接口，具体的实现还是要看具体的集合类中的内部类去实现Iterator并实现相关方法。这里我们就以ArrayList类为例。在ArrayList中，当调用list.iterator()时，其源码是： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即它会返回一个新的Itr类，而Itr类是ArrayList的内部类，实现了Iterator接口，下面是该类的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An optimized version of AbstractList.Itr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">        <span class="type">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">            checkForComodification();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ArrayList.<span class="built_in">this</span>.remove(lastRet);</span><br><span class="line">                cursor = lastRet;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; consumer)</span> &#123;</span><br><span class="line">            Objects.requireNonNull(consumer);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> ArrayList.<span class="built_in">this</span>.size;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                consumer.accept((E) elementData[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">            cursor = i;</span><br><span class="line">            lastRet = i - <span class="number">1</span>;</span><br><span class="line">            checkForComodification();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其中，有三个属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line"><span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line"><span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br></pre></td></tr></table></figure>

<p>cursor是指集合遍历过程中的即将遍历的元素的索引，lastRet是cursor -1，默认为-1，即不存在上一个时，为-1，它主要用于记录刚刚遍历过的元素的索引。expectedModCount这个就是fail-fast判断的关键变量了，它初始值就为ArrayList中的modCount。（modCount是抽象类AbstractList中的变量，默认为0，而ArrayList 继承了AbstractList ，所以也有这个变量，modCount用于记录集合操作过程中作的修改次数，与size还是有区别的，并不一定等于size）</p>
<p>我们一步一步来看： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cursor != size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>迭代器迭代结束的标志就是hasNext()返回false，而该方法就是用cursor游标和size(集合中的元素数目)进行对比，当cursor等于size时，表示已经遍历完成。</p>
<p>接下来看看最关心的next()方法，看看为什么在迭代过程中，如果有线程对集合结构做出改变，就会发生fail-fast：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>从源码知道，每次调用next()方法，在实际访问元素前，都会调用checkForComodification方法，该方法源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，该<strong>方法才是判断是否抛出ConcurrentModificationException异常的关键</strong>。在该段代码中，当<strong>modCount != expectedModCount</strong>时，就会抛出该异常。但是在一开始的时候，expectedModCount初始值默认等于modCount，为什么会出现modCount != expectedModCount，很明显expectedModCount在整个迭代过程除了一开始赋予初始值modCount外，并没有再发生改变，所以可能发生改变的就只有modCount，在前面关于ArrayList扩容机制的分析中，可以知道在<strong>ArrayList进行add，remove，clear等涉及到修改集合中的元素个数的操作时，modCount就会发生改变(modCount ++)</strong>,所以当另一个线程(并发修改)或者同一个线程遍历过程中，调用相关方法使集合的个数发生改变，就会使modCount发生变化，这样在checkForComodification方法中就会抛出ConcurrentModificationException异常。</p>
<p>类似的，hashMap中发生的原理也是一样的。 </p>
<h3 id="避免fail-fast"><a href="#避免fail-fast" class="headerlink" title="避免fail-fast"></a>避免fail-fast</h3><p>了解了fail-fast机制的产生原理，接下来就看看如何解决fail-fast</p>
<p><strong>方法1</strong></p>
<p>在单线程的遍历过程中，如果要进行remove操作，可以调用<strong>迭代器的remove方法</strong>而不是集合类的remove方法。看看ArrayList中迭代器的remove方法的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">    checkForComodification();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList.<span class="built_in">this</span>.remove(lastRet);</span><br><span class="line">        cursor = lastRet;</span><br><span class="line">        lastRet = -<span class="number">1</span>;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，该remove方法并不会修改modCount的值，并且不会对后面的遍历造成影响，因为该方法remove不能指定元素，<strong>只能remove当前遍历过的那个元素</strong>，所以调用该方法并不会发生fail-fast现象。该方法有局限性。</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++ ) &#123;</span><br><span class="line">           list.add(i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">      <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">                iterator.remove(); <span class="comment">//迭代器的remove()方法</span></span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(iterator.next());</span><br><span class="line">           i ++;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方法2</strong></p>
<p>使用java并发包(java.util.concurrent)中的类来代替 ArrayList 和hashMap。</p>
<p>比如使用 <strong>CopyOnWriterArrayList</strong>代替 ArrayList， CopyOnWriterArrayList在是使用上跟 ArrayList几乎一样， CopyOnWriter是写时复制的容器(COW)，在读写时是线程安全的。该容器在对add和remove等操作时，并不是在原数组上进行修改，而是将原数组拷贝一份，在新数组上进行修改，待完成后，才将指向旧数组的引用指向新数组，所以对于 CopyOnWriterArrayList在迭代过程并不会发生fail-fast现象。但 <strong>CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性</strong>。</p>
<p>对于HashMap，可以使用<strong>ConcurrentHashMap</strong>， ConcurrentHashMap采用了锁机制，是线程安全的。在迭代方面，ConcurrentHashMap使用了一种不同的迭代方式。在这种迭代方式中，当iterator被创建后集合再发生改变就不再是抛出ConcurrentModificationException，取而代之的是在改变时new新的数据从而不影响原有的数据 ，iterator完成后再将头指针替换为新的数据 ，这样iterator线程可以使用原来老的数据，而写线程也可以并发的完成改变。即迭代不会发生fail-fast，但不保证获取的是最新的数据。</p>
<h3 id="fail-safe与fail-fast的区别"><a href="#fail-safe与fail-fast的区别" class="headerlink" title="fail-safe与fail-fast的区别"></a><strong>fail-safe与fail-fast的区别</strong></h3><p>当我们对集合结构上做出改变的时候，fail-fast机制就会抛出异常。但是，对于采用fail-safe机制来说，就不会抛出异常。</p>
<p>这是因为，当集合的结构被改变的时候，fail-safe机制会在复制原集合的一份数据出来，然后在复制的那份数据遍历。</p>
<p>因此，虽然fail-safe不会抛出异常，但存在以下缺点</p>
<ul>
<li><strong>复制时需要额外的空间和时间上的开销。</strong></li>
<li><strong>不能保证遍历的是最新内容。</strong></li>
</ul>
<h2 id="线程安全的List"><a href="#线程安全的List" class="headerlink" title="线程安全的List"></a>线程安全的List</h2><ol>
<li><p>**Vector **</p>
<p>Vector是比较古老的API，虽然保证了线程安全，但是由于效率低一般不建议使用。</p>
</li>
<li><p><strong>Collections.SynchronizedList</strong></p>
<p>SynchronizedList是Collections的内部类，Collections提供了<strong>synchronizedList</strong>方法，可以将一个线程不安全的List包装成线程安全的List，即SynchronizedList。它比Vector有更好的扩展性和兼容性，但是它所有的方法都带有同步锁，也不是性能最优的List。</p>
</li>
<li><p><strong>CopyOnWriteArrayList</strong></p>
<p>CopyOnWriteArrayList是Java 1.5在java.util.concurrent包下增加的类，它采用<strong>复制底层数组</strong>的方式来实现写操作。当线程对此类集合执行读取操作时，线程将会直接读取集合本身，无须加锁与阻塞。当线程对此类集合执行写入操作时，集合会在底层复制一份新的数组，接下来对新的数组执行写入操作。由于对集合的写入操作都是对数组的副本执行操作，因此它是线程安全的。在所有线程安全的List中，它是性能最优的方案。</p>
</li>
</ol>
<h2 id="CopyOnWriteArrayList原理"><a href="#CopyOnWriteArrayList原理" class="headerlink" title="CopyOnWriteArrayList原理"></a>CopyOnWriteArrayList原理</h2><p>CopyOnWriteArrayList就是线程安全版本的ArrayList。</p>
<p>它的名字叫<strong>CopyOnWrite</strong>——写时复制，已经明示了它的原理。</p>
<p>CopyOnWriteArrayList采用了一种读写分离的并发策略。CopyOnWriteArrayList容器允许并发读，读操作是无锁的，性能较高。至于写操作，比如向容器中添加一个元素，则首先将当前容器复制一份，然后在新副本上执行写操作，结束之后再将原容器的引用指向新容器。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912164440146.png" alt="image-20220912164440146"></p>
<ul>
<li>优点：<strong>读操作性能很高，因为无需任何同步措施，比较适用于读多写少的并发场景</strong>。在遍历传统的List时，若中途有别的线程对其进行修改，则会抛出ConcurrentModificationException异常。而CopyOnWriteArrayList由于其”<strong>读写分离</strong>“的思想，遍历和修改操作分别作用在不同的List容器，所以在使用迭代器进行遍历时候，也就不会抛出ConcurrentModificationException异常了。</li>
<li>缺点：<strong>一是内存占用问题，毕竟每次执行写操作都要将原容器拷贝一份，数据量大时，对内存压力较大，可能会引起频繁GC</strong>。二是无法保证实时性，Vector对于读写操作均加锁同步，可以保证读和写的强一致性。而CopyOnWriteArrayList由于其实现策略的原因，写和读分别作用在新老不同容器上，在写操作执行过程中，读不会阻塞但读取到的却是老容器的数据</li>
</ul>
<h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><h2 id="Queue-与-Deque"><a href="#Queue-与-Deque" class="headerlink" title="Queue 与 Deque"></a>Queue 与 Deque</h2><p><strong>Queue</strong> <strong>是单端队列</strong>，只能从一端插入元素，另一端删除元素，实现上一般遵循 <strong>先进先出（FIFO）</strong> 规则。</p>
<p>Queue扩展了Collection 的接口，根据 <strong>因为容量问题而导致操作失败后处理方式的不同</strong> 可以分为两类方法: 一种在操作失败后会抛出异常，另一种则会返回特殊值。</p>
<table>
<thead>
<tr>
<th><code>Queue</code> 接口</th>
<th>抛出异常</th>
<th>返回特殊值</th>
</tr>
</thead>
<tbody><tr>
<td>插入队尾</td>
<td>add(E e)</td>
<td>offer(E e)</td>
</tr>
<tr>
<td>删除队首</td>
<td>remove()</td>
<td>poll()</td>
</tr>
<tr>
<td>查询队首元素</td>
<td>element()</td>
<td>peek()</td>
</tr>
</tbody></table>
<p><strong>Deque</strong>是双端队列，在队列的两端均可以插入或删除元素。</p>
<p>Deque扩展了 Queue的接口, <strong>增加了在队首和队尾进行插入和删除的方法</strong>，同样根据失败后处理方式的不同分为两类：</p>
<table>
<thead>
<tr>
<th><code>Deque</code> 接口</th>
<th>抛出异常</th>
<th>返回特殊值</th>
</tr>
</thead>
<tbody><tr>
<td>插入队首</td>
<td>addFirst(E e)</td>
<td>offerFirst(E e)</td>
</tr>
<tr>
<td>插入队尾</td>
<td>addLast(E e)</td>
<td>offerLast(E e)</td>
</tr>
<tr>
<td>删除队首</td>
<td>removeFirst()</td>
<td>pollFirst()</td>
</tr>
<tr>
<td>删除队尾</td>
<td>removeLast()</td>
<td>pollLast()</td>
</tr>
<tr>
<td>查询队首元素</td>
<td>getFirst()</td>
<td>peekFirst()</td>
</tr>
<tr>
<td>查询队尾元素</td>
<td>getLast()</td>
<td>peekLast()</td>
</tr>
</tbody></table>
<p>事实上，<code>Deque</code> 还提供有 <code>push()</code> 和 <code>pop()</code> 等其他方法，可用于模拟栈。</p>
<h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p>PriorityQueue 是在 JDK1.5 中被引入的, 其与 <code>Queue</code> 的区别在于元素出队顺序是与优先级相关的，即总是<strong>优先级最高的元素先出队</strong>。</p>
<p>这里列举其相关的一些要点：</p>
<ul>
<li><code>PriorityQueue</code> 利用了<strong>二叉堆</strong>的数据结构来实现的，底层使用可变长的数组来存储数据</li>
<li><code>PriorityQueue</code> 通过堆元素的上浮和下沉，实现了在 O(logn) 的时间复杂度内插入元素和删除堆顶元素。</li>
<li><code>PriorityQueue</code> 是<strong>非线程安全</strong>的，且不支持存储 <code>NULL</code> 和 <code>non-comparable</code> 的对象。</li>
<li><code>PriorityQueue</code> 默认是<strong>小顶堆</strong>，但可以接收一个 <code>Comparator</code> 作为构造参数，从而来自定义元素优先级的先后。</li>
</ul>
<p><code>PriorityQueue</code> 在面试中可能更多的会出现在手撕算法的时候，典型例题包括堆排序、求第K大的数、带权图的遍历等，所以需要会熟练使用才行。</p>
<h2 id="ArrayDeque-与-LinkedList"><a href="#ArrayDeque-与-LinkedList" class="headerlink" title="ArrayDeque 与 LinkedList"></a>ArrayDeque 与 LinkedList</h2><ul>
<li><code>ArrayDeque</code> 和 <code>LinkedList</code> 都实现了 <code>Deque</code> 接口，两者<strong>都具有队列的功能</strong>，但两者有什么区别呢？</li>
<li><code>ArrayDeque</code> 是基于可变长的<strong>数组和双指针</strong>来实现，而 LinkedList 则通过<strong>链表</strong>来实现。</li>
<li><code>ArrayDeque</code> 不支持存储 <code>NULL</code> 数据，但 <code>LinkedList</code> 支持。</li>
<li><code>ArrayDeque</code> 是在 JDK1.6 才被引入的，而<code>LinkedList</code> 早在 JDK1.2 时就已经存在。</li>
<li><code>ArrayDeque</code> 插入时可能存在扩容过程, 不过均摊后的插入操作依然为 O(1)。虽然 <code>LinkedList</code> 不需要扩容，但是每次插入数据时均需要申请新的堆空间，均摊性能相比更慢。</li>
</ul>
<p>从性能的角度上，选用 <code>ArrayDeque</code> 来实现队列要比 <code>LinkedList</code> 更好。此外，<code>ArrayDeque</code> 也可以用于实现栈。</p>
<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><h2 id="Set概述"><a href="#Set概述" class="headerlink" title="Set概述"></a>Set概述</h2><p>Set 注重<strong>独一无二</strong>的性质,该体系集合用于存储无序(存入和取出的顺序不一定相同)元素，值不能重复。对象的相等性本质是对象 hashCode 值（java 是依据对象的内存地址计算出的此序号）判断的，如果想要让两个不同的对象视为相等的，就必须覆盖 Object 的 hashCode 方法和 equals 方法。</p>
<h3 id="HashSet（Hash-表）"><a href="#HashSet（Hash-表）" class="headerlink" title="HashSet（Hash 表）"></a><strong>HashSet（Hash 表）</strong></h3><p>哈希表存放的是哈希值。HashSet 存储元素的顺序并不是按照存入时的顺序（和 List 显然不同） 而是按照哈希值来存的所以取数据也是按照哈希值取得。元素的哈希值是通过元素的 hashcode 方法来获取的, <strong>HashSet 首先判断两个元素的哈希值，如果哈希值一样，接着会比较 equals 方法 如果 equals 结果为 true ，HashSet 就视为同一个元素。如果 equals 为 false 就不是同一个元素。</strong></p>
<p>哈希值相同 equals 为 false 的元素是怎么存储呢,就是在同样的哈希值下顺延（可以认为哈希值相 同的元素放在一个哈希桶中）。也就是哈希一样的存一列。如图 1 表示 hashCode 值不相同的情 况；图 2 表示 hashCode 值相同，但 equals 不相同的情况。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912193646043.png" alt="image-20220912193646043"></p>
<p>HashSet 通过 hashCode 值来确定元素在内存中的位置。一个 hashCode 位置上可以存放多个元素。</p>
<h3 id="TreeSet（二叉树）"><a href="#TreeSet（二叉树）" class="headerlink" title="TreeSet（二叉树）"></a>TreeSet（二叉树）</h3><ol>
<li><p>TreeSet()是使用二叉树的原理对新 add()的对象按照指定的顺序排序（升序、降序），每增加一个对象都会进行排序，将对象插入的二叉树指定的位置。 </p>
</li>
<li><p><strong>Integer 和 String</strong> 对象都可以进行默认的 TreeSet 排序，而自定义类的对象是不可以的，自己定义的类必须实现 <strong>Comparable</strong> 接口，并且覆写相应的 compareTo()函数，才可以正常使 用。 </p>
</li>
<li><p>在覆写 compare()函数时，要返回相应的值才能使 TreeSet 按照一定的规则来排序 </p>
</li>
<li><p>比较此对象与指定对象的顺序。如果该对象小于、等于或大于指定对象，则分别返回负整 数、零或正整数。</p>
</li>
</ol>
<h3 id="LinkHashSet（HashSet-LinkedHashMap）"><a href="#LinkHashSet（HashSet-LinkedHashMap）" class="headerlink" title="LinkHashSet（HashSet+LinkedHashMap）"></a>LinkHashSet（HashSet+LinkedHashMap）</h3><p>对于 LinkedHashSet 而言，它继承与 HashSet、又基于 LinkedHashMap 来实现的。 LinkedHashSet 底层使用 LinkedHashMap 来保存所有元素，它继承与 HashSet，其所有的方法 操作上又与 HashSet 相同，因此 LinkedHashSet 的实现上非常简单，只提供了四个构造方法，并通过传递一个标识参数，调用父类的构造器，底层构造一个 LinkedHashMap 来实现，在相关操作上与父类 HashSet 的操作相同，直接调用父类 HashSet 的方法即可。</p>
<h2 id="HashSet的底层结构"><a href="#HashSet的底层结构" class="headerlink" title="HashSet的底层结构"></a>HashSet的底层结构</h2><p>HashSet是基于HashMap实现的，默认构造函数是构建一个<strong>初始容量为16</strong>，<strong>负载因子为0.75</strong> 的HashMap。它封装了一个 HashMap 对象来存储所有的集合元素，所有放入 HashSet 中的集合元素实际上由 <strong>HashMap 的 key 来保存</strong>，而 HashMap 的 value 则存储了一个 PRESENT，它是一个静态的 Object 对象。</p>
<p>HashSet的add方法，直接调用HashMap的put方法，将添加的元素作为key，new一个Object作为value，直接调用HashMap的put方法，它会根据返回值是否为空来判断是否插入元素成功。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912194458376.png" alt="image-20220912194458376"></p>
<p>而在HashMap的putVal方法中，进行了一系列判断，最后的结果是，只有在key在table数组中不存在的时候，才会返回插入的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">    <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">    <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">    e.value = value;</span><br><span class="line">    afterNodeAccess(e);</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HashSet-如何检查重复"><a href="#HashSet-如何检查重复" class="headerlink" title="HashSet 如何检查重复"></a>HashSet 如何检查重复</h2><p>你把对象加入<code>HashSet</code>时，<code>HashSet</code> 会先计算对象的<code>hashcode</code>值来判断对象加入的位置，同时也会与其他加入的对象的 <code>hashcode</code> 值作比较，如果没有相符的 <code>hashcode</code>，<code>HashSet</code> 会假设对象没有重复出现。但是如果发现有相同 <code>hashcode</code> 值的对象，这时会调用<code>equals()</code>方法来检查 <code>hashcode</code> 相等的对象是否真的相同。如果两者相同，<code>HashSet</code> 就不会让加入操作成功。</p>
<p>在openjdk8中，<code>HashSet</code>的<code>add()</code>方法只是简单的调用了<code>HashMap</code>的<code>put()</code>方法，并且判断了一下返回值以确保是否有重复元素。直接看一下<code>HashSet</code>中的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Returns: true if this set did not already contain the specified element</span></span><br><span class="line"><span class="comment">// 返回值：当set中没有包含add的元素时返回真</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而在<code>HashMap</code>的<code>putVal()</code>方法中也能看到如下说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Returns : previous value, or null if none</span></span><br><span class="line"><span class="comment">// 返回值：如果插入位置没有元素返回null，否则返回上一个元素</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,<span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说，在openjdk8中，实际上无论<code>HashSet</code>中是否已经存在了某元素，<code>HashSet</code>都会直接插入，只是会在<code>add()</code>方法的返回值处告诉我们插入前是否存在相同元素。</p>
<p><strong>hashCode()与 equals() 的相关规定：</strong></p>
<ul>
<li>如果两个对象相等，则 <code>hashcode</code> 一定也是相同的</li>
<li>两个对象相等,对两个 <code>equals()</code> 方法返回 true</li>
<li>两个对象有相同的 <code>hashcode</code> 值，它们也不一定是相等的</li>
<li>综上，<code>equals()</code> 方法被覆盖过，则 <code>hashCode()</code> 方法也必须被覆盖</li>
<li><code>hashCode()</code>的默认行为是对堆上的对象产生独特值。如果没有重写 <code>hashCode()</code>，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。</li>
</ul>
<p><strong>==与 equals 的区别</strong></p>
<ul>
<li>对于基本类型来说，== 比较的是值是否相等；</li>
<li>对于引用类型来说，== 比较的是两个引用是否指向同一个对象地址（两者在内存中存放的地址（堆内存地址）是否指向同一个地方）；</li>
<li>对于引用类型（包括包装类型）来说，equals 如果没有被重写，对比它们的地址是否相等；如果 equals()方法被重写（例如 String），则比较的是地址里的内容。</li>
</ul>
<h2 id="HashSet、LinkedHashSet-和-TreeSet-三者的异同"><a href="#HashSet、LinkedHashSet-和-TreeSet-三者的异同" class="headerlink" title="HashSet、LinkedHashSet 和 TreeSet 三者的异同"></a>HashSet、LinkedHashSet 和 TreeSet 三者的异同</h2><ul>
<li><code>HashSet</code>、<code>LinkedHashSet</code> 和 <code>TreeSet</code> 都是 <code>Set</code> 接口的实现类，都能保证元素唯一，并且都不是线程安全的。</li>
<li><code>HashSet</code>、<code>LinkedHashSet</code> 和 <code>TreeSet</code> 的主要区别在于底层数据结构不同。<code>HashSet</code> 的底层数据结构是哈希表（基于 <code>HashMap</code> 实现）。<code>LinkedHashSet</code> 的底层数据结构是链表和哈希表，元素的插入和取出顺序满足 FIFO。<code>TreeSet</code> 底层数据结构是红黑树，元素是有序的，排序的方式有自然排序和定制排序。</li>
<li>底层数据结构不同又导致这三者的应用场景不同。<code>HashSet</code> 用于不需要保证元素插入和取出顺序的场景，<code>LinkedHashSet</code> 用于保证元素的插入和取出顺序满足 FIFO 的场景，<code>TreeSet</code> 用于支持对元素自定义排序规则的场景。</li>
</ul>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="Map接口的实现类"><a href="#Map接口的实现类" class="headerlink" title="Map接口的实现类"></a>Map接口的实现类</h2><p>Map接口有很多实现类，其中比较常用的有<strong>HashMap、LinkedHashMap、TreeMap、ConcurrentHashMap</strong>。</p>
<p><strong>对于不需要排序的场景</strong>，优先考虑使用<strong>HashMap</strong>，因为它是性能最好的Map实现。如果需要<strong>保证线程安全</strong>，则可以使用ConcurrentHashMap。它的性能好于Hashtable，因为它在put时采用分段锁/CAS的加锁机制，而不是像Hashtable那样，无论是put还是get都做同步处理。</p>
<p><strong>对于需要排序的场景</strong>，如果需要按<strong>插入顺序排序</strong>则可以使用<strong>LinkedHashMap</strong>，如果需要将key按<strong>自然顺序排列</strong>甚至是自定义顺序排列，则可以选择<strong>TreeMap</strong>。如果需要保证线程安全，则可以使用Collections工具类将上述实现类包装成线程安全的Map。</p>
<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="HashMap-中的-key-的类型"><a href="#HashMap-中的-key-的类型" class="headerlink" title="HashMap 中的 key 的类型"></a><strong>HashMap 中的 key 的类型</strong></h3><p>平时可能大家使用的最多的就是使用 <strong>String</strong> 作为 HashMap 的 key，但是现在我们想使用某个<strong>自定义类</strong>作为 HashMap 的 key，那就需要注意以下几点：</p>
<ul>
<li><p>如果类重写了 <strong>equals</strong> 方法，它也应该重写 <strong>hashCode</strong> 方法。 </p>
</li>
<li><p>类的所有实例需要遵循与 equals 和 hashCode 相关的规则。 </p>
</li>
<li><p>如果一个类没有使用 equals，你不应该在 hashCode 中使用它。 </p>
</li>
<li><p>咱们自定义 key 类的最佳实践是使之为不可变的，这样，hashCode 值可以被缓存起来，拥有更好的性能。不可变的类也可以确保 hashCode 和 equals 在未来不会改变，这样就会解决与 可变相关的问题了。</p>
</li>
<li><p>HashMap是线程不安全的实现；</p>
</li>
<li><p>HashMap<strong>可以使用null</strong>作为key或value。</p>
</li>
</ul>
<h3 id="HashMap-的底层结构"><a href="#HashMap-的底层结构" class="headerlink" title="HashMap 的底层结构"></a>HashMap 的底层结构</h3><h4 id="JDK1-8-之前"><a href="#JDK1-8-之前" class="headerlink" title="JDK1.8 之前"></a><strong>JDK1.8 之前</strong></h4><p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912201223402.png" alt="image-20220912201223402"></p>
<p><strong>JDK1.8</strong> 之前 <strong>HashMap</strong> 底层是<strong>数组和链表</strong>结合在一起使用也就是<strong>链表散列</strong>。HashMap 通过 key 的 hashCode 经过<strong>扰动函数</strong>处理过后得到 <strong>hash</strong> 值，然后通过**(n - 1) &amp; hash<strong>判断当前元素存放的位置（这里的 n 指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过</strong>拉链法**解决冲突。</p>
<p>所谓扰动函数指的就是 HashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的 hashCode() 方法换句话说使用扰动函数之后可以减少碰撞。</p>
<p><strong>JDK 1.8 HashMap 的 hash 方法源码:</strong></p>
<p>JDK 1.8 的 hash 方法 相比于 JDK 1.7 hash 方法更加简化，但是原理不变。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">      <span class="type">int</span> h;</span><br><span class="line">      <span class="comment">// key.hashCode()：返回散列值也就是hashcode</span></span><br><span class="line">      <span class="comment">// ^ ：按位异或</span></span><br><span class="line">      <span class="comment">// &gt;&gt;&gt;:无符号右移，忽略符号位，空位都以0补齐</span></span><br><span class="line">      <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对比一下 JDK1.7 的 HashMap 的 hash 方法源码.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(<span class="type">int</span> h)</span> &#123;</span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line"></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比于 JDK1.8 的 hash 方法 ，JDK 1.7 的 hash 方法的性能会稍差一点点，因为毕竟扰动了 4 次。</p>
<p>所谓 <strong>“拉链法”</strong> 就是：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。</p>
<h4 id="JDK1-8-之后"><a href="#JDK1-8-之后" class="headerlink" title="JDK1.8 之后"></a><strong>JDK1.8 之后</strong></h4><p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912201847436.png" alt="image-20220912201847436"></p>
<p>相比于之前的版本， JDK1.8 之后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（<strong>默认为 8</strong>）（将链表转换成红黑树前会判断，如果当前数组的长度<strong>小于 64</strong>，那么会选择先进行<strong>数组扩容</strong>，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。</p>
<p>TreeMap、TreeSet 以及 JDK1.8 之后的 HashMap 底层都用到了红黑树。红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。</p>
<p>基于hash算法，通过put方法和get方法存储和获取对象。</p>
<p>存储对象时，我们将K/V传给put方法时，它调用K的hashCode计算hash从而得到bucket位置，进一步存储，HashMap会根据当前bucket的占用情况自动调整容量(超过Load Facotr则resize为原来的2倍)。获取对象时，我们将K传给get，它调用hashCode计算hash从而得到bucket位置，并进一步调用equals()方法确定键值对。</p>
<p>如果发生碰撞的时候，HashMap通过链表将产生碰撞冲突的元素组织起来。在Java 8中，如果一个bucket中碰撞冲突的元素超过某个限制(默认是8)，则使用红黑树来替换链表，从而提高速度。  </p>
<h4 id="HashMap-的长度为什么是-2-的-N-次方"><a href="#HashMap-的长度为什么是-2-的-N-次方" class="headerlink" title="HashMap 的长度为什么是 2 的 N 次方"></a><strong>HashMap 的长度为什么是 2 的 N 次方</strong></h4><p>第一个方面为了能让 HashMap 存数据和取数据的效率高，尽可能地减少 hash 值的碰撞，也就是说尽量把数据能均匀的分配，每个链表或者红黑树长度尽量相等。 我们首先可能会想到 <strong>% 取模</strong>的操作来实现。取余（%）操作中如果除数是 2 的幂次，则等价于与其除数减一的与（&amp;）操作（<strong>也就是说hash % length == hash &amp;(length - 1) 的前提是 length 是 2 的 n 次方</strong>）。并且，采用二进制位操作 &amp; ，相对于 % 能够提高运算效率。</p>
<p>第二个方面是在扩容时，利用扩容后的大小也是 2 的倍数，将已经产生hash碰撞的元素完美的转移到新的table中去</p>
<h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a><strong>红黑树</strong></h4><h5 id="你对红黑树了解多少？为什么不用二叉树-平衡树呢？"><a href="#你对红黑树了解多少？为什么不用二叉树-平衡树呢？" class="headerlink" title="你对红黑树了解多少？为什么不用二叉树/平衡树呢？"></a>你对红黑树了解多少？为什么不用二叉树/平衡树呢？</h5><p>红黑树本质上是一种二叉查找树，为了保持平衡，它又在二叉查找树的基础上增加了一些规则：</p>
<ul>
<li>每个节点要么是红色，要么是黑色；</li>
<li>根节点永远是黑色的；</li>
<li>所有的叶子节点都是是黑色的（注意这里说叶子节点其实是图中的 NULL 节点）；</li>
<li>每个红色节点的两个子节点一定都是黑色；</li>
<li>从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点；</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912220806132.png" alt="image-20220912220806132"></p>
<p><strong>之所以不用二叉树：</strong></p>
<p>红黑树是一种平衡的二叉树，插入、删除、查找的最坏时间复杂度都为 O(logn)，避免了二叉树最坏情况下的O(n)时间复杂度。</p>
<p><strong>之所以不用平衡二叉树：</strong></p>
<p>平衡二叉树是比红黑树更严格的平衡树，为了保持保持平衡，需要旋转的次数更多，也就是说平衡二叉树保持平衡的效率更低，所以平衡二叉树插入和删除的效率比红黑树要低。</p>
<h5 id="红黑树怎么保持平衡的知道吗？"><a href="#红黑树怎么保持平衡的知道吗？" class="headerlink" title="红黑树怎么保持平衡的知道吗？"></a>红黑树怎么保持平衡的知道吗？</h5><p>红黑树有两种方式保持平衡：旋转和染色。</p>
<ul>
<li><strong>旋转：旋转分为两种，左旋和右旋</strong></li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912221123370.png" alt="image-20220912221123370"></p>
<ul>
<li><strong>染色：</strong></li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912221149051.png" alt="image-20220912221149051"></p>
<h5 id="为什么HashMap链表转红黑树的阈值为-8-呢？"><a href="#为什么HashMap链表转红黑树的阈值为-8-呢？" class="headerlink" title="为什么HashMap链表转红黑树的阈值为 8 呢？"></a>为什么HashMap链表转红黑树的阈值为 8 呢？</h5><p>树化发生在table数组的长度大于 64 ，且链表的长度大于 8 的时候。</p>
<p>为什么是 8 呢？源码的注释也给出了答案。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913124405034.png" alt="image-20220913124405034"></p>
<p>红黑树节点的大小大概是普通节点大小的两倍，所以转红黑树，牺牲了空间换时间，更多的是一种兜底的策略，保证极端情况下的查找效率。</p>
<p>阈值为什么要选 8 呢？和统计学有关。理想情况下，使用随机哈希码，链表里的节点符合泊松分布，出现节点个数的概率是递减的，节点个数为 8 的情况，发生概率仅为0.00000006。</p>
<p>至于红黑树转回链表的阈值为什么是 6 ，而不是 8 ？是因为如果这个阈值也设置成 8 ，假如发生碰撞，节点增减刚好在 8 附近，会发生链表和红黑树的不断转换，导致资源浪费。</p>
<h3 id="HashMap-的扩容机制"><a href="#HashMap-的扩容机制" class="headerlink" title="HashMap 的扩容机制"></a><strong>HashMap 的扩容机制</strong></h3><h4 id="扩容概述"><a href="#扩容概述" class="headerlink" title="扩容概述"></a><strong>扩容概述</strong></h4><p>数组的<strong>初始容量为16</strong>，而容量是以<strong>2的次方</strong>扩充的，一是为了提高性能使用足够大的数组，二是为了能使用位运算代替取模预算(据说提升了5~8倍)。</p>
<p>数组是否需要扩充是通过负载因子判断的，如果当前元素个数为数组容量的<strong>0.75</strong>时，就会扩充数组。这个0.75就是默认的负载因子，可由构造器传入。我们也可以设置大于1的负载因子，这样数组就不会扩充，牺牲性能，节省内存。</p>
<p>为了解决碰撞，数组中的元素是单向链表类型。当链表长度到达一个阈值时（7或8），会将链表转换成红黑树提高性能。而当链表长度<strong>缩小到另一个阈值时（6）</strong>，又会将红黑树转换回单向链表提高性能。</p>
<p>对于第三点补充说明，检查链表长度转换成红黑树之前，还会先检测当前数组数组是否到达一个<strong>阈值（64）</strong>，如果没有到达这个容量，会放弃转换，先去扩充数组。所以上面也说了链表长度的阈值是7或8，因为会有一次放弃转换的操作。</p>
<h4 id="扩容过程"><a href="#扩容过程" class="headerlink" title="扩容过程"></a><strong>扩容过程</strong></h4><p>HashMap是基于数组+链表和红黑树实现的，但用于存放key值的桶数组的长度是固定的，由初始化参数确定。</p>
<p>那么，随着数据的插入数量增加以及负载因子的作用下，就需要扩容来存放更多的数据。而扩容中有一个非常重要的点，就是jdk1.8中的优化操作，可以不需要再重新计算每一个元素的哈希值。</p>
<p>因为HashMap的初始容量是 2 的次幂，扩容之后的长度是原来的二倍，新的容量也是 2 的次幂，所以，元素，要么在原位置，要么在原位置再移动 2 的次幂。</p>
<p>看下这张图，n为table的长度，图a表示扩容前的key1和key2两种key确定索引的位置，图b表示扩容后key1和key2两种key确定索引位置。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913125853617.png" alt="image-20220913125853617"></p>
<p>元素在重新计算hash之后，因为n变为 2 倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913125920404.png" alt="image-20220913125920404"></p>
<p>所以在扩容时，只需要看原来的hash值新增的那一位是 0 还是 1 就行了，是 0 的话索引没变，是 1的化变成原索引+oldCap，看看如 16 扩容为 32 的示意图：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913130007253.png" alt="image-20220913130007253"></p>
<p>扩容节点迁移主要逻辑：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913130034249.png" alt="image-20220913130034249"></p>
<h4 id="扩容在什么时候呢？为什么扩容因子是0-75？"><a href="#扩容在什么时候呢？为什么扩容因子是0-75？" class="headerlink" title="扩容在什么时候呢？为什么扩容因子是0.75？"></a><strong>扩容在什么时候呢？为什么扩容因子是0.75？</strong></h4><p>为了减少哈希冲突发生的概率，当当前HashMap的元素个数达到一个临界值的时候，就会触发扩容，把所有元素rehash之后再放在扩容后的容器中，这是一个相当耗时的操作。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913130341824.png" alt="image-20220913130341824"></p>
<p>而这个临界值threshold就是由加载因子和当前容器的容量大小来确定的，假如采用默认的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">临界值（threshold ）= 默认容量（DEFAULT_INITIAL_CAPACITY） * 默认扩容因子</span><br><span class="line">（DEFAULT_LOAD_FACTOR）</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913130458645.png" alt="image-20220913130458645"></p>
<p>那就是大于16x0.75=12时，就会触发扩容操作。</p>
<p>那么为什么选择了0.75作为HashMap的默认加载因子呢？</p>
<p>简单来说，这是对空间成本和时间成本平衡的考虑。</p>
<p>在HashMap中有这样一段注释：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913130552259.png" alt="image-20220913130552259"></p>
<p>我们都知道，HashMap的散列构造方式是Hash取余，负载因子决定元素个数达到多少时候扩容。</p>
<p>假如我们设的比较大，元素比较多，空位比较少的时候才扩容，那么发生哈希冲突的概率就增加了，查找的时间成本就增加了。     </p>
<p>我们设的比较小的话，元素比较少，空位比较多的时候就扩容了，发生哈希碰撞的概率就降低了，查找时间成本降低，但是就需要更多的空间去存储元素，空间成本就增加了。</p>
<h4 id="如果初始化HashMap，传一个-17-的值-new-HashMap-lt-gt-new-HashMap-lt-gt-，它会怎么处理？"><a href="#如果初始化HashMap，传一个-17-的值-new-HashMap-lt-gt-new-HashMap-lt-gt-，它会怎么处理？" class="headerlink" title="如果初始化HashMap，传一个 17 的值 new HashMap&lt;&gt;new HashMap&lt;&gt; ，它会怎么处理？"></a><strong>如果初始化HashMap，传一个 17 的值 new HashMap&lt;&gt;new HashMap&lt;&gt; ，它会怎么处理？</strong></h4><p>简单来说，就是初始化时，传的不是 2 的倍数时，<strong>HashMap会向上寻找离得最近的 2 的倍数</strong>，所以传入 17 ，但HashMap的实际容量是 32 。</p>
<p>我们来看看详情，在HashMap的初始化中，有这样一段方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>阀值 threshold ，通过方法tableSizeFor 进行计算，是根据初始化传的参数来计算的。</li>
<li>同时，这个方法也要要寻找比初始值大的，最小的那个 2 进制数值。比如传了 17 ，我应该找到的是 32 。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span> ;</span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">1</span> ;</span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">2</span> ;</span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">4</span> ;</span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">8</span> ;</span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">16</span> ;</span><br><span class="line"><span class="keyword">return</span> (n &lt; <span class="number">0</span> )? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY)? MAXIMUM_CAPACITY : n + <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MAXIMUM_CAPACITY = 1 &lt;&lt; 30，这个是临界范围，也就是最大的Map集合。</li>
<li>计算过程是向右移位 1 、 2 、 4 、 8 、 16 ，和原来的数做| 运算，这主要是为了把二进制的各个位置都填上 1 ，当二进制的各个位置都是 1 以后，就是一个标准的 2 的倍数减 1 了，最后把结果加 1 再返回即可。</li>
</ul>
<p>以 17 为例，看一下初始化计算table容量的过程：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913112429618.png" alt="image-20220913112429618"></p>
<h3 id="HashMap-的线程安全"><a href="#HashMap-的线程安全" class="headerlink" title="HashMap 的线程安全"></a>HashMap 的线程安全</h3><p><strong>HashMap不是线程安全的</strong>，可能会发生这些问题：</p>
<ul>
<li><strong>多线程下扩容死循环</strong>。JDK1.7 中的 HashMap 使用<strong>头插法</strong>插入元素，在多线程的环境下，扩容的时候有可能导致<strong>环形链表</strong>的出现，形成死循环。因此，JDK1.8 使用尾插法插入元素，在扩容时会保持链表元素原本的顺序，不会出现环形链表的问题。</li>
<li><strong>多线程的 put 可能导致元素的丢失</strong>。多线程同时执行 put 操作，如果计算出来的索引位置是相同的，那会造成前一个 key 被后一个 key 覆盖，从而导致元素的丢失。此问题在 JDK1.7 和 JDK 1.8 中都存在。</li>
<li><strong>put 和 get 并发时，可能导致 get 为 null</strong>。线程 1 执行 put 时，因为元素个数超出 threshold而导致 rehash，线程 2 此时执行 get，有可能导致这个问题。这个问题在 JDK 1.7 和 JDK 1.8 中都存在。</li>
</ul>
<h4 id="有什么办法能解决HashMap线程不安全的问题呢"><a href="#有什么办法能解决HashMap线程不安全的问题呢" class="headerlink" title="有什么办法能解决HashMap线程不安全的问题呢"></a>有什么办法能解决HashMap线程不安全的问题呢</h4><p>Java 中有 HashTable、Collections.synchronizedMap、以及 ConcurrentHashMap 可以实现线程安全的 Map。</p>
<ul>
<li>HashTable 是直接在操作方法上加 synchronized 关键字，锁住整个table数组，粒度比较大；</li>
<li>Collections.synchronizedMap 是使用 Collections 集合工具的内部类，通过传入 Map 封装出一个SynchronizedMap 对象，内部定义了一个对象锁，方法内通过对象锁实现；</li>
<li>ConcurrentHashMap 在jdk1.7中使用分段锁，在jdk1.8中使用CAS+synchronized。</li>
</ul>
<h3 id="HashMap-的put流程"><a href="#HashMap-的put流程" class="headerlink" title="HashMap 的put流程"></a>HashMap 的put流程</h3><p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912204443510.png" alt="image-20220912204443510"></p>
<ol>
<li>首先进行哈希值的扰动，获取一个新的哈希值。**(key == null)? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)**;</li>
<li>判断tab是否位空或者长度为 0 ，如果是则进行扩容操作。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span> )</span><br><span class="line">n = (tab = resize()).length;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>根据哈希值计算下标，如果对应小标正好没有存放数据，则直接插入即可否则需要覆</li>
<li>判断tab[i]是否为树节点，否则向链表中插入数据，是则向树中插入节点。</li>
<li>如果链表中插入节点的时候，链表长度大于等于 8 ，则需要把链表转换为红黑树。<strong>treeifyBin(tab, hash)</strong>;</li>
<li>最后所有元素处理完成后，判断是否超过阈值；threshold，超过则扩容。</li>
</ol>
<h3 id="HashMap-的查找元素过程"><a href="#HashMap-的查找元素过程" class="headerlink" title="HashMap 的查找元素过程"></a>HashMap 的查找元素过程</h3><p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912205117553.png" alt="image-20220912205117553"></p>
<p>HashMap的查找就简单很多：</p>
<p><strong>1.</strong> 使用扰动函数，获取新的哈希值<br><strong>2.</strong> 计算数组下标，获取节点<br><strong>3.</strong> 当前节点和key匹配，直接返回<br><strong>4.</strong> 否则，当前节点是否为树节点，查找红黑树<br><strong>5.</strong> 否则，遍历链表查找</p>
<h3 id="HashMap-的哈希-扰动函数"><a href="#HashMap-的哈希-扰动函数" class="headerlink" title="HashMap 的哈希/扰动函数"></a>HashMap 的哈希/扰动函数</h3><p>HashMap的哈希函数是先拿到 key 的hashcode，是一个 32 位的int类型的数值，然后让hashcode的高 16 位和低 16 位进行异或操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line"><span class="type">int</span> h;</span><br><span class="line"><span class="comment">// key的hashCode和key的hashCode右移 16 位做异或运算</span></span><br><span class="line"><span class="keyword">return</span> (key == <span class="literal">null</span>)? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="为什么哈希-扰动函数能降hash碰撞"><a href="#为什么哈希-扰动函数能降hash碰撞" class="headerlink" title="为什么哈希/扰动函数能降hash碰撞"></a>为什么哈希/扰动函数能降hash碰撞</h4><p>因为 key.hashCode() 函数调用的是 key 键值类型自带的哈希函数，返回 int 型散列值。int 值范围为 <strong>-2147483648~2147483647</strong> ，加起来大概 40 亿的映射空间。</p>
<p>只要哈希函数映射得比较均匀松散，一般应用是很难出现碰撞的。但问题是一个 40 亿长度的数组，内存是放不下的。</p>
<p>假如 HashMap 数组的初始大小才 16 ，就需要用之前需要对数组的长度取模运算，得到的余数才能用来访问数组下标。</p>
<p>源码中模运算就是把散列值和数组长度 - 1 做一个 “与&amp;” 操作，位运算比取余 % 运算要快。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bucketIndex = indexFor(hash, table.length);</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexFor</span><span class="params">(<span class="type">int</span> h, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> h &amp; (length- <span class="number">1</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顺便说一下，这也正好解释了为什么 HashMap 的数组长度要取 2 的整数幂。因为这样（数组长度 - 1）正好相当于一个 “低位掩码”。与 操作的结果就是散列值的高位全部归零，只保留低位值，用来做数组下标访问。以初始长度 16 为例，16-1=15。 2 进制表示是0000 0000 0000 0000 0000 0000 0000 1111。和某个散列值做 与 操作如下，结果就是截取了最低的四位值。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912205843632.png" alt="image-20220912205843632"></p>
<p>这样是要快捷一些，但是新的问题来了，就算散列值分布再松散，要是只取最后几位的话，碰撞也会很严重。如果散列本身做得不好，分布上成等差数列的漏洞，如果正好让最后几个低位呈现规律性重复，那就更难搞了。</p>
<p>这时候 扰动函数 的价值就体现出来了，看一下扰动函数的示意图：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220912205945315.png" alt="image-20220912205945315"></p>
<p>右移 16 位，正好是 32bit 的一半，自己的高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。</p>
<h4 id="你还知道哪些哈希函数的构造方法呢？"><a href="#你还知道哪些哈希函数的构造方法呢？" class="headerlink" title="你还知道哪些哈希函数的构造方法呢？"></a><strong>你还知道哪些哈希函数的构造方法呢？</strong></h4><p>HashMap里哈希构造函数的方法叫：</p>
<p>除留取余法：<strong>H（key)=key%p（p&lt;=N）</strong>,关键字除以一个不大于哈希表长度的正整数p，所得余数为地址，当然HashMap里进行了优化改造，效率更高，散列也更均衡。</p>
<p>除此之外，还有这几种常见的哈希函数构造方法：</p>
<ul>
<li><p><strong>直接定址法</strong></p>
<p>直接根据key来映射到对应的数组位置，例如 1232 放到下标 1232 的位置。</p>
</li>
<li><p><strong>数字分析法</strong></p>
<p>取key的某些数字（例如十位和百位）作为映射的位置</p>
</li>
<li><p><strong>平方取中法</strong></p>
<p>取key平方的中间几位作为映射的位置</p>
</li>
<li><p><strong>折叠法</strong></p>
<p>将key分割成位数相同的几段，然后把它们的叠加和作为映射的位置</p>
</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913112805355.png" alt="image-20220913112805355"></p>
<h4 id="解决哈希冲突有哪些方法呢？"><a href="#解决哈希冲突有哪些方法呢？" class="headerlink" title="解决哈希冲突有哪些方法呢？"></a><strong>解决哈希冲突有哪些方法呢？</strong></h4><p>我们到现在已经知道，HashMap使用链表的原因为了处理哈希冲突，这种方法就是所谓的：</p>
<ul>
<li><strong>链地址法</strong>：在冲突的位置拉一个链表，把冲突的元素放进去。</li>
</ul>
<p>除此之外，还有一些常见的解决冲突的办法：</p>
<ul>
<li><strong>开放定址法</strong> ：开放定址法就是从冲突的位置再接着往下找，给冲突元素找个空位。</li>
</ul>
<p>找到空闲位置的方法也有很多种：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">- 线行探查法: 从冲突的位置开始，依次判断下一个位置是否空闲，直至找到空闲位置</span><br><span class="line">- 平方探查法: 从冲突的位置x开始，第一次增加1^2 个位置，第二次增加2^2 ...，直</span><br><span class="line">  至找到空闲的位置</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure>


<p>​    </p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913114609119.png" alt="image-20220913114609119"></p>
<ul>
<li><strong>再哈希法</strong>：换种哈希函数，重新计算冲突元素的地址。</li>
<li><strong>建立公共溢出区</strong>：再建一个数组，把冲突的元素放进去。</li>
</ul>
<h3 id="HashMap-JDK1-8优化"><a href="#HashMap-JDK1-8优化" class="headerlink" title="HashMap JDK1.8优化"></a>HashMap JDK1.8优化</h3><p><strong>1. 数据结构</strong> ：数组 + 链表改成了数组 + 链表或红黑树<br>原因：发生 hash 冲突，元素会存入链表，链表过长转为红黑树，将时间复杂度由O(n)降为O(logn)<br><strong>2. 链表插入方式</strong> ：链表的插入方式从头插法改成了尾插法<br>简单说就是插入时，如果数组位置上已经有元素，1.7 将新元素放到数组中，原始节点作为新节点的后继节点，1.8 遍历链表，将元素放置到链表的最后。<br>原因：因为 1.7 头插法扩容时，头插法会使链表发生反转，多线程环境下会产生环。<br><strong>3. 扩容rehash</strong> ：扩容的时候 1.7 需要对原数组中的元素进行重新 hash 定位在新数组的位置，1.8 采用更简单的判断逻辑，不需要重新通过哈希函数计算位置，新的位置不变或索引 + 新增容量大小。<br>原因：提高扩容的效率，更快地扩容。<br><strong>4. 扩容时机</strong> ：在插入时，1.7 先判断是否需要扩容，再插入，1.8 先进行插入，插入完成再判断是否需要扩容；<br><strong>5. 散列函数</strong> ：1.7 做了四次移位和四次异或，jdk1.8只做一次。<br>原因：做 4 次的话，边际效用也不大，改为一次，提升效率。</p>
<h3 id="HashMap-手写实现"><a href="#HashMap-手写实现" class="headerlink" title="HashMap 手写实现"></a>HashMap 手写实现</h3><p>我们实现的简单的HashMap命名为<code>ThirdHashMap</code>，先确定整体的设计：</p>
<ul>
<li>散列函数：hashCode()+除留余数法</li>
<li>冲突解决：链地址法</li>
</ul>
<p>整体结构如下：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913135034487.png" alt="自定义HashMap整体结构"></p>
<h4 id="内部节点类"><a href="#内部节点类" class="headerlink" title="内部节点类"></a><strong>内部节点类</strong></h4><p>我们需要定义一个节点来作为具体数据的载体，它不仅要承载键值对，同样还得作为单链表的节点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 节点类</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K, V&gt; &#123;</span><br><span class="line">       <span class="comment">//键值对</span></span><br><span class="line">       <span class="keyword">private</span> K key;</span><br><span class="line">       <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//链表，后继</span></span><br><span class="line">       <span class="keyword">private</span> Node&lt;K, V&gt; next;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.key = key;</span><br><span class="line">           <span class="built_in">this</span>.value = value;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(K key, V value, Node&lt;K, V&gt; next)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.key = key;</span><br><span class="line">           <span class="built_in">this</span>.value = value;</span><br><span class="line">           <span class="built_in">this</span>.next = next;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a><strong>成员变量</strong></h4><p>主要有四个成员变量，其中桶数组作为装载数据元素的结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认容量</span></span><br><span class="line">   <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">   <span class="comment">//负载因子</span></span><br><span class="line">   <span class="keyword">final</span> <span class="type">float</span> <span class="variable">LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line">   <span class="comment">//HashMap的大小</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">   <span class="comment">//桶数组</span></span><br><span class="line">   Node&lt;K, V&gt;[] buckets;</span><br></pre></td></tr></table></figure>

<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h4><p>构造方法有两个，无参构造方法，桶数组默认容量，有参指定桶数组容量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参构造器，设置桶数组默认容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThirdHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        buckets = <span class="keyword">new</span> <span class="title class_">Node</span>[DEFAULT_CAPACITY];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有参构造器，指定桶数组容量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThirdHashMap</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        buckets = <span class="keyword">new</span> <span class="title class_">Node</span>[capacity];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a><strong>散列函数</strong></h4><p>散列函数，就是我们前面说的hashCode()和数组长度取余。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哈希函数，获取地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(K key, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="comment">//获取hash code</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">        <span class="comment">//和桶数组长度取余</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> hashCode % length;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(index);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a><strong>put方法</strong></h4><p>我用了一个putval方法来完成实际的逻辑，这是因为扩容也会用到这个方法。</p>
<p>大概的逻辑：</p>
<ul>
<li>获取元素插入位置</li>
<li>当前位置为空，直接插入</li>
<li>位置不为空，发生冲突，遍历链表</li>
<li>如果元素key和节点相同，覆盖，否则新建节点插入链表头部</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * put方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否需要进行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (size &gt;= buckets.length * LOAD_FACTOR) resize();</span><br><span class="line">        putVal(key, value, buckets);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将元素存入指定的node数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> table</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">putVal</span><span class="params">(K key, V value, Node&lt;K, V&gt;[] table)</span> &#123;</span><br><span class="line">        <span class="comment">//获取位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(key, table.length);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> table[index];</span><br><span class="line">        <span class="comment">//插入的位置为空</span></span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            table[index] = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(key, value);</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入位置不为空，说明发生冲突，使用链地址法,遍历链表</span></span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果key相同，就覆盖掉</span></span><br><span class="line">            <span class="keyword">if</span> ((node.key.hashCode() == key.hashCode())</span><br><span class="line">                    &amp;&amp; (node.key == key || node.key.equals(key))) &#123;</span><br><span class="line">                node.value = value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当前key不在链表中，插入链表头部</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, value, table[index]);</span><br><span class="line">        table[index] = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="扩容方法"><a href="#扩容方法" class="headerlink" title="扩容方法"></a><strong>扩容方法</strong></h4><p>扩容的大概过程：</p>
<ul>
<li>创建两倍容量的新数组</li>
<li>将当前桶数组的元素重新散列到新的数组</li>
<li>新数组置为map的桶数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 扩容</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//创建一个两倍容量的桶数组</span></span><br><span class="line">       Node&lt;K, V&gt;[] newBuckets = <span class="keyword">new</span> <span class="title class_">Node</span>[buckets.length * <span class="number">2</span>];</span><br><span class="line">       <span class="comment">//将当前元素重新散列到新的桶数组</span></span><br><span class="line">       rehash(newBuckets);</span><br><span class="line">       buckets = newBuckets;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 重新散列当前元素</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> newBuckets</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">(Node&lt;K, V&gt;[] newBuckets)</span> &#123;</span><br><span class="line">       <span class="comment">//map大小重新计算</span></span><br><span class="line">       size = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//将旧的桶数组的元素全部刷到新的桶数组里</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">           <span class="comment">//为空，跳过</span></span><br><span class="line">           <span class="keyword">if</span> (buckets[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           Node&lt;K, V&gt; node = buckets[i];</span><br><span class="line">           <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="comment">//将元素放入新数组</span></span><br><span class="line">               putVal(node.key, node.value, newBuckets);</span><br><span class="line">               node = node.next;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a><strong>get方法</strong></h4><p>get方法就比较简单，通过散列函数获取地址，这里我省去了有没有成链表的判断，直接查找链表。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="comment">//获取key对应的地址</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(key, buckets.length);</span><br><span class="line">        <span class="keyword">if</span> (buckets[index] == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        Node&lt;K, V&gt; node = buckets[index];</span><br><span class="line">        <span class="comment">//查找链表</span></span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((node.key.hashCode() == key.hashCode())</span><br><span class="line">                    &amp;&amp; (node.key == key || node.key.equals(key))) &#123;</span><br><span class="line">                <span class="keyword">return</span> node.value;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="HashMap-的常见遍历方式"><a href="#HashMap-的常见遍历方式" class="headerlink" title="HashMap 的常见遍历方式?"></a><strong>HashMap 的常见遍历方式?</strong></h3><p>随着 JDK 1.8 Streams API 的发布，使得 HashMap 拥有了更多的遍历的方式，但应该选择那种遍历方式？反而成了一个问题。</p>
<p>本文<strong>先从 HashMap 的遍历方法讲起，然后再从性能、原理以及安全性等方面，来分析 HashMap 各种遍历方式的优势与不足</strong>，本文主要内容如下图所示：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/KkbFHVifyKcpI-YdYNIr7s4rNF6pGag4IGeJL_O4FEg.jpegtoken=W.q8Qvd5kfog6r-PSmptI242Ro-m1smLTkhYfMzRQZLZfpdC8vjEyX_GLLRcjn91U" alt="img"></p>
<h4 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h4><p>HashMap <strong>遍历从大的方向来说，可分为以下 4 类</strong>：</p>
<ul>
<li>迭代器（Iterator）方式遍历；</li>
<li>For Each 方式遍历；</li>
<li>Lambda 表达式遍历（JDK 1.8+）;</li>
<li>Streams API 遍历（JDK 1.8+）。</li>
</ul>
<p>但每种类型下又有不同的实现方式，因此具体的遍历方式又可以分为以下 7 种：</p>
<ul>
<li>使用迭代器（Iterator）EntrySet 的方式进行遍历；</li>
<li>使用迭代器（Iterator）KeySet 的方式进行遍历；</li>
<li>使用 For Each EntrySet 的方式进行遍历；</li>
<li>使用 For Each KeySet 的方式进行遍历；</li>
<li>使用 Lambda 表达式的方式进行遍历；</li>
<li>使用 Streams API 单线程的方式进行遍历；</li>
<li>使用 Streams API 多线程的方式进行遍历。</li>
</ul>
<p>接下来我们来看每种遍历方式的具体实现代码。  </p>
<h5 id="1-迭代器-EntrySet"><a href="#1-迭代器-EntrySet" class="headerlink" title="1.迭代器 EntrySet"></a><strong>1.迭代器 EntrySet</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">5</span>, <span class="string">&quot;Java中文社群&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 遍历</span></span><br><span class="line"></span><br><span class="line">     Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">       Map.Entry&lt;Integer, String&gt; entry = iterator.next();</span><br><span class="line"></span><br><span class="line">       System.out.println(entry.getKey());</span><br><span class="line"></span><br><span class="line">       System.out.println(entry.getValue());</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">以上程序的执行结果为：</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   Java</span><br><span class="line"></span><br><span class="line">   <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  JDK</span><br><span class="line"></span><br><span class="line">   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">   Spring Framework</span><br><span class="line"></span><br><span class="line">   <span class="number">4</span></span><br><span class="line"></span><br><span class="line">   MyBatis framework</span><br><span class="line"></span><br><span class="line">   <span class="number">5</span></span><br><span class="line"></span><br><span class="line">   Java中文社群</span><br></pre></td></tr></table></figure>

<h5 id="2-迭代器-KeySet"><a href="#2-迭代器-KeySet" class="headerlink" title="2.迭代器 KeySet"></a>2.迭代器 KeySet</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line"></span><br><span class="line">     Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">5</span>, <span class="string">&quot;Java中文社群&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 遍历</span></span><br><span class="line"></span><br><span class="line">     Iterator&lt;Integer&gt; iterator = map.keySet().iterator();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"></span><br><span class="line">       System.out.println(key);</span><br><span class="line"></span><br><span class="line">       System.out.println(map.get(key));</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">以上程序的执行结果为：</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   Java</span><br><span class="line"></span><br><span class="line">   <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  JDK</span><br><span class="line"></span><br><span class="line">   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">   Spring Framework</span><br><span class="line"></span><br><span class="line">   <span class="number">4</span></span><br><span class="line"></span><br><span class="line">   MyBatis framework</span><br><span class="line"></span><br><span class="line">   <span class="number">5</span></span><br><span class="line"></span><br><span class="line">   Java中文社群</span><br></pre></td></tr></table></figure>

<h5 id="3-ForEach-EntrySet"><a href="#3-ForEach-EntrySet" class="headerlink" title="3.ForEach EntrySet"></a>3.ForEach EntrySet</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line"></span><br><span class="line">     Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">5</span>, <span class="string">&quot;Java中文社群&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 遍历</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(entry.getKey());</span><br><span class="line"></span><br><span class="line">       System.out.println(entry.getValue());</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">以上程序的执行结果为：</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   Java</span><br><span class="line"></span><br><span class="line">   <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  JDK</span><br><span class="line"></span><br><span class="line">   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">   Spring Framework</span><br><span class="line"></span><br><span class="line">   <span class="number">4</span></span><br><span class="line"></span><br><span class="line">   MyBatis framework</span><br><span class="line"></span><br><span class="line">   <span class="number">5</span></span><br><span class="line"></span><br><span class="line">   Java中文社群</span><br></pre></td></tr></table></figure>

<h5 id="4-ForEach-KeySet"><a href="#4-ForEach-KeySet" class="headerlink" title="4.ForEach KeySet"></a>4.ForEach KeySet</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line"></span><br><span class="line">     Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line"></span><br><span class="line">   map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">5</span>, <span class="string">&quot;Java中文社群&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 遍历</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(key);</span><br><span class="line"></span><br><span class="line">       System.out.println(map.get(key));</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">以上程序的执行结果为：</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   Java</span><br><span class="line"></span><br><span class="line">   <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  JDK</span><br><span class="line"></span><br><span class="line">   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">   Spring Framework</span><br><span class="line"></span><br><span class="line">   <span class="number">4</span></span><br><span class="line"></span><br><span class="line">   MyBatis framework</span><br><span class="line"></span><br><span class="line">   <span class="number">5</span></span><br><span class="line"></span><br><span class="line">   Java中文社群</span><br></pre></td></tr></table></figure>

<h5 id="5-Lambda"><a href="#5-Lambda" class="headerlink" title="5.Lambda"></a>5.Lambda</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line"></span><br><span class="line">     Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">5</span>, <span class="string">&quot;Java中文社群&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 遍历</span></span><br><span class="line"></span><br><span class="line">   map.forEach((key, value) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(key);</span><br><span class="line"></span><br><span class="line">       System.out.println(value);</span><br><span class="line"></span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">以上程序的执行结果为：</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   Java</span><br><span class="line"></span><br><span class="line">   <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  JDK</span><br><span class="line"></span><br><span class="line">   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">   Spring Framework</span><br><span class="line"></span><br><span class="line">   <span class="number">4</span></span><br><span class="line"></span><br><span class="line">   MyBatis framework</span><br><span class="line"></span><br><span class="line">   <span class="number">5</span></span><br><span class="line"></span><br><span class="line">   Java中文社群</span><br></pre></td></tr></table></figure>

<h5 id="6-Streams-API-单线程"><a href="#6-Streams-API-单线程" class="headerlink" title="6.Streams API 单线程"></a>6.Streams API 单线程</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line"></span><br><span class="line">     Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">5</span>, <span class="string">&quot;Java中文社群&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 遍历</span></span><br><span class="line"></span><br><span class="line">    map.entrySet().stream().forEach((entry) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(entry.getKey());</span><br><span class="line"></span><br><span class="line">       System.out.println(entry.getValue());</span><br><span class="line"></span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">以上程序的执行结果为：</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   Java</span><br><span class="line"></span><br><span class="line">   <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  JDK</span><br><span class="line"></span><br><span class="line">   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">   Spring Framework</span><br><span class="line"></span><br><span class="line">   <span class="number">4</span></span><br><span class="line"></span><br><span class="line">   MyBatis framework</span><br><span class="line"></span><br><span class="line">   <span class="number">5</span></span><br><span class="line"></span><br><span class="line">   Java中文社群</span><br></pre></td></tr></table></figure>

<h5 id="7-Streams-API-多线程"><a href="#7-Streams-API-多线程" class="headerlink" title="7.Streams API 多线程"></a>7.Streams API 多线程</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line"></span><br><span class="line">     Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">5</span>, <span class="string">&quot;Java中文社群&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 遍历</span></span><br><span class="line"></span><br><span class="line">    map.entrySet().parallelStream().forEach((entry) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(entry.getKey());</span><br><span class="line"></span><br><span class="line">       System.out.println(entry.getValue());</span><br><span class="line"></span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">以上程序的执行结果为：</span><br><span class="line"></span><br><span class="line">   <span class="number">4</span></span><br><span class="line"></span><br><span class="line">   MyBatis framework</span><br><span class="line"></span><br><span class="line">   <span class="number">5</span></span><br><span class="line"></span><br><span class="line">   Java中文社群</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   Java</span><br><span class="line"></span><br><span class="line">   <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  JDK</span><br><span class="line"></span><br><span class="line">   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">   Spring Framework</span><br></pre></td></tr></table></figure>

<h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><p>接下来我们使用 Oracle 官方提供的性能测试工具 JMH（Java Microbenchmark Harness，JAVA 微基准测试套件）来测试一下这 7 种循环的性能。</p>
<p>首先，我们先要引入 JMH 框架，在 pom.xml 文件中添加如下配置：</p>
<p>然后编写测试代码，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span> <span class="comment">// 测试完成时间</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Warmup(iterations = 2, time = 1, timeUnit = TimeUnit.SECONDS)</span> <span class="comment">// 预热 2 轮，每次 1s</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)</span> <span class="comment">// 测试 5 轮，每次 1s</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Fork(1)</span> <span class="comment">// fork 1 个线程</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@State(Scope.Thread)</span> <span class="comment">// 每个测试线程一个实例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapCycleTest</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>() &#123;&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 添加数据</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">       put(i, <span class="string">&quot;val:&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 启动基准测试</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Options</span> <span class="variable">opt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OptionsBuilder</span>()</span><br><span class="line"></span><br><span class="line">         .include(HashMapCycle.class.getSimpleName()) <span class="comment">// 要导入的测试类</span></span><br><span class="line"></span><br><span class="line">         .output(<span class="string">&quot;/Users/admin/Desktop/jmh-map.log&quot;</span>) <span class="comment">// 输出测试结果的文件</span></span><br><span class="line"></span><br><span class="line">         .build();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">Runner</span>(opt).run(); <span class="comment">// 执行测试</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Benchmark</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 遍历</span></span><br><span class="line"></span><br><span class="line">     Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">       Map.Entry&lt;Integer, String&gt; entry = iterator.next();</span><br><span class="line"></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Benchmark</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachEntrySet</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 遍历</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Benchmark</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 遍历</span></span><br><span class="line"></span><br><span class="line">     Iterator&lt;Integer&gt; iterator = map.keySet().iterator();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> map.get(k);</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Benchmark</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachKeySet</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 遍历</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> key;</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> map.get(k);</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Benchmark</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 遍历</span></span><br><span class="line"></span><br><span class="line">    map.forEach((key, value) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> key;</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> value;</span><br><span class="line"></span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Benchmark</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">streamApi</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 单线程遍历</span></span><br><span class="line"></span><br><span class="line">    map.entrySet().stream().forEach((entry) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line"></span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parallelStreamApi</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 多线程遍历</span></span><br><span class="line"></span><br><span class="line">    map.entrySet().parallelStream().forEach((entry) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line"></span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有被添加了 @Benchmark 注解的方法都会被测试，因为 parallelStream 为多线程版本性能一定是最好的，所以就不参与测试了，其他 6 个方法的测试结果如下：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/sbStZ-0A3ZTYfi64pK3w1hIycIm1pw6NTzMVR1IK_E8.jpegtoken=W.q8Qvd5kfog6r-PSmptI242Ro-m1smLTkhYfMzRQZLZfpdC8vjEyX_GLLRcjn91U" alt="img"></p>
<p>其中 Units 为 ns/op 意思是执行完成时间（单位为纳秒），而 Score 列为平均执行时间， ± 符号表示误差。从以上结果可以看出，两个 entrySet 的性能相近，并且执行速度最快，接下来是 stream ，然后是两个 keySet，性能最差的是 KeySet 。</p>
<p>注：以上结果基于测试环境：JDK 1.8 / Mac mini (2018) / Idea 2020.1</p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p><strong>从以上结果可以看出</strong> <strong>entrySet</strong> <strong>的性能比</strong> <strong>keySet</strong> <strong>的性能高出了一倍之多，因此我们应该尽量使用</strong> <strong>entrySet</strong> <strong>来实现 Map 集合的遍历</strong>。</p>
<h4 id="字节码分析"><a href="#字节码分析" class="headerlink" title="字节码分析"></a>字节码分析</h4><p>要理解以上的测试结果，我们需要把所有遍历代码通过 javac 编译成字节码来看具体的原因。</p>
<p>编译后，我们使用 Idea 打开字节码，内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>() &#123;</span><br><span class="line"></span><br><span class="line">     &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="number">0</span>; var1 &lt; <span class="number">2</span>; ++var1) &#123;</span><br><span class="line"></span><br><span class="line">         <span class="built_in">this</span>.put(var1, <span class="string">&quot;val:&quot;</span> + var1);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">HashMapTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] var0)</span> &#123;</span><br><span class="line"></span><br><span class="line">     entrySet();</span><br><span class="line"></span><br><span class="line">     keySet();</span><br><span class="line"></span><br><span class="line">     forEachEntrySet();</span><br><span class="line"></span><br><span class="line">     forEachKeySet();</span><br><span class="line"></span><br><span class="line">     lambda();</span><br><span class="line"></span><br><span class="line">     streamApi();</span><br><span class="line"></span><br><span class="line">     parallelStreamApi();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">Entry</span> <span class="variable">var1</span> <span class="operator">=</span> (Entry)var0.next();</span><br><span class="line"></span><br><span class="line">       System.out.println(var1.getKey());</span><br><span class="line"></span><br><span class="line">       System.out.println((String)var1.getValue());</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">var1</span> <span class="operator">=</span> (Integer)var0.next();</span><br><span class="line"></span><br><span class="line">       System.out.println(var1);</span><br><span class="line"></span><br><span class="line">       System.out.println((String)map.get(var1));</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachEntrySet</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">Entry</span> <span class="variable">var1</span> <span class="operator">=</span> (Entry)var0.next();</span><br><span class="line"></span><br><span class="line">       System.out.println(var1.getKey());</span><br><span class="line"></span><br><span class="line">       System.out.println((String)var1.getValue());</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachKeySet</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">Integer</span> <span class="variable">var1</span> <span class="operator">=</span> (Integer)var0.next();</span><br><span class="line"></span><br><span class="line">       System.out.println(var1);</span><br><span class="line"></span><br><span class="line">       System.out.println((String)map.get(var1));</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    map.forEach((var0, var1) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(var0);</span><br><span class="line"></span><br><span class="line">       System.out.println(var1);</span><br><span class="line"></span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">streamApi</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    map.entrySet().stream().forEach((var0) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(var0.getKey());</span><br><span class="line"></span><br><span class="line">       System.out.println((String)var0.getValue());</span><br><span class="line"></span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">parallelStreamApi</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    map.entrySet().parallelStream().forEach((var0) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(var0.getKey());</span><br><span class="line"></span><br><span class="line">       System.out.println((String)var0.getValue());</span><br><span class="line"></span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从结果可以看出，除了 Lambda 和 Streams API 之外，通过迭代器循环和 for 循环的遍历的 EntrySet 最终生成的代码是一样的，他们都是在循环中创建了一个遍历对象 Entry ，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="type">Entry</span> <span class="variable">var1</span> <span class="operator">=</span> (Entry)var0.next();</span><br><span class="line"></span><br><span class="line">     System.out.println(var1.getKey());</span><br><span class="line"></span><br><span class="line">     System.out.println((String)var1.getValue());</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachEntrySet</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="type">Entry</span> <span class="variable">var1</span> <span class="operator">=</span> (Entry)var0.next();</span><br><span class="line"></span><br><span class="line">     System.out.println(var1.getKey());</span><br><span class="line"></span><br><span class="line">     System.out.println((String)var1.getValue());</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">而 KeySet 的代码也是类似的，如下所示：</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="type">Integer</span> <span class="variable">var1</span> <span class="operator">=</span> (Integer)var0.next();</span><br><span class="line"></span><br><span class="line">     System.out.println(var1);</span><br><span class="line"></span><br><span class="line">     System.out.println((String)map.get(var1));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachKeySet</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="type">Integer</span> <span class="variable">var1</span> <span class="operator">=</span> (Integer)var0.next();</span><br><span class="line"></span><br><span class="line">     System.out.println(var1);</span><br><span class="line"></span><br><span class="line">     System.out.println((String)map.get(var1));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们在使用迭代器或是 for 循环 EntrySet 时，他们的性能都是相同的，因为他们最终生成的字节码基本都是一样的；同理 KeySet 的两种遍历方式也是类似的。</p>
<h4 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h4><p>EntrySet 之所以比 KeySet 的性能高是因为，KeySet 在循环时使用了 map.get(key)，而 map.get(key) 相当于又遍历了一遍 Map 集合去查询 key 所对应的值。为什么要用“又”这个词？那是因为<strong>在使用迭代器或者 for 循环时，其实已经遍历了一遍 Map 集合了，因此再使用</strong> <strong>map.get(key)</strong> <strong>查询时，相当于遍历了两遍</strong>。</p>
<p>而 EntrySet 只遍历了一遍 Map 集合，之后通过代码“Entry&lt;Integer, String&gt; entry = iterator.next()”把对象的 key 和 value 值都放入到了 Entry 对象中，因此再获取 key 和 value 值时就无需再遍历 Map 集合，只需要从 Entry 对象中取值就可以了。</p>
<p>所以，<strong>EntrySet 的性能比 KeySet 的性能高出了一倍，因为 KeySet 相当于循环了两遍 Map 集合，而 EntrySet 只循环了一遍</strong>。</p>
<h4 id="安全性测试"><a href="#安全性测试" class="headerlink" title="安全性测试"></a>安全性测试</h4><p>从上面的性能测试结果和原理分析，我想大家应该选用那种遍历方式，已经心中有数的，而接下来我们就从「安全」的角度入手，来分析那种遍历方式更安全。</p>
<p>我们把以上遍历划分为四类进行测试：迭代器方式、For 循环方式、Lambda 方式和 Stream 方式，测试代码如下。</p>
<h5 id="1-迭代器方式"><a href="#1-迭代器方式" class="headerlink" title="1.迭代器方式"></a>1.迭代器方式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">   Map.Entry&lt;Integer, String&gt; entry = iterator.next();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (entry.getKey() == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 删除</span></span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;del:&quot;</span> + entry.getKey());</span><br><span class="line"></span><br><span class="line">    iterator.remove();</span><br><span class="line"></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;show:&quot;</span> + entry.getKey());</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">以上程序的执行结果：</span><br><span class="line"></span><br><span class="line">  show:<span class="number">0</span></span><br><span class="line"></span><br><span class="line">  del:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">  show:<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>测试结果：<strong>迭代器中循环删除数据安全</strong>。</p>
<h5 id="2-For-循环方式"><a href="#2-For-循环方式" class="headerlink" title="2.For 循环方式"></a>2.For 循环方式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (entry.getKey() == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 删除</span></span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;del:&quot;</span> + entry.getKey());</span><br><span class="line"></span><br><span class="line">    map.remove(entry.getKey());</span><br><span class="line"></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;show:&quot;</span> + entry.getKey());</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上程序的执行结果：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/_3OM3BUdlXmR-epwk01TEDPOzrAAhRMgGseQnYvQqGo.jpegtoken=W.q8Qvd5kfog6r-PSmptI242Ro-m1smLTkhYfMzRQZLZfpdC8vjEyX_GLLRcjn91U" alt="img"></p>
<p>测试结果：<strong>For 循环中删除数据非安全</strong>。</p>
<h5 id="3-Lambda-方式"><a href="#3-Lambda-方式" class="headerlink" title="3.Lambda 方式"></a>3.Lambda 方式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.forEach((key, value) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (key == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;del:&quot;</span> + key);</span><br><span class="line"></span><br><span class="line">    map.remove(key);</span><br><span class="line"></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;show:&quot;</span> + key);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>以上程序的执行结果：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/IjUYFJX92qSgshIGqRudq8rzYJAfqWHV0053R0cCGk8.jpegtoken=W.q8Qvd5kfog6r-PSmptI242Ro-m1smLTkhYfMzRQZLZfpdC8vjEyX_GLLRcjn91U" alt="img"></p>
<p>测试结果：<strong>Lambda 循环中删除数据非安全</strong>。</p>
<p><strong>Lambda 删除的正确方式</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 map 中的 key 去判断删除</span></span><br><span class="line"></span><br><span class="line">map.keySet().removeIf(key -&gt; key == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">map.forEach((key, value) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">   System.out.println(<span class="string">&quot;show:&quot;</span> + key);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">以上程序的执行结果：</span><br><span class="line"></span><br><span class="line">  show:<span class="number">0</span></span><br><span class="line"></span><br><span class="line">  show:<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>从上面的代码可以看出，可以先使用 Lambda 的 removeIf 删除多余的数据，再进行循环是一种正确操作集合的方式。</p>
<h5 id="4-Stream-方式"><a href="#4-Stream-方式" class="headerlink" title="4.Stream 方式"></a>4.Stream 方式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.entrySet().stream().forEach((entry) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (entry.getKey() == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;del:&quot;</span> + entry.getKey());</span><br><span class="line"></span><br><span class="line">    map.remove(entry.getKey());</span><br><span class="line"></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;show:&quot;</span> + entry.getKey());</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>以上程序的执行结果：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/HbdC5zflYHd-4y1FMUJ0PaaLzY-xVWn6Z2j3OV6abXQ.jpegtoken=W.q8Qvd5kfog6r-PSmptI242Ro-m1smLTkhYfMzRQZLZfpdC8vjEyX_GLLRcjn91U" alt="img"></p>
<p>测试结果：<strong>Stream 循环中删除数据非安全</strong>。</p>
<p><strong>Stream 循环的正确方式</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.entrySet().stream().filter(m -&gt; <span class="number">1</span> != m.getKey()).forEach((entry) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (entry.getKey() == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;del:&quot;</span> + entry.getKey());</span><br><span class="line"></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;show:&quot;</span> + entry.getKey());</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">以上程序的执行结果：</span><br><span class="line"></span><br><span class="line">  show:<span class="number">0</span></span><br><span class="line"></span><br><span class="line">  show:<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>从上面的代码可以看出，可以使用 Stream 中的 filter 过滤掉无用的数据，再进行遍历也是一种安全的操作集合的方式。</p>
<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p><strong>我们不能在遍历中使用集合</strong> <strong>map.remove()</strong> <strong>来删除数据，这是非安全的操作方式，但我们可以使用迭代器的</strong> <strong>iterator.remove()</strong> <strong>的方法来删除数据，这是安全的删除集合的方式。</strong>同样的我们也可以使用 Lambda 中的 removeIf 来提前删除数据，或者是使用 Stream 中的 filter 过滤掉要删除的数据进行循环，这样都是安全的，当然我们也可以在 for 循环前删除数据在遍历也是线程安全的。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>本文我们讲了 HashMap 4 种遍历方式：迭代器、for、lambda、stream，以及具体的 7 种遍历方法，综合性能和安全性来看，<strong>我们应该尽量使用迭代器（Iterator）来遍历</strong> <strong>EntrySet</strong> <strong>的遍历方式来操作 Map 集合</strong>，这样就会既安全又高效了。</p>
<h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><p><strong>底层数据结构：</strong><code>Hashtable</code> 和 JDK1.8 之前的 <code>HashMap</code> 的底层数据结构类似都是采用 <strong>数组+链表</strong> 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；</p>
<p><strong>实现线程安全的方式（重要）：</strong> </p>
<p><strong><code>Hashtable</code>(同一把锁)</strong> :使用 <strong><code>synchronized</code></strong> 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。</p>
<p> <strong>Hashtable:</strong></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913140316598.png" alt="image-20220913140316598"></p>
<h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>TreeMap基于<strong>红黑树</strong>（Red-Black tree）实现。映射根据其<strong>键</strong>的自然顺序进行排序，或者根据创建映射时提供的 <strong>Comparator</strong> 进行排序，具体取决于使用的构造方法。TreeMap的基本操作containsKey、get、put、remove方法，它的时间复杂度是log(N)。</p>
<p>TreeMap包含几个重要的成员变量：root、size、comparator。其中root是红黑树的根节点。它是Entry类型，Entry是红黑树的节点，它包含了红黑树的6个基本组成：key、value、left、right、parent和color。Entry节点根据Key排序，包含的内容是value。Entry中key比较大小是根据比较器comparator来进行判断的。size是红黑树的节点个数。</p>
<p>TreeMap 实现 SortedMap 接口，能够把它保存的记录根据键排序，默认是按键值的升序排序， 也可以指定排序的比较器，当用 Iterator 遍历 TreeMap 时，得到的记录是排过序的。 如果使用排序的映射，建议使用 TreeMap。</p>
<p> 在使用 TreeMap 时，key 必须实现 Comparable 接口或者在构造 TreeMap 传入自定义Comparator，否则会在运行时抛出 java.lang.ClassCastException 类型的异常。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913161359407.png" alt="image-20220913161359407"></p>
<h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>LinkedHashMap使用双向链表来维护key-value对的顺序（其实只需要考虑key的顺序），该链表负责维护Map的迭代顺序，迭代顺序与key-value对的插入顺序保持一致。</p>
<p>LinkedHashMap可以避免对HashMap、Hashtable里的key-value对进行排序（只要插入key-value对时保持顺序即可），同时又可避免使用TreeMap所增加的成本。</p>
<p><strong>LinkedHashMap需要维护元素的插入顺序，因此性能略低于HashMap的性能。</strong>但因为它以链表来维护内部顺序，所以在迭代访问Map里的全部元素时将有较好的性能。</p>
<p>LinkedHashMap继承于HashMap，它在HashMap的基础上，通过维护一条<strong>双向链表</strong>，解决了HashMap不能随时保持遍历顺序和插入顺序一致的问题。在实现上，LinkedHashMap很多方法直接继承自HashMap，仅为维护双向链表重写了部分方法。</p>
<p>每当有新的键值对节点插入时，新节点最终会接在tail引用指向的节点后面。而tail引用则会移动到新的节点上，这样一个双向链表就建立起来了。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913141014099.png" alt="image-20220913141014099"></p>
<h2 id="ConcurrentHashmap"><a href="#ConcurrentHashmap" class="headerlink" title="ConcurrentHashmap"></a>ConcurrentHashmap</h2><h3 id="ConcurrentHashmap的底层实现"><a href="#ConcurrentHashmap的底层实现" class="headerlink" title="ConcurrentHashmap的底层实现"></a>ConcurrentHashmap的底层实现</h3><p><strong>ConcurrentHashmap</strong>线程安全在<strong>jdk1.7</strong>版本是基于<strong>分段锁</strong>实现，在j<strong>dk1.8</strong>是基于<strong>CAS+synchronized</strong>实现。</p>
<h4 id="1-7-分段锁"><a href="#1-7-分段锁" class="headerlink" title="1.7 分段锁"></a><strong>1.7 分段锁</strong></h4><p>从结构上说，1.7版本的ConcurrentHashMap采用分段锁机制，里面包含一个Segment数组，Segment继承于ReentrantLock，Segment则包含HashEntry的数组，HashEntry本身就是一个链表的结构，具有保存key、value的能力能指向下一个节点的指针。</p>
<p>实际上就是相当于每个Segment都是一个HashMap，默认的Segment长度是 16 ，也就是支持 16个线程的并发写，Segment之间相互不会受到影响。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913153346720.png" alt="image-20220913153346720"></p>
<p><strong>put流程</strong></p>
<p>当执行put操作时，会经历两个步骤：</p>
<ul>
<li>判断是否需要扩容；</li>
<li>定位到添加元素的位置，将其放入 HashEntry 数组中。</li>
</ul>
<p>插入过程会进行第一次 key 的 hash 来定位 Segment 的位置，如果该 Segment 还没有初始化，即通过 CAS 操作进行赋值，然后进行第二次 hash 操作，找到相应的 HashEntry 的位置，这里会利用继承过来的锁的特性，在将数据插入指定的 HashEntry 位置时（尾插法），会通过继承 ReentrantLock 的 tryLock() 方法尝试去获取锁，如果获取成功就直接插入相应的位置，如果已经有线程获取该Segment的锁，那当前线程会以自旋的方式去继续的调用 tryLock() 方法去获取锁，超过指定次数就挂起，等待唤醒。</p>
<p><strong>get流程</strong></p>
<p>Segment的get操作实现非常简单和高效，先经过一次再散列，然后使用这个散列值通过散列运算定位到 Segment，再通过散列算法定位到元素。get操作的高效之处在于整个get过程都不需要加锁，除非读到空的值才会加锁重读。原因就是将使用的共享变量定义成 volatile 类型。</p>
<h4 id="1-8-CAS-synchronized"><a href="#1-8-CAS-synchronized" class="headerlink" title="1.8 CAS+synchronized"></a><strong>1.8 CAS+synchronized</strong></h4><p>ConcurrentHashMap 取消了 Segment 分段锁，采用 <strong>CAS</strong> 和 <strong>synchronized</strong> 来保证并发安全。数据结构跟 HashMap1.8 的结构类似，<strong>数组+链表/红黑二叉树</strong>。Java 8 在链表长度超过一定阈值（8）时将链表（寻址时间复杂度为 O(N)）转换为红黑树（寻址时间复杂度为 O(log(N))）</p>
<p>synchronized 只锁定当前链表或红黑二叉树的<strong>首节点</strong>，这样只要 hash 不冲突，就不会产生并发，效率又提升 N 倍。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913154854202.png" alt="image-20220913154854202"></p>
<p><strong>put流程</strong></p>
<p><strong>1. 首先计算hash，遍历node数组，如果node是空的话，就通过CAS+自旋的方式初始化node数组初始化：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tab = initTable();</span><br></pre></td></tr></table></figure>

<p>node    数组初始化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="type">int</span> sc;</span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="literal">null</span> || tab.length == <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">//如果正在初始化或者扩容</span></span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span> )</span><br><span class="line">        <span class="comment">//等待</span></span><br><span class="line">        Thread.yield(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, - <span class="number">1</span> )) &#123; <span class="comment">//CAS</span></span><br><span class="line">        操作</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || tab.length == <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (sc &gt; <span class="number">0</span> )? sc : DEFAULT_CAPACITY;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n];</span><br><span class="line">            table = tab = nt;</span><br><span class="line">            sc = n - (n &gt;&gt;&gt; <span class="number">2</span> );</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    	sizeCtl = sc;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.如果当前数组位置是空则直接通过CAS自旋写入数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="type">boolean</span> <span class="title function_">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> i,</span></span><br><span class="line"><span class="params">    Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> &#123;</span><br><span class="line">   	 <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="type">long</span>)i &lt;&lt; ASHIFT) + ABASE, c,</span><br><span class="line">    v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.</strong> <strong>如果hash==MOVED，说明需要扩容，执行扩容</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">tab = helpTransfer(tab, f);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] nextTab; <span class="type">int</span> sc;</span><br><span class="line">    <span class="keyword">if</span> (tab != <span class="literal">null</span> &amp;&amp; (f <span class="keyword">instanceof</span> ForwardingNode) &amp;&amp;</span><br><span class="line">        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> resizeStamp(tab.length);</span><br><span class="line">            <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</span><br><span class="line">                (sc = sizeCtl) &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span> )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, sc + <span class="number">1</span> )) &#123;</span><br><span class="line">                transfer(tab, nextTab);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextTab;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.</strong> <strong>如果都不满足，就使用synchronized写入数据，写入数据同样判断链表、红黑树，链表写入和HashMap的方式一样，key hash一样就覆盖，反之就尾插法，链表长度超过 8 就转换成红黑树</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (f)&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913160154222.png" alt="image-20220913160154222"></p>
<p><strong>get查询</strong></p>
<p>get很简单，和HashMap基本相同，通过key计算位置，table该位置key相同就返回，如果是红黑树按照红黑树获取，否则就遍历链表获取。</p>
<h2 id="HashMap-和-Hashtable-的区别"><a href="#HashMap-和-Hashtable-的区别" class="headerlink" title="HashMap 和 Hashtable 的区别"></a>HashMap 和 Hashtable 的区别</h2><ul>
<li><p><strong>线程是否安全：</strong> <code>HashMap</code> 是非线程安全的，<code>Hashtable</code> 是线程安全的,因为 <code>Hashtable</code> 内部的方法基本都经过synchronized 修饰。（如果你要保证线程安全的话就使用 <code>ConcurrentHashMap</code> 吧！）；</p>
</li>
<li><p><strong>效率：</strong> 因为线程安全的问题，<code>HashMap</code> 要比 <code>Hashtable</code> 效率高一点。另外，<code>Hashtable</code> 基本被淘汰，不要在代码中使用它；</p>
</li>
<li><p><strong>对 Null key 和 Null value 的支持：</strong> <strong><code>HashMap</code></strong> <strong>可以存储 null 的 key 和 value</strong>，但 null 作为键只能有一个，null 作为值可以有多个；Hashtable 不允许有 null 键和 null 值，否则会抛出 <code>NullPointerException</code>。</p>
</li>
<li><p><strong>初始容量大小和每次扩充容量大小的不同 ：</strong></p>
<ul>
<li><p> ① 创建时如果不指定容量初始值，<code>Hashtable</code> <strong>默认的初始大小为 11</strong>，之后每次扩充，容量变为原来的 <strong>2n+1</strong>。<code>HashMap</code> <strong>默认的初始化大小为 16</strong>。之后每次扩充，容量变为原来的 2 倍。</p>
</li>
<li><p> ② 创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 <code>HashMap</code> 会将其扩充为 <strong>2 的幂次方大小</strong>（<code>HashMap</code> 中的<code>tableSizeFor()</code>方法保证，下面给出了源代码）。也就是说 <code>HashMap</code> 总是使用 2 的幂作为哈希表的大小,后面会介绍到为什么是 2 的幂次方。</p>
</li>
</ul>
</li>
<li><p><strong>底层数据结构：</strong> JDK1.8 以后的 <code>HashMap</code> 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（<strong>默认为 8</strong>）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。</p>
</li>
</ul>
<h2 id="HashMap-和-HashSet-区别"><a href="#HashMap-和-HashSet-区别" class="headerlink" title="HashMap 和 HashSet 区别"></a>HashMap 和 HashSet 区别</h2><p>如果你看过 <code>HashSet</code> 源码的话就应该知道：**<code>HashSet</code>** <strong>底层就是基于</strong> <strong><code>HashMap</code></strong> <strong>实现的</strong>。（<code>HashSet</code> 的源码非常非常少，因为除了 <code>clone()</code>、<code>writeObject()</code>、<code>readObject()</code>是 <code>HashSet</code> 自己不得不实现之外，其他方法都是直接调用 <code>HashMap</code> 中的方法。 </p>
<table>
<thead>
<tr>
<th align="center"><code>HashMap</code></th>
<th align="center"><code>HashSet</code></th>
</tr>
</thead>
<tbody><tr>
<td align="center">实现了 <code>Map</code> 接口</td>
<td align="center">实现 <code>Set</code> 接口</td>
</tr>
<tr>
<td align="center">存储键值对</td>
<td align="center">仅存储对象</td>
</tr>
<tr>
<td align="center">调用 <code>put()</code>向 map 中添加元素</td>
<td align="center">调用 <code>add()</code>方法向 <code>Set</code> 中添加元素</td>
</tr>
<tr>
<td align="center"><code>HashMap</code> 使用键（Key）计算 <code>hashcode</code></td>
<td align="center"><code>HashSet</code> 使用成员对象来计算 <code>hashcode</code> 值，对于两个对象来说 <code>hashcode</code> 可能相同，所以<code>equals()</code>方法用来判断对象的相等性</td>
</tr>
</tbody></table>
<h1 id="集合工具"><a href="#集合工具" class="headerlink" title="集合工具"></a>集合工具</h1><h2 id="Comparable-和-Comparator"><a href="#Comparable-和-Comparator" class="headerlink" title="Comparable 和 Comparator"></a>Comparable 和 Comparator</h2><p><strong>comparable</strong> 接口实际上是出自java.lang包 它有一个 **compareTo(Object obj)**方法用来排序</p>
<p><strong>comparator</strong>接口实际上是出自 java.util 包它有一个**compare(Object obj1, Object obj2)**方法用来排序</p>
<p>一般我们需要对一个集合使用自定义排序时，我们就要重写<code>compareTo()</code>方法或<code>compare()</code>方法，当我们需要对某一个集合实现两种排序方式，比如一个 song 对象中的歌名和歌手名分别采用一种排序方法的话，我们可以重写<code>compareTo()</code>方法和使用自制的<code>Comparator</code>方法或者以两个 Comparator 来实现歌名排序和歌星名排序，第二种代表我们只能使用两个参数版的 <code>Collections.sort()</code>. </p>
<p>Comparator 定制排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">       arrayList.add(-<span class="number">1</span>);</span><br><span class="line">       arrayList.add(<span class="number">3</span>);</span><br><span class="line">       arrayList.add(<span class="number">3</span>);</span><br><span class="line">       arrayList.add(-<span class="number">5</span>);</span><br><span class="line">       arrayList.add(<span class="number">7</span>);</span><br><span class="line">       arrayList.add(<span class="number">4</span>);</span><br><span class="line">       arrayList.add(-<span class="number">9</span>);</span><br><span class="line">       arrayList.add(-<span class="number">7</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;原始数组:&quot;</span>);</span><br><span class="line">       System.out.println(arrayList);</span><br><span class="line">       <span class="comment">// void reverse(List list)：反转</span></span><br><span class="line">       Collections.reverse(arrayList);</span><br><span class="line">       System.out.println(<span class="string">&quot;Collections.reverse(arrayList):&quot;</span>);</span><br><span class="line">       System.out.println(arrayList);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// void sort(List list),按自然排序的升序排序</span></span><br><span class="line">       Collections.sort(arrayList);</span><br><span class="line">       System.out.println(<span class="string">&quot;Collections.sort(arrayList):&quot;</span>);</span><br><span class="line">       System.out.println(arrayList);</span><br><span class="line">       <span class="comment">// 定制排序的用法</span></span><br><span class="line">       Collections.sort(arrayList, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> o2.compareTo(o1);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       System.out.println(<span class="string">&quot;定制排序后：&quot;</span>);</span><br><span class="line">       System.out.println(arrayList);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">原始数组:</span><br><span class="line">[-<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, -<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, -<span class="number">9</span>, -<span class="number">7</span>]</span><br><span class="line">Collections.reverse(arrayList):</span><br><span class="line">[-<span class="number">7</span>, -<span class="number">9</span>, <span class="number">4</span>, <span class="number">7</span>, -<span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, -<span class="number">1</span>]</span><br><span class="line">Collections.sort(arrayList):</span><br><span class="line">[-<span class="number">9</span>, -<span class="number">7</span>, -<span class="number">5</span>, -<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>]</span><br><span class="line">定制排序后：</span><br><span class="line">[<span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, -<span class="number">1</span>, -<span class="number">5</span>, -<span class="number">7</span>, -<span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<p>重写 compareTo 方法实现按年龄来排序</p>
<p>// person对象没有实现Comparable接口，所以必须实现，这样才不会出错，才可以使treemap中的数据按顺序排列<br>// 前面一个例子的String类已经默认实现了Comparable接口，详细可以查看String类的API文档，另外其他<br>// 像Integer类等都已经实现了Comparable接口，所以不需要另外实现了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * T重写compareTo方法实现按年龄来排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.age &gt; o.getAge()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.age &lt; o.getAge()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Output：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>-小红</span><br><span class="line"><span class="number">10</span>-王五</span><br><span class="line"><span class="number">20</span>-李四</span><br><span class="line"><span class="number">30</span>-张三</span><br></pre></td></tr></table></figure>

<h2 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h2><p>Collections 工具类常用方法:</p>
<ul>
<li>排序</li>
<li>查找,替换操作</li>
<li>同步控制(不推荐，需要线程安全的集合类型时请考虑使用 JUC 包下的并发集合)</li>
</ul>
<h3 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(List list)</span><span class="comment">//反转</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">shuffle</span><span class="params">(List list)</span><span class="comment">//随机排序</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(List list)</span><span class="comment">//按自然排序的升序排序</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(List list, Comparator c)</span><span class="comment">//定制排序，由Comparator控制排序逻辑</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(List list, <span class="type">int</span> i , <span class="type">int</span> j)</span><span class="comment">//交换两个索引位置的元素</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(List list, <span class="type">int</span> distance)</span><span class="comment">//旋转。当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将 list的前distance个元素整体移到后面</span></span><br></pre></td></tr></table></figure>

<h3 id="查找-替换操作"><a href="#查找-替换操作" class="headerlink" title="查找,替换操作"></a>查找,替换操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(List list, Object key)</span><span class="comment">//对List进行二分查找，返回索引，注意List必须是有序的</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(Collection coll)</span><span class="comment">//根据元素的自然顺序，返回最大的元素。 类比int min(Collection coll)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(Collection coll, Comparator c)</span><span class="comment">//根据定制排序，返回最大元素，排序规则由Comparatator类控制。类比int min(Collection coll, Comparator c)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">fill</span><span class="params">(List list, Object obj)</span><span class="comment">//用指定的元素代替指定list中的所有元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">frequency</span><span class="params">(Collection c, Object o)</span><span class="comment">//统计元素出现次数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">indexOfSubList</span><span class="params">(List list, List target)</span><span class="comment">//统计target在list中第一次出现的索引，找不到则返回-1，类比int lastIndexOfSubList(List source, list target)</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">replaceAll</span><span class="params">(List list, Object oldVal, Object newVal)</span><span class="comment">//用新元素替换旧元素</span></span><br></pre></td></tr></table></figure>

<h3 id="同步控制"><a href="#同步控制" class="headerlink" title="同步控制"></a>同步控制</h3><p><code>Collections</code> 提供了多个<code>synchronizedXxx()</code>方法·，该方法可以将指定集合包装成线程同步的集合，从而解决多线程并发访问集合时的线程安全问题。</p>
<p>我们知道 <code>HashSet</code>，<code>TreeSet</code>，<code>ArrayList</code>,<code>LinkedList</code>,<code>HashMap</code>,<code>TreeMap</code> 都是线程不安全的。<code>Collections</code> 提供了多个静态方法可以把他们包装成线程同步的集合。</p>
<p><strong>最好不要用下面这些方法，效率非常低，需要线程安全的集合类型时请考虑使用 JUC 包下的并发集合。</strong></p>
<p>方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">synchronizedCollection(Collection&lt;T&gt;  c) <span class="comment">//返回指定 collection 支持的同步（线程安全的）collection。</span></span><br><span class="line">synchronizedList(List&lt;T&gt; list)<span class="comment">//返回指定列表支持的同步（线程安全的）List。</span></span><br><span class="line">synchronizedMap(Map&lt;K,V&gt; m) <span class="comment">//返回由指定映射支持的同步（线程安全的）Map。</span></span><br><span class="line">synchronizedSet(Set&lt;T&gt; s) <span class="comment">//返回指定 set 支持的同步（线程安全的）set。</span></span><br></pre></td></tr></table></figure>

<h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913234928191.png" alt="image-20220913234928191"></p>
<h3 id="Stream概述"><a href="#Stream概述" class="headerlink" title="Stream概述"></a>Stream概述</h3><p>Java 8 是一个非常成功的版本，这个版本新增的<code>Stream</code>，配合同版本出现的 <code>Lambda</code> ，给我们操作[集合]（Collection）提供了极大的便利。</p>
<p>那么什么是<code>Stream</code>？</p>
<p><code>Stream</code>将要处理的元素集合看作一种流，在流的过程中，借助<code>Stream API</code>对流中的元素进行操作，比如：筛选、排序、聚合等。</p>
<p><code>Stream</code>可以由数组或集合创建，对流的操作分为两种：</p>
<ol>
<li><p>中间操作，每次返回一个新的流，可以有多个。</p>
</li>
<li><p>终端操作，每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值。</p>
</li>
</ol>
<p>另外，<code>Stream</code>有几个特性：</p>
<ol>
<li><p>stream不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果。</p>
</li>
<li><p>stream不会改变数据源，通常情况下会产生一个新的集合或一个值。</p>
</li>
<li><p>stream具有延迟执行特性，只有调用终端操作时，中间操作才会执行。</p>
</li>
</ol>
<h3 id="Stream的创建"><a href="#Stream的创建" class="headerlink" title="Stream的创建"></a>Stream的创建</h3><p><code>Stream</code>可以通过集合数组创建。</p>
<p>1、通过 <code>java.util.Collection.stream()</code> 方法用集合创建流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="comment">// 创建一个顺序流</span></span><br><span class="line">Stream&lt;String&gt; stream = list.stream();</span><br><span class="line"><span class="comment">// 创建一个并行流</span></span><br><span class="line">Stream&lt;String&gt; parallelStream = list.parallelStream();</span><br></pre></td></tr></table></figure>

<p>2、使用<code>java.util.Arrays.stream(T[] array)</code>方法用数组创建流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] array=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(array);</span><br></pre></td></tr></table></figure>

<p>3、使用<code>Stream</code>的静态方法：<code>of()、iterate()、generate()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">3</span>).limit(<span class="number">4</span>);</span><br><span class="line">stream2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class="number">3</span>);</span><br><span class="line">stream3.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">3</span> <span class="number">6</span> <span class="number">9</span></span><br><span class="line"><span class="number">0.6796156909271994</span></span><br><span class="line"><span class="number">0.1914314208854283</span></span><br><span class="line"><span class="number">0.8116932592396652</span></span><br></pre></td></tr></table></figure>

<p><strong><code>stream</code>和<code>parallelStream</code>的简单区分：</strong> <code>stream</code>是顺序流，由主线程按顺序对流执行操作，而<code>parallelStream</code>是并行流，内部以多线程并行执行的方式对流进行操作，但前提是流中的数据处理没有顺序要求。例如筛选集合中的奇数，两者的处理不同之处：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913234027609.png" alt="image-20220913234027609"></p>
<p>如果流中的数据量足够大，并行流可以加快处速度。</p>
<p>除了直接创建并行流，还可以通过<code>parallel()</code>把顺序流转换成并行流：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Integer&gt; findFirst = list.stream().parallel().filter(x-&gt;x&gt;<span class="number">6</span>).findFirst();</span><br></pre></td></tr></table></figure>

<h3 id="Stream的使用"><a href="#Stream的使用" class="headerlink" title="Stream的使用"></a>Stream的使用</h3><p>在使用stream之前，先理解一个概念：<code>Optional</code> 。</p>
<p><code>Optional</code>类是一个可以为<code>null</code>的容器对象。如果值存在则<code>isPresent()</code>方法会返回<code>true</code>，调用<code>get()</code>方法会返回该对象。<br>更详细说明请见：<a href="https://www.runoob.com/java/java8-optional-class.html">菜鸟教程Java 8 Optional类</a></p>
<p><strong>接下来，大批代码向你袭来！我将用20个案例将Stream的使用整得明明白白，只要跟着敲一遍代码，就能很好地掌握。</strong></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220913235841490.png" alt="image-20220913235841490"></p>
<h4 id="案例使用的员工类"><a href="#案例使用的员工类" class="headerlink" title="案例使用的员工类"></a><strong>案例使用的员工类</strong></h4><p>这是后面案例中使用的员工类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">7000</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lily&quot;</span>, <span class="number">7800</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Anni&quot;</span>, <span class="number">8200</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Owen&quot;</span>, <span class="number">9500</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alisa&quot;</span>, <span class="number">7900</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;  <span class="comment">// 姓名</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> salary; <span class="comment">// 薪资</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line">	<span class="keyword">private</span> String sex; <span class="comment">//性别</span></span><br><span class="line">	<span class="keyword">private</span> String area;  <span class="comment">// 地区</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 构造方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> salary, <span class="type">int</span> age,String sex,String area)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.salary = salary;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">		<span class="built_in">this</span>.sex = sex;</span><br><span class="line">		<span class="built_in">this</span>.area = area;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 省略了get和set，请自行添加</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="遍历-匹配（foreach-find-match）"><a href="#遍历-匹配（foreach-find-match）" class="headerlink" title="遍历/匹配（foreach/find/match）"></a><strong>遍历/匹配（foreach/find/match）</strong></h4><p><code>Stream</code>也是支持类似集合的遍历和匹配元素的，只是<code>Stream</code>中的元素是以<code>Optional</code>类型存在的。<code>Stream</code>的遍历、匹配非常简单。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/2020110914450139.png" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import已省略，请自行添加，后面代码亦是</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历输出符合条件的元素</span></span><br><span class="line">        list.stream().filter(x -&gt; x &gt; <span class="number">6</span>).forEach(System.out::println);</span><br><span class="line">        <span class="comment">// 匹配第一个</span></span><br><span class="line">        Optional&lt;Integer&gt; findFirst = list.stream().filter(x -&gt; x &gt; <span class="number">6</span>).findFirst();</span><br><span class="line">        <span class="comment">// 匹配任意（适用于并行流）</span></span><br><span class="line">        Optional&lt;Integer&gt; findAny = list.parallelStream().filter(x -&gt; x &gt; <span class="number">6</span>).findAny();</span><br><span class="line">        <span class="comment">// 是否包含符合特定条件的元素</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">anyMatch</span> <span class="operator">=</span> list.stream().anyMatch(x -&gt; x &gt; <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配第一个值：&quot;</span> + findFirst.get());</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配任意一个值：&quot;</span> + findAny.get());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否存在大于6的值：&quot;</span> + anyMatch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="筛选（filter）"><a href="#筛选（filter）" class="headerlink" title="筛选（filter）"></a><strong>筛选（filter）</strong></h4><p>筛选，是按照一定的规则校验流中的元素，将符合条件的元素提取到新的流中的操作。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/20201109144706541.jpg" alt="在这里插入图片描述"></p>
<p><strong>案例一：筛选出<code>Integer</code>集合中大于7的元素，并打印出来</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;Integer&gt; list = Arrays.asList(<span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>);</span><br><span class="line">		Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line">		stream.filter(x -&gt; x &gt; <span class="number">7</span>).forEach(System.out::println);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>预期结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8 9</span><br></pre></td></tr></table></figure>

<p><strong>案例二： 筛选员工中工资高于8000的人，并形成新的集合。</strong> 形成新集合依赖<code>collect</code>（收集），后文有详细介绍。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>, <span class="number">23</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">7000</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lily&quot;</span>, <span class="number">7800</span>, <span class="number">21</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Anni&quot;</span>, <span class="number">8200</span>, <span class="number">24</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Owen&quot;</span>, <span class="number">9500</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alisa&quot;</span>, <span class="number">7900</span>, <span class="number">26</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line"></span><br><span class="line">		List&lt;String&gt; fiterList = personList.stream().filter(x -&gt; x.getSalary() &gt; <span class="number">8000</span>).map(Person::getName)</span><br><span class="line">				.collect(Collectors.toList());</span><br><span class="line">		System.out.print(<span class="string">&quot;薪资高于8000美元的员工：&quot;</span> + fiterList);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">薪资高于<span class="number">8000</span>美元的员工：[Tom, Anni, Owen]</span><br></pre></td></tr></table></figure>

<h4 id="聚合（max-min-count"><a href="#聚合（max-min-count" class="headerlink" title="聚合（max/min/count)"></a><strong>聚合（max/min/count)</strong></h4><p><code>max</code>、<code>min</code>、<code>count</code>这些字眼你一定不陌生，没错，在mysql中我们常用它们进行数据统计。Java stream中也引入了这些概念和用法，极大地方便了我们对集合、数组的数据统计工作。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/20201109145217354.png" alt="在这里插入图片描述"></p>
<p><strong>案例一：获取<code>String</code>集合中最长的元素。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;adnm&quot;</span>, <span class="string">&quot;admmt&quot;</span>, <span class="string">&quot;pot&quot;</span>, <span class="string">&quot;xbangd&quot;</span>, <span class="string">&quot;weoujgsd&quot;</span>);</span><br><span class="line"></span><br><span class="line">		Optional&lt;String&gt; max = list.stream().max(Comparator.comparing(String::length));</span><br><span class="line">		System.out.println(<span class="string">&quot;最长的字符串：&quot;</span> + max.get());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">最长的字符串：weoujgsd</span><br></pre></td></tr></table></figure>

<p><strong>案例二：获取<code>Integer</code>集合中的最大值。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;Integer&gt; list = Arrays.asList(<span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 自然排序</span></span><br><span class="line">		Optional&lt;Integer&gt; max = list.stream().max(Integer::compareTo);</span><br><span class="line">		<span class="comment">// 自定义排序（从大到小排序）</span></span><br><span class="line">		Optional&lt;Integer&gt; max2 = list.stream().max((o1, o2) -&gt; o2 - o1);</span><br><span class="line">		System.out.println(<span class="string">&quot;自然排序的最大值：&quot;</span> + max.get());</span><br><span class="line">		System.out.println(<span class="string">&quot;自定义排序的最大值：&quot;</span> + max2.get());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">自然排序的最大值：<span class="number">11</span></span><br><span class="line">自定义排序的最大值：<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p><strong>案例三：获取员工薪资最高的人。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>, <span class="number">23</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">7000</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lily&quot;</span>, <span class="number">7800</span>, <span class="number">21</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Anni&quot;</span>, <span class="number">8200</span>, <span class="number">24</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Owen&quot;</span>, <span class="number">9500</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alisa&quot;</span>, <span class="number">7900</span>, <span class="number">26</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line"></span><br><span class="line">		Optional&lt;Person&gt; max = personList.stream().max(Comparator.comparingInt(Person::getSalary));</span><br><span class="line">		System.out.println(<span class="string">&quot;员工薪资最大值：&quot;</span> + max.get().getSalary());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">员工薪资最大值：<span class="number">9500</span></span><br></pre></td></tr></table></figure>

<p><strong>案例四：计算<code>Integer</code>集合中大于6的元素的个数。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;Integer&gt; list = Arrays.asList(<span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">		<span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> list.stream().filter(x -&gt; x &gt; <span class="number">6</span>).count();</span><br><span class="line">		System.out.println(<span class="string">&quot;list中大于6的元素个数：&quot;</span> + count);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list中大于<span class="number">6</span>的元素个数：<span class="number">4</span></span><br></pre></td></tr></table></figure>

<h4 id="映射-map-flatMap"><a href="#映射-map-flatMap" class="headerlink" title="映射(map/flatMap)"></a><strong>映射(map/flatMap)</strong></h4><p>映射，可以将一个流的元素按照一定的映射规则映射到另一个流中。分为<code>map</code>和<code>flatMap</code>：</p>
<ul>
<li><code>map</code>：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</li>
<li><code>flatMap</code>：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/20201109145252340.jpg" alt="在这里插入图片描述"></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/2020110914550762.jpg" alt="在这里插入图片描述"></p>
<p><strong>案例一：英文字符串数组的元素全部改为大写。整数数组每个元素+3。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		String[] strArr = &#123; <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;bcdd&quot;</span>, <span class="string">&quot;defde&quot;</span>, <span class="string">&quot;fTr&quot;</span> &#125;;</span><br><span class="line">		List&lt;String&gt; strList = Arrays.stream(strArr).map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">		List&lt;Integer&gt; intList = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>);</span><br><span class="line">		List&lt;Integer&gt; intListNew = intList.stream().map(x -&gt; x + <span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;每个元素大写：&quot;</span> + strList);</span><br><span class="line">		System.out.println(<span class="string">&quot;每个元素+3：&quot;</span> + intListNew);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">每个元素大写：[ABCD, BCDD, DEFDE, FTR]</span><br><span class="line">每个元素+<span class="number">3</span>：[<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>]</span><br></pre></td></tr></table></figure>

<p><strong>案例二：将员工的薪资全部增加1000。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>, <span class="number">23</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">7000</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lily&quot;</span>, <span class="number">7800</span>, <span class="number">21</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Anni&quot;</span>, <span class="number">8200</span>, <span class="number">24</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Owen&quot;</span>, <span class="number">9500</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alisa&quot;</span>, <span class="number">7900</span>, <span class="number">26</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 不改变原来员工集合的方式</span></span><br><span class="line">		List&lt;Person&gt; personListNew = personList.stream().map(person -&gt; &#123;</span><br><span class="line">			<span class="type">Person</span> <span class="variable">personNew</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(person.getName(), <span class="number">0</span>, <span class="number">0</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">			personNew.setSalary(person.getSalary() + <span class="number">10000</span>);</span><br><span class="line">			<span class="keyword">return</span> personNew;</span><br><span class="line">		&#125;).collect(Collectors.toList());</span><br><span class="line">		System.out.println(<span class="string">&quot;一次改动前：&quot;</span> + personList.get(<span class="number">0</span>).getName() + <span class="string">&quot;--&gt;&quot;</span> + personList.get(<span class="number">0</span>).getSalary());</span><br><span class="line">		System.out.println(<span class="string">&quot;一次改动后：&quot;</span> + personListNew.get(<span class="number">0</span>).getName() + <span class="string">&quot;--&gt;&quot;</span> + personListNew.get(<span class="number">0</span>).getSalary());</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 改变原来员工集合的方式</span></span><br><span class="line">		List&lt;Person&gt; personListNew2 = personList.stream().map(person -&gt; &#123;</span><br><span class="line">			person.setSalary(person.getSalary() + <span class="number">10000</span>);</span><br><span class="line">			<span class="keyword">return</span> person;</span><br><span class="line">		&#125;).collect(Collectors.toList());</span><br><span class="line">		System.out.println(<span class="string">&quot;二次改动前：&quot;</span> + personList.get(<span class="number">0</span>).getName() + <span class="string">&quot;--&gt;&quot;</span> + personListNew.get(<span class="number">0</span>).getSalary());</span><br><span class="line">		System.out.println(<span class="string">&quot;二次改动后：&quot;</span> + personListNew2.get(<span class="number">0</span>).getName() + <span class="string">&quot;--&gt;&quot;</span> + personListNew.get(<span class="number">0</span>).getSalary());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">一次改动前：Tom–&gt;<span class="number">8900</span></span><br><span class="line">一次改动后：Tom–&gt;<span class="number">18900</span></span><br><span class="line">二次改动前：Tom–&gt;<span class="number">18900</span></span><br><span class="line">二次改动后：Tom–&gt;<span class="number">18900</span></span><br></pre></td></tr></table></figure>

<p><strong>案例三：将两个字符数组合并成一个新的字符数组。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;m,k,l,a&quot;</span>, <span class="string">&quot;1,3,5,7&quot;</span>);</span><br><span class="line">		List&lt;String&gt; listNew = list.stream().flatMap(s -&gt; &#123;</span><br><span class="line">			<span class="comment">// 将每个元素转换成一个stream</span></span><br><span class="line">			String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">			Stream&lt;String&gt; s2 = Arrays.stream(split);</span><br><span class="line">			<span class="keyword">return</span> s2;</span><br><span class="line">		&#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;处理前的集合：&quot;</span> + list);</span><br><span class="line">		System.out.println(<span class="string">&quot;处理后的集合：&quot;</span> + listNew);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">处理前的集合：[m-k-l-a, <span class="number">1</span>-<span class="number">3</span>-<span class="number">5</span>]</span><br><span class="line">处理后的集合：[m, k, l, a, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>此外，map系列还有mapToInt、mapToLong、mapToDouble三个函数，它们以一个映射函数为入参，将流中每一个元素处理后生成一个新流。以mapToInt为例，看两个示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">	<span class="comment">// 输出字符串集合中每个字符串的长度</span></span><br><span class="line">    List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;mu&quot;</span>, <span class="string">&quot;CSDN&quot;</span>, <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">            <span class="string">&quot;world&quot;</span>, <span class="string">&quot;quickly&quot;</span>);</span><br><span class="line">    stringList.stream().mapToInt(String::length).forEach(System.out::println);</span><br><span class="line">    <span class="comment">// 将int集合的每个元素增加1000</span></span><br><span class="line">    List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>);</span><br><span class="line">    integerList.stream().mapToInt(x -&gt; x + <span class="number">1000</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mapToInt三个函数生成的新流，可以进行很多后续操作，比如求最大最小值、求和、求平均值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Double&gt; doubleList = Arrays.asList(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">2.0</span>);</span><br><span class="line">    <span class="type">double</span> <span class="variable">average</span> <span class="operator">=</span> doubleList.stream().mapToDouble(Number::doubleValue).average().getAsDouble();</span><br><span class="line">    <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> doubleList.stream().mapToDouble(Number::doubleValue).sum();</span><br><span class="line">    <span class="type">double</span> <span class="variable">max</span> <span class="operator">=</span> doubleList.stream().mapToDouble(Number::doubleValue).max().getAsDouble();</span><br><span class="line">    System.out.println(<span class="string">&quot;平均值：&quot;</span> + average + <span class="string">&quot;，总和：&quot;</span> + sum + <span class="string">&quot;，最大值：&quot;</span> + max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="归约-reduce"><a href="#归约-reduce" class="headerlink" title="归约([reduce]"></a><strong>归约([reduce]</strong></h4><p>归约，也称缩减，顾名思义，是把一个流缩减成一个值，能实现对集合求和、求乘积和求最值操作。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220916150426319.png" alt="image-20220916150426319"></p>
<p><strong>案例一：求<code>Integer</code>集合的元素之和、乘积和最大值。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">4</span>);</span><br><span class="line">		<span class="comment">// 求和方式1</span></span><br><span class="line">		Optional&lt;Integer&gt; sum = list.stream().reduce((x, y) -&gt; x + y);</span><br><span class="line">		<span class="comment">// 求和方式2</span></span><br><span class="line">		Optional&lt;Integer&gt; sum2 = list.stream().reduce(Integer::sum);</span><br><span class="line">		<span class="comment">// 求和方式3</span></span><br><span class="line">		<span class="type">Integer</span> <span class="variable">sum3</span> <span class="operator">=</span> list.stream().reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 求乘积</span></span><br><span class="line">		Optional&lt;Integer&gt; product = list.stream().reduce((x, y) -&gt; x * y);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 求最大值方式1</span></span><br><span class="line">		Optional&lt;Integer&gt; max = list.stream().reduce((x, y) -&gt; x &gt; y ? x : y);</span><br><span class="line">		<span class="comment">// 求最大值写法2</span></span><br><span class="line">		<span class="type">Integer</span> <span class="variable">max2</span> <span class="operator">=</span> list.stream().reduce(<span class="number">1</span>, Integer::max);</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;list求和：&quot;</span> + sum.get() + <span class="string">&quot;,&quot;</span> + sum2.get() + <span class="string">&quot;,&quot;</span> + sum3);</span><br><span class="line">		System.out.println(<span class="string">&quot;list求积：&quot;</span> + product.get());</span><br><span class="line">		System.out.println(<span class="string">&quot;list求最大值：&quot;</span> + max.get() + <span class="string">&quot;,&quot;</span> + max2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list求和：<span class="number">29</span>,<span class="number">29</span>,<span class="number">29</span></span><br><span class="line">list求积：<span class="number">2112</span></span><br><span class="line">list求最大值：<span class="number">11</span>,<span class="number">11</span></span><br></pre></td></tr></table></figure>

<p><strong>案例二：求所有员工的工资之和和最高工资。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>, <span class="number">23</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">7000</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lily&quot;</span>, <span class="number">7800</span>, <span class="number">21</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Anni&quot;</span>, <span class="number">8200</span>, <span class="number">24</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Owen&quot;</span>, <span class="number">9500</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alisa&quot;</span>, <span class="number">7900</span>, <span class="number">26</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 求工资之和方式1：</span></span><br><span class="line">		Optional&lt;Integer&gt; sumSalary = personList.stream().map(Person::getSalary).reduce(Integer::sum);</span><br><span class="line">		<span class="comment">// 求工资之和方式2：</span></span><br><span class="line">		<span class="type">Integer</span> <span class="variable">sumSalary2</span> <span class="operator">=</span> personList.stream().reduce(<span class="number">0</span>, (sum, p) -&gt; sum += p.getSalary(),</span><br><span class="line">				(sum1, sum2) -&gt; sum1 + sum2);</span><br><span class="line">		<span class="comment">// 求工资之和方式3：</span></span><br><span class="line">		<span class="type">Integer</span> <span class="variable">sumSalary3</span> <span class="operator">=</span> personList.stream().reduce(<span class="number">0</span>, (sum, p) -&gt; sum += p.getSalary(), Integer::sum);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 求最高工资方式1：</span></span><br><span class="line">		<span class="type">Integer</span> <span class="variable">maxSalary</span> <span class="operator">=</span> personList.stream().reduce(<span class="number">0</span>, (max, p) -&gt; max &gt; p.getSalary() ? max : p.getSalary(),</span><br><span class="line">				Integer::max);</span><br><span class="line">		<span class="comment">// 求最高工资方式2：</span></span><br><span class="line">		<span class="type">Integer</span> <span class="variable">maxSalary2</span> <span class="operator">=</span> personList.stream().reduce(<span class="number">0</span>, (max, p) -&gt; max &gt; p.getSalary() ? max : p.getSalary(),</span><br><span class="line">				(max1, max2) -&gt; max1 &gt; max2 ? max1 : max2);</span><br><span class="line">		<span class="comment">// 求最高工资方式3：</span></span><br><span class="line">		<span class="type">Integer</span> <span class="variable">maxSalary3</span> <span class="operator">=</span> personList.stream().map(Person::getSalary).reduce(Integer::max).get();</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;工资之和：&quot;</span> + sumSalary.get() + <span class="string">&quot;,&quot;</span> + sumSalary2 + <span class="string">&quot;,&quot;</span> + sumSalary3);</span><br><span class="line">		System.out.println(<span class="string">&quot;最高工资：&quot;</span> + maxSalary + <span class="string">&quot;,&quot;</span> + maxSalary2 + <span class="string">&quot;,&quot;</span> + maxSalary3);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">工资之和：<span class="number">49300</span>,<span class="number">49300</span>,<span class="number">49300</span></span><br><span class="line">最高工资：<span class="number">9500</span>,<span class="number">9500</span></span><br></pre></td></tr></table></figure>

<h4 id="收集-collect"><a href="#收集-collect" class="headerlink" title="收集(collect)"></a><strong>收集(collect)</strong></h4><p><code>collect</code>，收集，可以说是内容最繁多、功能最丰富的部分了。从字面上去理解，就是把一个流收集起来，最终可以是收集成一个值也可以收集成一个新的集合。</p>
<p><code>collect</code>主要依赖<code>java.util.stream.Collectors</code>类内置的静态方法。</p>
<h5 id="归集-toList-toSet-toMap"><a href="#归集-toList-toSet-toMap" class="headerlink" title="归集(toList/toSet/toMap)"></a>归集(toList/toSet/toMap)</h5><p>因为流不存储数据，那么在流中的数据完成处理后，需要将流中的数据重新归集到新的集合里。<code>toList</code>、<code>toSet</code>和<code>toMap</code>比较常用，另外还有<code>toCollection</code>、<code>toConcurrentMap</code>等复杂一些的用法。</p>
<p>下面用一个案例演示<code>toList</code>、<code>toSet</code>和<code>toMap</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">20</span>);</span><br><span class="line">		List&lt;Integer&gt; listNew = list.stream().filter(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>).collect(Collectors.toList());</span><br><span class="line">		Set&lt;Integer&gt; set = list.stream().filter(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">		List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>, <span class="number">23</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">7000</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lily&quot;</span>, <span class="number">7800</span>, <span class="number">21</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Anni&quot;</span>, <span class="number">8200</span>, <span class="number">24</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		</span><br><span class="line">		Map&lt;?, Person&gt; map = personList.stream().filter(p -&gt; p.getSalary() &gt; <span class="number">8000</span>)</span><br><span class="line">				.collect(Collectors.toMap(Person::getName, p -&gt; p));</span><br><span class="line">		System.out.println(<span class="string">&quot;toList:&quot;</span> + listNew);</span><br><span class="line">		System.out.println(<span class="string">&quot;toSet:&quot;</span> + set);</span><br><span class="line">		System.out.println(<span class="string">&quot;toMap:&quot;</span> + map);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">toList：[<span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">20</span>]</span><br><span class="line">toSet：[<span class="number">4</span>, <span class="number">20</span>, <span class="number">6</span>]</span><br><span class="line">toMap：&#123;Tom=mutest.Person@5fd0d5ae, Anni=mutest.Person@2d98a335&#125;</span><br></pre></td></tr></table></figure>

<h5 id="统计-count-averaging"><a href="#统计-count-averaging" class="headerlink" title="统计(count/averaging)"></a>统计(count/averaging)</h5><p><code>Collectors</code>提供了一系列用于数据统计的静态方法：</p>
<ul>
<li>计数：count</li>
<li>平均值：averagingInt、averagingLong、averagingDouble</li>
<li>最值：maxBy、minBy</li>
<li>求和：summingInt、summingLong、summingDouble</li>
<li>统计以上所有：summarizingInt、summarizingLong、summarizingDouble</li>
</ul>
<p><strong>案例：统计员工人数、平均工资、工资总额、最高工资。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>, <span class="number">23</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">7000</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lily&quot;</span>, <span class="number">7800</span>, <span class="number">21</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 求总数</span></span><br><span class="line">		<span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> personList.stream().collect(Collectors.counting());</span><br><span class="line">		<span class="comment">// 求平均工资</span></span><br><span class="line">		<span class="type">Double</span> <span class="variable">average</span> <span class="operator">=</span> personList.stream().collect(Collectors.averagingDouble(Person::getSalary));</span><br><span class="line">		<span class="comment">// 求最高工资</span></span><br><span class="line">		Optional&lt;Integer&gt; max = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compare));</span><br><span class="line">		<span class="comment">// 求工资之和</span></span><br><span class="line">		<span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> personList.stream().collect(Collectors.summingInt(Person::getSalary));</span><br><span class="line">		<span class="comment">// 一次性统计所有信息</span></span><br><span class="line">		<span class="type">DoubleSummaryStatistics</span> <span class="variable">collect</span> <span class="operator">=</span> personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;员工总数：&quot;</span> + count);</span><br><span class="line">		System.out.println(<span class="string">&quot;员工平均工资：&quot;</span> + average);</span><br><span class="line">		System.out.println(<span class="string">&quot;员工工资总和：&quot;</span> + sum);</span><br><span class="line">		System.out.println(<span class="string">&quot;员工工资所有统计：&quot;</span> + collect);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">员工总数：<span class="number">3</span></span><br><span class="line">员工平均工资：<span class="number">7900.0</span></span><br><span class="line">员工工资总和：<span class="number">23700</span></span><br><span class="line">员工工资所有统计：DoubleSummaryStatistics&#123;count=<span class="number">3</span>, sum=<span class="number">23700.000000</span>,min=<span class="number">7000.000000</span>, average=<span class="number">7900.000000</span>, max=<span class="number">8900.000000</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="分组-partitioningBy-groupingBy"><a href="#分组-partitioningBy-groupingBy" class="headerlink" title="分组(partitioningBy/groupingBy)"></a>分组(partitioningBy/groupingBy)</h5><ul>
<li><p>区：将<code>stream</code>按条件分为两个<code>Map</code>，比如员工按薪资是否高于8000分为两部分。</p>
</li>
<li><p>分组：将集合分为多个Map，比如员工按性别分组。有单级分组和多级分组。</p>
</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220917120840030.png" alt="image-20220917120840030"></p>
<p><strong>案例：将员工按薪资是否高于8000分为两部分；将员工按性别和地区分组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">7000</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lily&quot;</span>, <span class="number">7800</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Anni&quot;</span>, <span class="number">8200</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Owen&quot;</span>, <span class="number">9500</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alisa&quot;</span>, <span class="number">7900</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将员工按薪资是否高于8000分组</span></span><br><span class="line">        Map&lt;Boolean, List&lt;Person&gt;&gt; part = personList.stream().collect(Collectors.partitioningBy(x -&gt; x.getSalary() &gt; <span class="number">8000</span>));</span><br><span class="line">        <span class="comment">// 将员工按性别分组</span></span><br><span class="line">        Map&lt;String, List&lt;Person&gt;&gt; group = personList.stream().collect(Collectors.groupingBy(Person::getSex));</span><br><span class="line">        <span class="comment">// 将员工先按性别分组，再按地区分组</span></span><br><span class="line">        Map&lt;String, Map&lt;String, List&lt;Person&gt;&gt;&gt; group2 = personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.groupingBy(Person::getArea)));</span><br><span class="line">        System.out.println(<span class="string">&quot;员工按薪资是否大于8000分组情况：&quot;</span> + part);</span><br><span class="line">        System.out.println(<span class="string">&quot;员工按性别分组情况：&quot;</span> + group);</span><br><span class="line">        System.out.println(<span class="string">&quot;员工按性别、地区：&quot;</span> + group2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">员工按薪资是否大于<span class="number">8000</span>分组情况：&#123;<span class="literal">false</span>=[mutest.Person@2d98a335, mutest.Person@16b98e56, mutest.Person@7ef20235], <span class="literal">true</span>=[mutest.Person@27d6c5e0, mutest.Person@4f3f5b24, mutest.Person@15aeb7ab]&#125;</span><br><span class="line">员工按性别分组情况：&#123;female=[mutest.Person@16b98e56, mutest.Person@4f3f5b24, mutest.Person@7ef20235], male=[mutest.Person@27d6c5e0, mutest.Person@2d98a335, mutest.Person@15aeb7ab]&#125;</span><br><span class="line">员工按性别、地区：&#123;female=&#123;New York=[mutest.Person@4f3f5b24, mutest.Person@7ef20235], Washington=[mutest.Person@16b98e56]&#125;, male=&#123;New York=[mutest.Person@27d6c5e0, mutest.Person@15aeb7ab], Washington=[mutest.Person@2d98a335]&#125;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="接合-joining"><a href="#接合-joining" class="headerlink" title="接合(joining)"></a>接合(joining)</h5><p><code>joining</code>可以将stream中的元素用特定的连接符（没有的话，则直接连接）连接成一个字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>, <span class="number">23</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">7000</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lily&quot;</span>, <span class="number">7800</span>, <span class="number">21</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line"></span><br><span class="line">		<span class="type">String</span> <span class="variable">names</span> <span class="operator">=</span> personList.stream().map(p -&gt; p.getName()).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">		System.out.println(<span class="string">&quot;所有员工的姓名：&quot;</span> + names);</span><br><span class="line">		List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> list.stream().collect(Collectors.joining(<span class="string">&quot;-&quot;</span>));</span><br><span class="line">		System.out.println(<span class="string">&quot;拼接后的字符串：&quot;</span> + string);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">所有员工的姓名：Tom,Jack,Lily</span><br><span class="line">拼接后的字符串：A-B-C</span><br></pre></td></tr></table></figure>

<h5 id="归约-reducing"><a href="#归约-reducing" class="headerlink" title="归约(reducing)"></a>归约(reducing)</h5><p><code>Collectors</code>类提供的<code>reducing</code>方法，相比于<code>stream</code>本身的<code>reduce</code>方法，增加了对自定义归约的支持。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>, <span class="number">23</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">7000</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lily&quot;</span>, <span class="number">7800</span>, <span class="number">21</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 每个员工减去起征点后的薪资之和（这个例子并不严谨，但一时没想到好的例子）</span></span><br><span class="line">		<span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> personList.stream().collect(Collectors.reducing(<span class="number">0</span>, Person::getSalary, (i, j) -&gt; (i + j - <span class="number">5000</span>)));</span><br><span class="line">		System.out.println(<span class="string">&quot;员工扣税薪资总和：&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// stream的reduce</span></span><br><span class="line">		Optional&lt;Integer&gt; sum2 = personList.stream().map(Person::getSalary).reduce(Integer::sum);</span><br><span class="line">		System.out.println(<span class="string">&quot;员工薪资总和：&quot;</span> + sum2.get());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">员工扣税薪资总和：<span class="number">8700</span></span><br><span class="line">员工薪资总和：<span class="number">23700</span></span><br></pre></td></tr></table></figure>

<h4 id="排序-sorted"><a href="#排序-sorted" class="headerlink" title="排序(sorted)"></a><strong>排序(sorted)</strong></h4><p>sorted，中间操作。有两种排序：</p>
<ul>
<li><p>sorted()：自然排序，流中元素需实现Comparable接口</p>
</li>
<li><p>sorted(Comparator com)：Comparator排序器自定义排序</p>
</li>
</ul>
<p><strong>案例：将员工按工资由高到低（工资一样则按年龄由大到小）排序</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line"></span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Sherry&quot;</span>, <span class="number">9000</span>, <span class="number">24</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>, <span class="number">22</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">9000</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lily&quot;</span>, <span class="number">8800</span>, <span class="number">26</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">		personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alisa&quot;</span>, <span class="number">9000</span>, <span class="number">26</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 按工资升序排序（自然排序）</span></span><br><span class="line">		List&lt;String&gt; newList = personList.stream().sorted(Comparator.comparing(Person::getSalary)).map(Person::getName)</span><br><span class="line">				.collect(Collectors.toList());</span><br><span class="line">		<span class="comment">// 按工资倒序排序</span></span><br><span class="line">		List&lt;String&gt; newList2 = personList.stream().sorted(Comparator.comparing(Person::getSalary).reversed())</span><br><span class="line">				.map(Person::getName).collect(Collectors.toList());</span><br><span class="line">		<span class="comment">// 先按工资再按年龄升序排序</span></span><br><span class="line">		List&lt;String&gt; newList3 = personList.stream()</span><br><span class="line">				.sorted(Comparator.comparing(Person::getSalary).thenComparing(Person::getAge)).map(Person::getName)</span><br><span class="line">				.collect(Collectors.toList());</span><br><span class="line">		<span class="comment">// 先按工资再按年龄自定义排序（降序）</span></span><br><span class="line">		List&lt;String&gt; newList4 = personList.stream().sorted((p1, p2) -&gt; &#123;</span><br><span class="line">			<span class="keyword">if</span> (p1.getSalary() == p2.getSalary()) &#123;</span><br><span class="line">				<span class="keyword">return</span> p2.getAge() - p1.getAge();</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> p2.getSalary() - p1.getSalary();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;).map(Person::getName).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;按工资升序排序：&quot;</span> + newList);</span><br><span class="line">		System.out.println(<span class="string">&quot;按工资降序排序：&quot;</span> + newList2);</span><br><span class="line">		System.out.println(<span class="string">&quot;先按工资再按年龄升序排序：&quot;</span> + newList3);</span><br><span class="line">		System.out.println(<span class="string">&quot;先按工资再按年龄自定义降序排序：&quot;</span> + newList4);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">按工资升序排序：[Lily, Tom, Sherry, Jack, Alisa]</span><br><span class="line">按工资降序排序：[Sherry, Jack, Alisa, Tom, Lily]</span><br><span class="line">先按工资再按年龄升序排序：[Lily, Tom, Sherry, Jack, Alisa]</span><br><span class="line">先按工资再按年龄自定义降序排序：[Alisa, Jack, Sherry, Tom, Lily]</span><br></pre></td></tr></table></figure>

<h2 id="提取-组合"><a href="#提取-组合" class="headerlink" title="提取/组合"></a>提取/组合</h2><p>流也可以进行合并、去重、限制、跳过等操作。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220917162850402.png" alt="image-20220917162850402"></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220917162902235.png" alt="image-20220917162902235"></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Java%E5%AE%B9%E5%99%A8/image-20220917162914500.png" alt="image-20220917162914500"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		String[] arr1 = &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span> &#125;;</span><br><span class="line">		String[] arr2 = &#123; <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">		Stream&lt;String&gt; stream1 = Stream.of(arr1);</span><br><span class="line">		Stream&lt;String&gt; stream2 = Stream.of(arr2);</span><br><span class="line">		<span class="comment">// concat:合并两个流 distinct：去重</span></span><br><span class="line">		List&lt;String&gt; newList = Stream.concat(stream1, stream2).distinct().collect(Collectors.toList());</span><br><span class="line">		<span class="comment">// limit：限制从流中获得前n个数据</span></span><br><span class="line">		List&lt;Integer&gt; collect = Stream.iterate(<span class="number">1</span>, x -&gt; x + <span class="number">2</span>).limit(<span class="number">10</span>).collect(Collectors.toList());</span><br><span class="line">		<span class="comment">// skip：跳过前n个数据</span></span><br><span class="line">		List&lt;Integer&gt; collect2 = Stream.iterate(<span class="number">1</span>, x -&gt; x + <span class="number">2</span>).skip(<span class="number">1</span>).limit(<span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;流合并：&quot;</span> + newList);</span><br><span class="line">		System.out.println(<span class="string">&quot;limit：&quot;</span> + collect);</span><br><span class="line">		System.out.println(<span class="string">&quot;skip：&quot;</span> + collect2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">流合并：[a, b, c, d, e, f, g]</span><br><span class="line">limit：[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br><span class="line">skip：[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure>

<h1 id="集合使用注意事项总结"><a href="#集合使用注意事项总结" class="headerlink" title="集合使用注意事项总结"></a>集合使用注意事项总结</h1><h2 id="集合判空"><a href="#集合判空" class="headerlink" title="集合判空"></a><strong>集合判空</strong></h2><p>判断所有集合内部的元素是否为空，使用 <code>isEmpty()</code> 方法，而不是 <code>size()==0</code> 的方式。</p>
<p>这是因为 <code>isEmpty()</code> 方法的可读性更好，并且时间复杂度为 O(1)。</p>
<p>绝大部分我们使用的集合的 <code>size()</code> 方法的时间复杂度也是 O(1)，不过，也有很多复杂度不是 O(1) 的，比如 <code>java.util.concurrent</code> 包下的某些集合（<code>ConcurrentLinkedQueue</code> 、<code>ConcurrentHashMap</code>…）。</p>
<p>下面是 <code>ConcurrentHashMap</code> 的 <code>size()</code> 方法和 <code>isEmpty()</code> 方法的源码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> sumCount();</span><br><span class="line">    <span class="keyword">return</span> ((n &lt; <span class="number">0L</span>) ? <span class="number">0</span> :</span><br><span class="line">            (n &gt; (<span class="type">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :</span><br><span class="line">            (<span class="type">int</span>)n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="title function_">sumCount</span><span class="params">()</span> &#123;</span><br><span class="line">    CounterCell[] as = counterCells; CounterCell a;</span><br><span class="line">    <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> baseCount;</span><br><span class="line">    <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>)</span><br><span class="line">                sum += a.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sumCount() &lt;= <span class="number">0L</span>; <span class="comment">// ignore transient negative values</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h2 id="集合转-Map"><a href="#集合转-Map" class="headerlink" title="集合转 Map"></a>集合转 Map</h2><p>阿里巴巴 Java 开发手册》的描述如下：</p>
<blockquote>
<p><strong>在使用 <code>java.util.stream.Collectors</code> 类的 <code>toMap()</code> 方法转为 <code>Map</code> 集合时，一定要注意当 value 为 null 时会抛 NPE 异常。</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String phoneNumber;</span><br><span class="line">     <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br><span class="line">List&lt;Person&gt; bookList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">bookList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;18163138123&quot;</span>));</span><br><span class="line">bookList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;martin&quot;</span>,<span class="literal">null</span>));</span><br><span class="line"><span class="comment">// 空指针异常</span></span><br><span class="line">bookList.stream().collect(Collectors.toMap(Person::getName, Person::getPhoneNumber));</span><br></pre></td></tr></table></figure>

<p>下面我们来解释一下原因。</p>
<p>首先，我们来看 <code>java.util.stream.Collectors</code> 类的 <code>toMap()</code> 方法 ，可以看到其内部调用了 <code>Map</code> 接口的 <code>merge()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K, U, M <span class="keyword">extends</span> <span class="title class_">Map</span>&lt;K, U&gt;&gt;</span><br><span class="line">Collector&lt;T, ?, M&gt; toMap(Function&lt;? <span class="built_in">super</span> T, ? <span class="keyword">extends</span> <span class="title class_">K</span>&gt; keyMapper,</span><br><span class="line">                            Function&lt;? <span class="built_in">super</span> T, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; valueMapper,</span><br><span class="line">                            BinaryOperator&lt;U&gt; mergeFunction,</span><br><span class="line">                            Supplier&lt;M&gt; mapSupplier) &#123;</span><br><span class="line">    BiConsumer&lt;M, T&gt; accumulator</span><br><span class="line">            = (map, element) -&gt; map.merge(keyMapper.apply(element),</span><br><span class="line">                                          valueMapper.apply(element), mergeFunction);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CollectorImpl</span>&lt;&gt;(mapSupplier, accumulator, mapMerger(mergeFunction), CH_ID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Map</code> 接口的 <code>merge()</code> 方法如下，这个方法是接口中的默认实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">default</span> V <span class="title function_">merge</span><span class="params">(K key, V value,</span></span><br><span class="line"><span class="params">        BiFunction&lt;? <span class="built_in">super</span> V, ? <span class="built_in">super</span> V, ? extends V&gt; remappingFunction)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(remappingFunction);</span><br><span class="line">    Objects.requireNonNull(value);</span><br><span class="line">    <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> get(key);</span><br><span class="line">    <span class="type">V</span> <span class="variable">newValue</span> <span class="operator">=</span> (oldValue == <span class="literal">null</span>) ? value :</span><br><span class="line">               remappingFunction.apply(oldValue, value);</span><br><span class="line">    <span class="keyword">if</span>(newValue == <span class="literal">null</span>) &#123;</span><br><span class="line">        remove(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        put(key, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>merge()</code> 方法会先调用 <code>Objects.requireNonNull()</code> 方法判断 value 是否为空。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static &lt;T&gt; T requireNonNull(T obj) &#123;</span><br><span class="line">    if (obj == null)</span><br><span class="line">        throw new NullPointerException();</span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="集合遍历"><a href="#集合遍历" class="headerlink" title="集合遍历"></a>集合遍历</h2><p>阿里巴巴 Java 开发手册》的描述如下：</p>
<blockquote>
<p><strong>不要在 foreach 循环里进行元素的</strong> <strong><code>remove/add</code></strong> <strong>操作。remove 元素请使用</strong> <strong><code>Iterator</code></strong> <strong>方式，如果并发操作，需要对</strong> <strong><code>Iterator</code></strong> <strong>对象加锁。</strong></p>
</blockquote>
<p>通过反编译你会发现 foreach 语法糖底层其实还是依赖 <code>Iterator</code> 。不过， <code>remove/add</code> 操作直接调用的是集合自己的方法，而不是 <code>Iterator</code> 的 <code>remove/add</code>方法</p>
<p>这就导致 <code>Iterator</code> 莫名其妙地发现自己有元素被 <code>remove/add</code> ，然后，它就会抛出一个 <code>ConcurrentModificationException</code> 来提示用户发生了并发修改异常。这就是单线程状态下产生的 <strong>fail-fast 机制</strong>。</p>
<blockquote>
<p><strong>fail-fast 机制</strong> <strong>：多个线程对 fail-fast 集合进行修改的时候，可能会抛出</strong><code>ConcurrentModificationException</code><strong>。 即使是单线程下也有可能会出现这种情况，上面已经提到过</strong>。</p>
</blockquote>
<p>Java8 开始，可以使用 <code>Collection#removeIf()</code>方法删除满足特定条件的元素,如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line">list.removeIf(filter -&gt; filter % <span class="number">2</span> == <span class="number">0</span>); <span class="comment">/* 删除list中的所有偶数 */</span></span><br><span class="line">System.out.println(list); <span class="comment">/* [1, 3, 5, 7, 9] */</span></span><br></pre></td></tr></table></figure>

<p>除了上面介绍的直接使用 <code>Iterator</code> 进行遍历操作之外，你还可以：</p>
<ul>
<li>使用普通的 for 循环</li>
<li>使用 fail-safe 的集合类。<code>java.util</code>包下面的所有的集合类都是 fail-fast 的，而<code>java.util.concurrent</code>包下面的所有的类都是 fail-safe 的。</li>
<li>……</li>
</ul>
<h2 id="集合去重"><a href="#集合去重" class="headerlink" title="集合去重"></a>集合去重</h2><p>《阿里巴巴 Java 开发手册》的描述如下：</p>
<blockquote>
<p><strong>可以利用 <code>Set</code> 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 <code>List</code> 的 <code>contains()</code> 进行遍历去重或者判断包含操作。</strong></p>
</blockquote>
<p>这里我们以 <code>HashSet</code> 和 <code>ArrayList</code> 为例说明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set 去重代码示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Set&lt;T&gt; <span class="title function_">removeDuplicateBySet</span><span class="params">(List&lt;T&gt; data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(data)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// List 去重代码示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">removeDuplicateByList</span><span class="params">(List&lt;T&gt; data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(data)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(data.size());</span><br><span class="line">    <span class="keyword">for</span> (T current : data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!result.contains(current)) &#123;</span><br><span class="line">            result.add(current);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两者的核心差别在于 <code>contains()</code> 方法的实现。</p>
<p><code>HashSet</code> 的 <code>contains()</code> 方法底部依赖的 <code>HashMap</code> 的 <code>containsKey()</code> 方法，时间复杂度接近于 O（1）（没有出现哈希冲突的时候为 O（1））。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.containsKey(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们有 N 个元素插入进 Set 中，那时间复杂度就接近是 O (n)。</p>
<p><code>ArrayList</code> 的 <code>contains()</code> 方法是通过遍历所有元素的方法来做的，时间复杂度接近是 O(n)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们的 <code>List</code> 有 N 个元素，那时间复杂度就接近是 O (n^2)。</p>
<h2 id="集合转数组"><a href="#集合转数组" class="headerlink" title="集合转数组"></a>集合转数组</h2><p>《阿里巴巴 Java 开发手册》的描述如下：</p>
<blockquote>
<p><strong>使用集合转数组的方法，必须使用集合的 <code>toArray(T[] array)</code>，传入的是类型完全一致、长度为 0 的空数组。</strong></p>
</blockquote>
<p><code>toArray(T[] array)</code> 方法的参数是一个泛型数组，如果 <code>toArray</code> 方法中没有传递任何参数的话返回的是 <code>Object</code>类 型数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String [] s= <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">    <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;lazy&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;over&quot;</span>, <span class="string">&quot;jumps&quot;</span>, <span class="string">&quot;fox&quot;</span>, <span class="string">&quot;brown&quot;</span>, <span class="string">&quot;quick&quot;</span>, <span class="string">&quot;A&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(s);</span><br><span class="line">Collections.reverse(list);</span><br><span class="line"><span class="comment">//没有指定类型的话会报错</span></span><br><span class="line">s=list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p>由于 JVM 优化，<code>new String[0]</code>作为<code>Collection.toArray()</code>方法的参数现在使用更好，<code>new String[0]</code>就是起一个模板的作用，指定了返回数组的类型，0 是为了节省空间，因为它只是为了说明返回的类型。</p>
<h2 id="数组转集合"><a href="#数组转集合" class="headerlink" title="数组转集合"></a>数组转集合</h2><p>阿里巴巴 Java 开发手册》的描述如下：</p>
<blockquote>
<p><strong>使用工具类 <code>Arrays.asList()</code> 把数组转换成集合时，不能使用其修改集合相关的方法， 它的 <code>add/remove/clear</code> 方法会抛出 <code>UnsupportedOperationException</code> 异常。</strong></p>
</blockquote>
<p>我在之前的一个项目中就遇到一个类似的坑。</p>
<p><code>Arrays.asList()</code>在平时开发中还是比较常见的，我们可以使用它将一个数组转换为一个 <code>List</code> 集合。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] myArray = &#123;<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; myList = Arrays.asList(myArray);</span><br><span class="line"><span class="comment">//上面两个语句等价于下面一条语句</span></span><br><span class="line">List&lt;String&gt; myList = Arrays.asList(<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>JDK 源码对于这个方法的说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *返回由指定数组支持的固定大小的列表。此方法作为基于数组和基于集合的API之间的桥梁，</span></span><br><span class="line"><span class="comment">  * 与 Collection.toArray()结合使用。返回的List是可序列化并实现RandomAccess接口。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">asList</span><span class="params">(T... a)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面我们来总结一下使用注意事项。</p>
<p><strong>1、<code>Arrays.asList()</code>是泛型方法，传递的数组必须是对象数组，而不是基本类型。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] myArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">List</span> <span class="variable">myList</span> <span class="operator">=</span> Arrays.asList(myArray);</span><br><span class="line">System.out.println(myList.size());<span class="comment">//1</span></span><br><span class="line">System.out.println(myList.get(<span class="number">0</span>));<span class="comment">//数组地址值</span></span><br><span class="line">System.out.println(myList.get(<span class="number">1</span>));<span class="comment">//报错：ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="type">int</span>[] array = (<span class="type">int</span>[]) myList.get(<span class="number">0</span>);</span><br><span class="line">System.out.println(array[<span class="number">0</span>]);<span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<p>当传入一个原生数据类型数组时，<code>Arrays.asList()</code> 的真正得到的参数就不是数组中的元素，而是数组对象本身！此时 <code>List</code> 的唯一元素就是这个数组，这也就解释了上面的代码。</p>
<p>我们使用包装类型数组就可以解决这个问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] myArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>2、使用集合的修改方法: <code>add()</code>、<code>remove()</code>、<code>clear()</code>会抛出异常。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">myList</span> <span class="operator">=</span> Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">myList.add(<span class="number">4</span>);<span class="comment">//运行时报错：UnsupportedOperationException</span></span><br><span class="line">myList.remove(<span class="number">1</span>);<span class="comment">//运行时报错：UnsupportedOperationException</span></span><br><span class="line">myList.clear();<span class="comment">//运行时报错：UnsupportedOperationException</span></span><br></pre></td></tr></table></figure>

<p><code>Arrays.asList()</code> 方法返回的并不是 <code>java.util.ArrayList</code> ，而是 <code>java.util.Arrays</code> 的一个内部类,这个内部类并没有实现集合的修改方法或者说并没有重写这些方法。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">myList</span> <span class="operator">=</span> Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(myList.getClass());<span class="comment">//class java.util.Arrays$ArrayList</span></span><br></pre></td></tr></table></figure>

<p>下图是 <code>java.util.Arrays$ArrayList</code> 的简易源码，我们可以看到这个类重写的方法有哪些。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">      <span class="keyword">implements</span> <span class="title class_">RandomAccess</span>, java.io.Serializable</span><br><span class="line">  &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">         ...</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; action)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; c)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>我们再看一下<code>java.util.AbstractList</code>的 <code>add/remove/clear</code> 方法就知道为什么会抛出 <code>UnsupportedOperationException</code> 了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    add(size(), e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    removeRange(<span class="number">0</span>, size());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">removeRange</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">    ListIterator&lt;E&gt; it = listIterator(fromIndex);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>, n=toIndex-fromIndex; i&lt;n; i++) &#123;</span><br><span class="line">        it.next();</span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>那我们如何正确的将数组转换为 <code>ArrayList</code> ?</strong></p>
<p>1、手动实现工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JDK1.5+</span></span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">arrayToList</span><span class="params">(<span class="keyword">final</span> T[] array)</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> List&lt;T&gt; l = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;(array.length);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">final</span> T s : array) &#123;</span><br><span class="line">    l.add(s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line">Integer [] myArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">System.out.println(arrayToList(myArray).getClass());<span class="comment">//class java.util.ArrayList</span></span><br></pre></td></tr></table></figure>

<p>2、最简便的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>3、使用 Java8 的 <code>Stream</code>(推荐)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer [] myArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="type">List</span> <span class="variable">myList</span> <span class="operator">=</span> Arrays.stream(myArray).collect(Collectors.toList());</span><br><span class="line"><span class="comment">//基本类型也可以实现转换（依赖boxed的装箱操作）</span></span><br><span class="line"><span class="type">int</span> [] myArray2 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="type">List</span> <span class="variable">myList</span> <span class="operator">=</span> Arrays.stream(myArray2).boxed().collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<p>4、使用 Guava</p>
<p>对于不可变集合，你可以使用<a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java"><code>ImmutableList</code></a><a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java"> </a><a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java"> (opens new window)</a>类及其<a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L101"><code>of()</code></a><a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L101"> </a><a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L101"> (opens new window)</a>与<a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L225"><code>copyOf()</code></a><a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L225"> </a><a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L225"> (opens new window)</a>工厂方法：（参数不能为空）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; il = ImmutableList.of(<span class="string">&quot;string&quot;</span>, <span class="string">&quot;elements&quot;</span>);  <span class="comment">// from varargs</span></span><br><span class="line">List&lt;String&gt; il = ImmutableList.copyOf(aStringArray);      <span class="comment">// from array</span></span><br></pre></td></tr></table></figure>

<p>对于可变集合，你可以使用<a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Lists.java"><code>Lists</code></a><a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Lists.java"> </a><a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Lists.java"> (opens new window)</a>类及其<a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Lists.java#L87"><code>newArrayList()</code></a><a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Lists.java#L87"> </a><a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Lists.java#L87"> (opens new window)</a>工厂方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; l1 = Lists.newArrayList(anotherListOrCollection);    <span class="comment">// from collection</span></span><br><span class="line">List&lt;String&gt; l2 = Lists.newArrayList(aStringArray);               <span class="comment">// from array</span></span><br><span class="line">List&lt;String&gt; l3 = Lists.newArrayList(<span class="string">&quot;or&quot;</span>, <span class="string">&quot;string&quot;</span>, <span class="string">&quot;elements&quot;</span>); <span class="comment">// from varargs</span></span><br></pre></td></tr></table></figure>

<p>5、使用 Apache Commons Collections</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">CollectionUtils.addAll(list, str);</span><br></pre></td></tr></table></figure>

<p>6、 使用 Java9 的 <code>List.of()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = List.of(array);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java容器</tag>
      </tags>
  </entry>
  <entry>
    <title>面试-Mysql</title>
    <url>/2022/09/08/%E9%9D%A2%E8%AF%95-MySQL/</url>
    <content><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a><strong>基础</strong></h1><h2 id="什么是内连接、外连接、交叉连接、笛卡尔积呢"><a href="#什么是内连接、外连接、交叉连接、笛卡尔积呢" class="headerlink" title="什么是内连接、外连接、交叉连接、笛卡尔积呢"></a>什么是内连接、外连接、交叉连接、笛卡尔积呢</h2><ul>
<li><strong>内连接（inner join）</strong>：取得两张表中满足存在连接匹配关系的记录。</li>
<li><strong>外连接（outer join）</strong>：不只取得两张表中满足存在连接匹配关系的记录，还包括某张表（或两张表）中不满足匹配关系的记录。</li>
<li><strong>交叉连接（cross join）</strong>：显示两张表所有记录一一对应，没有匹配关系进行筛选，它是笛卡尔积在SQL中的实现，如果A表有m行，B表有n行，那么A和B交叉连接的结果就有m*n行。</li>
<li><strong>笛卡尔积</strong>：是数学中的一个概念，例如集合A={a,b}，集合B={1,2,3}，那么A✖B={&lt;a,o&gt;,&lt;a,1&gt;,&lt;a,2&gt;,&lt;b,0&gt;,&lt;b,1&gt;,&lt;b,2&gt;,}。</li>
</ul>
<h2 id="那MySQL-的内连接、左连接、右连接有有什么区别？"><a href="#那MySQL-的内连接、左连接、右连接有有什么区别？" class="headerlink" title="那MySQL 的内连接、左连接、右连接有有什么区别？"></a>那MySQL 的内连接、左连接、右连接有有什么区别？</h2><p>MySQL的连接主要分为内连接和外连接，外连接常用的有左连接、右连接。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908105510788.png" alt="image-20220908105510788"></p>
<ul>
<li><code>inner join</code> 内连接，在两张表进行连接查询时，只保留两张表中完全匹配的结果集</li>
<li><code>left join</code> 在两张表进行连接查询时，会返回左表所有的行，即使在右表中没有匹配的记录。</li>
<li><code>right join</code> 在两张表进行连接查询时，会返回右表所有的行，即使在左表中没有匹配的记录。</li>
</ul>
<h2 id="说一下数据库的三大范式？"><a href="#说一下数据库的三大范式？" class="headerlink" title="说一下数据库的三大范式？"></a>说一下数据库的三大范式？</h2><ul>
<li><strong>第一范式</strong>：数据表中的每一列（每个字段）都不可以再拆分。例如用户表，用户地址还可以拆分成国家、省份、市，这样才是符合第一范式的。</li>
<li><strong>第二范式</strong>：在第一范式的基础上，非主键列完全依赖于主键，而不能是依赖于主键的一部分。例如订单表里，存储了商品信息（商品价格、商品类型），那就需要把商品ID和订单ID作为联合主键，才满足第二范式。</li>
<li><strong>第三范式</strong>：在满足第二范式的基础上，表中的非主键只依赖于主键，而不依赖于其他非主键。例如订单表，就不能存储用户信息（姓名、地址）。</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908110113813.png" alt="image-20220908110113813"></p>
<p>三大范式的作用是为了控制数据库的冗余，是对空间的节省，实际上，一般互联网公司的设计都是反范式的，通过冗余一些数据，避免跨表跨库，利用空间换时间，提高性能。</p>
<h2 id="varchar与char的区别？"><a href="#varchar与char的区别？" class="headerlink" title="varchar与char的区别？"></a>varchar与char的区别？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908110707043.png" alt="image-20220908110707043"></p>
<p><strong>char</strong> ：</p>
<ul>
<li><code>char</code>表示定长字符串，长度是固定的；</li>
<li>如果插入数据的长度小于<code>char</code>的固定长度时，则用空格填充；</li>
<li>因为长度固定，所以存取速度要比<code>varchar</code>快很多，甚至能快<code>50%</code>，但正因为其长度固定，</li>
<li>所以会占据多余的空间，是空间换时间的做法；</li>
<li>对于<code>char</code>来说，最多能存放的字符个数为 <code>255 </code>，和编码无关</li>
</ul>
<p><strong>varchar</strong> ：</p>
<ul>
<li><code>varchar</code>表示可变长字符串，长度是可变的；</li>
<li>插入的数据是多长，就按照多长来存储；</li>
<li><code>varchar</code>在存取方面与<code>char</code>相反，它存取慢，因为长度不固定，但正因如此，不占据多余的空间，是时间换空间的做法；</li>
<li>对于<code>varchar</code>来说，最多能存放的字符个数为 <code>65532</code></li>
</ul>
<p>日常的设计，对于长度相对固定的字符串，可以使用<code>char</code>，对于长度不确定的，使用<code>varchar</code>更合适一些。</p>
<h2 id="blob和text有什么区别？"><a href="#blob和text有什么区别？" class="headerlink" title="blob和text有什么区别？"></a>blob和text有什么区别？</h2><ul>
<li>blob用于存储二进制数据，而text用于存储大字符串。</li>
<li>blob没有字符集，text有一个字符集，并且根据字符集的校对规则对值进行排序和比较</li>
</ul>
<h2 id="DATETIME和TIMESTAMP的异同？"><a href="#DATETIME和TIMESTAMP的异同？" class="headerlink" title="DATETIME和TIMESTAMP的异同？"></a>DATETIME和TIMESTAMP的异同？</h2><p>相同点 ：</p>
<ul>
<li><ol>
<li>两个数据类型存储时间的表现格式一致。均为 YYYY-MM-DD HH:MM:SS</li>
</ol>
</li>
<li><ol start="2">
<li>两个数据类型都包含「日期」和「时间」部分。</li>
</ol>
</li>
<li><ol start="3">
<li>两个数据类型都可以存储微秒的小数秒（秒后 6 位小数秒）</li>
</ol>
</li>
</ul>
<p>区别 ：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908111247064.png" alt="image-20220908111247064"></p>
<ul>
<li><ol>
<li>日期范围：DATETIME 的日期范围是 1000-01-01 00:00:00.000000 到 9999-12-31 23:59:59.999999 ；TIMESTAMP 的时间范围是1970-01-01 00:00:01.000000 UTC到 ``2038-01-09 03:14:07.999999 UTC</li>
</ol>
</li>
<li><ol start="2">
<li>存储空间：DATETIME 的存储空间为 8 字节；TIMESTAMP 的存储空间为 4 字节</li>
</ol>
</li>
<li><ol start="3">
<li>时区相关：DATETIME 存储时间与时区无关；TIMESTAMP 存储时间与时区有关，显示的值也依赖于时区</li>
</ol>
</li>
<li><ol start="4">
<li>默认值：DATETIME 的默认值为 null；TIMESTAMP 的字段默认不为空(not null)，默认值为当前时间(CURRENT_TIMESTAMP)</li>
</ol>
</li>
</ul>
<h2 id="MySQL中-in-和-exists-的区别？"><a href="#MySQL中-in-和-exists-的区别？" class="headerlink" title="MySQL中 in 和 exists 的区别？"></a>MySQL中 in 和 exists 的区别？</h2><p>MySQL中的in语句是把外表和内表作hash 连接，而exists语句是对外表作loop循环，每次loop循环再对内表进行查询。我们可能认为exists比in语句的效率要高，这种说法其实是不准确的，要区分情景：</p>
<ul>
<li><strong>1.</strong> 如果查询的两个表大小相当，那么用in和exists差别不大。</li>
<li><strong>2.</strong> 如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in。</li>
<li><strong>3.</strong> not in 和not exists：如果查询语句使用了not in，那么内外表都进行全表扫描，没有用到索引；而not extsts的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。</li>
</ul>
<h2 id="MySQL里记录货币用什么字段类型比较好？"><a href="#MySQL里记录货币用什么字段类型比较好？" class="headerlink" title="MySQL里记录货币用什么字段类型比较好？"></a>MySQL里记录货币用什么字段类型比较好？</h2><p>货币在数据库中MySQL常用<strong>Decimal</strong>和<strong>Numric</strong>类型表示，这两种类型被MySQL实现为同样的类型。他们被用于保存与货币有关的数据。</p>
<p>例如salary DECIMAL(9,2)，9(precision)代表将被用于存储值的总的小数位数，而2(scale)代表将被用于存储小数点后的位数。存储在salary列中的值的范围是从-9999999.99到9999999.99。</p>
<p><strong>DECIMAL</strong>和<strong>NUMERIC</strong>值作为<strong>字符串存储</strong>，而不是作为二进制浮点数，以便保存那些值的小数精度。</p>
<p>之所以不使用float或者double的原因：因为float和double是以二进制存储的，所以<strong>有一定的误差</strong>。</p>
<h2 id="MySQL怎么存储emoji"><a href="#MySQL怎么存储emoji" class="headerlink" title="MySQL怎么存储emoji $?"></a>MySQL怎么存储emoji $?</h2><p>MySQL可以直接使用字符串存储emoji。</p>
<p>但是需要注意的，utf8 编码是不行的，MySQL中的utf8是阉割版的 utf8，它最多只用 3 个字节存储字符，所以存储不了表情。那该怎么办？</p>
<p>需要使用utf8mb4编码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">alter table blogs modify content text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci not <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h2 id="drop、delete与truncate的区别？"><a href="#drop、delete与truncate的区别？" class="headerlink" title="drop、delete与truncate的区别？"></a>drop、delete与truncate的区别？</h2><p>三者都表示删除，但是三者有一些差别：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908112356710.png" alt="image-20220908112356710"></p>
<p>因此，在不再需要一张表的时候，用drop；在想删除部分数据行时候，用delete；在保留表而删除所有数据的时候用truncate。</p>
<h2 id="UNION与UNION-ALL的区别？"><a href="#UNION与UNION-ALL的区别？" class="headerlink" title="UNION与UNION ALL的区别？"></a>UNION与UNION ALL的区别？</h2><ul>
<li>如果使用UNION ALL，不会合并重复的记录行</li>
<li>效率 UNION 高于 UNION ALL</li>
</ul>
<h2 id="count-1-、count-与-count-列名-的区别？"><a href="#count-1-、count-与-count-列名-的区别？" class="headerlink" title="count(1)、count(*) 与 count(列名) 的区别？"></a>count(1)、count(*) 与 count(列名) 的区别？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908113932735.png" alt="image-20220908113932735"></p>
<p><strong>执行效果 ：</strong></p>
<ul>
<li>count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为NULL</li>
<li>count(1)包括了忽略所有列，用 1 代表代码行，在统计结果的时候，不会忽略列值为NULL</li>
<li>count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是只空字符串或者 0 ，而是表示null）的计数，即某个字段值为NULL时，不统计。</li>
</ul>
<p><strong>执行速度</strong> ：</p>
<ul>
<li>列名为主键，count(列名)会比count(1)快</li>
<li>列名不为主键，count(1)会比count(列名)快</li>
<li>如果表多个列并且没有主键，则 count（ 1 ） 的执行效率优于 count（*）</li>
<li>如果有主键，则 select count（主键）的执行效率是最优的</li>
<li>如果表只有一个字段，则 select count（*）最优。</li>
</ul>
<h2 id="一条SQL查询语句的执行顺序？"><a href="#一条SQL查询语句的执行顺序？" class="headerlink" title="一条SQL查询语句的执行顺序？"></a>一条SQL查询语句的执行顺序？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908114246845.png" alt="image-20220908114246845"></p>
<p><strong>1.</strong> <strong>FROM</strong>：对FROM子句中的左表<left_table>和右表<right_table>执行笛卡儿积（Cartesianproduct），产生虚拟表VT1</p>
<p><strong>2.</strong> <strong>ON</strong>：对虚拟表VT1应用ON筛选，只有那些符合<join_condition>的行才被插入虚拟表VT2中</p>
<p><strong>3.</strong> <strong>JOIN</strong>：如果指定了OUTER JOIN（如LEFT OUTER JOIN、RIGHT OUTER JOIN），那么保留表中未匹配的行作为外部行添加到虚拟表VT2中，产生虚拟表VT3。如果FROM子句包含两个以上表，则对上一个连接生成的结果表VT3和下一个表重复执行步骤 1 ）～步骤3 ），直到处理完所有的表为止</p>
<p><strong>4.</strong> <strong>WHERE</strong>：对虚拟表VT3应用WHERE过滤条件，只有符合<where_condition>的记录才被插入虚拟表VT4中</p>
<p><strong>5.</strong> <strong>GROUP BY</strong>：根据GROUP BY子句中的列，对VT4中的记录进行分组操作，产生VT5</p>
<p><strong>6.</strong> <strong>CUBE|ROLLUP</strong>：对表VT5进行CUBE或ROLLUP操作，产生表VT6</p>
<p><strong>7.</strong> <strong>HAVING</strong>：对虚拟表VT6应用HAVING过滤器，只有符合<having_condition>的记录才被插入虚拟表VT7中。</p>
<p><strong>8.</strong> <strong>SELECT</strong>：第二次执行SELECT操作，选择指定的列，插入到虚拟表VT8中</p>
<p><strong>9. DISTINCT</strong>：去除重复数据，产生虚拟表VT9</p>
<p><strong>10.</strong> <strong>ORDER BY</strong>：将虚拟表VT9中的记录按照<order_by_list>进行排序操作，产生虚拟表VT10。 11 ）</p>
<p><strong>11.</strong> <strong>LIMIT</strong>：取出指定行的记录，产生虚拟表VT11，并返回给查询用户</p>
<h1 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a><strong>基础架构</strong></h1><h2 id="MySQL-基本架构概览"><a href="#MySQL-基本架构概览" class="headerlink" title="MySQL 基本架构概览"></a>MySQL 基本架构概览</h2><p>下图是 MySQL 的一个简要架构图，从下图你可以很清晰的看到客户端的一条 SQL 语句在 MySQL 内部是如何执行的。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908160140480.png" alt="image-20220908160140480"></p>
<p>从上图可以看出， <strong>MySQL 主要由下面几部分构成</strong>：</p>
<ul>
<li><p><strong>连接器：</strong> 身份认证和权限相关(登录 MySQL 的时候)。</p>
</li>
<li><p><strong>查询缓存：</strong> 执行查询语句的时候，会先查询缓存（MySQL 8.0 版本后移除，因为这个功能不太实用）。</p>
</li>
<li><p><strong>分析器：</strong> 没有命中缓存的话，SQL 语句就会经过分析器，分析器说白了就是要先看你的 SQL 语句要干嘛，再检查你的 SQL 语句语法是否正确。</p>
</li>
<li><p><strong>优化器：</strong> 按照 MySQL 认为最优的方案去执行。</p>
</li>
<li><p><strong>执行器：</strong> 执行语句，然后从存储引擎返回数据。 执行语句之前会先判断是否有权限，如果没有权限的话，就会报错。</p>
</li>
<li><p><strong>插件式存储引擎</strong> ： 主要负责数据的存储和读取，采用的是插件式架构，支持 InnoDB、MyISAM、Memory 等多种存储引擎。</p>
</li>
</ul>
<p>简单来说 MySQL 主要分为 <strong>Server 层</strong>和<strong>存储引擎</strong>层：</p>
<ul>
<li><p><strong>Server 层</strong>：主要包括<strong>连接器、查询缓存、分析器、优化器、执行器</strong>等，所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图，函数等，还有一个通用的日志模块 binlog 日志模块。</p>
</li>
<li><p><strong>存储引擎</strong>： 主要负责数据的存储和读取，采用可以替换的插件式架构，支持 <strong>InnoDB、MyISAM、Memory</strong> 等多个存储引擎，其中 InnoDB 引擎有自有的日志模块 redolog 模块。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5 版本开始就被当做默认存储引擎了。</p>
</li>
</ul>
<h2 id="Server-层基本组件介绍"><a href="#Server-层基本组件介绍" class="headerlink" title="Server 层基本组件介绍"></a>Server 层基本组件介绍</h2><h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p>连接器主要和<strong>身份认证和权限</strong>相关的功能相关，就好比一个级别很高的门卫一样。</p>
<p>主要负责用户登录数据库，进行用户的身份认证，包括校验账户密码，权限等操作，如果用户账户密码已通过，连接器会到权限表中查询该用户的所有权限，之后在这个连接里的权限逻辑判断都是会依赖此时读取到的权限数据，也就是说，后续只要这个连接不断开，即使管理员修改了该用户的权限，该用户也是不受影响的。</p>
<h3 id="查询缓存-MySQL-8-0-版本后移除"><a href="#查询缓存-MySQL-8-0-版本后移除" class="headerlink" title="查询缓存(MySQL 8.0 版本后移除)"></a>查询缓存(MySQL 8.0 版本后移除)</h3><p>查询缓存主要用来缓存我们所执行的 SELECT 语句以及该语句的结果集。</p>
<p>连接建立后，执行查询语句的时候，会先查询缓存，MySQL 会先校验这个 SQL 是否执行过，以 Key-Value 的形式缓存在内存中，Key 是查询预计，Value 是结果集。如果缓存 key 被命中，就会直接返回给客户端，如果没有命中，就会执行后续的操作，完成后也会把结果缓存起来，方便下一次调用。当然在真正执行缓存查询的时候还是会校验用户的权限，是否有该表的查询条件。</p>
<p>MySQL 查询不建议使用缓存，因为查询缓存失效在实际业务场景中可能会非常频繁，假如你对一个表更新的话，这个表上的所有的查询缓存都会被清空。对于不经常更新的数据来说，使用缓存还是可以的。</p>
<p>所以，一般在大多数情况下我们都是不推荐去使用查询缓存的。</p>
<p>MySQL 8.0 版本后删除了缓存的功能，官方也是认为该功能在实际的应用场景比较少，所以干脆直接删掉了。</p>
<h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>MySQL 没有命中缓存，那么就会进入分析器，分析器主要是用来分析 SQL 语句是来干嘛的，分析器也会分为几步：</p>
<p><strong>第一步，词法分析</strong>，一条 SQL 语句有多个字符串组成，首先要提取关键字，比如 select，提出查询的表，提出字段名，提出查询条件等等。做完这些操作后，就会进入第二步。</p>
<p><strong>第二步，语法分析</strong>，主要就是判断你输入的 SQL 是否正确，是否符合 MySQL 的语法。</p>
<p>完成这 2 步之后，MySQL 就准备开始执行了，但是如何执行，怎么执行是最好的结果呢？这个时候就需要优化器上场了。</p>
<h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>优化器的作用就是它认为的最优的<strong>执行方案</strong>去执行（有时候可能也不是最优，这篇文章涉及对这部分知识的深入讲解），比如多个索引的时候该如何选择索引，多表查询的时候如何选择关联顺序等。</p>
<p>可以说，经过了优化器之后可以说这个语句具体该如何执行就已经定下来。</p>
<h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p>当选择了执行方案后，MySQL 就准备开始执行了，首先执行前会校验该用户有没有权限，如果没有权限，就会返回错误信息，如果有权限，就会去调用引擎的接口，返回接口执行的结果。</p>
<h2 id="一条-SQL-语句是如何执行"><a href="#一条-SQL-语句是如何执行" class="headerlink" title="一条 SQL 语句是如何执行"></a>一条 SQL 语句是如何执行</h2><h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_student A <span class="keyword">where</span> A.age<span class="operator">=</span><span class="string">&#x27;18&#x27;</span> <span class="keyword">and</span> A.name<span class="operator">=</span><span class="string">&#x27; 张三 &#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>结合上面的说明，我们分析下这个语句的执行流程：</p>
<ul>
<li><p>先检查该语句<strong>是否有权限</strong>，如果没有权限，直接返回错误信息，如果有权限，在 MySQL8.0 版本以前，会先<strong>查询缓存</strong>，以这条 SQL 语句为 key 在内存中查询是否有结果，如果有直接缓存，如果没有，执行下一步。</p>
</li>
<li><p>通过分析器进行<strong>词法分析</strong>，<strong>提取 SQL 语句的关键元素</strong>，比如提取上面这个语句是查询 select，提取需要查询的表名为 tb_student，需要查询所有的列，查询条件是这个表的 id=’1’。然后<strong>判断这个 SQL 语句是否有语法错误</strong>，比如关键词是否正确等等，如果检查没问题就执行下一步。</p>
</li>
<li><p>接下来就是<strong>优化器进行确定执行方案</strong>，上面的 SQL 语句，可以有两种执行方案：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">a.先查询学生表中姓名为“张三”的学生，然后判断是否年龄是 <span class="number">18</span>。</span><br><span class="line">b.先找出学生中年龄 <span class="number">18</span> 岁的学生，然后再查询姓名为“张三”的学生。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>那么优化器根据自己的优化算法进行选择执行效率最好的一个方案（优化器认为，有时候不一定最好）。那么确认了执行计划后就准备开始执行了。</p>
</li>
<li><p>进行权限校验，如果没有权限就会返回错误信息，如果有权限就会调用数据库引擎接口，返回引擎的执行结果。</p>
</li>
</ul>
<h3 id="更新语句"><a href="#更新语句" class="headerlink" title="更新语句"></a>更新语句</h3><p>以上就是一条查询 SQL 的执行流程，那么接下来我们看看一条更新语句如何执行的呢？SQL 语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> tb_student A <span class="keyword">set</span> A.age<span class="operator">=</span><span class="string">&#x27;19&#x27;</span> <span class="keyword">where</span> A.name<span class="operator">=</span><span class="string">&#x27; 张三 &#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>我们来给张三修改下年龄，在实际数据库肯定不会设置年龄这个字段的，不然要被技术负责人打的。其实这条语句也基本上会沿着上一个查询的流程走，只不过执行更新的时候肯定要记录日志啦，这就会引入日志模块了，MySQL 自带的日志模块是 <strong>binlog（归档日志）</strong> ，所有的存储引擎都可以使用，我们常用的 InnoDB 引擎还自带了一个日志模块 <strong>redo log（重做日志）</strong>，我们就以 InnoDB 模式下来探讨这个语句的执行流程。流程如下：</p>
<ul>
<li><p>先查询到张三这一条数据，如果有缓存，也是会用到缓存。</p>
</li>
<li><p>然后拿到查询的语句，把 age 改为 19，然后调用引擎 API 接口，写入这一行数据，InnoDB 引擎把数据保存在内存中，同时记录 redo log，此时 redo log 进入 prepare 状态，然后告诉执行器，执行完成了，随时可以提交。</p>
</li>
<li><p>执行器收到通知后记录 binlog，然后调用引擎接口，提交 redo log 为提交状态。</p>
</li>
<li><p>更新完成。</p>
</li>
</ul>
<p><strong>这里肯定有同学会问，为什么要用两个日志模块，用一个日志模块不行吗?</strong></p>
<p>这是因为最开始 MySQL 并没有 InnoDB 引擎（InnoDB 引擎是其他公司以插件形式插入 MySQL 的），MySQL 自带的引擎是 MyISAM，但是我们知道 <strong>redo log 是 InnoDB 引擎特有的</strong>，其他存储引擎都没有，这就导致会没有 crash-safe 的能力(crash-safe 的能力即使数据库发生异常重启，之前提交的记录都不会丢失)，<strong>binlog 日志只能用来归档</strong>。</p>
<p>并不是说只用一个日志模块不可以，只是 InnoDB 引擎就是通过 redo log 来支持事务的。那么，又会有同学问，我用两个日志模块，但是不要这么复杂行不行，为什么 redo log 要引入 prepare 预提交状态？这里我们用反证法来说明下为什么要这么做？</p>
<ul>
<li><p><strong>先写 redo log 直接提交，然后写 binlog</strong>，假设写完 redo log 后，机器挂了，binlog 日志没有被写入，那么机器重启后，这台机器会通过 redo log 恢复数据，但是这个时候 binlog 并没有记录该数据，后续进行机器备份的时候，就会丢失这一条数据，同时主从同步也会丢失这一条数据。</p>
</li>
<li><p><strong>先写 binlog，然后写 redo log</strong>，假设写完了 binlog，机器异常重启了，由于没有 redo log，本机是无法恢复这一条记录的，但是 binlog 又有记录，那么和上面同样的道理，就会产生数据不一致的情况。</p>
</li>
</ul>
<p>如果采用 <strong>redo log 两阶段提交</strong>的方式就不一样了，写完 binlog 后，然后再提交 redo log 就会防止出现上述的问题，从而保证了数据的一致性。那么问题来了，有没有一个极端的情况呢？假设 redo log 处于预提交状态，binlog 也已经写完了，这个时候发生了异常重启会怎么样呢？ 这个就要依赖于 MySQL 的处理机制了，MySQL 的处理过程如下：</p>
<ul>
<li><p>判断 redo log 是否完整，如果判断是完整的，就立即提交。</p>
</li>
<li><p>如果 redo log 只是预提交但不是 commit 状态，这个时候就会去判断 binlog 是否完整，如果完整就提交 redo log, 不完整就回滚事务。</p>
</li>
</ul>
<p>这样就解决了数据一致性的问题。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>MySQL 主要分为 <strong>Server 层和引擎层</strong>，Server 层主要包括<strong>连接器、查询缓存、分析器、优化器、执行器</strong>，同时还有一个日志模块（<strong>binlog</strong>），这个日志模块所有执行引擎都可以共用，<strong>redolog 只有 InnoDB 有</strong>。</p>
</li>
<li><p>引擎层是插件式的，目前主要包括，<strong>MyISAM,InnoDB,Memory</strong> 等。</p>
</li>
<li><p>查询语句的执行流程如下：<strong>权限校验（如果命中缓存）—&gt;查询缓存—&gt;分析器—&gt;优化器—&gt;权限校验—&gt;执行器—&gt;引擎</strong></p>
</li>
<li><p>更新语句执行流程如下：<strong>分析器—-&gt;权限校验—-&gt;执行器—&gt;引擎—redo log(prepare 状态)—&gt;binlog—&gt;redo log(commit状态)</strong></p>
</li>
</ul>
<h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a><strong>存储引擎</strong></h1><h2 id="MySQL-支持哪些存储引擎？默认使用哪个？"><a href="#MySQL-支持哪些存储引擎？默认使用哪个？" class="headerlink" title="MySQL 支持哪些存储引擎？默认使用哪个？"></a>MySQL 支持哪些存储引擎？默认使用哪个？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908172148275.png" alt="image-20220908172148275"></p>
<p>主要存储引擎以及功能如下：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908172213800.png" alt="image-20220908172213800"></p>
<p>MySQL5.5之前，默认存储引擎是MylSAM，5.5之后变成了InnoDB。</p>
<p>InnoDB支持的<strong>哈希索引</strong>是自适应的，InnoDB会根据表的使用情况自动为表生成哈希索引，不能人为干预是否在一张表中生成哈希索引。</p>
<p>MySQL 5.6开始InnoDB支持全文索引。</p>
<h2 id="那存储引擎应该怎么选择？"><a href="#那存储引擎应该怎么选择？" class="headerlink" title="那存储引擎应该怎么选择？"></a>那存储引擎应该怎么选择？</h2><p>大致上可以这么选择：</p>
<ul>
<li>大多数情况下，使用默认的InnoDB就够了。如果要提供<strong>提交、回滚和恢复的事务安全（ACID 兼容）</strong>能力，并要求实现并发控制，InnoDB 就是比较靠前的选择了。</li>
<li>如果数据表主要用来<strong>插入和查询记录</strong>，则 <strong>MyISAM</strong> 引擎提供较高的处理效率。</li>
<li>如果只是<strong>临时存放数据</strong>，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 <strong>MEMORY</strong> 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。</li>
</ul>
<p>使用哪一种引擎可以根据需要灵活选择，因为存储引擎是基于表的，所以一个数据库中多个表可以使用不同的引擎以满足各种性能和实际需求。使用合适的存储引擎将会提高整个数据库的性能。</p>
<h2 id="InnoDB和MylSAM主要有什么区别？"><a href="#InnoDB和MylSAM主要有什么区别？" class="headerlink" title="InnoDB和MylSAM主要有什么区别？"></a>InnoDB和MylSAM主要有什么区别？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908174526568.png" alt="image-20220908174526568"></p>
<p><strong>1.是否支持行级锁</strong></p>
<p>MyISAM 只有表级锁(table-level locking)，而 InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。</p>
<p>也就说，MyISAM 一锁就是锁住了整张表，这在并发写的情况下是多么滴憨憨啊！这也是为什么 InnoDB 在并发写的时候，性能更牛皮了！</p>
<p><strong>2.是否支持事务</strong></p>
<p>MyISAM 不提供事务支持。</p>
<p>InnoDB 提供事务支持，实现了 SQL 标准定义了四个隔离级别，具有提交(commit)和回滚(rollback)事务的能力。并且，InnoDB 默认使用的 REPEATABLE-READ（可重读）隔离级别是可以解决幻读问题发生的（基于 MVCC 和 Next-Key Lock）。</p>
<p>关于 MySQL 事务的详细介绍，可以看看我写的这篇文章：<a href="https://javaguide.cn/database/mysql/transaction-isolation-level.html">MySQL 事务隔离级别详解open in new window</a>。</p>
<p><strong>3.是否支持外键</strong></p>
<p>MyISAM 不支持，而 InnoDB 支持。</p>
<p>外键对于维护数据一致性非常有帮助，但是对性能有一定的损耗。因此，通常情况下，我们是不建议在实际生产项目中使用外键的，在业务代码中进行约束即可！</p>
<p>阿里的《Java 开发手册》也是明确规定禁止使用外键的。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/E2S3AbqgaMevqcRf65-GykDq98ATjfCSA4IUeqk_7ME.pngtoken=W.LuJhepAXj28rmGMNzUwb-qHCaAjyOTpGOs7ceh3hGLgsV77WbxbKZOsY-xRYhbs" alt="error"></p>
<p>不过，在代码中进行约束的话，对程序员的能力要求更高，具体是否要采用外键还是要根据你的项目实际情况而定。</p>
<p>总结：一般我们也是不建议在数据库层面使用外键的，应用层面可以解决。不过，这样会对数据的一致性造成威胁。具体要不要使用外键还是要根据你的项目来决定。</p>
<p><strong>4.是否支持数据库异常崩溃后的安全恢复</strong></p>
<p>MyISAM 不支持，而 InnoDB 支持。</p>
<p>使用 InnoDB 的数据库在异常崩溃后，数据库重新启动的时候会保证数据库恢复到崩溃前的状态。这个恢复的过程依赖于 <strong>redo log</strong> 。</p>
<p><strong>5.是否支持 MVCC</strong></p>
<p>MyISAM 不支持，而 InnoDB 支持。</p>
<p>讲真，这个对比有点废话，毕竟 MyISAM 连行级锁都不支持。MVCC 可以看作是行级锁的一个升级，可以有效减少加锁操作，提高性能。</p>
<p><strong>6.索引实现不一样。</strong></p>
<p>虽然 MyISAM 引擎和 InnoDB 引擎都是使用 <strong>B+Tree</strong> 作为索引结构，但是两者的实现方式不太一样。</p>
<p>InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。</p>
<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a><strong>日志</strong></h1><h2 id="MySQL日志文件有哪些？分别介绍下作用？"><a href="#MySQL日志文件有哪些？分别介绍下作用？" class="headerlink" title="MySQL日志文件有哪些？分别介绍下作用？"></a>MySQL日志文件有哪些？分别介绍下作用？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908215650562.png" alt="image-20220908215650562"></p>
<p>MySQL日志文件有很多，包括 ：</p>
<ul>
<li><strong>错误日志（error log）</strong>：错误日志文件对MySQL的启动、运行、关闭过程进行了记录，能帮助定位MySQL问题。</li>
<li><strong>慢查询日志（slow query log）</strong>：慢查询日志是用来记录执行时间超过 <strong>long_query_time</strong> 这个变量定义的时长的查询语句。通过慢查询日志，可以查找出哪些查询语句的执行效率很低，以便进行优化。</li>
<li><strong>一般查询日志（general log）</strong>：一般查询日志记录了所有对MySQL数据库请求的信息，无论请求是否正确执行。</li>
<li><strong>二进制日志（bin log）</strong>：关于二进制日志，它记录了数据库所有执行的DDL和DML语句（除了数据查询语句select、show等），以事件形式记录并保存在二进制文件中。</li>
</ul>
<p>还有两个<strong>InnoDB</strong>存储引擎特有的日志文件：</p>
<ul>
<li><strong>重做日志（redo log）</strong>：重做日志至关重要，因为它们记录了对于InnoDB存储引擎的事务日志。</li>
<li><strong>回滚日志（undo log）</strong>：回滚日志同样也是InnoDB引擎提供的日志，顾名思义，回滚日志的作用就是对数据进行回滚。当事务对数据库进行修改，InnoDB引擎不仅会记录redolog，还会生成对应的undo log日志；如果事务执行失败或调用了rollback，导致事务需要回滚，就可以利用undo log中的信息将数据回滚到修改之前的样子。</li>
</ul>
<h2 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h2><p>redo log（重做日志）是InnoDB存储引擎独有的，它让MySQL拥有了崩溃恢复能力。</p>
<p>比如 MySQL 实例挂了或宕机了，重启时，InnoDB存储引擎会使用redo log恢复数据，保证数据的持久性与完整性。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908180104830.png" alt="image-20220908180104830"></p>
<p><strong>MySQL</strong> 中数据是以页为单位，你查询一条记录，会从硬盘把一页的数据加载出来，加载出来的数据叫数据页，会放入到 <strong>Buffer Pool</strong> 中。</p>
<p>后续的查询都是先从 <strong>Buffer Pool</strong> 中找，没有命中再去硬盘加载，减少硬盘 IO 开销，提升性能。</p>
<p>更新表数据的时候，也是如此，发现 <strong>Buffer Pool</strong> 里存在要更新的数据，就直接在 <strong>Buffer Pool</strong> 里更新。</p>
<p>然后会把“<strong>在某个数据页上做了什么修改</strong>”记录到<strong>重做日志缓存（redo log buffer）</strong>里，接着刷盘到 <strong>redo log</strong> 文件里。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908180909891.png" alt="image-20220908180909891"></p>
<p>理想情况，事务一提交就会进行刷盘操作，但实际上，刷盘的时机是根据策略来进行的。</p>
<p>小贴士：每条 redo 记录由“表空间号+数据页号+偏移量+修改数据长度+具体修改的数据”组成</p>
<h3 id="刷盘时机"><a href="#刷盘时机" class="headerlink" title="刷盘时机"></a>刷盘时机</h3><p>InnoDB 存储引擎为 redo log 的刷盘策略提供了 <strong>innodb_flush_log_at_trx_commit</strong> 参数，它支持三种策略：</p>
<ul>
<li><p><strong>0</strong> ：设置为 0 的时候，表示每次事务提交时不进行刷盘操作</p>
</li>
<li><p><strong>1</strong> ：设置为 1 的时候，表示每次事务提交时都将进行刷盘操作（默认值）</p>
</li>
<li><p><strong>2</strong> ：设置为 2 的时候，表示每次事务提交时都只把 redo log buffer 内容写入 page cache</p>
</li>
</ul>
<p><strong>innodb_flush_log_at_trx_commit</strong> 参数默认为 1 ，也就是说当事务提交时会<strong>调用 fsync 对 redo log 进行刷盘</strong></p>
<p>另外，InnoDB 存储引擎有一个<strong>后台线程</strong>，每隔1 秒，就会把 redo log buffer 中的内容写到<strong>文件系统缓存（page cache）</strong>，然后调用 <strong>fsync</strong> 刷盘。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908181309250.png" alt="image-20220908181309250"></p>
<p>也就是说，一个没有提交事务的 redo log 记录，也可能会刷盘。</p>
<p>因为在事务执行过程 redo log 记录是会写入redo log buffer 中，这些 redo log 记录会被后台线程刷盘。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908181359838.png" alt="image-20220908181359838"></p>
<p>除了后台线程每秒1次的轮询操作，还有一种情况，当 redo log buffer 占用的空间即将达到 innodb_log_buffer_size 一半的时候，后台线程会主动刷盘。</p>
<p>下面是不同刷盘策略的流程图。</p>
<h5 id="innodb-flush-log-at-trx-commit-0"><a href="#innodb-flush-log-at-trx-commit-0" class="headerlink" title="innodb_flush_log_at_trx_commit=0"></a>innodb_flush_log_at_trx_commit=0</h5><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908181455376.png" alt="image-20220908181455376"></p>
<p>为0时，如果MySQL挂了或宕机可能会有1秒数据的丢失。</p>
<h5 id="innodb-flush-log-at-trx-commit-1"><a href="#innodb-flush-log-at-trx-commit-1" class="headerlink" title="innodb_flush_log_at_trx_commit=1"></a>innodb_flush_log_at_trx_commit=1</h5><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908181543540.png" alt="image-20220908181543540"></p>
<p>为1时， 只要事务提交成功，redo log记录就一定在硬盘里，不会有任何数据丢失。</p>
<p>如果事务执行期间MySQL挂了或宕机，这部分日志丢了，但是事务并没有提交，所以日志丢了也不会有损失。</p>
<h5 id="innodb-flush-log-at-trx-commit-2"><a href="#innodb-flush-log-at-trx-commit-2" class="headerlink" title="innodb_flush_log_at_trx_commit=2"></a>innodb_flush_log_at_trx_commit=2</h5><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908181632240.png" alt="image-20220908181632240"></p>
<p>如果仅仅只是MySQL挂了不会有任何数据丢失，但是宕机可能会有1秒数据的丢失。</p>
<h3 id="日志文件组"><a href="#日志文件组" class="headerlink" title="日志文件组"></a>日志文件组</h3><p>硬盘上存储的 redo log 日志文件不只一个，而是以一个<strong>日志文件组</strong>的形式出现的，每个的redo日志文件大小都是一样的。</p>
<p>比如可以配置为一组4个文件，每个文件的大小是 1GB，整个 redo log 日志文件组可以记录4G的内容。</p>
<p>它采用的是<strong>环形数组</strong>形式，从头开始写，写到末尾又回到头循环写，如下图所示。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908182238317.png" alt="image-20220908182238317"></p>
<p>在个<strong>日志文件组</strong>中还有两个重要的属性，分别是 <strong>write pos、checkpoint</strong></p>
<ul>
<li><p><strong>write pos</strong> 是当前记录的位置，一边写一边后移</p>
</li>
<li><p><strong>checkpoint</strong> 是当前要擦除的位置，也是往后推移</p>
</li>
</ul>
<p>每次刷盘 redo log 记录到<strong>日志文件组</strong>中，write pos 位置就会后移更新。</p>
<p>每次 MySQL 加载<strong>日志文件组</strong>恢复数据时，会清空加载过的 redo log 记录，并把 checkpoint 后移更新。</p>
<p>write pos 和 checkpoint 之间的还空着的部分可以用来写入新的 redo log 记录。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908182729899.png" alt="image-20220908182729899"></p>
<p>如果 write pos 追上 checkpoint ，表示<strong>日志文件组</strong>满了，这时候不能再写入新的 redo log 记录，MySQL 得停下来，清空一些记录，把 checkpoint 推进一下。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908182834045.png" alt="image-20220908182834045"></p>
<h3 id="redo-log-小结"><a href="#redo-log-小结" class="headerlink" title="redo log 小结"></a>redo log 小结</h3><p>相信大家都知道 redo log 的作用和它的刷盘时机、存储形式。</p>
<p>现在我们来思考一个问题： <strong>只要每次把修改后的数据页直接刷盘不就好了，还有</strong> <strong>redo log</strong> <strong>什么事？</strong></p>
<p>它们不都是刷盘么？差别在哪里？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> Byte <span class="operator">=</span> <span class="number">8</span>bit</span><br><span class="line"><span class="number">1</span> KB <span class="operator">=</span> <span class="number">1024</span> Byte</span><br><span class="line"><span class="number">1</span> MB <span class="operator">=</span> <span class="number">1024</span> KB</span><br><span class="line"><span class="number">1</span> GB <span class="operator">=</span> <span class="number">1024</span> MB</span><br><span class="line"><span class="number">1</span> TB <span class="operator">=</span> <span class="number">1024</span> GB</span><br></pre></td></tr></table></figure>

<p>实际上，数据页大小是16KB，刷盘比较耗时，可能就修改了数据页里的几 Byte 数据，有必要把完整的数据页刷盘吗？</p>
<p>而且数据页刷盘是随机写，因为一个数据页对应的位置可能在硬盘文件的随机位置，所以性能是很差。</p>
<p>如果是写 redo log，一行记录可能就占几十 Byte，只包含表空间号、数据页号、磁盘文件偏移 量、更新值，再加上是顺序写，所以刷盘速度很快。</p>
<p>所以用 redo log 形式记录修改内容，性能会远远超过刷数据页的方式，这也让数据库的并发能力更强。</p>
<h2 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h2><p>redo log 它是物理日志，记录内容是“<strong>在某个数据页上做了什么修改</strong>”，属于 InnoDB 存储引擎。</p>
<p>而 binlog 是逻辑日志，记录内容是语句的原始逻辑，类似于“给 ID=2 这一行的 c 字段加 1”，属于MySQL Server 层。</p>
<p>不管用什么存储引擎，只要发生了表数据更新，都会产生 binlog 日志。</p>
<p>那 binlog 到底是用来干嘛的？</p>
<p>可以说MySQL数据库的<strong>数据备份、主备、主主、主从</strong>都离不开binlog，需要依靠binlog来同步数据，保证数据一致性。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908213313383.png" alt="image-20220908213313383"></p>
<p>binlog会记录所有涉及更新数据的逻辑操作，并且是顺序写。</p>
<h3 id="记录格式"><a href="#记录格式" class="headerlink" title="记录格式"></a>记录格式</h3><p>binlog 日志有三种格式，可以通过binlog_format参数指定。</p>
<ul>
<li><strong>statement</strong></li>
<li><strong>row</strong></li>
<li><strong>mixed</strong></li>
</ul>
<p>指定<strong>statement</strong>，记录的内容是SQL语句原文，比如执行一条<strong>update T set update_time=now() where id=1</strong>，记录的内容如下。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908213421869.png" alt="image-20220908213421869"></p>
<p>同步数据时，会执行记录的SQL语句，但是有个问题，update_time=now()这里会获取当前系统时间，直接执行会导致与原库的数据不一致。</p>
<p>为了解决这种问题，我们需要指定为row，记录的内容不再是简单的SQL语句了，还包含操作的具体数据，记录内容如下。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908213517492.png" alt="image-20220908213517492"></p>
<p>row格式记录的内容看不到详细信息，要通过mysqlbinlog工具解析出来。</p>
<p>update_time=now()变成了具体的时间update_time=1627112756247，条件后面的@1、@2、@3 都是该行数据第 1 个~3 个字段的原始值（<strong>假设这张表只有 3 个字段</strong>）。</p>
<p>这样就能保证同步数据的一致性，通常情况下都是指定为row，这样可以为数据库的恢复与同步带来更好的可靠性。</p>
<p>但是这种格式，需要更大的容量来记录，比较占用空间，恢复与同步时会更消耗IO资源，影响执行速度。</p>
<p>所以就有了一种折中的方案，指定为mixed，记录的内容是前两者的混合。</p>
<p>MySQL会判断这条SQL语句是否可能引起数据不一致，如果是，就用row格式，否则就用statement格式</p>
<h3 id="写入机制"><a href="#写入机制" class="headerlink" title="写入机制"></a>写入机制</h3><p>binlog的写入时机也非常简单，事务执行过程中，先把日志写到<strong>binlog cache</strong>，事务提交的时候，再把binlog cache写到<strong>binlog</strong>文件中。</p>
<p>因为一个事务的binlog不能被拆开，无论这个事务多大，也要确保一次性写入，所以系统会给每个线程分配一个块内存作为binlog cache。</p>
<p>我们可以通过<strong>binlog_cache_size</strong>参数控制单个线程 binlog cache 大小，如果存储内容超过了这个参数，就要暂存到磁盘（Swap）。</p>
<p>binlog日志刷盘流程如下</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908213744369.png" alt="image-20220908213744369"></p>
<ul>
<li><p><strong>上图的 write，是指把日志写入到文件系统的 page cache，并没有把数据持久化到磁盘，所以速度比较快</strong></p>
</li>
<li><p><strong>上图的 fsync，才是将数据持久化到磁盘的操作</strong></p>
</li>
</ul>
<p>write和fsync的时机，可以由参数sync_binlog控制，默认是0。</p>
<p>为0的时候，表示每次提交事务都只write，由系统自行判断什么时候执行fsync。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908213841944.png" alt="image-20220908213841944"></p>
<p>虽然性能得到提升，但是机器宕机，page cache里面的 binlog 会丢失。</p>
<p>为了安全起见，可以设置为1，表示每次提交事务都会执行fsync，就如同 <strong>redo log 日志刷盘流程</strong> 一样。</p>
<p>最后还有一种折中方式，可以设置为N(N&gt;1)，表示每次提交事务都write，但累积N个事务后才fsync。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908213916706.png" alt="image-20220908213916706"></p>
<h2 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h2><p>redo log（重做日志）让InnoDB存储引擎拥有了崩溃恢复能力。</p>
<p>binlog（归档日志）保证了MySQL集群架构的数据一致性。</p>
<p>虽然它们都属于持久化的保证，但是侧重点不同。</p>
<p>在执行更新语句过程，会记录redo log与binlog两块日志，以基本的事务为单位，redo log在事务执行过程中可以不断写入，而binlog只有在提交事务时才写入，所以redo log与binlog的写入时机不一样。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908214058360.png" alt="image-20220908214058360"></p>
<p>回到正题，redo log与binlog两份日志之间的逻辑不一致，会出现什么问题？</p>
<p>我们以update语句为例，假设id=2的记录，字段c值是0，把字段c值更新成1，SQL语句为update T set c=1 where id=2。</p>
<p>假设执行过程中写完redo log日志后，binlog日志写期间发生了异常，会出现什么情况呢？</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908214137165.png" alt="image-20220908214137165"></p>
<p>由于binlog没写完就异常，这时候binlog里面没有对应的修改记录。因此，之后用binlog日志恢复数据时，就会少这一次更新，恢复出来的这一行c值是0，而原库因为redo log日志恢复，这一行c值是1，最终数据不一致。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908214216674.png" alt="image-20220908214216674"></p>
<p>为了解决两份日志之间的逻辑一致问题，InnoDB存储引擎使用<strong>两阶段提交</strong>方案。</p>
<p>原理很简单，将redo log的写入拆成了两个步骤prepare和commit，这就是<strong>两阶段提交</strong>。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908214310160.png" alt="image-20220908214310160"></p>
<p>使用<strong>两阶段提交</strong>后，写入binlog时发生异常也不会有影响，因为MySQL根据redo log日志恢复数据时，发现redo log还处于prepare阶段，并且没有对应binlog日志，就会回滚该事务。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908214404416.png" alt="image-20220908214404416"></p>
<p>再看一个场景，redo log设置commit阶段发生异常，那会不会回滚事务呢？</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908214432260.png" alt="image-20220908214432260"></p>
<p>并不会回滚事务，它会执行上图框住的逻辑，虽然redo log是处于prepare阶段，但是能通过事务id找到对应的binlog日志，所以MySQL认为是完整的，就会提交事务恢复数据。</p>
<h2 id="binlog和redo-log有什么区别？"><a href="#binlog和redo-log有什么区别？" class="headerlink" title="binlog和redo log有什么区别？"></a>binlog和redo log有什么区别？</h2><ul>
<li>bin log会记录所有与数据库有关的日志记录，包括InnoDB、MyISAM等存储引擎的日志，而redo log只记InnoDB存储引擎的日志。</li>
<li>记录的内容不同，bin log记录的是关于一个事务的具体操作内容，即该日志是逻辑日志。而redo log记录的是关于每个页（Page）的更改的物理情况。</li>
<li>写入的时间不同，bin log仅在事务提交前进行提交，也就是只写磁盘一次。而在事务进行的过程中，却不断有redo ertry被写入redo log中。</li>
<li>写入的方式也不相同，redo log是循环写入和擦除，bin log是追加写入，不会覆盖已经写的文件。</li>
</ul>
<h2 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h2><p>我们知道如果想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行<strong>回滚</strong>，在 MySQL 中，恢复机制是通过 <strong>回滚日志（undo log）</strong> 实现的，所有事务进行的修改都会先记录到这个回滚日志中，然后再执行相关的操作。如果执行过程中遇到异常的话，我们直接利用 <strong>回滚日志</strong> 中的信息将数据回滚到修改之前的样子即可！并且，回滚日志会先于数据持久化到磁盘上。这样就保证了即使遇到数据库突然宕机等情况，当用户再次启动数据库的时候，数据库还能够通过查询回滚日志来回滚将之前未完成的事务。</p>
<p>另外，MVCC 的实现依赖于：<strong>隐藏字段、Read View、undo log</strong>。在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改</p>
<h2 id="一条更新语句怎么执行的了解吗？"><a href="#一条更新语句怎么执行的了解吗？" class="headerlink" title="一条更新语句怎么执行的了解吗？"></a>一条更新语句怎么执行的了解吗？</h2><p>更新语句的执行是Server层和引擎层配合完成，数据除了要写入表中，还要记录相应的日志。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908220733335.png" alt="image-20220908220733335"></p>
<ol>
<li><p>执行器先找引擎获取ID=2这一行。ID是主键，存储引擎检索数据，找到这一行。如果ID=2这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</p>
</li>
<li><p>执行器拿到引擎给的行数据，把这个值加上 1 ，比如原来是N，现在就是N+1，得到新的一行数据，再调用引擎接又写入这行新数据。</p>
</li>
<li><p>引擎将这行新数据更新到内存中，同时将这个更新操作记录到redo log里面，此时redo log处于prepare状态。然后告知执行器执行完成了，随时可以提交事务。</p>
</li>
<li><p>执行器生成这个操作的binlog，并把binlog写入磁盘。</p>
</li>
<li><p>执行器调用引擎的提交事务接又，引擎把刚刚写入的redo log改成提交（commit）状态，<br>更新完成。</p>
</li>
</ol>
<p>从上图可以看出，MySQL在执行更新语句的时候，在服务层进行语句的解析和执行，在引擎层进行数据的提取和存储；同时在服务层对binlog进行写入，在InnoDB内进行redo log的写入。</p>
<p>不仅如此，在对redo log写入时有两个阶段的提交，一是binlog写入之前prepare状态的写入，二是binlog写入之后commit状态的写入。</p>
<h1 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a><strong>SQL优化</strong></h1><h2 id="慢SQL如何定位呢？"><a href="#慢SQL如何定位呢？" class="headerlink" title="慢SQL如何定位呢？"></a>慢SQL如何定位呢？</h2><p>慢SQL的监控主要通过两个途径：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220908221555005.png" alt="image-20220908221555005"></p>
<ul>
<li><strong>慢查询日志</strong>：开启MySQL的慢查询日志，再通过一些工具比如mysqldumpslow去分析对应的慢查询日志，当然现在一般的云厂商都提供了可视化的平台。</li>
<li><strong>服务监控</strong>：可以在业务的基建中加入对慢SQL的监控，常见的方案有字节码插桩、连接池扩展、ORM框架过程，对服务运行中的慢SQL进行监控和告警。</li>
</ul>
<h2 id="有哪些方式优化慢SQL？"><a href="#有哪些方式优化慢SQL？" class="headerlink" title="有哪些方式优化慢SQL？"></a>有哪些方式优化慢SQL？</h2><p>慢SQL的优化，主要从两个方面考虑，SQL语句本身的优化，以及数据库设计的优化。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220909144014581.png" alt="image-20220909144014581"></p>
<h3 id="避免不必要的列"><a href="#避免不必要的列" class="headerlink" title="避免不必要的列"></a>避免不必要的列</h3><p>这个是老生常谈，但还是经常会出的情况，SQL查询的时候，应该只查询需要的列，而不要包含额外的列，像*<em>select **</em> 这种写法应该尽量避免。</p>
<h3 id="分页优化"><a href="#分页优化" class="headerlink" title="分页优化"></a><strong>分页优化</strong></h3><h4 id="过大的分页查询为什么会慢？"><a href="#过大的分页查询为什么会慢？" class="headerlink" title="过大的分页查询为什么会慢？"></a><strong>过大的分页查询为什么会慢？</strong></h4><p>下面我们先构造一个例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#先创建一张MySQL表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `limit_optimize_tbl` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `account` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `order_id` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2000002</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index idx_account <span class="keyword">on</span> limit_optimize_tbl(account);</span><br><span class="line"><span class="keyword">create</span> index idx_order_id <span class="keyword">on</span> limit_optimize_tbl(order_id);</span><br><span class="line"></span><br><span class="line">#创建一个插入数据的存储过程</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> limit_optimize_test()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span>;</span><br><span class="line">    <span class="keyword">SET</span> i<span class="operator">=</span><span class="number">1000000</span>;</span><br><span class="line">    WHILE i<span class="operator">&lt;=</span><span class="number">3000000</span> DO</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> limit_optimize_tbl(account,order_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;test_123&#x27;</span>,concat(<span class="string">&#x27;order&#x27;</span>, i));</span><br><span class="line">        <span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">#调用存储过程，插入<span class="number">200</span>万行数据</span><br><span class="line"><span class="keyword">call</span> limit_optimize_test();</span><br></pre></td></tr></table></figure>

<p>下面的这行 SQL 是一个常见的分页查询的语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">order</span> <span class="keyword">by</span> order_id limit <span class="number">1000000</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>这种写法是最简单的，但同时也是最容易出问题的。</p>
<p>曾经有人做过调查，用户在浏览前端页面时，假如这个页面是分页浏览的（例如淘宝），用户只会浏览前面几页，一般翻页超过 10 页很多人就开始表现的不耐烦了。</p>
<p>在翻页比较少的情况下，LIMIT 子句并不会表现出性能问题。</p>
<p>但是假如用户要直接跳到最后一页呢？</p>
<p>通常情况下，由于要保证所有的页面都可以正常跳转，因此可能不会使用如下这种语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">order</span> <span class="keyword">by</span> order_id <span class="keyword">desc</span> limit <span class="number">0</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>而是继续采用正序顺序做分页查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">order</span> <span class="keyword">by</span> order_id limit <span class="number">1000000</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>采用这种 SQL 查询的话，此时从 MySQL 中取出这 10 行数据的代价是非常大的，需要先排序出前面 1000010 条记录，然后抛弃前面的 1000000 条。</p>
<p>查询数据和排序的代价非常高。</p>
<p>我们再来看一下上面这个 SQL 语句的执行计划：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">order</span> <span class="keyword">by</span> order_id limit <span class="number">0</span>,<span class="number">10</span> \G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">           id: <span class="number">1</span></span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        <span class="keyword">table</span>: limit_optimize_tbl</span><br><span class="line">   partitions: <span class="keyword">NULL</span></span><br><span class="line">         type: index</span><br><span class="line">possible_keys: <span class="keyword">NULL</span></span><br><span class="line">          key: idx_order_id</span><br><span class="line">      key_len: <span class="number">302</span></span><br><span class="line">          <span class="keyword">ref</span>: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">rows</span>: <span class="number">10</span></span><br><span class="line">     filtered: <span class="number">100.00</span></span><br><span class="line">        Extra: <span class="keyword">NULL</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">order</span> <span class="keyword">by</span> order_id limit <span class="number">1000000</span>,<span class="number">10</span> \G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">           id: <span class="number">1</span></span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        <span class="keyword">table</span>: limit_optimize_tbl</span><br><span class="line">   partitions: <span class="keyword">NULL</span></span><br><span class="line">         type: <span class="keyword">ALL</span></span><br><span class="line">possible_keys: <span class="keyword">NULL</span></span><br><span class="line">          key: <span class="keyword">NULL</span></span><br><span class="line">      key_len: <span class="keyword">NULL</span></span><br><span class="line">          <span class="keyword">ref</span>: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">rows</span>: <span class="number">1994816</span></span><br><span class="line">     filtered: <span class="number">100.00</span></span><br><span class="line">        Extra: <span class="keyword">Using</span> filesort</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>从执行计划中你可以看到，在大分页的时候，MySQL 并没有走索引扫描，而是使用了全表扫描的方式。</p>
<p>那这又是为什么呢？</p>
<p>MySQL 数据库采用了基于代价的查询优化器，而查询代价的估算是基于 CPU 代价和 IO 代价。</p>
<p>由于现在机械硬盘还没有被完全淘汰掉，因此在类似这种局部扫描的动作中，随机 IO 的代价，仍然被 MySQL 的查询优化器认为是非常高的。</p>
<p>对于局部扫描，MySQL 会根据数据量的情况和数据获取的条件，去做代价估算，决定是采用顺序扫描还是随机读取存储系统。</p>
<p><strong>如果 MySQL 在查询代价估算中，认为采取顺序扫描方式比局部随机扫描的效率更高的话，就会放弃索引，转向顺序扫描的方式</strong>。</p>
<p>这就是为什么在大分页中 MySQL 数据库走了全表扫描的原因。</p>
<p>下面我们还是使用刚刚的 SQL 语句，再来实验一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#这两个<span class="keyword">SQL</span>语句是查询优化器改变策略的一个临界点，在笔者电脑上测试通过</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">order</span> <span class="keyword">by</span> order_id limit <span class="number">5660</span>,<span class="number">10</span> \G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">           id: <span class="number">1</span></span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        <span class="keyword">table</span>: limit_optimize_tbl</span><br><span class="line">   partitions: <span class="keyword">NULL</span></span><br><span class="line">         type: index</span><br><span class="line">possible_keys: <span class="keyword">NULL</span></span><br><span class="line">          key: idx_order_id</span><br><span class="line">      key_len: <span class="number">302</span></span><br><span class="line">          <span class="keyword">ref</span>: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">rows</span>: <span class="number">5670</span></span><br><span class="line">     filtered: <span class="number">100.00</span></span><br><span class="line">        Extra: <span class="keyword">NULL</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">order</span> <span class="keyword">by</span> order_id limit <span class="number">5661</span>,<span class="number">10</span> \G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">           id: <span class="number">1</span></span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        <span class="keyword">table</span>: limit_optimize_tbl</span><br><span class="line">   partitions: <span class="keyword">NULL</span></span><br><span class="line">         type: <span class="keyword">ALL</span></span><br><span class="line">possible_keys: <span class="keyword">NULL</span></span><br><span class="line">          key: <span class="keyword">NULL</span></span><br><span class="line">      key_len: <span class="keyword">NULL</span></span><br><span class="line">          <span class="keyword">ref</span>: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">rows</span>: <span class="number">1994816</span></span><br><span class="line">     filtered: <span class="number">100.00</span></span><br><span class="line">        Extra: <span class="keyword">Using</span> filesort</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>从上面的实验你可以看到，在这个临界点上，MySQL 分别采用了<strong>索引扫描</strong>和<strong>全表扫描</strong>的查询优化方式。</p>
<p>你可以自行运行下这两个 SQL 语句，比较下执行时间。</p>
<p>由于 MySQL 的查询优化器的算法核心我们是无法人工干预的，因此我们的优化思路应该着眼于如何<strong>让分页维持在最佳的效率区间</strong>。</p>
<p>下面我们就来看下如何优化。</p>
<p>优化可以从两个角度进行分析：<strong>SQL 改写优化与业务角度优化</strong>。</p>
<h4 id="SQL-改写优化"><a href="#SQL-改写优化" class="headerlink" title="SQL 改写优化"></a><strong>SQL 改写优化</strong></h4><h5 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h5><p>由于索引是有序的，因此这种优化方式的思路是直接在索引上完成排序和分页的操作。</p>
<p>先来说说什么是<strong>覆盖索引</strong>。</p>
<p>如果一个 SQL 语句，通过索引即可直接获取查询结果，而<strong>不再需要回表查询</strong>，就称这个索引覆盖了这条 SQL 语句。</p>
<p>也就是平时所说的不需要回表操作。</p>
<p>在 MySQL 数据库中使用执行计划查看，如果 <strong>extra</strong> 这一列中显示 <strong>Using index</strong>，就表示这条 SQL 语句使用了<strong>覆盖索引</strong>。</p>
<p>下面我们看下刚刚的那条 SQL 语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">order</span> <span class="keyword">by</span> order_id limit <span class="number">0</span>,<span class="number">10</span> \G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">           id: <span class="number">1</span></span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        <span class="keyword">table</span>: limit_optimize_tbl</span><br><span class="line">   partitions: <span class="keyword">NULL</span></span><br><span class="line">         type: index</span><br><span class="line">possible_keys: <span class="keyword">NULL</span></span><br><span class="line">          key: idx_order_id</span><br><span class="line">      key_len: <span class="number">302</span></span><br><span class="line">          <span class="keyword">ref</span>: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">rows</span>: <span class="number">10</span></span><br><span class="line">     filtered: <span class="number">100.00</span></span><br><span class="line">        Extra: <span class="keyword">NULL</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> order_id <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">order</span> <span class="keyword">by</span> order_id limit <span class="number">0</span>,<span class="number">10</span> \G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">           id: <span class="number">1</span></span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        <span class="keyword">table</span>: limit_optimize_tbl</span><br><span class="line">   partitions: <span class="keyword">NULL</span></span><br><span class="line">         type: index</span><br><span class="line">possible_keys: <span class="keyword">NULL</span></span><br><span class="line">          key: idx_order_id</span><br><span class="line">      key_len: <span class="number">302</span></span><br><span class="line">          <span class="keyword">ref</span>: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">rows</span>: <span class="number">10</span></span><br><span class="line">     filtered: <span class="number">100.00</span></span><br><span class="line">        Extra: <span class="keyword">Using</span> index</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> id <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">order</span> <span class="keyword">by</span> order_id limit <span class="number">0</span>,<span class="number">10</span> \G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">           id: <span class="number">1</span></span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        <span class="keyword">table</span>: limit_optimize_tbl</span><br><span class="line">   partitions: <span class="keyword">NULL</span></span><br><span class="line">         type: index</span><br><span class="line">possible_keys: <span class="keyword">NULL</span></span><br><span class="line">          key: idx_order_id</span><br><span class="line">      key_len: <span class="number">302</span></span><br><span class="line">          <span class="keyword">ref</span>: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">rows</span>: <span class="number">10</span></span><br><span class="line">     filtered: <span class="number">100.00</span></span><br><span class="line">        Extra: <span class="keyword">Using</span> index</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>从这个实验中可以看到，除了 select * 的那条 SQL 语句，其他两个都使用了覆盖索引。</p>
<p>你也可以对比一下使用了覆盖索引的大分页和和没有使用覆盖索引的性能差异。</p>
<p>在我的环境中执行实验中的 “LIMIT 1000000,10” 的分页查询，没有使用覆盖索引的 SQL 语句执行时间是 2.51s，使用了覆盖索引的 SQL 语句执行时间是 0.16s，优化效果还是非常明显的。</p>
<h5 id="子查询优化"><a href="#子查询优化" class="headerlink" title="子查询优化"></a>子查询优化</h5><p>由于在 <strong>SELECT</strong> 语句中我们很少会只查询某一两个列，因此上述覆盖索引的适用范围就比较有限。</p>
<p>可以通过<strong>将分页的 SQL 语句改写成子查询</strong>的方法获得性能的提升：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">where</span> id<span class="operator">&gt;=</span>(<span class="keyword">select</span> id <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">order</span> <span class="keyword">by</span> order_id limit <span class="number">1000000</span>,<span class="number">1</span>) limit <span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> account  <span class="operator">|</span> order_id     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000001</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000000 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000002</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000001 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000003</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000002 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000004</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000003 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000005</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000004 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000006</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000005 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000007</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000006 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000008</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000007 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000009</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000008 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000010</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000009 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+--------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.16</span> sec)</span><br></pre></td></tr></table></figure>

<p>执行时间和上一节的使用了覆盖索引的 SQL 语句基本一致。</p>
<p>不知道你有没有观察到，这种优化方法也有其局限性：</p>
<ol>
<li>首先，分页的数据必须是连续的</li>
<li>其次，WHERE 子句里面不能再添加别的条件</li>
</ol>
<h5 id="延迟关联"><a href="#延迟关联" class="headerlink" title="延迟关联"></a>延迟关联</h5><p>和上述子查询的做法类似，我们也可以使用 <strong>JOIN</strong> 的语法，<strong>先在索引上完成分页的操作，然后再回表获取需要的数据列</strong>。</p>
<p>示例如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a.<span class="operator">*</span> <span class="keyword">from</span> limit_optimize_tbl a <span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> id <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">order</span> <span class="keyword">by</span> order_id limit <span class="number">1000000</span>,<span class="number">10</span>) b <span class="keyword">on</span> a.id<span class="operator">=</span>b.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> account  <span class="operator">|</span> order_id     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000001</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000000 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000002</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000001 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000003</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000002 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000004</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000003 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000005</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000004 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000006</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000005 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000007</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000006 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000008</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000007 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000009</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000008 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000010</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000009 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+--------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.15</span> sec)</span><br></pre></td></tr></table></figure>

<p>你可以和上一小节的子查询优化的方式做个对比，在采用了 JOIN 语法改写之后，上面的两个限制都解除了，并且 SQL 的执行效率没有损失。</p>
<h5 id="记录书签"><a href="#记录书签" class="headerlink" title="记录书签"></a>记录书签</h5><p>和上述使用覆盖索引的思路不同，<strong>记录书签的优化思路是使用书签记录上一页数据的位置，下次分页时直接从这个书签的位置开始扫描</strong>，从而避免 MySQL 扫描大量的数据行再丢弃的操作。</p>
<p>示例如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">where</span> id<span class="operator">&gt;=</span><span class="number">1000001</span> limit <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> account  <span class="operator">|</span> order_id     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000001</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000000 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000002</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000001 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000003</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000002 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000004</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000003 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000005</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000004 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000006</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000005 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000007</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000006 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000008</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000007 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000009</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000008 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000010</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000009 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+--------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>从上面的 SQL 语句你可以看到，由于使用了主键索引来做分页的操作，SQL 语句的性能是极佳的。</p>
<p>使用其他列做书签也是可以的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">where</span> order_id<span class="operator">&gt;=</span><span class="string">&#x27;order2000000&#x27;</span> limit <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> account  <span class="operator">|</span> order_id     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000001</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000000 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000002</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000001 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000003</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000002 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000004</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000003 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000005</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000004 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000006</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000005 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000007</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000006 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000008</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000007 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000009</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000008 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1000010</span> <span class="operator">|</span> test_123 <span class="operator">|</span> order2000009 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+--------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>

<p>这里要给你提个醒，如果没有使用主键索引或唯一索引做这个书签，排序的字段有大量重复值的情况下，输出的结果不一定是准确的，不适合使用这种写法。</p>
<h5 id="反向查找"><a href="#反向查找" class="headerlink" title="反向查找"></a>反向查找</h5><p>反向查找即我们在本文的开头提到的例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> limit_optimize_tbl <span class="keyword">order</span> <span class="keyword">by</span> order_id <span class="keyword">desc</span> limit <span class="number">0</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>这种优化的思路来自于二分查找，也就是说，<strong>当偏移量超过记录数的一半时，就可以使用这种写法来获得性能的提升</strong>。</p>
<p>不过这种方法需要在分页前知道符合条件的总的记录条数，但是在 InnoDB 存储引擎中，COUNT (*) 的开销其实也不小。</p>
<p>因此建议你仅在一些特殊情况下选用，例如<strong>直接跳到尾页</strong>。</p>
<h4 id="业务角度优化"><a href="#业务角度优化" class="headerlink" title="业务角度优化"></a>业务角度优化</h4><h5 id="翻页限制"><a href="#翻页限制" class="headerlink" title="翻页限制"></a>翻页限制</h5><h6 id="不允许翻过多的页"><a href="#不允许翻过多的页" class="headerlink" title="不允许翻过多的页"></a><strong>不允许翻过多的页</strong></h6><p>一言以蔽之，就是不给你查了。<br>把 LIMIT 分页的偏移量做一个限制，超过某个阈值就停止。<br>我们以淘宝网为例，使用比较热门的 “连衣裙” 的关键词进行搜索，网站仅仅提供了 100 个数据页。<br>很多大型互联网公司由于数据量巨大，都有使用这种方法。<br>粗暴又有效。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/v2-9554bb5793a4296b773f516bf6f7e846_1440w.jpg" alt="img"></p>
<h6 id="流式分页"><a href="#流式分页" class="headerlink" title="流式分页"></a><strong>流式分页</strong></h6><p>这种分页方式比较适用于移动端，即只能一页一页的向前或向后加载，不提供跳转的功能。<br>可以在上一级入口中提供业务列表给用户选择，从而减少分页。<br>这种分页方式在电商和新闻类 APP 上应用的非常广泛，你也可以试试。</p>
<h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><p>合理地设计和使用索引，是优化慢SQL的利器。</p>
<h4 id="利用覆盖索引"><a href="#利用覆盖索引" class="headerlink" title="利用覆盖索引"></a><strong>利用覆盖索引</strong></h4><p>InnoDB使用非主键索引查询数据时会回表，但是如果索引的叶节点中已经包含要查询的字段，那它没有必要再回表查询了，这就叫覆盖索引</p>
<p>例如对于如下查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> test <span class="keyword">where</span> city<span class="operator">=</span><span class="string">&#x27;上海&#x27;</span></span><br></pre></td></tr></table></figure>

<p>我们将被查询的字段建⽴到联合索引中，这样查询结果就可以直接从索引中获取</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test <span class="keyword">add</span> index idx_city_name (city, name);</span><br></pre></td></tr></table></figure>

<h4 id="低版本避免使用or查询"><a href="#低版本避免使用or查询" class="headerlink" title="低版本避免使用or查询"></a><strong>低版本避免使用or查询</strong></h4><p>在 MySQL 5.0 之前的版本要尽量避免使用 or 查询，可以使用 union 或者子查询来替代，因为早期的 MySQL 版本使用 or 查询可能会导致索引失效，高版本引入了索引合并，解决了这个问题。</p>
<h4 id="避免使用-或者-lt-gt-操作符"><a href="#避免使用-或者-lt-gt-操作符" class="headerlink" title="避免使用 != 或者 &lt;&gt; 操作符"></a><strong>避免使用 != 或者 &lt;&gt; 操作符</strong></h4><p>SQL中，不等于操作符会导致查询引擎放弃查询索引，引起全表扫描，即使比较的字段上有索引</p>
<p>解决方法：通过把不等于操作符改成or，可以使用索引，避免全表扫描</p>
<p>例如，把<strong>column&lt;&gt;’aaa’</strong>，改成<strong>column&gt;’aaa’ or column&lt;’aaa’</strong>，就可以使用索引了</p>
<h4 id="适当使用前缀索引"><a href="#适当使用前缀索引" class="headerlink" title="适当使用前缀索引"></a><strong>适当使用前缀索引</strong></h4><p>适当地使用前缀索引，可以降低索引的空间占用，提高索引的查询效率。</p>
<p>比如，邮箱的后缀都是固定的“@xxx.com”，那么类似这种后面几位为固定值的字段就非常适合定义为前缀索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test <span class="keyword">add</span> index index2(email(<span class="number">6</span>));</span><br></pre></td></tr></table></figure>

<p>PS:需要注意的是，前缀索引也存在缺点，MySQL无法利用前缀索引做order by和group by 操作，也无法作为覆盖索引</p>
<h4 id="避免列上函数运算"><a href="#避免列上函数运算" class="headerlink" title="避免列上函数运算"></a><strong>避免列上函数运算</strong></h4><p>要避免在列字段上进行算术运算或其他表达式运算，否则可能会导致存储引擎无法正确使用索引，从而影响了查询的效率</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">+</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">50</span> ;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> <span class="keyword">month</span>(updateTime) <span class="operator">=</span> <span class="number">7</span> ;</span><br></pre></td></tr></table></figure>

<h4 id="正确使用联合索引"><a href="#正确使用联合索引" class="headerlink" title="正确使用联合索引"></a><strong>正确使用联合索引</strong></h4><p>使用联合索引的时候，注意最左匹配原则。</p>
<h3 id="JOIN优化"><a href="#JOIN优化" class="headerlink" title="JOIN优化"></a>JOIN优化</h3><h4 id="优化子查询"><a href="#优化子查询" class="headerlink" title="优化子查询"></a><strong>优化子查询</strong></h4><p>尽量使用 Join 语句来替代子查询，因为子查询是嵌套查询，而嵌套查询会新创建一张临时表，而临时表的创建与销毁会占用一定的系统资源以及花费一定的时间，同时对于返回结果集比较大的子查询，其对查询性能的影响更大</p>
<h4 id="小表驱动大表"><a href="#小表驱动大表" class="headerlink" title="小表驱动大表"></a><strong>小表驱动大表</strong></h4><p>关联查询的时候要拿小表去驱动大表，因为关联的时候，MySQL内部会遍历驱动表，再去连接被驱动表。</p>
<p>比如left join，左表就是驱动表，A表小于B表，建立连接的次数就少，查询速度就被加快了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> A <span class="keyword">left</span> <span class="keyword">join</span> B ;</span><br></pre></td></tr></table></figure>

<h4 id="适当增加冗余字段"><a href="#适当增加冗余字段" class="headerlink" title="适当增加冗余字段"></a><strong>适当增加冗余字段</strong></h4><p>增加冗余字段可以减少大量的连表查询，因为多张表的连表查询性能很低，所有可以适当的增加冗余字段，以减少多张表的关联查询，这是以空间换时间的优化策略</p>
<h4 id="避免使用JOIN关联太多的表"><a href="#避免使用JOIN关联太多的表" class="headerlink" title="避免使用JOIN关联太多的表"></a><strong>避免使用JOIN关联太多的表</strong></h4><p>《阿里巴巴Java开发手册》规定不要join超过三张表，第一join太多降低查询的速度，第二join的buffer会占用更多的内存。</p>
<p>如果不可避免要join多张表，可以考虑使用数据异构的方式异构到ES中查询。</p>
<h3 id="排序优化"><a href="#排序优化" class="headerlink" title="排序优化"></a>排序优化</h3><h4 id="利用索引扫描做排序"><a href="#利用索引扫描做排序" class="headerlink" title="利用索引扫描做排序"></a><strong>利用索引扫描做排序</strong></h4><p>MySQL有两种方式生成有序结果：其一是对结果集进行排序的操作，其二是按照索引顺序扫描得出的结果自然是有序的</p>
<p>但是如果索引不能覆盖查询所需列，就不得不每扫描一条记录回表查询一次，这个读操作是随机IO，通常会比顺序全表扫描还慢</p>
<p>因此，在设计索引时，尽可能使用同一个索引既满足排序又用于查找行</p>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--建立索引（date,staff_id,customer_id）</span></span><br><span class="line"><span class="keyword">select</span> staff_id, customer_id <span class="keyword">from</span> test <span class="keyword">where</span> <span class="type">date</span> <span class="operator">=</span> <span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> staff_id,customer_id;</span><br></pre></td></tr></table></figure>

<p>只有当索引的列顺序和ORDER BY子句的顺序完全一致，并且所有列的排序方向都一样时，才能够使用索引来对结果做排序</p>
<h3 id="UNION优化"><a href="#UNION优化" class="headerlink" title="UNION优化"></a>UNION优化</h3><h4 id="条件下推"><a href="#条件下推" class="headerlink" title="条件下推"></a><strong>条件下推</strong></h4><p>MySQL处理union的策略是先创建临时表，然后将各个查询结果填充到临时表中最后再来做查询，很多优化策略在union查询中都会失效，因为它无法利用索引</p>
<p>最好手工将where、limit等子句下推到union的各个子查询中，以便优化器可以充分利用这些条件进行优化</p>
<p>此外，除非确实需要服务器去重，一定要使用union all，如果不加all关键字，MySQL会给临时表加上distinct选项，这会导致对整个临时表做唯一性检查，代价很高。</p>
<h2 id="怎么看执行计划（explain），如何理解其中各个字段的含义？"><a href="#怎么看执行计划（explain），如何理解其中各个字段的含义？" class="headerlink" title="怎么看执行计划（explain），如何理解其中各个字段的含义？"></a>怎么看执行计划（explain），如何理解其中各个字段的含义？</h2><p>explain是sql优化的利器，除了优化慢sql，平时的sql编写，也应该先explain，查看一下执行计划，看看是否还有优化的空间。</p>
<p>直接在 select 语句之前增加explain关键字，就会返回执行计划的信息。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910140953658.png" alt="image-20220910140953658"></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910141026496.png" alt="image-20220910141026496"></p>
<p><strong>1. id</strong> 列：MySQL会为每个select语句分配一个唯一的id值<br><strong>2. select_type</strong> 列，查询的类型，根据关联、union、子查询等等分类，常见的查询类型有SIMPLE、PRIMARY。<br><strong>3. table</strong> 列：表示 explain 的一行正在访问哪个表。<br><strong>4. type</strong> 列：最重要的列之一。表示关联类型或访问类型，即 MySQL 决定如何查找表中的行。<br>性能从最优到最差分别为：system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt;index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p>
<ul>
<li>system： 当表仅有一行记录时(系统表)，数据量很少，往往不需要进行磁盘IO，速度非常快</li>
<li>const：表示查询时命中 primary key 主键或者 unique 唯一索引，或者被连接的部分是一个常量(const)值。这类扫描效率极高，返回数据量少，速度非常快。</li>
<li>eq_ref：查询时命中主键primary key 或者 unique key索引， type 就是eq_ref。</li>
<li>ref_or_null：这种连接类型类似于 ref，区别在于 MySQL会额外搜索包含NULL值的行。</li>
<li>index_merge：使用了索引合并优化方法，查询使用了两个以上的索引。</li>
<li>unique_subquery：替换下面的 IN子查询，子查询返回不重复的集合。</li>
<li>index_subquery：区别于unique_subquery，用于非唯一索引，可以返回重复值。</li>
<li>range：使用索引选择行，仅检索给定范围内的行。简单点说就是针对一个有索引的字段，给定范围检索数据。在where语句中使用<br>bettween…and、&lt;、&gt;、&lt;=、in 等条件查询 type 都是 range。</li>
<li>index：Index 与ALL 其实都是读全表，区别在于index是遍历索引树读取，而ALL是从硬盘中读取。</li>
<li>ALL:就不用多说了，全表扫描。</li>
</ul>
<p><strong>5. possible_keys</strong> 列：显示查询可能使用哪些索引来查找，使用索引优化sql的时候比较重要。<br><strong>6. key</strong> 列：这一列显示 mysql 实际采用哪个索引来优化对该表的访问，判断索引是否失效的时候常用。<br><strong>7. key_len</strong> 列：显示了 MySQL使用<br><strong>8. ref</strong> 列：ref 列展示的就是与索引列作等值匹配的值，常见的有：const（常量），func，NULL，字段名。<br><strong>9. rows</strong> 列：这也是一个重要的字段，MySQL查询优化器根据统计信息，估算SQL要查到结果集需要扫描读取的数据行数，这个值非常直观显示SQL的效率好坏，原则上rows越少越好。<br><strong>10. Extra</strong> 列：显示不适合在其它列的额外信息，虽然叫额外，但是也有一些重要的信息：</p>
<ul>
<li>Using index：表示MySQL将使用覆盖索引，以避免回表</li>
<li>Using where：表示会在存储引擎检索之后再进行过滤</li>
<li>Using temporary ：表示对查询结果排序时会使用一个临时表。</li>
</ul>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a><strong>索引</strong></h1><h2 id="何为索引？有什么作用？"><a href="#何为索引？有什么作用？" class="headerlink" title="何为索引？有什么作用？"></a>何为索引？有什么作用？</h2><p><strong>索引是一种用于快速查询和检索数据的数据结构。常见的索引结构有: B 树， B+树和 Hash。</strong></p>
<p>索引的作用就相当于书的目录。打个比方: 我们在查字典的时候，如果没有目录，那我们就只能一页一页的去找我们需要查的那个字，速度很慢。如果有目录了，我们只需要先去目录里查找字的位置，然后直接翻到那一页就行了。</p>
<h2 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h2><p><strong>优点</strong> ：</p>
<ul>
<li><p>使用索引可以大大加快 数据的检索速度（大大减少检索的数据量）, 这也是创建索引的最主要的原因。</p>
</li>
<li><p>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</p>
</li>
</ul>
<p><strong>缺点</strong> ：</p>
<ul>
<li><p>创建索引和维护索引需要耗费许多时间。当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低 SQL 执行效率。</p>
</li>
<li><p>索引需要使用物理文件存储，也会耗费一定空间。</p>
</li>
</ul>
<p>但是，<strong>使用索引一定能提高查询性能吗?</strong></p>
<p>大多数情况下，索引查询都是比全表扫描要快的。但是如果数据库的数据量不大，那么使用索引也不一定能够带来很大提升。</p>
<h2 id="索引的底层数据结构"><a href="#索引的底层数据结构" class="headerlink" title="索引的底层数据结构"></a>索引的底层数据结构</h2><h3 id="Hash表"><a href="#Hash表" class="headerlink" title="Hash表"></a>Hash表</h3><p>哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据（接近 O（1））。</p>
<p><strong>为何能够通过 key 快速取出 value呢？</strong> 原因在于 <strong>哈希算法</strong>（也叫散列算法）。通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hash = hashfunc(key)</span><br><span class="line">index = hash % array_size</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910145551358.png" alt="image-20220910145551358"></p>
<p>但是！哈希算法有个 <strong>Hash 冲突</strong> 问题，也就是说多个不同的 key 最后得到的 index 相同。通常情况下，我们常用的解决办法是 <strong>链地址法</strong>。链地址法就是将哈希冲突数据存放在链表中。就比如 JDK1.8 之前 HashMap 就是通过链地址法来解决哈希冲突的。不过，JDK1.8 以后HashMap为了减少链表过长的时候搜索时间过长引入了红黑树。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910145623148.png" alt="image-20220910145623148"></p>
<p>为了减少 Hash 冲突的发生，一个好的哈希函数应该“均匀地”将数据分布在整个可能的哈希值集合中。</p>
<p>既然哈希表这么快，<strong>为什么MySQL 没有使用其作为索引的数据结构呢？</strong></p>
<p><strong>1.Hash 冲突问题</strong> ：我们上面也提到过Hash 冲突了，不过对于数据库来说这还不算最大的缺点。</p>
<p><strong>2.Hash 索引不支持顺序和范围查询(Hash 索引不支持顺序和范围查询是它最大的缺点：</strong> 假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。</p>
<p>试想一种情况:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb1 <span class="keyword">WHERE</span> id <span class="operator">&lt;</span> <span class="number">500</span>;</span><br></pre></td></tr></table></figure>

<p>在这种范围查询中，优势非常大，直接遍历比 500 小的叶子节点就够了。而 Hash 索引是根据 hash 算法来定位的，难不成还要把 1 - 499 的数据，每个都进行一次 hash 计算来定位吗?这就是 Hash 最大的缺点了。</p>
<h3 id="B-树-amp-B-树"><a href="#B-树-amp-B-树" class="headerlink" title="B 树&amp; B+树"></a>B 树&amp; B+树</h3><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910165413911.png" alt="B+"></p>
<p>B 树也称 B-树,全称为 <strong>多路平衡查找树</strong> ，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 Balanced （平衡）的意思。</p>
<p>目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。</p>
<p><strong>B 树&amp; B+树两者有何异同呢？</strong></p>
<ul>
<li><p>B 树的所有节点既存放键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。</p>
</li>
<li><p>B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</p>
</li>
<li><p>B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</p>
</li>
</ul>
<p>在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。（下面的内容整理自《Java 工程师修炼之道》）</p>
<p><strong>MyISAM</strong> 引擎中，B+Tree 叶节点的 data 域存放的是<strong>数据记录的地址</strong>。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“<strong>非聚簇索引</strong>”。</p>
<p><strong>InnoDB</strong> 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 <strong>data 域保存了完整的数据记录</strong>。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为“<strong>聚簇索引（或聚集索引）</strong>”，而其余的索引都作为辅助索引，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。</p>
<h3 id="那一棵B-树能存储多少条数据呢？"><a href="#那一棵B-树能存储多少条数据呢？" class="headerlink" title="那一棵B+树能存储多少条数据呢？"></a><strong>那一棵B+树能存储多少条数据呢？</strong></h3><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910172522706.png" alt="image-20220910172522706"></p>
<p>假设索引字段是 bigint 类型，长度为 8 字节。指针大小在 InnoDB 源码中设置为 6 字节，这样一共 14 字节。非叶子节点(一页)可以存储 16384/14=1170 个这样的 单元(键值+指针)，代表有 1170 个指针。</p>
<p>树深度为 2 的时候，有 1170^2 个叶子节点，可以存储的数据为 <strong>1170 * 1170 *16=</strong> <strong>21902400</strong> 。</p>
<p>在查找数据时一次页的查找代表一次 IO，也就是说，一张 2000 万左右的表，查询数据最多需要访问 3 次磁盘。</p>
<p>所以在 InnoDB 中 B+ 树深度一般为 <strong>1-3 层</strong>，它就能满足千万级的数据存储。</p>
<h3 id="为什么要用-B-树，而不用普通二叉树？"><a href="#为什么要用-B-树，而不用普通二叉树？" class="headerlink" title="为什么要用 B+ 树，而不用普通二叉树？"></a><strong>为什么要用 B+ 树，而不用普通二叉树？</strong></h3><p>可以从几个维度去看这个问题，查询是否够快，效率是否稳定，存储数据多少，以及查找磁盘次数。</p>
<p><strong>为什么不用普通二叉树？</strong></p>
<p>普通二叉树存在退化的情况，如果它退化成链表，相当于全表扫描。平衡二叉树相比于二叉</p>
<p>查找树来说，查找效率更稳定，总体的查找速度也更快。</p>
<p><strong>为什么不用平衡二叉树呢？</strong></p>
<p>读取数据的时候，是从磁盘读到内存。如果树这种数据结构作为索引，那每查找一次数据就需要从磁盘中读取一个节点，也就是一个磁盘块，但是平衡二叉树可是每个节点只存储一个键值和数据的，如果是 B+ 树，可以存储更多的节点数据，树的高度也会降低，因此读取磁盘的次数就降下来啦，查询效率就快。</p>
<h3 id="为什么用-B-树而不用-B-树呢？"><a href="#为什么用-B-树而不用-B-树呢？" class="headerlink" title="为什么用 B+ 树而不用 B 树呢？"></a>为什么用 B+ 树而不用 B 树呢？</h3><p>B+相比较B树，有这些优势：</p>
<ul>
<li>它是 B Tree 的变种，B Tree 能解决的问题，它都能解决。<br>B Tree 解决的两大问题：<strong>每个节点存储更多关键字；路数更多</strong></li>
<li><strong>扫库、扫表能力更强</strong><br>如果我们要对表进行全表扫描，只需要遍历叶子节点就可以 了，不需要遍历整棵 B+Tree拿到所有的数据。</li>
<li>B+Tree 的磁盘读写能力相对于 B Tree 来说更强，<strong>IO次数更少</strong><br>根节点和枝节点不保存数据区， 所以一个节点可以保存更多的关键字，一次磁盘加载的关键字更多，IO次数更少。</li>
<li><strong>排序能力更强</strong><br>因为叶子节点上有下一个数据区的指针，数据形成了<strong>链表</strong>。</li>
<li><strong>效率更加稳定</strong><br>B+Tree 永远是在叶子节点拿到数据，所以 IO 次数是稳定的。</li>
</ul>
<h3 id="Hash-索引和-B-树索引区别是什么？"><a href="#Hash-索引和-B-树索引区别是什么？" class="headerlink" title="Hash 索引和 B+ 树索引区别是什么？"></a>Hash 索引和 B+ 树索引区别是什么？</h3><ul>
<li>B+ 树可以进行范围查询，Hash 索引不能。</li>
<li>B+ 树支持联合索引的最左侧原则，Hash 索引不支持。</li>
<li>B+ 树支持 order by 排序，Hash 索引不支持。</li>
<li>Hash 索引在等值查询上比 B+ 树效率更高。</li>
<li>B+ 树使用 like 进行模糊查询的时候，like 后面（比如 % 开头）的话可以起到优化的作</li>
<li>用，Hash 索引根本无法进行模糊查询。</li>
</ul>
<h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910164140079.png" alt="image-20220910164140079"></p>
<h3 id="主键索引-Primary-Key"><a href="#主键索引-Primary-Key" class="headerlink" title="主键索引(Primary Key)"></a>主键索引(Primary Key)</h3><p>数据表的主键列使用的就是主键索引。</p>
<p>一张数据表有只能有一个主键，并且主键不能为 null，不能重复。</p>
<p>在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在null值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910150438065.png" alt="image-20220910150438065"></p>
<h3 id="二级索引-辅助索引"><a href="#二级索引-辅助索引" class="headerlink" title="二级索引(辅助索引)"></a>二级索引(辅助索引)</h3><p><strong>二级索引又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。</strong></p>
<p>唯一索引，普通索引，前缀索引等索引属于二级索引。</p>
<p><strong>PS:不懂的同学可以暂存疑，慢慢往下看，后面会有答案的，也可以自行搜索。</strong></p>
<ul>
<li><strong>唯一索引(Unique Key)</strong> ：唯一索引也是一种约束。<strong>唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。</strong> 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。</li>
<li><strong>普通索引(Index)</strong> ：<strong>普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。</strong></li>
<li><strong>前缀索引(Prefix)</strong> ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。</li>
<li><strong>全文索引(Full Text)</strong> ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。</li>
</ul>
<p>二级索引:</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910151114591.png" alt="二级索引"></p>
<h2 id="聚簇索引与非聚簇索引"><a href="#聚簇索引与非聚簇索引" class="headerlink" title="聚簇索引与非聚簇索引"></a>聚簇索引与非聚簇索引</h2><p>首先理解聚簇索引不是一种新的索引，而是而是一种 数据存储方式 。 聚簇表示数据行和相邻的键值紧凑地存储在一起。我们熟悉的两种存储引擎——MyISAM采用的是非聚簇索引，InnoDB采用的是聚簇索引。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910202911377.png" alt="image-20220910202911377"></p>
<p>可以这么说：</p>
<ul>
<li>索引的数据结构是树，聚簇索引的索引和数据存储在一棵树上，树的叶子节点就是数据，非聚簇索引索引和数据不在一棵树上。</li>
<li>一个表中只能拥有一个聚簇索引，而非聚簇索引一个表可以存在多个。</li>
<li>聚簇索引，索引中键值的逻辑顺序决定了表中相应行的物理顺序；索引，索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同。</li>
<li>聚簇索引：物理存储按照索引排序；非聚簇索引：物理存储不按照索引排序；</li>
</ul>
<h2 id="回表"><a href="#回表" class="headerlink" title="回表"></a>回表</h2><p>在InnoDB存储引擎里，利用辅助索引查询，先通过辅助索引找到主键索引的键值，再通过主键值查出主键索引里面没有符合要求的数据，它比基于主键索引的查询多扫描了一棵索引树，这个过程就叫回表。</p>
<p>例如:*<em>select * from user where name = ‘张三’;*</em></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910203254480.png" alt="image-20220910203254480"></p>
<h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p>在辅助索引里面，不管是单列索引还是联合索引，如果 select 的数据列只用辅助索引中就能够取得，不用去查主键索引，这时候使用的索引就叫做覆盖索引，避免了回表。</p>
<p>比如，<strong>select name from user where name = ‘张三’;</strong></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910203424203.png" alt="image-20220910203424203"></p>
<h2 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h2><p>使用表中的多个字段创建索引，就是 <strong>联合索引</strong>，也叫 <strong>组合索引</strong> 或 <strong>复合索引</strong>。</p>
<h2 id="最左前缀匹配原则"><a href="#最左前缀匹配原则" class="headerlink" title="最左前缀匹配原则"></a>最左前缀匹配原则</h2><p>注意：最左前缀原则、最左匹配原则、最左前缀匹配原则这三个都是一个概念。</p>
<p><strong>最左匹配原则</strong> ：在InnoDB的联合索引中，查询的时候只有匹配了前一个/左边的值之后，才能匹配下一个。</p>
<p>根据最左匹配原则，我们创建了一个组合索引，如 (a1,a2,a3)，相当于创建了（a1）、(a1,a2)和 (a1,a2,a3) 三个索引。</p>
<p>为什么不从最左开始查，就无法匹配呢？</p>
<p>比如有一个user表，我们给 name 和 age 建立了一个组合索引。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">add</span> INDEX comidx_name_phone (name,age);</span><br></pre></td></tr></table></figure>

<p>组合索引在 B+Tree 中是复合的数据结构，它是按照从左到右的顺序来建立搜索树的 (name 在左边，age 在右边)。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910203812088.png" alt="image-20220910203812088"></p>
<p>从这张图可以看出来，name 是有序的，age 是无序的。当 name 相等的时候， age 才是有序的。</p>
<p>这个时候我们使用where name= ‘张三‘ and age = ‘20 ‘去查询数据的时候， B+Tree 会优先比较 name 来确定下一步应该搜索的方向，往左还是往右。如果 name 相同的时候再比较age。但是如果查询条件没有 name，就不知道下一步应该查哪个 节点，因为建立搜索树的<br>时候 name 是第一个比较因子，所以就没用上索引。</p>
<h2 id="索引下推优化"><a href="#索引下推优化" class="headerlink" title="索引下推优化"></a>索引下推优化</h2><p>索引条件下推优化（<strong>Index Condition Pushdown (ICP)</strong> ）是MySQL5.6添加的，用于优化数据查询。</p>
<ul>
<li>不使用索引条件下推优化时存储引擎通过索引检索到数据，然后返回给MySQL Server，MySQL Server进行过滤条件的判断。</li>
<li>当使用索引条件下推优化时，如果存在某些被索引的列的判断条件时，MySQL Server将这一部分判断条件下推给存储引擎，然后由存储引擎通过判断索引是否符合MySQLServer传递的条件，只有当索引符合条件时才会将数据检索出来返回给MySQL服务器。</li>
</ul>
<p>例如一张表，建了一个联合索引（name, age），查询语句：*<em>select * from t_user where name like ‘张%’ and age=10*</em>;，由于name使用了范围查询，根据最左匹配原则：</p>
<p>不使用ICP，引擎层查找到name like ‘张%’的数据，再由Server层去过滤age=10这个条件，这样一来，就回表了两次，浪费了联合索引的另外一个字段age。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910205005074.png" alt="image-20220910205005074"></p>
<p>但是，使用了索引下推优化，把where的条件放到了引擎层执行，直接根据name like ‘张%’ and age=10的条件进行过滤，减少了回表的次数。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910205110920.png" alt="image-20220910205110920"></p>
<p>索引条件下推优化可以减少存储引擎查询基础表的次数，也可以减少MySQL服务器从存储引擎接收数据的次数。</p>
<h2 id="创建索引的注意事项"><a href="#创建索引的注意事项" class="headerlink" title="创建索引的注意事项"></a>创建索引的注意事项</h2><p><strong>1.选择合适的字段创建索引：</strong></p>
<ul>
<li><p><strong>不为 NULL 的字段</strong> ：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。</p>
</li>
<li><p><strong>被频繁查询的字段</strong> ：我们创建索引的字段应该是查询操作非常频繁的字段。</p>
</li>
<li><p><strong>被作为条件查询的字段</strong> ：被作为 WHERE 条件查询的字段，应该被考虑建立索引。</p>
</li>
<li><p><strong>频繁需要排序的字段</strong> ：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。</p>
</li>
<li><p><strong>被经常频繁用于连接的字段</strong> ：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。</p>
</li>
</ul>
<p><strong>2.被频繁更新的字段应该慎重建立索引。</strong></p>
<p>虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。</p>
<p><strong>3.尽可能的考虑建立联合索引而不是单列索引。</strong></p>
<p>因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。</p>
<p><strong>4.注意避免冗余索引</strong> 。</p>
<p>冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。</p>
<p><strong>5.考虑在字符串类型的字段上使用前缀索引代替普通索引。</strong></p>
<p>前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。</p>
<h2 id="索引哪些情况下会失效呢"><a href="#索引哪些情况下会失效呢" class="headerlink" title="索引哪些情况下会失效呢"></a>索引哪些情况下会失效呢</h2><ul>
<li>查询条件包含<strong>or</strong>，可能导致索引失效</li>
<li>如果字段类型是字符串，where时一定用引号括起来，否则会因为<strong>隐式类型转换</strong>，索引失效</li>
<li><strong>like通配符</strong>可能导致索引失效。</li>
<li>联合索引，查询时的条件列不是联合索引中的第一个列，索引失效。</li>
<li>在索引列上使用mysql的<strong>内置函数</strong>，索引失效。</li>
<li>对<strong>索引列运算</strong>（如，+、-、*、/），索引失效。</li>
<li>索引字段上使用（<strong>！=</strong> 或者 <strong>&lt; &gt;，not in</strong>）时，可能会导致索引失效。</li>
<li>索引字段上使用<strong>is null， is not null</strong>，可能导致索引失效。</li>
<li>左连接查询或者右连接查询查询关联的字段编码格式不一样，可能导致索引失效。</li>
<li>MySQL优化器估计使用全表扫描要比使用索引快,则不使用索引。</li>
</ul>
<h2 id="MySQL-如何为表字段添加索引？"><a href="#MySQL-如何为表字段添加索引？" class="headerlink" title="MySQL 如何为表字段添加索引？"></a>MySQL 如何为表字段添加索引？</h2><p>1.添加 PRIMARY KEY（主键索引）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `table_name` <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY ( `<span class="keyword">column</span>` )</span><br></pre></td></tr></table></figure>

<p>2.添加 UNIQUE(唯一索引)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `table_name` <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> ( `<span class="keyword">column</span>` )</span><br></pre></td></tr></table></figure>

<p>3.添加 INDEX(普通索引)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `table_name` <span class="keyword">ADD</span> INDEX index_name ( `<span class="keyword">column</span>` )</span><br></pre></td></tr></table></figure>

<p>4.添加 FULLTEXT(全文索引)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `table_name` <span class="keyword">ADD</span> FULLTEXT ( `<span class="keyword">column</span>`)</span><br></pre></td></tr></table></figure>

<p>5.添加多列索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `table_name` <span class="keyword">ADD</span> INDEX index_name ( `column1`, `column2`, `column3` )</span><br></pre></td></tr></table></figure>

<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="锁的种类"><a href="#锁的种类" class="headerlink" title="锁的种类"></a>锁的种类</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910205630795.png" alt="image-20220910205630795"></p>
<p>如果按锁粒度划分，有以下 3 种：</p>
<ul>
<li>表锁： 开销小，加锁快；锁定力度大，发生锁冲突概率高，并发度最低;不会出现死锁。</li>
<li>行锁： 开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高。</li>
<li>页锁： 开销和加锁速度介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般</li>
</ul>
<p>如果按照兼容性，有两种，</p>
<ul>
<li>共享锁（S Lock）,也叫读锁（read lock），相互不阻塞。</li>
<li>排他锁（X Lock），也叫写锁（write lock），排它锁是阻塞的，在一定时间内，只有一个请求能执行写入，并阻止其它锁读取正在写入的数据。</li>
</ul>
<h2 id="InnoDB里的行锁实现"><a href="#InnoDB里的行锁实现" class="headerlink" title="InnoDB里的行锁实现"></a>InnoDB里的行锁实现</h2><p>我们拿这么一个用户表来表示行级锁，其中插入了 4 行数据，主键值分别是1,6,8,12，现在简化它的聚簇索引结构，只保留数据记录。</p>
<p><img src="/img%E9%9D%A2%E8%AF%95-MySQL/image-20220910214409739.png" alt="image-20220910214409739"></p>
<p>InnoDB的行锁的主要实现如下：</p>
<ul>
<li><strong>Record Lock 记录锁</strong></li>
</ul>
<p>记录锁就是直接锁定某行记录。当我们使用唯一性的索引(包括唯一索引和聚簇索引)进行等值查询且精准匹配到一条记录时，此时就会直接将这条记录锁定。例如*<em>select * from t where id =6 for update*</em>;就会将id=6的记录锁定。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910214828711.png" alt="image-20220910214828711"></p>
<ul>
<li><strong>Gap Lock 间隙锁</strong></li>
</ul>
<p>间隙锁(Gap Locks) 的间隙指的是两个记录之间逻辑上尚未填入数据的部分,是一个<strong>左开右开空间</strong> 。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910214941003.png" alt="image-20220910214941003"></p>
<p>间隙锁就是锁定某些间隙区间的。当我们使用用等值查询或者范围查询，并且没有命中任何一个record，此时就会将对应的间隙区间锁定。例如<strong>select * from t where id =3 for update**;或者**select * from t where id &gt; 1 and id &lt; 6 for update</strong>;就会将(1,6)区间锁定。</p>
<ul>
<li><strong>Next-key Lock 临键锁</strong></li>
</ul>
<p>临键指的是间隙加上它右边的记录组成的 <strong>左开右闭区间</strong> 。比如上述的(1,6]、(6,8]等。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910215510444.png" alt="image-20220910215510444"></p>
<p>临键锁就是<strong>记录锁(Record Locks)**和</strong>间隙锁(Gap Locks)<strong>的结合，即除了锁住记录本身，还要再锁住索引之间的间隙。当我们使用范围查询，并且命中了部分</strong>record<strong>记录，此时锁住的就是临键区间。注意，临键锁锁住的区间会包含最后一个</strong>record*<em>的右边的临键区间。例如<br>**select * from t where id &gt; 5 and id &lt;= 7*</em> for update;会锁住**(4,7]、(7,+∞)**。</p>
<p><strong>mysql</strong>默认行锁类型就是临键锁(<strong>Next-Key Locks</strong>)。当使用唯一性索引，等值查询匹配到一条记录的时候，临键锁(<strong>Next-Key Locks</strong>)会退化成记录锁；没有匹配到任何记录的时候，退化成间隙锁。</p>
<p><strong>间隙锁(Gap Locks)**和</strong>临键锁(Next-Key Locks)<strong>都是用来解决</strong>幻读问题**的，在已提交读（READ COMMITTED）隔离级别下，间隙锁(Gap Locks)和临键锁(Next-Key Locks)都会失效！</p>
<p>上面是行锁的三种实现算法，除此之外，在行上还存在插入意向锁。</p>
<ul>
<li><strong>Insert Intention Lock 插入意向锁</strong></li>
</ul>
<p>一个事务在插入一条记录时需要判断一下插入位置是不是被别的事务加了意向锁 ，如果有的话，插入操作需要等待，直到拥有 gap锁 的那个事务提交。但是事务在等待的时候也需要在内存中生成一个 锁结构 ，表明有事务想在某个 间隙 中插入新记录，但是现在在等待。这种类型的锁命名为 <strong>Insert Intention Locks</strong> ，也就是<strong>插入意向锁</strong> 。</p>
<p>假如我们有个<strong>T1事务</strong>，给(1,6)区间加上了<strong>意向锁</strong>，现在有个<strong>T2事务</strong>，要插入一个数据，id为4 ，它会获取一个（1,6）区间的插入意向锁，又有有个T3事务，想要插入一个数据，id为 3 ，它也会获取一个（1,6）区间的插入意向锁，但是，这两个插入意向锁锁不会互斥。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220910222457105.png" alt="image-20220910222457105"></p>
<h2 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h2><p>意向锁是一个<strong>表级锁</strong>，不要和插入意向锁搞混。</p>
<p>意向锁的出现是为了支持InnoDB的多粒度锁，<strong>它解决的是表锁和行锁共存的问题</strong>。</p>
<p>当我们需要给一个表加表锁的时候，我们需要根据去判断表中有没有数据行被锁定，以确定是否能加成功。</p>
<p>假如没有意向锁，那么我们就得遍历表中所有数据行来判断有没有行锁；</p>
<p>有了意向锁这个表级锁之后，则我们直接判断一次就知道表中是否有数据行被锁定了。</p>
<p>有了意向锁之后，要执行的事务A在申请行锁（写锁）之前，数据库会自动先给事务A申请表的意向排他锁。当事务B去申请表的互斥锁时就会失败，因为表上有意向排他锁之后事务B申请表的互斥锁时会被阻塞。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911123822324.png" alt="image-20220911123822324"></p>
<h2 id="MySQL的乐观锁和悲观锁"><a href="#MySQL的乐观锁和悲观锁" class="headerlink" title="MySQL的乐观锁和悲观锁"></a>MySQL的乐观锁和悲观锁</h2><ul>
<li><strong>悲观锁（Pessimistic Concurrency Control）</strong></li>
</ul>
<p>悲观锁认为被它保护的数据是极其不安全的，每时每刻都有可能被改动，一个事务拿到悲观锁后，其他任何事务都不能对该数据进行修改，只能等待锁被释放才可以执行。</p>
<p>数据库中的<strong>行锁，表锁，读锁，写锁</strong>均为悲观锁。</p>
<ul>
<li><strong>乐观锁（Optimistic Concurrency Control）</strong></li>
</ul>
<p>乐观锁认为数据的变动不会太频繁。</p>
<p>乐观锁通常是通过在表中增加一个**版本(version)或时间戳(timestamp)**来实现，其中，版本最为常用。</p>
<p>事务在从数据库中取数据时，会将该数据的版本也取出来(v1)，当事务对数据变动完毕想要将其更新到表中时，会将之前取出的版本v1与数据中最新的版本v2相对比，如果v1=v2，那么说明在数据变动期间，没有其他事务对数据进行修改，此时，就允许事务对表中的数据进行修改，并且修改时version会加 1 ，以此来表明数据已被变动。</p>
<p>如果，v1不等于v2，那么说明数据变动期间，数据被其他事务改动了，此时不允许数据更新到表中，一般的处理办法是通知用户让其重新操作。不同于悲观锁，乐观锁通常是由开发者实现的。</p>
<h2 id="MySQL-死锁问题"><a href="#MySQL-死锁问题" class="headerlink" title="MySQL 死锁问题"></a>MySQL 死锁问题</h2><p>排查死锁的一般步骤是这样的：</p>
<ul>
<li>（ 1 ）查看死锁日志 show engine innodb status;</li>
<li>（ 2 ）找出死锁 sql</li>
<li>（ 3 ）分析 sql 加锁情况</li>
<li>（ 4 ）模拟死锁案发</li>
<li>（ 5 ）分析死锁日志</li>
<li>（ 6 ）分析死锁结果</li>
</ul>
<p>当然，这只是一个简单的流程说明，实际上生产中的死锁千奇百怪，排查和解决起来没那么简单</p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="MySQL-事务的四大特性"><a href="#MySQL-事务的四大特性" class="headerlink" title="MySQL 事务的四大特性"></a>MySQL 事务的四大特性</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911152256595.png" alt="image-20220911152256595"></p>
<ul>
<li><strong>原子性</strong>：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。</li>
<li><strong>一致性</strong>：指在事务开始之前和事务结束以后，数据不会被破坏，假如 A 账户给 B 账户转10 块钱，不管成功与否，A 和 B 的总金额是不变的。</li>
<li><strong>隔离性</strong>：多个事务并发访问时，事务之间是相互隔离的，即一个事务不影响其它事务运行效果。简言之，就是事务之间是进水不犯河水的。</li>
<li><strong>持久性</strong>：表示事务完成以后，该事务对数据库所作的操作更改，将持久地保存在数据库之中。</li>
</ul>
<h2 id="那ACID靠什么保证的呢？"><a href="#那ACID靠什么保证的呢？" class="headerlink" title="那ACID靠什么保证的呢？"></a>那ACID靠什么保证的呢？</h2><ul>
<li>事务的隔离性是通过数据库锁的机制实现的。</li>
<li>事务的一致性由undo log来保证：undo log是逻辑日志，记录了事务的insert、update、delete操作，回滚的时候做相反的delete、update、insert操作来恢复数据。</li>
<li>事务的原子性和持久性由redo log来保证：redolog被称作重做日志，是物理日志，事务提交的时候，必须先将事务的所有日志写入redo log持久化，到事务的提交操作才算完成。</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911152812313.png" alt="image-20220911152812313"></p>
<h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911153038317.png" alt="image-20220911153038317"></p>
<ul>
<li><strong>读未提交（Read Uncommitted）</strong></li>
<li><strong>读已提交（Read Committed）</strong></li>
<li><strong>可重复读（Repeatable Read）</strong></li>
<li><strong>串行化（Serializable）</strong></li>
</ul>
<p>MySQL默认的事务隔离级别是**可重复读 (Repeatable Read)**。</p>
<h2 id="幻读，脏读，不可重复读"><a href="#幻读，脏读，不可重复读" class="headerlink" title="幻读，脏读，不可重复读"></a>幻读，脏读，不可重复读</h2><ul>
<li>事务 A、B 交替执行，事务 A 读取到事务 B 未提交的数据，这就是脏读。</li>
<li>在一个事务范围内，两个相同的查询，读取同一条记录，却返回了不同的数据，这就是不可重复读。</li>
<li>事务 A 查询一个范围的结果集，另一个并发事务 B 往这个范围中插入 / 删除了数据，并静悄悄地提交，然后事务 A 再次查询相同的范围，两次读取得到的结果集不一样了，这就是幻读。</li>
</ul>
<p>不同的隔离级别，在并发事务下可能会发生的问题：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911154336548.png" alt="image-20220911154336548"></p>
<p><strong>不可重复读和幻读有什么区别呢？</strong></p>
<ul>
<li>不可重复读的重点是内容修改或者记录减少比如多次读取一条记录发现其中某些记录的值被修改；</li>
<li>幻读的重点在于记录新增比如多次执行同一条查询语句（DQL）时，发现查到的记录增加了。</li>
</ul>
<p>幻读其实可以看作是不可重复读的一种特殊情况，单独把区分幻读的原因主要是解决幻读和不可重复读的方案不一样。</p>
<p>举个例子：执行 <code>delete</code> 和 <code>update</code> 操作的时候，可以直接对记录加锁，保证事务安全。而执行 <code>insert</code> 操作的时候，由于记录锁（Record Lock）只能锁住已经存在的记录，为了避免插入新记录，需要依赖间隙锁（Gap Lock）。也就是说执行 <code>insert</code> 操作的时候需要依赖 Next-Key Lock（Record Lock+Gap Lock） 进行加锁来保证不出现幻读。</p>
<h2 id="事务的各个隔离级别的实现"><a href="#事务的各个隔离级别的实现" class="headerlink" title="事务的各个隔离级别的实现"></a>事务的各个隔离级别的实现</h2><h3 id="读未提交"><a href="#读未提交" class="headerlink" title="读未提交"></a>读未提交</h3><p>读未提交，就不用多说了，采取的是<strong>读不加锁原理</strong>。</p>
<ul>
<li>事务读不加锁，不阻塞其他事务的读和写</li>
<li>事务写阻塞其他事务写，但不阻塞其他事务读；</li>
</ul>
<h3 id="读取已提交-amp-可重复读"><a href="#读取已提交-amp-可重复读" class="headerlink" title="读取已提交&amp;可重复读"></a>读取已提交&amp;可重复读</h3><p>读取已提交和可重复读级别利用了<strong>ReadView和MVCC</strong>，也就是每个事务只能读取它能看到的<br>版本（ReadView）。</p>
<ul>
<li><strong>READ COMMITTED</strong>：每次读取数据前都生成一个ReadView</li>
<li><strong>REPEATABLE READ</strong> ： 在第一次读取数据时生成一个ReadView串行化</li>
</ul>
<h3 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h3><p>串行化的实现采用的是<strong>读写都加锁</strong>的原理。</p>
<p>串行化的情况下，对于同一行事务，写会加写锁，读会加读锁。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</p>
<h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h4><p>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作，如：<strong>select … lock in share mode(共享锁)**，</strong>select … for update、update、insert、delete(排他锁)**都是一种当前读。</p>
<p>测试：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911175944047.png" alt="image-20220911175944047"></p>
<p>在测试中我们可以看到，即使是在默认的RR隔离级别下，事务A中依然可以读取到事务B最新提交的内 容，因为在查询语句后面加上了 lock in share mode 共享锁，此时是当前读操作。当然，当我们 加排他锁的时候，也是当前读操作。</p>
<h4 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h4><p>简单的select（不加锁）就是快照读，快照读，读取的是<strong>记录数据的可见版本</strong>，有可能是<strong>历史数据</strong>， 不加锁，是非阻塞读。</p>
<ul>
<li> <strong>Read Committed</strong>：每次select，都生成一个快照读。</li>
<li> <strong>Repeatable Read</strong>：开启事务后第一个select语句才是快照读的地方。</li>
<li> <strong>Serializable</strong>：快照读会退化为当前读。</li>
</ul>
<p>测试:</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911180508766.png" alt="image-20220911180508766"></p>
<p>在测试中,我们看到即使事务B提交了数据,事务A中也查询不到。 原因就是因为普通的select是快照 读，而在当前默认的RR隔离级别下，开启事务后第一个select语句才是快照读的地方，后面执行相同 的select语句都是从快照中获取数据，可能不是当前的最新数据，这样也就保证了可重复读。</p>
<h4 id="MVCC-1"><a href="#MVCC-1" class="headerlink" title="MVCC"></a>MVCC</h4><p>全称 Multi-Version Concurrency Control，<strong>多版本并发控制</strong>。指维护一个数据的多个版本， 使得读写操作没有冲突，快照读为MySQL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需 要依赖于数据库记录中的<strong>三个隐式字段、undo log日志、readView</strong>。</p>
<h3 id="隐藏字段"><a href="#隐藏字段" class="headerlink" title="隐藏字段"></a>隐藏字段</h3><p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911180815226.png" alt="image-20220911180815226"></p>
<p>当我们创建了上面的这张表，我们在查看表结构的时候，就可以显式的看到这三个字段。 实际上除了 这三个字段以外，InnoDB还会自动的给我们添加三个隐藏字段及其含义分别是：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911180839960.png" alt="image-20220911180839960"></p>
<p>而上述的前两个字段是肯定会添加的， 是否添加最后一个字段DB_ROW_ID，得看当前表有没有主键， 如果有主键，则不会添加该隐藏字段。</p>
<h3 id="undolog"><a href="#undolog" class="headerlink" title="undolog"></a>undolog</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。 当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。 而update、delete的时候，产生的undo log日志不仅在回滚时需要，在快照读时也需要，不会立即被删除。 </p>
<h4 id="版本链"><a href="#版本链" class="headerlink" title="版本链"></a>版本链</h4><p>有一张表原始数据为：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911191234515.png" alt="image-20220911191234515"></p>
<ul>
<li><strong>DB_TRX_ID</strong> : 代表最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID，是 自增的。</li>
<li><strong>DB_ROLL_PTR</strong> ： 由于这条数据是才插入的，没有被更新过，所以该字段值为null。</li>
</ul>
<p>然后，有四个并发事务同时在访问这张表。</p>
<p>A. 第一步</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911191339478.png" alt="image-20220911191339478"></p>
<p>当事务2执行第一条修改语句时，会记录<strong>undo log</strong>日志，记录数据变更之前的样子; 然后更新记录， 并且记录本次操作的事务ID，回滚指针，回滚指针用来指定如果发生回滚，回滚到哪一个版本。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911191424281.png" alt="image-20220911191424281"></p>
<p>B.第二步</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911191456083.png" alt="image-20220911191456083"></p>
<p>当事务3执行第一条修改语句时，也会记录undo log日志，记录数据变更之前的样子; 然后更新记录，并且记录本次操作的事务ID，回滚指针，回滚指针用来指定如果发生回滚，回滚到哪一个版本。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911191614690.png" alt="image-20220911191614690"></p>
<p>C. 第三步</p>
<p>当事务4执行第一条修改语句时，也会记录undo log日志，记录数据变更之前的样子; 然后更新记 录，并且记录本次操作的事务ID，回滚指针，回滚指针用来指定如果发生回滚，回滚到哪一个版本。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911191648058.png" alt="image-20220911191648058"></p>
<p>最终我们发现，不同事务或相同事务对同一条记录进行修改，会导致该记录的undolog生成一条 记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录。</p>
<h4 id="readview"><a href="#readview" class="headerlink" title="readview"></a>readview</h4><p><strong>ReadView（读视图）</strong>是 快照读 SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id。</p>
<p>ReadView中包含了四个核心字段：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911191829890.png" alt="image-20220911191829890"></p>
<p>而在<strong>readview</strong>中就规定了版本链数据的访问规则： <strong>trx_id 代表当前undolog版本链对应事务ID</strong>。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911192407624.png" alt="image-20220911192407624"></p>
<p>不同的隔离级别，生成<strong>ReadView</strong>的时机不同： </p>
<ul>
<li><strong>READ COMMITTED</strong> ：在事务中<strong>每一次</strong>执行快照读时生成ReadView。 </li>
<li><strong>REPEATABLE READ</strong>：仅在事务中<strong>第一次</strong>执行快照读时生成ReadView，后续复用该ReadView。</li>
</ul>
<h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><h4 id="RC隔离级别"><a href="#RC隔离级别" class="headerlink" title="RC隔离级别"></a>RC隔离级别</h4><p><strong>RC隔离级别下，在事务中每一次执行快照读时生成ReadView。</strong></p>
<p>我们就来分析事务5中，两次快照读读取数据，是如何获取数据的? 在事务5中，查询了两次id为30的记录，由于隔离级别为Read Committed，所以每一次进行快照读 都会生成一个ReadView，那么两次生成的ReadView如下。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911192724348.png" alt="image-20220911192724348"></p>
<p>那么这两次快照读在获取数据时，就需要根据所生成的ReadView以及ReadView的版本链访问规则， 到undolog版本链中匹配数据，最终决定此次快照读返回的数据。</p>
<p>A. 先来看第一次快照读具体的读取过程：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911192812721.png" alt="image-20220911192812721"></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911192833689.png" alt="image-20220911192833689"></p>
<p>在进行匹配时，会从undo log的版本链，从上到下进行挨个匹配：</p>
<ul>
<li>先匹配<img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911193540427.png" alt="image-20220911193540427" style="zoom:25%;" />这条记录，这条记录对应的 trx_id为4，也就是将4带入右侧的匹配规则中。 ①不满足 ②不满足 ③不满足 ④也不满足 ， 都不满足，则继续匹配undo log版本链的下一条。</li>
<li>再匹配第二条<img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911193723009.png" alt="image-20220911193723009" style="zoom:25%;" />，这条 记录对应的trx_id为3，也就是将3带入右侧的匹配规则中。①不满足 ②不满足 ③不满足 ④也 不满足 ，都不满足，则继续匹配undo log版本链的下一条。</li>
<li>再匹配第三条<img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911193756104.png" alt="image-20220911193756104" style="zoom:25%;" />，这条记 录对应的trx_id为2，也就是将2带入右侧的匹配规则中。①不满足 ②满足 终止匹配，此次快照 读，返回的数据就是版本链中记录的这条数据。</li>
</ul>
<p>B. 再来看第二次快照读具体的读取过程:</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911193850811.png" alt="image-20220911193850811"></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911193905500.png" alt="image-20220911193905500"></p>
<p>在进行匹配时，会从undo log的版本链，从上到下进行挨个匹配：</p>
<ul>
<li>先匹配<img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911194012918.png" alt="image-20220911194012918" style="zoom:25%;" />这条记录，这条记录对应的 trx_id为4，也就是将4带入右侧的匹配规则中。 ①不满足 ②不满足 ③不满足 ④也不满足 ， 都不满足，则继续匹配undo log版本链的下一条。</li>
<li>再匹配第二条<img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911194036373.png" alt="image-20220911194036373" style="zoom:25%;" />，这条 记录对应的trx_id为3，也就是将3带入右侧的匹配规则中。①不满足 ②满足 。终止匹配，此次 快照读，返回的数据就是版本链中记录的这条数据。</li>
</ul>
<h4 id="RR隔离级别"><a href="#RR隔离级别" class="headerlink" title="RR隔离级别"></a>RR隔离级别</h4><p>RR隔离级别下，仅在事务中第一次执行快照读时生成<strong>ReadView</strong>，后续<strong>复用该ReadView</strong>。 而RR 是可 重复读，在一个事务中，执行两次相同的select语句，查询到的结果是一样的。</p>
<p>那MySQL是如何做到可重复读的呢? 我们简单分析一下就知道了</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911194218075.png" alt="image-20220911194218075"></p>
<p>我们看到，在RR隔离级别下，只是在事务中第一次快照读时生成ReadView，后续都是复用该 ReadView，那么既然ReadView都一样， ReadView的版本链匹配规则也一样， 那么最终快照读返 回的结果也是一样的。</p>
<p>所以呢，MVCC的实现原理就是通过 <strong>InnoDB表的隐藏字段、UndoLog 版本链、ReadView</strong>来实现的。 而<strong>MVCC + 锁</strong>，则实现了事务的隔离性。 而<strong>一致性则是由redolog 与 undolog保证</strong>。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-MySQL/image-20220911194425916.png" alt="image-20220911194425916"></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>面试-Mybatis</title>
    <url>/2022/08/31/%E9%9D%A2%E8%AF%95-Mybatis/</url>
    <content><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="说说什么是MyBatis"><a href="#说说什么是MyBatis" class="headerlink" title="说说什么是MyBatis?"></a>说说什么是MyBatis?</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220831124353772.png" alt="image-20220831124353772"></p>
<p>优点：<br>Mybatis 是一个半 ORM（对象关系映射）框架，它内部封装了 JDBC，开发时只需要关注SQL 语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement 等繁杂的过程。程序员直接编写原生态 sql，可以严格控制 sql 执行性能，灵活度高。MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO 映射成数据库中的记录，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</p>
<p>缺点：<br>SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。</p>
<h3 id="ORM是什么"><a href="#ORM是什么" class="headerlink" title="ORM是什么?"></a>ORM是什么?</h3><p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220831124733088.png" alt="image-20220831124733088"></p>
<p>ORM（Object Relational Mapping），对象关系映射，是一种为了解决关系型数据库数据与简单Java对象（POJO）的映射关系的技术。简单来说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系型数据库中。</p>
<h3 id="为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？"><a href="#为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？" class="headerlink" title="为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？"></a>为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？</h3><p>Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而Mybatis在查询关联对象或关联集合对象时，需要手动编写SQL来完成，所以，被称之为半自动ORM映射工具。</p>
<h3 id="JDBC编程有哪些不足之处，MyBatis是如何解决的？"><a href="#JDBC编程有哪些不足之处，MyBatis是如何解决的？" class="headerlink" title="JDBC编程有哪些不足之处，MyBatis是如何解决的？"></a>JDBC编程有哪些不足之处，MyBatis是如何解决的？</h3><p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220831125002543.png" alt="image-20220831125002543"></p>
<p>1 、数据连接创建、释放频繁造成系统资源浪费从而影响系统性能<br><strong>解决：在mybatis-config.xml中配置数据链接池，使用连接池统一管理数据库连接。</strong><br>2 、sql语句写在代码中造成代码不易维护<br><strong>解决：将sql语句配置在XXXXmapper.xml文件中与java代码分离。</strong><br>3 、向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。<br><strong>解决： Mybatis自动将java对象映射至sql语句。</strong><br>4 、对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。<br><strong>解决：Mybatis自动将sql执行结果映射至java对象。</strong></p>
<h2 id="Hibernate-和-MyBatis-有什么区别？"><a href="#Hibernate-和-MyBatis-有什么区别？" class="headerlink" title="Hibernate 和 MyBatis 有什么区别？"></a>Hibernate 和 MyBatis 有什么区别？</h2><p><strong>相同点</strong></p>
<p>都是对jdbc的封装，都是应用于持久层的框架。</p>
<p><strong>不同点</strong></p>
<p><strong>映射关系</strong><br>MyBatis 是一个半自动映射的框架，配置Java对象与sql语句执行结果的对应关系，多表关联关系配置简单<br>Hibernate 是一个全表映射的框架，配置Java对象与数据库表的对应关系，多表关联关系配置复杂</p>
<p><strong>SQL优化和移植性</strong><br>Hibernate 对SQL语句封装，提供了日志、缓存、级联（级联比 MyBatis 强大）等特性，此外还提供 HQL（Hibernate Query Language）操作数据库，数据库无关性支持好，但会多消耗性能。如果项目需要支持多种数据库，代码开发量少，但SQL语句优化困难。<br>MyBatis 需要手动编写 SQL，支持动态 SQL、处理列表、动态生成表名、支持存储过程。开发工作量相对大些。直接使用SQL语句操作数据库，不支持数据库无关性，但sql语句优化容易。</p>
<h3 id="MyBatis和Hibernate的适用场景"><a href="#MyBatis和Hibernate的适用场景" class="headerlink" title="MyBatis和Hibernate的适用场景?"></a>MyBatis和Hibernate的适用场景?</h3><p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220831130749515.png" alt="image-20220831130749515"></p>
<ul>
<li>Hibernate 是标准的ORM框架，SQL编写量较少，但不够灵活，适合于需求相对稳定，中小型的软件项目，比如：办公自动化系统</li>
<li>MyBatis 是半ORM框架，需要编写较多SQL，但是比较灵活，适合于需求变化频繁，快速迭代的项目，比如：电商网站</li>
</ul>
<h2 id="MyBatis使用过程？生命周期？"><a href="#MyBatis使用过程？生命周期？" class="headerlink" title="MyBatis使用过程？生命周期？"></a>MyBatis使用过程？生命周期？</h2><p>MyBatis基本使用的过程大概可以分为这么几步：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220831150538063.png" alt="image-20220831150538063"></p>
<p><strong>1 、 创建SqlSessionFactory</strong></p>
<ul>
<li>可以从配置或者直接编码来创建SqlSessionFactory</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br></pre></td></tr></table></figure>

<p><strong>2 、 通过SqlSessionFactory创建SqlSession</strong></p>
<ul>
<li>SqlSession（会话）可以理解为程序和数据库之间的桥梁</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br></pre></td></tr></table></figure>

<p><strong>3 、 通过sqlsession执行数据库操作</strong></p>
<ul>
<li>​    可以通过 SqlSession 实例来直接执行已映射的 SQL 语句：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span>(Blog)session.selectOne(<span class="string">&quot;org.mybatis.example.BlogMapper.selectBlog&quot;</span>,<span class="number">101</span> );</span><br></pre></td></tr></table></figure>

<ul>
<li>​    更常用的方式是先获取Mapper(映射)，然后再执行SQL语句：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BlogMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(BlogMapper.class);</span><br><span class="line"><span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span> mapper.selectBlog( <span class="number">101</span> );</span><br></pre></td></tr></table></figure>

<p><strong>4 、 调用session.commit()提交事务</strong></p>
<ul>
<li>如果是更新、删除语句，我们还需要提交一下事务。</li>
</ul>
<p><strong>5 、 调用session.close()关闭会话</strong></p>
<ul>
<li>最后一定要记得关闭会话。</li>
</ul>
<h3 id="MyBatis生命周期？"><a href="#MyBatis生命周期？" class="headerlink" title="MyBatis生命周期？"></a>MyBatis生命周期？</h3><p>上面提到了几个MyBatis的组件，一般说的MyBatis生命周期就是这些组件的生命周期。</p>
<ul>
<li><p><strong>SqlSessionFactoryBuilder</strong></p>
<ul>
<li>一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的生命周期只存在于方法的内部。</li>
</ul>
</li>
<li><p><strong>SqlSessionFactory</strong></p>
<ul>
<li>SqlSessionFactory 是用来创建SqlSession的，相当于一个数据库连接池，每次创建SqlSessionFactory都会使用数据库资源，多次创建和销毁是对资源的浪费。所以SqlSessionFactory是应用级的生命周期，而且应该是单例的。</li>
</ul>
</li>
<li><p><strong>SqlSession</strong></p>
<ul>
<li>SqlSession相当于JDBC中的Connection，SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的生命周期是一次请求或一个方法。</li>
</ul>
</li>
<li><p><strong>Mapper</strong></p>
<ul>
<li>映射器是一些绑定映射语句的接又。映射器接又的实例是从 SqlSession 中获得的，它的生命周期在sqlsession事务方法之内，一般会控制在方法级。</li>
</ul>
</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220831155449848.png" alt="image-20220831155449848"></p>
<p>当然，万物皆可集成Spring，MyBatis通常也是和Spring集成使用，Spring可以帮助我们创建线程安全的、基于事务的 SqlSession 和映射器，并将它们直接注入到我们的 bean 中，我们不需要关心它们的创建过程和生命周期，那就是另外的故事了。</p>
<h2 id="在mapper中如何传递多个参数？"><a href="#在mapper中如何传递多个参数？" class="headerlink" title="在mapper中如何传递多个参数？"></a>在mapper中如何传递多个参数？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220831155632178.png" alt="image-20220831155632178"></p>
<h3 id="方法-1-：顺序传参法"><a href="#方法-1-：顺序传参法" class="headerlink" title="方法 1 ：顺序传参法"></a>方法 1 ：顺序传参法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">selectUser</span><span class="params">(String name, <span class="type">int</span> deptId)</span>;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">&quot;selectUser&quot;</span> resultMap=<span class="string">&quot;UserResultMap&quot;</span>&gt;</span><br><span class="line">select * from user</span><br><span class="line"><span class="type">where</span> <span class="variable">user_name</span> <span class="operator">=</span> #&#123; <span class="number">0</span> &#125; <span class="type">and</span> <span class="variable">dept_id</span> <span class="operator">=</span> #&#123; <span class="number">1</span> &#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>#{}里面的数字代表传入参数的顺序。</li>
<li>这种方法不建议使用，sql层表达不直观，且一旦顺序调整容易出错。</li>
</ul>
<h3 id="方法-2-：-Param注解传参法"><a href="#方法-2-：-Param注解传参法" class="headerlink" title="方法 2 ：@Param注解传参法"></a>方法 2 ：@Param注解传参法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">selectUser</span><span class="params">(<span class="meta">@Param(&quot;userName&quot;)</span> String name, <span class="type">int</span> <span class="meta">@Param(&quot;deptId&quot;)</span> deptId)</span></span><br><span class="line">    </span><br><span class="line">&lt;select id=<span class="string">&quot;selectUser&quot;</span> resultMap=<span class="string">&quot;UserResultMap&quot;</span>&gt;</span><br><span class="line">select * from user</span><br><span class="line"><span class="type">where</span> <span class="variable">user_name</span> <span class="operator">=</span> #&#123;userName&#125; <span class="type">and</span> <span class="variable">dept_id</span> <span class="operator">=</span> #&#123;deptId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>#{}里面的名称对应的是注解@Param括号里面修饰的名称。</li>
<li>这种方法在参数不多的情况还是比较直观的，（推荐使用）。</li>
</ul>
<h3 id="方法-3-：Map传参法"><a href="#方法-3-：Map传参法" class="headerlink" title="方法 3 ：Map传参法"></a><strong>方法 3 ：Map传参法</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">selectUser</span><span class="params">(Map&lt;String, Object&gt; params)</span>;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">&quot;selectUser&quot;</span> parameterType=<span class="string">&quot;java.util.Map&quot;</span> resultMap=<span class="string">&quot;UserResultMap&quot;</span>&gt;</span><br><span class="line">select * from user</span><br><span class="line"><span class="type">where</span> <span class="variable">user_name</span> <span class="operator">=</span> #&#123;userName&#125; <span class="type">and</span> <span class="variable">dept_id</span> <span class="operator">=</span> #&#123;deptId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>#{}里面的名称对应的是Map里面的key名称。</li>
<li>这种方法适合传递多个参数，且参数易变能灵活传递的情况。</li>
</ul>
<h3 id="方法-4-：Java-Bean传参法"><a href="#方法-4-：Java-Bean传参法" class="headerlink" title="方法 4 ：Java Bean传参法"></a><strong>方法 4 ：Java Bean传参法</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">selectUser</span><span class="params">(User user)</span>;</span><br><span class="line">&lt;select id=<span class="string">&quot;selectUser&quot;</span> parameterType=<span class="string">&quot;com.jourwon.pojo.User&quot;</span> resultMap=<span class="string">&quot;UserResultMap&quot;</span>&gt;</span><br><span class="line">	select * from user</span><br><span class="line">	<span class="type">where</span> <span class="variable">user_name</span> <span class="operator">=</span> #&#123;userName&#125; <span class="type">and</span> <span class="variable">dept_id</span> <span class="operator">=</span> #&#123;deptId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>#{}里面的名称对应的是User类里面的成员属性。</li>
<li>这种方法直观，需要建一个实体类，扩展不容易，需要加属性，但代码可读性强，业务逻辑处理方便，推荐使用。（推荐使用）。</li>
</ul>
<h2 id="实体类属性名和表中字段名不一样-，怎么办"><a href="#实体类属性名和表中字段名不一样-，怎么办" class="headerlink" title="实体类属性名和表中字段名不一样 ，怎么办?"></a>实体类属性名和表中字段名不一样 ，怎么办?</h2><ul>
<li>第 1 种： 通过在查询的SQL语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getOrder&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">resultType</span>=<span class="string">&quot;com.jourwon.pojo.Order&quot;</span>&gt;</span></span><br><span class="line">    select order_id id, order_no orderno ,order_price price form</span><br><span class="line">    orders where order_id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>第 2 种： 通过resultMap 中的<result>来映射字段名和实体类属性名的一一对应的关系。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getOrder&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderResultMap&quot;</span>&gt;</span></span><br><span class="line">select * from orders where order_id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.jourwon.pojo.Order&quot;</span> <span class="attr">id</span>=<span class="string">&quot;orderResultMap&quot;</span>&gt;</span></span><br><span class="line">&lt;!–用id属性来映射主键字段–&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span>&gt;</span></span><br><span class="line">&lt;!–用result属性来映射非主键字段，property为实体类属性名，column为数据库表中的属性–&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> =<span class="string">&quot;orderno&quot;</span> <span class="attr">column</span> =<span class="string">&quot;order_no&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span> <span class="attr">column</span>=<span class="string">&quot;order_price&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">reslutMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Mybatis是否可以映射Enum枚举类？"><a href="#Mybatis是否可以映射Enum枚举类？" class="headerlink" title="Mybatis是否可以映射Enum枚举类？"></a>Mybatis是否可以映射Enum枚举类？</h2><ul>
<li>Mybatis当然可以映射枚举类，不单可以映射枚举类，Mybatis可以映射任何对象到表的一列上。映射方式为自定义一个TypeHandler，实现TypeHandler的setParameter()和getResult()接口方法。</li>
<li>TypeHandler有两个作用，一是完成从javaType至jdbcType的转换，二是完成jdbcType至javaType的转换，体现为setParameter()和getResult()两个方法，分别代表设置sql问号占位符参数和获取列查询结果。</li>
</ul>
<h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#{}和${}的区别?"></a>#{}和${}的区别?</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220831165343833.png" alt="image-20220831165343833"></p>
<ul>
<li>#{}是占位符，预编译处理；${}是拼接符，字符串替换，没有预编译处理。</li>
<li>Mybatis在处理#{}时，#{}传入参数是以字符串传入，会将SQL中的#{}替换为?号，调用PreparedStatement的set方法来赋值。</li>
<li>#{} 可以有效的防止SQL注入，提高系统安全性；${} 不能防止SQL 注入</li>
<li>#{} 的变量替换是在DBMS 中；${} 的变量替换是在 DBMS 外</li>
</ul>
<p>例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> #&#123;userName&#125;；</span><br></pre></td></tr></table></figure>

<p>设userName=yuze</p>
<p>看日志我们可以看到解析时将#{userName}替换成了 <strong>？</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> ?;</span><br></pre></td></tr></table></figure>

<p>然后再把yuze放进去，外面加上单引号</p>
<p>Mybatis在处理的 时 候 就 是 把 {}的时候就是把的时候就是把{}替换成变量的值，调用Statement来赋值<br>如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> #&#123;userName&#125;；</span><br></pre></td></tr></table></figure>

<p>设userName=yuze</p>
<p>看日志可以发现就是直接把值拼接上去了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> yuze;</span><br></pre></td></tr></table></figure>

<p>这极有可能发生<a href="https://so.csdn.net/so/search?q=sql%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">sql注入</a>，下面举了一个简单的sql注入案例 </p>
<p>当用户登录，我们验证账号密码是否正确时用这个sql：</p>
<p>username=yyy;password=123</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username<span class="operator">=</span>$&#123;username&#125; <span class="keyword">and</span> password<span class="operator">=</span>$&#123;password&#125;</span><br></pre></td></tr></table></figure>

<p>显然这条sql没问题可以查出来，但是如果有人不知道密码但是想登录账号怎么办</p>
<p>我们不需要填写正确的密码：</p>
<p>密码输入1 or 1=1，sql执行的其实是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;yyy&#x27;</span> <span class="keyword">and</span> password<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> <span class="number">1</span> <span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>#{}的变量替换是在DBMS中、变量替换后，#{}对应的变量自动加上单引号</p>
<p>${}的变量替换是在DBMS外,变量替换后 ，{}的变量替换是在DBMS外、变量替换后，的变量替换是在DBMS外、变量替换后，{}对应的变量不会加上单引号</p>
<p>使用#{}可以有效的防止sql注入，提高系统的安全性</p>
<h2 id="模糊查询like语句该怎么写"><a href="#模糊查询like语句该怎么写" class="headerlink" title="模糊查询like语句该怎么写?"></a>模糊查询like语句该怎么写?</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220831172605851.png" alt="image-20220831172605851"></p>
<p>1 ’**%${question}%**’ 可能引起SQL注入，不推荐<br>2 “%”#{question}”%” 注意：因为#{…}解析成sql语句时候，会在变量外侧自动加单引号’’，所以这里 % 需要使用双引号” “，不能使用单引号 ’ ‘，不然会查不到任何结果。<br>3 CONCAT(’%’,#{question},’%’) 使用CONCAT()函数，（推荐✨）<br>4 使用bind标签（不推荐）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listUserLikeUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jourwon.pojo.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + username + &#x27;%&#x27;&quot;</span> /&gt;</span></span><br><span class="line">select id,sex,age,username,password from person where username LIKE #</span><br><span class="line">&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Mybatis能执行一对一、一对多的关联查询吗？"><a href="#Mybatis能执行一对一、一对多的关联查询吗？" class="headerlink" title="Mybatis能执行一对一、一对多的关联查询吗？"></a>Mybatis能执行一对一、一对多的关联查询吗？</h2><p>当然可以，不止支持一对一、一对多的关联查询，还支持多对多、多对一的关联查询。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220831172905299.png" alt="image-20220831172905299"></p>
<ul>
<li><p><strong>一对一<association></strong></p>
<p>比如订单和支付是一对一的关系，这种关联的实现：</p>
<p>实体类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer orderId;</span><br><span class="line">	<span class="keyword">private</span> String orderDesc;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 支付对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">	<span class="keyword">private</span> Pay pay;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 订单resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;peopleResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cn.fighter3.entity.Order&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderDesc&quot;</span> <span class="attr">column</span>=<span class="string">&quot;order_desc&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一对一结果映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;pay&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;cn.fighter3.entity.Pay&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;payId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pay_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;account&quot;</span> <span class="attr">property</span>=<span class="string">&quot;account&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>查询就是普通的关联查</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getTeacherMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    select * from order o</span><br><span class="line">    left join pay p on o.order_id=p.order_id</span><br><span class="line">    where o.order_id=#&#123;orderId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>一对多<collection></strong><br>比如商品分类和商品，是一对多的关系。<br>实体类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> categoryId;</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 商品列表</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    List&lt;Product&gt; products;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Category&quot;</span> <span class="attr">id</span>=<span class="string">&quot;categoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;categoryId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;category_id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;categoryName&quot;</span> <span class="attr">property</span>=<span class="string">&quot;category_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一对多的关系 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property: 指的是集合属性的值, ofType：指的是集合中元素的类</span></span><br><span class="line"><span class="comment">    型 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;products&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Product&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;product_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;productId&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;productName&quot;</span> <span class="attr">property</span>=<span class="string">&quot;productName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>查询</p>
<p>查询就是一个普通的关联查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 关联查询分类和产品表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listCategory&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;categoryBean&quot;</span>&gt;</span></span><br><span class="line">select c.*, p.* from category_ c left join product_ p</span><br><span class="line">on c.id = p.cid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Mybatis是否支持延迟加载？原理？"><a href="#Mybatis是否支持延迟加载？原理？" class="headerlink" title="Mybatis是否支持延迟加载？原理？"></a>Mybatis是否支持延迟加载？原理？</h2><ul>
<li><p>Mybatis支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载<strong>lazyLoadingEnabled</strong>=true|false。</p>
</li>
<li><p>它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。</p>
</li>
<li><p>当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。</p>
</li>
</ul>
<h2 id="如何获取生成的主键"><a href="#如何获取生成的主键" class="headerlink" title="如何获取生成的主键?"></a>如何获取生成的主键?</h2><p>新增标签中添加：keyProperty=” ID “ 即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;userId&quot;</span> &gt;</span></span><br><span class="line">    insert into user(</span><br><span class="line">    user_name, user_password, create_time)</span><br><span class="line">    values(#&#123;userName&#125;, #&#123;userPassword&#125; , #&#123;createTime, jdbcType=</span><br><span class="line">    TIMESTAMP&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时候就可以完成回填主键</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mapper.insert(user);</span><br><span class="line">user.getId;</span><br></pre></td></tr></table></figure>

<h2 id="MyBatis支持动态SQL吗？"><a href="#MyBatis支持动态SQL吗？" class="headerlink" title="MyBatis支持动态SQL吗？"></a>MyBatis支持动态SQL吗？</h2><p>MyBatis中有一些支持动态SQL的标签，它们的原理是使用OGNL从SQL参数对象中计算表达式的值，根据表达式的值动态拼接SQL，以此来完成动态SQL的功能。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220831185515276.png" alt="image-20220831185515276"></p>
<ul>
<li><p>if</p>
<p>根据条件来组成where子句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogWithTitleLike&quot;</span><span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM BLOG</span><br><span class="line">    WHERE state = ‘ACTIVE’</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>choose (when, otherwise)</p>
<p>这个和Java 中的 switch 语句有点像</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">	SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            AND title like #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">                AND author_name like #&#123;author.name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            AND featured = 1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>trim (where, set)</p>
<ul>
<li><p><where>可以用在所有的查询条件都是动态的情况</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM BLOG</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;state != null&quot;</span>&gt;</span></span><br><span class="line">        state = #&#123;state&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><set> 可以用在动态更新的时候</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAuthorIfNecessary&quot;</span>&gt;</span></span><br><span class="line">    update Author</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;bio != null&quot;</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>foreach<br>看到名字就知道了，这个是用来循环的，可以对集合进行遍历</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPostIn&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.blog.Post&quot;</span>&gt;</span></span><br><span class="line">    SELECT *</span><br><span class="line">    FROM POST P</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">open</span>=<span class="string">&quot;ID in (&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">nullable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">                #&#123;item&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h2 id="MyBatis如何执行批量操作？"><a href="#MyBatis如何执行批量操作？" class="headerlink" title="MyBatis如何执行批量操作？"></a>MyBatis如何执行批量操作？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220831212914015.png" alt="image-20220831212914015"></p>
<p><strong>第一种方法：使用foreach标签</strong></p>
<p>foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。foreach标签的属性主要有item，index，collection，open，separator，close。</p>
<ul>
<li>item 表示集合中每一个元素进行迭代时的别名，随便起的变量名；</li>
<li>index 指定一个名字，用于表示在迭代过程中，每次迭代到的位置，不常用；</li>
<li>open 表示该语句以什么开始，常用“(”；</li>
<li>separator 表示在每次进行迭代之间以什么符号作为分隔符，常用“,”；</li>
<li>close 表示以什么结束，常用“)”。</li>
</ul>
<p>在使用<strong>foreach</strong>的时候最关键的也是最容易出错的就是<strong>collection</strong>属性，该属性是必须指定的，但是在不同情况下，该属性的值是不一样的，主要有以下 3 种情况：</p>
<p><strong>1.</strong> 如果传入的是单参数且参数类型是一个List的时候，collection属性值为list<br><strong>2.</strong> 如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array<br><strong>3.</strong> 如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key</p>
<p>看看批量保存的两种用法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL下批量保存，可以foreach遍历 mysql支持values(),(),()语法 --&gt;</span> //推荐使用</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmpsBatch&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO emp(ename,gender,email,did)</span><br><span class="line">    VALUES</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;emp.eName&#125;,#&#123;emp.gender&#125;,#&#123;emp.email&#125;,#&#123;emp.dept.id&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这种方式需要数据库连接属性allowMutiQueries=true的支持</span></span><br><span class="line"><span class="comment">如jdbc.url=jdbc:mysql://localhost:3306/mybatis?allowMultiQueries=true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmpsBatch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO emp(ename,gender,email,did)</span><br><span class="line">        VALUES(#&#123;emp.eName&#125;,#&#123;emp.gender&#125;,#&#123;emp.email&#125;,#&#123;emp.dept.id&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第二种方法：使用ExecutorType.BATCH</strong></p>
<p>Mybatis内置的ExecutorType有 3 种，默认为simple，该模式下它为每个语句的执行创建一个新的预处理语句，单条提交sql；而batch模式重复使用已经预处理的语句，并且批量执行所有更新语句，显然batch性能将更优； 但batch模式也有自己的问题，比如在Insert操作<br>时，在事务没有提交之前，是没有办法获取到自增的id，在某些情况下不符合业务的需求。<br>具体用法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量保存方法测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> getSqlSessionFactory();</span><br><span class="line">	<span class="comment">//可以执行批量操作的sqlSession</span></span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">openSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(ExecutorType.BATCH);</span><br><span class="line">    <span class="comment">//批量保存执行前时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> openSession.getMapper(EmployeeMapper.class);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">1000</span> ; i++) &#123;</span><br><span class="line">            mapper.addEmp(<span class="keyword">new</span></span><br><span class="line">            <span class="title class_">Employee</span>(UUID.randomUUID().toString().substring( <span class="number">0</span> , <span class="number">5</span> ), <span class="string">&quot;b&quot;</span>, <span class="string">&quot;1&quot;</span>));</span><br><span class="line">   		&#125;</span><br><span class="line">		openSession.commit();</span><br><span class="line">    	<span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    	<span class="comment">//批量保存执行后的时间</span></span><br><span class="line">    	System.out.println(<span class="string">&quot;执行时⻓&quot;</span> + (end - start));</span><br><span class="line">    	<span class="comment">//批量 预编译sql一次==》设置参数==》 10000 次==》执行 1 次 677</span></span><br><span class="line">    	<span class="comment">//非批量 （预编译=设置参数=执行 ）==》 10000 次 1121</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	openSession.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mapper和mapper.xml如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">	<span class="comment">//批量保存员工</span></span><br><span class="line">	Long <span class="title function_">addEmp</span><span class="params">(Employee employee)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.jourwon.mapper.EmployeeMapper&quot;</span></span></span><br><span class="line"><span class="tag">    &lt;!<span class="attr">--批量保存员工</span> <span class="attr">--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmp&quot;</span>&gt;</span></span><br><span class="line">        insert into employee(lastName,email,gender)</span><br><span class="line">        values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="MyBatis中一级缓存和二级缓存详解"><a href="#MyBatis中一级缓存和二级缓存详解" class="headerlink" title="MyBatis中一级缓存和二级缓存详解"></a>MyBatis中一级缓存和二级缓存详解</h2><h3 id="缓存的作用"><a href="#缓存的作用" class="headerlink" title="缓存的作用"></a>缓存的作用</h3><p>首先缓存的合理使用是优化中最常见的，将从数据库中查询出来的数据放入缓存中，下次使用时不必从数据库查询，而是直接从缓存中读取，避免频繁操作数据库，减轻数据的压力，同时提高系统性能。</p>
<h3 id="为什么需要缓存"><a href="#为什么需要缓存" class="headerlink" title="为什么需要缓存"></a>为什么需要缓存</h3><p>BS架构里面，用户的所有操作都是对数据库的增删改查，其中查询的操作是最多的，但如果用户想要某个数据时每次都去数据库查询，这无疑会增加数据库的压力，而且获取时间效率也会降低，所以为了解决这些问题，缓存应用而生，使用了缓存之后，服务器只需要查询一次数据库，然后将数据保存到服务器主机的内存中，以后读取时就直接取内存中的数据，而不需要每次都查数据库，这种方案除了降低数据库压力之外，还提高了响应速度，简直一箭双雕哇~</p>
<h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>一级缓存是<strong>SqlSession</strong>级别的缓存，在操作数据库时需要构造SqlSession对象，在对象中有一个数据结构用于存储缓存数据。不同的sqlSession之间的缓存数据区域是<strong>互相不影响</strong>的。也就是他只能作用在同一个<strong>sqlSession</strong>中，不同的<strong>sqlSession</strong>中的缓存是互相不能读取的。<br><strong>一级缓存的工作原理：</strong><br>一级缓存默认是开启的，它在一个sqlSession会话里面的所有查询操作都会保存到缓存中，一般来说一个请求中的所有增删改查操作都是在同一个sqlSession里面的，所以我们可以认为每个请求都有自己的一级缓存，如果同一个sqlSession会话中2 个查询中间有一个 insert 、update或delete 语句，那么之前查询的所有缓存都会清空；<br><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/c6d2a5c38b2e4e6fae3da740b37596f7.png" alt="在这里插入图片描述"></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/06ed9e43f8644ff7a40eca96c27f15c1.png" alt="在这里插入图片描述"></p>
<p>1、用户发起查询请求，查询某条数据，sqlSession先去缓存中查找，是否有该条数据，如果有，则读取并返回；如果没有，则需要从数据库中查询，并将查询到的数据放入到一级缓存区域，供下次查找使用。</p>
<p>2、sqlSession执行增删改操作并执行commit操作，则会清空缓存，这样做的<strong>目的是避免脏读</strong>。</p>
<p>3、如果commit不清空缓存，会有以下场景：A查询了某商品库存为10件，并将10件库存的数据存入缓存中，之后被客户买走了10件，数据被delete了，但是下次查询这件商品时，并不从数据库中查询，而是从缓存中查询，就会出现错误。</p>
<p>4、示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 加载mybatis配置文件</span></span><br><span class="line">        <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsReader(<span class="string">&quot;config/configuration.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//创建数据工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> builder.build(reader);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 获取mapper接口对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 查询第一次</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.selectByPrimaryKey(<span class="string">&quot;3rfrf34r34&quot;</span>);</span><br><span class="line">        <span class="comment">// 第二次查询</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper.selectByPrimaryKey(<span class="string">&quot;3rfrf34r34&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;两个user对象是否相等：&quot;</span>+(user == user1));</span><br><span class="line">        <span class="comment">//释放会话</span></span><br><span class="line">        sqlSession.clearCache();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/f954119fbd3944ebbeccba11d8ee1ad9.png" alt="在这里插入图片描述"></p>
<p><strong>根据结果可以看到，代码中执行了2次查询， 但实际运行时只查询了一次数据库，第二次获取数据时直接从缓存中读取，并且2次读取的数据都是一样的，到这里，一级缓存就已经生效了；</strong><br>接下来我们来测试第二种情况 ：<strong>查询 -&gt; 修改 -&gt; 查询</strong><br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 加载mybatis配置文件</span></span><br><span class="line">        <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsReader(<span class="string">&quot;config/configuration.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//创建数据工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> builder.build(reader);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 获取mapper接口对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 查询第一次</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.selectByPrimaryKey(<span class="string">&quot;3rfrf34r34&quot;</span>);</span><br><span class="line">        <span class="comment">// 修改</span></span><br><span class="line">        mapper.updateByPrimaryKey(user);</span><br><span class="line">        <span class="comment">// 第二次查询</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper.selectByPrimaryKey(<span class="string">&quot;3rfrf34r34&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;两个user对象是否相等：&quot;</span>+(user == user1));</span><br><span class="line">        <span class="comment">//释放会话</span></span><br><span class="line">        sqlSession.clearCache();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/cc432713b29a465babe833106535ffe9.png" alt="在这里插入图片描述"></p>
<p>控制台打印了三次sql,其中第一个查询和第三个查询是一样的，但是并没有使用缓存<strong>，是因为每次增删改操作都有可能会改变原来的数据，所以必须刷新缓存</strong>。</p>
<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p><strong>二级缓存是mapper级别的缓存</strong>，多个SqlSession去操作同一个Mapper的sql语句，<strong>多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。二级缓存的作用范围更大</strong>。</p>
<p>二级缓存流程图：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/57ebea0ab2e34e3fb6a15c8916b65100.png" alt="在这里插入图片描述"></p>
<p>第一种配置方式</p>
<p>单个mapper配置，主需要在需要开启二级缓存的mapper.xml文件中加入以下配置即可开启。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启单个mapper的二级缓存，也叫全局缓存--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cache</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意一定要加到xxMapper.xml的文件内，千万不要加到[mybatis] 的主配置文件里面了，会报错的。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/dae47bea7d764a45809d612ac0a62b71.png" alt="在这里插入图片描述"></p>
<p>第二种配置方式</p>
<p>所有的mapper都开启二级缓存，在mybatis.xml主配置文件中加入以下配置即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--  开启所有mapper的二级缓存 --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot; /&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/3c6f0b1fb377457c867002bbf8546a40.png" alt="在这里插入图片描述"></p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 加载mybatis配置文件</span></span><br><span class="line">        <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsReader(<span class="string">&quot;config/configuration.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//创建数据工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> builder.build(reader);</span><br><span class="line">        <span class="comment">// 第一个会话</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 获取会话一的mapper接口对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 第一次查询</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.selectByPrimaryKey(<span class="string">&quot;3rfrf34r34&quot;</span>);</span><br><span class="line">        <span class="comment">//释放第一个会话</span></span><br><span class="line">        sqlSession.clearCache();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="comment">// 第二个会话</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 获取会话二的mapper接口对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession2.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 第二次查询</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper2.selectByPrimaryKey(<span class="string">&quot;3rfrf34r34&quot;</span>);</span><br><span class="line">        <span class="comment">// 释放第二个会话</span></span><br><span class="line">        sqlSession2.clearCache();</span><br><span class="line">        sqlSession2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/d52366f288e940b2afbf51d5035db571.png" alt="在这里插入图片描述"></p>
<p><strong>打印结果很明显，2次查询，但是日志显示只查询了一次数据库， 第二次是从缓存中获取的数据，至此，二级缓存已开启！</strong></p>
<p>总结：</p>
<p><strong>1.</strong> 一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为SqlSession，各个SqlSession之间的缓存相互隔离，当Session flush 或 close 之后，该 SqlSession 中的所有Cache 就将清空，MyBatis默认打开一级缓存。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220901114614900.png" alt="image-20220901114614900"></p>
<p><strong>2.</strong> 二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同之处在于其存储作用域为 Mapper(Namespace)，可以在多个SqlSession之间共享，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接又(可用来保存对象的状态),可在它的映射文件中配置。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220901114627565.png" alt="image-20220901114627565"></p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="能说说MyBatis的工作原理吗？"><a href="#能说说MyBatis的工作原理吗？" class="headerlink" title="能说说MyBatis的工作原理吗？"></a>能说说MyBatis的工作原理吗？</h2><p>我们已经大概知道了MyBatis的工作流程，按工作原理，可以分为两大步：<strong>生成会话工厂、会话运行</strong>。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220901123812730.png" alt="image-20220901123812730"></p>
<p>MyBatis是一个成熟的框架，篇幅限制，这里抓大放小，来看看它的主要工作流程。</p>
<h3 id="构建会话工厂"><a href="#构建会话工厂" class="headerlink" title="构建会话工厂"></a>构建会话工厂</h3><p>构造会话工厂也可以分为两步：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220901130322195.png" alt="image-20220901130322195"></p>
<ul>
<li>获取配置</li>
</ul>
<p>获取配置这一步经过了几步转化，最终由生成了一个配置类<strong>Configuration</strong>实例，这个配置类实例非常重要，主要作用包括：</p>
<ul>
<li>​    读取配置文件，包括<strong>基础配置文件和映射文件</strong></li>
<li>​    初始化基础配置，比如MyBatis的别名，还有其它的一些重要的<strong>类对象，像插件、映射器、ObjectFactory</strong>等等</li>
<li>​    提供一个单例，作为会话工厂构建的重要参数</li>
<li>​    它的构建过程也会初始化一些环境变量，比如数据源</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(Reader reader, String environment,Properties properties)</span> &#123;</span><br><span class="line">    SqlSessionFactory var5;</span><br><span class="line">    <span class="comment">//省略异常处理</span></span><br><span class="line">    <span class="comment">//xml配置构建器</span></span><br><span class="line">    <span class="type">XMLConfigBuilder</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLConfigBuilder</span>(reader,environment, properties);</span><br><span class="line">    <span class="comment">//通过转化的Configuration构建SqlSessionFactory</span></span><br><span class="line">    var5 = <span class="built_in">this</span>.build(parser.parse());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>构建SqlSessionFactory</p>
<p>SqlSessionFactory只是一个接又，构建出来的实际上是它的实现类的实例，一般我们用的都是它的实现类DefaultSqlSessionFactory，</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(Configuration config)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultSqlSessionFactory</span>(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="会话运行"><a href="#会话运行" class="headerlink" title="会话运行"></a>会话运行</h3><p>会话运行是MyBatis最复杂的部分，它的运行离不开四大组件的配合：<img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220901145328294.png" alt="image-20220901145328294"></p>
<ul>
<li><strong>Executor（执行器）</strong><br>Executor起到了至关重要的作用，SqlSession只是一个门面，相当于客服，真正干活的是是Executor，就像是默默无闻的工程师。它提供了相应的查询和更新方法，以及事务方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> <span class="built_in">this</span>.configuration.getEnvironment();</span><br><span class="line"><span class="type">TransactionFactory</span> <span class="variable">transactionFactory</span> <span class="operator">=</span> <span class="built_in">this</span>.getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line"><span class="comment">//通过Configuration创建executor</span></span><br><span class="line"><span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="built_in">this</span>.configuration.newExecutor(tx,execType);</span><br><span class="line">var8 = <span class="keyword">new</span> <span class="title class_">DefaultSqlSession</span>(<span class="built_in">this</span>.configuration, executor,autoCommit);</span><br></pre></td></tr></table></figure>

<ul>
<li>StatementHandler（数据库会话器）<br>StatementHandler，顾名思义，处理数据库会话的。我们以SimpleExecutor为例，看一下它的查询方法，先生成了一个StatementHandler实例，再拿这个handler去执行query。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">doQuery</span><span class="params">(MappedStatement ms, Object parameter,</span></span><br><span class="line"><span class="params">RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span><span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">List var9;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">        <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(<span class="built_in">this</span>.wrapper, ms, parameter,rowBounds,</span><br><span class="line">        resultHandler, boundSql);</span><br><span class="line">        stmt = <span class="built_in">this</span>.prepareStatement(handler,ms.getStatementLog());</span><br><span class="line">        var9 = handler.query(stmt, resultHandler);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.closeStatement(stmt);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> var9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再以最常用的PreparedStatementHandler看一下它的query方法，其实在上面的prepareStatement已经对参数进行了预编译处理，到了这里，就直接执行sql，使用ResultHandler处理返回结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> (PreparedStatement)statement;</span><br><span class="line">    ps.execute();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.resultSetHandler.handleResultSets(ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ParameterHandler （参数处理器）<br>PreparedStatementHandler里对sql进行了预编译处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parameterize</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">	<span class="built_in">this</span>.parameterHandler.setParameters((PreparedStatement)statement);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里用的就是ParameterHandler，setParameters的作用就是设置预编译SQL语句的参数。里面还会用到typeHandler类型处理器，对类型进行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ParameterHandler</span> &#123;</span><br><span class="line">    Object <span class="title function_">getParameterObject</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setParameters</span><span class="params">(PreparedStatement var1)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>ResultSetHandler（结果处理器）</p>
<p>我们前面也看到了，最后的结果要通过ResultSetHandler来进行处理，handleResultSets这个方法就是用来包装结果集的。Mybatis为我们提供了一个DefaultResultSetHandler，通常都是用这个实现类去进行结果的处理的。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResultSetHandler</span> &#123;</span><br><span class="line">    &lt;E&gt; List&lt;E&gt; <span class="title function_">handleResultSets</span><span class="params">(Statement var1)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line">    </span><br><span class="line">    &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">handleCursorResultSets</span><span class="params">(Statement var1)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handleOutputParameters</span><span class="params">(CallableStatement var1)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它会使用typeHandle处理类型，然后用ObjectFactory提供的规则组装对象，返回给调用者。</p>
<p>整体上总结一下会话运行：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220901153231196.png" alt="image-20220901153231196"></p>
<p>把整个的⼯作流程串联起来，简单总结⼀下：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220901153540814.png" alt="image-20220901153540814"></p>
<p><strong>1.</strong> 读取 MyBatis 配置文件——<strong>mybatis-config.xml 、加载映射文件</strong>——映射文件即 SQL 映射文件，文件中配置了操作数据库的 SQL 语句。最后生成一个<strong>配置对象</strong>。<br><strong>2.</strong> 构造会话工厂：通过 MyBatis 的环境等配置信息构建<strong>会话工厂 SqlSessionFactory</strong>。<br><strong>3.</strong> 创建会话对象：由会话工厂<strong>创建 SqlSession 对象</strong>，该对象中包含了执行 SQL 语句的所有方法。<br><strong>4.</strong> Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。<br><strong>5.</strong> <strong>StatementHandler</strong>：数据库会话器，串联起参数映射的处理和运行结果映射的处理。<br>**6.**参数处理：对输入参数的类型进行处理，并预编译<br>**7.**结果处理：对返回结果的类型进行处理，根据对象映射规则，返回相应的对象。</p>
<h2 id="MyBatis的功能架构是什么样的？"><a href="#MyBatis的功能架构是什么样的？" class="headerlink" title="MyBatis的功能架构是什么样的？"></a>MyBatis的功能架构是什么样的？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220901154447146.png" alt="image-20220901154447146"></p>
<p>我们一般把Mybatis的功能架构分为三层：</p>
<ul>
<li><strong>API接口层</strong>：提供给外部使用的接又API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。</li>
<li><strong>数据处理层</strong>：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。</li>
<li><strong>基础支撑层</strong>：负责最基础的功能支撑，包括<strong>连接管理、事务管理、配置加载和缓存处理</strong>，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。</li>
</ul>
<h2 id="为什么Mapper接又不需要实现类？"><a href="#为什么Mapper接又不需要实现类？" class="headerlink" title="为什么Mapper接又不需要实现类？"></a>为什么Mapper接又不需要实现类？</h2><p>四个字回答： <strong>动态代理</strong> ，我们来看一下获取Mapper的过程：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220901155803040.png" alt="image-20220901155803040"></p>
<ul>
<li><p>获取Mapper<br>我们都知道定义的Mapper接口是没有实现类的，Mapper映射其实是通过 动态代理 实现的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BlogMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(BlogMapper.class);</span><br></pre></td></tr></table></figure>

<p>七拐八绕地进去看一下，发现获取Mapper的过程，需要先获取<strong>MapperProxyFactory</strong>——Mapper代理工厂。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> &#123;</span><br><span class="line">    MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory)<span class="built_in">this</span>.knownMappers.get(type);</span><br><span class="line">    <span class="keyword">if</span> (mapperProxyFactory == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Type &quot;</span> + type + <span class="string">&quot; is not known</span></span><br><span class="line"><span class="string">        to the MapperRegistry.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mapperProxyFactory.newInstance(sqlSession);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Error getting mapper</span></span><br><span class="line"><span class="string">        instance. Cause: &quot;</span> + var5, var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MapperProxyFactory<br>MapperProxyFactory的作用是生成MapperProxy（Mapper代理对象）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperProxyFactory</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; mapperInterface;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">protected</span> T <span class="title function_">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    Proxy.newProxyInstance(<span class="built_in">this</span>.mapperInterface.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;<span class="built_in">this</span>.mapperInterface&#125;, 			mapperProxy);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">newInstance</span><span class="params">(SqlSession sqlSession)</span> &#123;</span><br><span class="line">        MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> <span class="title class_">MapperProxy</span>(sqlSession,</span><br><span class="line">        <span class="built_in">this</span>.mapperInterface, <span class="built_in">this</span>.methodCache);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.newInstance(mapperProxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里可以看到动态代理对接又的绑定，它的作用就是生成动态代理对象（占位），而代理的方法被放到了MapperProxy中。</p>
<ul>
<li>MapperProxy</li>
</ul>
</li>
</ul>
<p>​        MapperProxy里，通常会生成一个<strong>MapperMethod</strong>对象，它是通过cachedMapperMethod方法对其进行初始化的，然后执行excute方        法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Object.class.equals(method.getDeclaringClass())?</span><br><span class="line">        method.invoke(<span class="built_in">this</span>, args) : <span class="built_in">this</span>.cachedInvoker(method).invoke(proxy,</span><br><span class="line">        method, args, <span class="built_in">this</span>.sqlSession);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(var5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MapperMethod<br>MapperMethod里的excute方法，会真正去执行sql。这里用到了命令模式，其实绕一圈，最终它还是通过<strong>SqlSession</strong>的实例去运行对象的sql。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">execute</span><span class="params">(SqlSession sqlSession, Object[] args)</span> &#123;</span><br><span class="line">    Object result;</span><br><span class="line">    Object param;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">case</span> SELECT:</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.method.returnsVoid() &amp;&amp;</span><br><span class="line">    <span class="built_in">this</span>.method.hasResultHandler()) &#123;</span><br><span class="line">    <span class="built_in">this</span>.executeWithResultHandler(sqlSession, args);</span><br><span class="line">    result = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.method.returnsMany()) &#123;</span><br><span class="line">    result = <span class="built_in">this</span>.executeForMany(sqlSession, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.method.returnsMap()) &#123;</span><br><span class="line">    result = <span class="built_in">this</span>.executeForMap(sqlSession, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.method.returnsCursor()) &#123;</span><br><span class="line">    result = <span class="built_in">this</span>.executeForCursor(sqlSession, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    param =</span><br><span class="line">    <span class="built_in">this</span>.method.convertArgsToSqlCommandParam(args);</span><br><span class="line">    result =</span><br><span class="line">    sqlSession.selectOne(<span class="built_in">this</span>.command.getName(), param);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.method.returnsOptional() &amp;&amp; (result == <span class="literal">null</span></span><br><span class="line">    || !<span class="built_in">this</span>.method.getReturnType().equals(result.getClass()))) &#123;</span><br><span class="line">    result = Optional.ofNullable(result);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mybatis都有哪些Executor执行器？"><a href="#Mybatis都有哪些Executor执行器？" class="headerlink" title="Mybatis都有哪些Executor执行器？"></a>Mybatis都有哪些Executor执行器？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220901162602848.png" alt="image-20220901162602848"></p>
<p>Mybatis有三种基本的Executor执行器，<strong>SimpleExecutor、ReuseExecutor、BatchExecutor</strong>。</p>
<ul>
<li><strong>SimpleExecutor</strong>：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。</li>
<li><strong>ReuseExecutor</strong>：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map&lt;String, Statement&gt;内，供下一次使用。简言之，就是重复使用Statement对象。</li>
<li><strong>BatchExecutor</strong>：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。</li>
</ul>
<p>作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。</p>
<h3 id="Mybatis中如何指定使用哪一种Executor执行器？"><a href="#Mybatis中如何指定使用哪一种Executor执行器？" class="headerlink" title="Mybatis中如何指定使用哪一种Executor执行器？"></a>Mybatis中如何指定使用哪一种Executor执行器？</h3><ul>
<li>在Mybatis配置文件中，在设置（settings）可以指定默认的<strong>ExecutorType</strong>执行器类型，也可以手动给DefaultSqlSessionFactory的创建SqlSession的方法传递<strong>ExecutorType类型参数</strong>，如SqlSession openSession(ExecutorType execType)。</li>
<li>配置默认的执行器。<strong>SIMPLE</strong> 就是普通的执行器；<strong>REUSE</strong> 执行器会重用预处理语句（prepared statements）； <strong>BATCH</strong> 执行器将重用语句并执行批量更新。</li>
</ul>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="说说Mybatis的插件运行原理，如何编写一个插件？"><a href="#说说Mybatis的插件运行原理，如何编写一个插件？" class="headerlink" title="说说Mybatis的插件运行原理，如何编写一个插件？"></a>说说Mybatis的插件运行原理，如何编写一个插件？</h2><h3 id="插件的运行原理？"><a href="#插件的运行原理？" class="headerlink" title="插件的运行原理？"></a>插件的运行原理？</h3><p>Mybatis会话的运行需要ParameterHandler、ResultSetHandler、StatementHandler、Executor这四大对象的配合，插件的原理就是在这四大对象调度的时候，插入一些我我们自己的代码。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220901163556036.png" alt="image-20220901163556036"></p>
<p>Mybatis使用JDK的动态代理，为目标对象生成代理对象。它提供了一个工具类<strong>Plugin</strong>，实现了<strong>InvocationHandler</strong>接口。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/image-20220901163645793.png" alt="image-20220901163645793"></p>
<p>使用Plugin生成代理对象，代理对象在调用方法的时候，就会进入invoke方法，在invoke方法中，如果存在签名的拦截方法，插件的intercept方法就会在这里被我们调用，然后就返回结果。如果不存在签名方法，那么将直接反射调用我们要执行的方法。</p>
<h3 id="如何编写一个插件？"><a href="#如何编写一个插件？" class="headerlink" title="如何编写一个插件？"></a>如何编写一个插件？</h3><p>我们自己编写MyBatis 插件，只需要实现拦截器接又 Interceptor (org.apache.ibatis. pluginInterceptor ），在实现类中对拦截对象和方法进行处理。</p>
<ul>
<li>实现Mybatis的Interceptor接又并重写intercept()方法这里我们只是在目标对象执行目标方法的前后进行了打印；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">    Properties props=<span class="literal">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before......&quot;</span>);</span><br><span class="line">        <span class="comment">//如果当前代理的是一个非代理对象，那么就会调用真实拦截对象的方法</span></span><br><span class="line">        <span class="comment">// 如果不是它就会调用下个插件代理对象的invoke方法</span></span><br><span class="line">        Object obj=invocation.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;after......&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>然后再给插件编写注解，确定要拦截的对象，要拦截的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;@Signature(</span></span><br><span class="line"><span class="meta">type = Executor.class, //确定要拦截的对象</span></span><br><span class="line"><span class="meta">method = &quot;update&quot;, //确定要拦截的方法</span></span><br><span class="line"><span class="meta">args = &#123;MappedStatement.class,Object.class&#125; //拦截方法的参数</span></span><br><span class="line"><span class="meta">)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">    Properties props=<span class="literal">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before......&quot;</span>);</span><br><span class="line">        <span class="comment">//如果当前代理的是一个非代理对象，那么就会调用真实拦截对象的方法</span></span><br><span class="line">        <span class="comment">// 如果不是它就会调用下个插件代理对象的invoke方法</span></span><br><span class="line">        Object obj=invocation.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;after......&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，在MyBatis配置文件里面配置插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;xxx.MyPlugin&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dbType&quot;</span>,<span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Mybatis-分页插件"><a href="#Mybatis-分页插件" class="headerlink" title="Mybatis-分页插件"></a>Mybatis-分页插件</h2><p><strong>分页插件：</strong></p>
<p><strong>1.添加依赖：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.在mybatis主配置文件中配置分页插件：</strong></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/2600280-20220303161626997-395362475.png" alt="img"></p>
<p><strong>分页插件使用：</strong></p>
<p>　　使用mybatis的分页插件实现分页功能：</p>
<p>　　　　1.需要在查询功能之前开启分页</p>
<p>　　　　 PageHelper.startPage(2【从第几页开始】,4【每页显示的数据】);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * limit,index,pageSize</span></span><br><span class="line"><span class="comment">     * index:当前页的起始索引</span></span><br><span class="line"><span class="comment">     * pageSize：每页显示的信息条数</span></span><br><span class="line"><span class="comment">     * pageNum：当前的页码</span></span><br><span class="line"><span class="comment">     * index=（pageNum-1）*pageSixe</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelpPage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;Mybatis.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmpMapper.class);</span><br><span class="line">            PageHelper.startPage(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">            List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">            PageInfo&lt;Emp&gt; page = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(emps,<span class="number">5</span>);</span><br><span class="line">            System.out.println(page);</span><br><span class="line">            emps.forEach(emp -&gt; System.out.println(emp));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>2.在查询功能结束后获取分页相关信息</p>
<p>​        PageInfo<Emp> page = new PageInfo&lt;&gt;(emps,5);进行导航分页</p>
<p>　　emps：表示分页数据</p>
<p>　　5：表示当前导航分页的数量</p>
<p>​        运行结果：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Mybatis/2600280-20220303163713816-2112457012.png" alt="img"></p>
<p>显示第二页，一页4条数据</p>
<p>结果具体分析：</p>
<p>PageInfo{pageNum=2, pageSize=4, size=4, startRow=5, endRow=8, total=11, pages=3, list=Page{count=true, pageNum=2, pageSize=4, startRow=4, endRow=8, total=11, pages=3, reasonable=false, pageSizeZero=false}prePage=1, nextPage=3, isFirstPage=false, isLastPage=false, hasPreviousPage=true, hasNextPage=true, navigatePages=5, navigateFirstPage=1, navigateLastPage=3, navigatepageNums=[1, 2, 3]}</p>
<table>
<thead>
<tr>
<th align="left"><strong>pageNum=2表示当前页码数</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>pageSize=4：表示一页的数据</strong></td>
</tr>
<tr>
<td align="left"><strong>size=4：这第二页的真实数据个数</strong></td>
</tr>
<tr>
<td align="left"><strong>startRow=5：第二页四个数据从数据库表单中第5个数据开始</strong></td>
</tr>
<tr>
<td align="left"><strong>endRow=8：第二页四个数据从数据库表单中第8个数据结束</strong></td>
</tr>
<tr>
<td align="left"><strong>total=11：数据库表单总数据条数</strong></td>
</tr>
<tr>
<td align="left"><strong>pages=3：总页数</strong></td>
</tr>
<tr>
<td align="left"><strong>prePage=1：这页的上一页</strong></td>
</tr>
<tr>
<td align="left"><strong>nextPage=3：这页的下一页</strong></td>
</tr>
<tr>
<td align="left"><strong>isFirstPage=false：判断是否是第一页</strong></td>
</tr>
<tr>
<td align="left"><strong>isLastPage=false：判断是否是最后一页</strong></td>
</tr>
<tr>
<td align="left"><strong>hasPreviousPage=true：是否有上一页</strong></td>
</tr>
<tr>
<td align="left"><strong>hasNextPage=true：是否有下一页</strong></td>
</tr>
<tr>
<td align="left"><strong>navigatePages=5：这个就是我们在方法中输入的参数（PageInfo<Emp> page = new PageInfo&lt;&gt;(emps,5);）</strong></td>
</tr>
<tr>
<td align="left"><strong><em>navigateFirstPage=1：导航分页从第1页开始</em></strong></td>
</tr>
<tr>
<td align="left"><strong><em>navigateLastPage=3：导航分页从第3页结束</em></strong></td>
</tr>
<tr>
<td align="left"><strong><em>navigatepageNums=[1, 2, 3]：进行底层运算，计算出导航分页页码</em></strong></td>
</tr>
</tbody></table>
<p><strong>总结:</strong></p>
<p>　　<strong>a&gt;在查询功能之前使用PageHelper.startPage(int pageNum, int pageSize)开启分页功能</strong></p>
<p>　　　　pageNum：当前页的页码        pageSize：每页显示的条数</p>
<p>　　<strong>b&gt;在查询获取list集合之后，使用PageInfo pageInfo = new PageInfo&lt;&gt;(List list, int navigatePages)获取分页相关数据</strong></p>
<p>　　　　 list：分页之后的数据         navigatePages：导航分页的页码数</p>
<p>　　<strong>c&gt;分页相关数据</strong></p>
<p>　　　　PageInfo{ pageNum=8, pageSize=4, size=2, startRow=29, endRow=30, total=30, pages=8, list=Page{count=true, pageNum=8, pageSize=4, startRow=28, endRow=32, total=30, pages=8, reasonable=false, pageSizeZero=false}, prePage=7, nextPage=0, isFirstPage=false, isLastPage=true, hasPreviousPage=true, hasNextPage=false, navigatePages=5, navigateFirstPage4, navigateLastPage8, navigatepageNums=[4, 5, 6, 7, 8] }*</p>
<h3 id="MyBatis是如何分页的？"><a href="#MyBatis是如何分页的？" class="headerlink" title="MyBatis是如何分页的？"></a>MyBatis是如何分页的？</h3><p>MyBatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页。可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。</p>
<h3 id="分页插件的原理是什么？"><a href="#分页插件的原理是什么？" class="headerlink" title="分页插件的原理是什么？"></a>分页插件的原理是什么？</h3><ul>
<li>分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，拦截Executor的query方法</li>
<li>在执行查询的时候，拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</li>
<li>举例：select * from student，拦截sql后重写为：select t.* from (select * from student) t limit 0, 10</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>面试-计算机网络</title>
    <url>/2022/09/14/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="说下计算机网络体系结构"><a href="#说下计算机网络体系结构" class="headerlink" title="说下计算机网络体系结构"></a>说下计算机网络体系结构</h2><p>计算机网络体系结构，一般有三种：OSI 七层模型、TCP/IP 四层模型、五层结构。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914105946014.png" alt="image-20220914105946014"></p>
<p>简单说，OSI是一个理论上的网络通信模型，TCP/IP是实际上的网络通信模型，五层结构就是为了介绍网络原理而折中的网络通信模型。</p>
<h3 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h3><p>OSI 七层模型是国际标准化组织（International Organization for Standardization）制定的一个用于计算机或通信系统间互联的标准体系。</p>
<ul>
<li>应用层：通过应用进程之间的交互来完成特定网络应用，应用层协议定义的是应用进程间通信和交互的规则，常见的协议有：HTTP FTP SMTP SNMP DNS.</li>
<li>表示层：数据的表示、安全、压缩。确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。</li>
<li>会话层：建立、管理、终止会话，是用户应用程序和网络之间的接又。</li>
<li>运输层：提供源端与目的端之间提供可靠的透明数据传输，传输层协议为不同主机上运行的进程提供逻辑通信。</li>
<li>网络层：将网络地址翻译成对应的物理地址，实现不同网络之间的路径选择, 协议有ICMP IGMP IP 等.</li>
<li>数据链路层：在物理层提供比特流服务的基础上，建立相邻结点之间的数据链路。</li>
<li>物理层：建立、维护、断开物理连接。</li>
</ul>
<h3 id="TCP-IP-四层模型"><a href="#TCP-IP-四层模型" class="headerlink" title="TCP/IP 四层模型"></a>TCP/IP 四层模型</h3><ul>
<li>应用层：对应于 OSI 参考模型的（应用层、表示层、会话层）。</li>
<li>传输层: 对应 OSI 的传输层，为应用层实体提供端到端的通信功能，保证了数据包的顺序传送及数据的完整性。</li>
<li>网际层：对应于 OSI 参考模型的网络层，主要解决主机到主机的通信问题。</li>
<li>网络接口层：与 OSI 参考模型的数据链路层、物理层对应。</li>
</ul>
<h3 id="五层体系结构"><a href="#五层体系结构" class="headerlink" title="五层体系结构"></a>五层体系结构</h3><ul>
<li>应用层：对应于 OSI 参考模型的（应用层、表示层、会话层）。</li>
<li>传输层：对应 OSI 参考模型的的传输层</li>
<li>网络层：对应 OSI 参考模型的的网络层</li>
<li>数据链路层：对应 OSI 参考模型的的数据链路层</li>
<li>物理层：对应 OSI 参考模型的的物理层。</li>
</ul>
<h2 id="说一下每一层对应的网络协议有哪些？"><a href="#说一下每一层对应的网络协议有哪些？" class="headerlink" title="说一下每一层对应的网络协议有哪些？"></a>说一下每一层对应的网络协议有哪些？</h2><p>一张表格总结常见网络协议：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914110343078.png" alt="image-20220914110343078"></p>
<h2 id="那么数据在各层之间是怎么传输的呢？"><a href="#那么数据在各层之间是怎么传输的呢？" class="headerlink" title="那么数据在各层之间是怎么传输的呢？"></a>那么数据在各层之间是怎么传输的呢？</h2><p>对于发送方而言，从上层到下层层层包装，对于接收方而言，从下层到上层，层层解开包装。</p>
<ul>
<li>发送方的应用进程向接收方的应用进程传送数据</li>
<li>AP先将数据交给本主机的应用层，应用层加上本层的控制信息H5就变成了下一层的数据单元</li>
<li>传输层收到这个数据单元后，加上本层的控制信息H4，再交给网络层，成为网络层的数据单元</li>
<li>到了数据链路层，控制信息被分成两部分，分别加到本层数据单元的首部（H2）和尾部（T2）</li>
<li>最后的物理层，进行比特流的传输</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914110821509.png" alt="image-20220914110821509"></p>
<p>这个过程类似写信，写一封信，每到一层，就加一个信封，写一些地址的信息。到了目的地之后，又一层层解封，传向下一个目的地。</p>
<h1 id="网络综合"><a href="#网络综合" class="headerlink" title="网络综合"></a>网络综合</h1><h2 id="从浏览器地址栏输入-url-到显示主页的过程？"><a href="#从浏览器地址栏输入-url-到显示主页的过程？" class="headerlink" title="从浏览器地址栏输入 url 到显示主页的过程？"></a>从浏览器地址栏输入 url 到显示主页的过程？</h2><p>这道题，大概的过程比较简单，但是有很多点可以细挖：DNS解析、TCP三次握手、HTTP报文格式、TCP四次挥手等等。</p>
<ol>
<li>DNS 解析：将域名解析成对应的 IP 地址。</li>
<li>TCP连接：与服务器通过三次握手，建立 TCP 连接</li>
<li>向服务器发送 HTTP 请求</li>
<li>服务器处理请求，返回HTTp响应</li>
<li>浏览器解析并渲染页面</li>
<li>断开连接：TCP 四次挥手，连接结束<br>我们以输入<a href="http://www.baidu.com/">www.baidu.com</a> 为例：</li>
</ol>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914111009624.png" alt="image-20220914111009624"></p>
<p>各个过程都使用了哪些协议？</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914111154827.png" alt="image-20220914111154827"></p>
<h2 id="说说-DNS-的解析过程？"><a href="#说说-DNS-的解析过程？" class="headerlink" title="说说 DNS 的解析过程？"></a>说说 DNS 的解析过程？</h2><p>DNS，英文全称是 domain name system ，域名解析系统，它的作用也很明确，就是域名和 IP<br>相互映射。<br>DNS 的解析过程如下图：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914111304899.png" alt="image-20220914111304899">假设你要查询 <a href="http://www.baidu.com/">http://www.baidu.com</a> 的 IP 地址:</p>
<ul>
<li>首先会查找浏览器的缓存,看看是否能找到<a href="http://www.baidu.com/">www.baidu.com</a> 对应的IP地址，找到就直接返回；否则进行下一步。</li>
<li>将请求发往给本地DNS服务器，如果查找到也直接返回，否则继续进行下一步；</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914112040289.png" alt="image-20220914112040289"></p>
<ul>
<li>本地DNS服务器向根域名服务器发送请求，<strong>根域名服务器</strong>返回负责com 的顶级域名服务器的IP地址的列表。</li>
<li>本地DNS服务器再向其中一个负责<strong>com 的顶级域名服务器</strong>发送一个请求，返回负责baidu.com 的权限域名服务器的IP地址列表。</li>
<li>本地DNS服务器再向其中一个<strong>权限域名服务器</strong>发送一个请求，返回<a href="http://www.baidu.com/">www.baidu.com</a> 所对应的IP地址。</li>
</ul>
<h2 id="说说-WebSocket-与-Socket-的区别？"><a href="#说说-WebSocket-与-Socket-的区别？" class="headerlink" title="说说 WebSocket 与 Socket 的区别？"></a>说说 WebSocket 与 Socket 的区别？</h2><ul>
<li>Socket 其实就是等于 <strong>IP 地址 + 端又 + 协议</strong>。</li>
</ul>
<blockquote>
<p>具体来说，Socket 是一套标准，它完成了对 TCP/IP 的高度封装，屏蔽网络细节，以方便<br>开发者更好地进行网络编程。</p>
</blockquote>
<ul>
<li>WebSocket 是一个<strong>持久化</strong>的协议，它是伴随 H5 而出的协议，用来解决 http 不支持持久化连接的问题。</li>
<li>Socket 一个是网编编程的标准接口，而 WebSocket 则是应用层通信协议。</li>
</ul>
<h2 id="说一下你了解的端口及对应的服务？"><a href="#说一下你了解的端口及对应的服务？" class="headerlink" title="说一下你了解的端口及对应的服务？"></a>说一下你了解的端口及对应的服务？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914112622852.png" alt="image-20220914112622852"></p>
<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="说说-HTTP-常用的状态码及其含义？"><a href="#说说-HTTP-常用的状态码及其含义？" class="headerlink" title="说说 HTTP 常用的状态码及其含义？"></a>说说 HTTP 常用的状态码及其含义？</h2><ul>
<li><strong>1XX：信息性状态码</strong></li>
<li><strong>2XX：成功状态码</strong></li>
<li><strong>3XX：重定向状态码</strong></li>
<li><strong>4XX：客户端错误状态码</strong></li>
<li><strong>5XX：服务端错误状态码</strong></li>
</ul>
<p>几个常用的，面试之外，也应该记住：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914113033757.png" alt="image-20220914113033757"></p>
<h3 id="说一下-301-和-302-的区别？"><a href="#说一下-301-和-302-的区别？" class="headerlink" title="说一下 301 和 302 的区别？"></a>说一下 301 和 302 的区别？</h3><ul>
<li>301 ：永久性移动，请求的资源已被永久移动到新位置。服务器返回此响应时，会返回新的资源地址。</li>
<li>302 ：临时性性移动，服务器从另外的地址响应资源，但是客户端还应该使用这个地址。</li>
</ul>
<h2 id="HTTP-有哪些请求方式？"><a href="#HTTP-有哪些请求方式？" class="headerlink" title="HTTP 有哪些请求方式？"></a>HTTP 有哪些请求方式？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914114104380.png" alt="image-20220914114104380"></p>
<p>其中，<strong>POST、DELETE、PUT、GET</strong>的含义分别对应我们最熟悉的<strong>增、删、改、查</strong>。</p>
<h2 id="说一下-GET-和-POST-的区别？"><a href="#说一下-GET-和-POST-的区别？" class="headerlink" title="说一下 GET 和 POST 的区别？"></a>说一下 GET 和 POST 的区别？</h2><p>可以从以下几个方面来说明GET和POST的区别：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914114203771.png" alt="image-20220914114203771"></p>
<ol>
<li>从 HTTP 报文层面来看，GET 请求将信息放在 URL，POST 将请求信息放在请求体中。这一点使得 GET 请求携带的数据量有限，因为 URL 本身是有长度限制的，而 POST 请求的数据存放在报文体中，因此对大小没有限制。而且从形式上看，GET 请求把数据放URL 上不太安全，而 POST 请求把数据放在请求体里想比较而言安全些。</li>
<li>从数据库层面来看，GET 符合幂等性和安全性，而 POST 请求不符合。这个其实和GET/POST 请求的作用有关。按照 HTTP 的约定，GET 请求用于查看信息，不会改变服务器上的信息；而 POST 请求用来改变服务器上的信息。正因为 GET 请求只查看信息，不改变信息，对数据库的一次或多次操作获得的结果是一致的，认为它符合幂等性。安全性是指对数据库操作没有改变数据库中的数据。</li>
<li>从其他层面来看，GET 请求能够被缓存，GET 请求能够保存在浏览器的浏览记录里，GET 请求的 URL 能够保存为浏览器书签。这些都是 POST 请求所不具备的。缓存是 GET请求被广泛应用的根本，他能够被缓存也是因为它的幂等性和安全性，除了返回结果没有其他多余的动作，因此绝大部分的 GET 请求都被 CDN 缓存起来了，大大减少了 Web 服务器的负担。</li>
</ol>
<h2 id="GET-的长度限制是多少？"><a href="#GET-的长度限制是多少？" class="headerlink" title="GET 的长度限制是多少？"></a>GET 的长度限制是多少？</h2><p>HTTP中的GET方法是通过URL传递数据的，但是URL本身其实并没有对数据的长度进行限制，真正限制GET长度的是浏览器。<br>例如IE浏览器对URL的最大限制是 2000 多个字符，大概2kb左右，像Chrome、Firefox等浏览器支持的URL字符数更多，其中FireFox中URL的最大长度限制是 65536 个字符，Chrome则是8182 个字符。<br>这个长度限制也不是针对数据部分，而是针对整个URL。</p>
<h2 id="HTTP-请求的过程与原理？"><a href="#HTTP-请求的过程与原理？" class="headerlink" title="HTTP 请求的过程与原理？"></a>HTTP 请求的过程与原理？</h2><p>HTTP协议定义了浏览器怎么向服务器请求文档，以及服务器怎么把文档传给浏览器。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914115326440.png" alt="image-20220914115326440"></p>
<ul>
<li>每个服务器都有一个进程，它不断监听TCP的端口 80 ，以便发现是否有浏览器向它发出连接建立请求</li>
<li>监听到连接请求，就会建立TCP连接</li>
<li>浏览器向服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应</li>
<li>最后，释放TCP连接</li>
</ul>
<p>在浏览器和服务器之间的请求和响应的交互，必须按照规定的格式和遵循一定的规则，这些格式和规则就是超文本传输协议HTTP。<br>PS:这道题和上面浏览器输入网址发生了什么那道题大差不差。</p>
<h2 id="说一下HTTP的报文结构？"><a href="#说一下HTTP的报文结构？" class="headerlink" title="说一下HTTP的报文结构？"></a>说一下HTTP的报文结构？</h2><p>HTTP报文有两种，HTTP请求报文和HTTP响应报文：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914115634809.png" alt="image-20220914115634809"></p>
<p><strong>HTTP请求报文</strong><br>HTTP 请求报文的格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET / HTTP/<span class="number">1.1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">10_10_5</span>)</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br></pre></td></tr></table></figure>

<p>HTTP 请求报文的第一行叫做请求行，后面的行叫做首部行，首部行后还可以跟一个实体主体。请求首部之后有一个空行，这个空行不能省略，它用来划分首部与实体。<br>请求行包含三个字段：</p>
<ul>
<li>方法字段：包括POST、GET等请方法。</li>
<li>URL 字段</li>
<li>HTTP 版本字段。</li>
</ul>
<p><strong>HTTP 响应报文</strong><br>HTTP 响应报文的格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Length: 137582</span><br><span class="line">Expires: Thu, 05 Dec 1997 16:00:00 GMT</span><br><span class="line">Last-Modified: Wed, 5 August 1996 15:55:28 GMT</span><br><span class="line">Server: Apache 0.84</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTTP 响应报文的第一行叫做 <strong>状态行</strong> ，后面的行是 <strong>首部行</strong> ，最后是 <strong>实体主体</strong> 。</p>
<ul>
<li><p><strong>状态行</strong> 包含了三个字段：协议版本字段、状态码和相应的状态信息。</p>
</li>
<li><p><strong>实体部分</strong> 是报文的主要部分，它包含了所请求的对象。</p>
</li>
<li><p><strong>首部行</strong> 首部可以分为四种首部，请求首部、响应首部、通用首部和实体首部。通用首部和实体首部在请求报文和响应报文中都可以设置，区别在于请求首部和响应首部。</p>
<ul>
<li><p>常见的请求首部有 Accept 可接收媒体资源的类型、Accept-Charset 可接收的字符集、Host 请求的主机名。</p>
</li>
<li><p>常见的响应首部有 ETag 资源的匹配信息，Location 客户端重定向的 URI。</p>
</li>
<li><p>常见的通用首部有 Cache-Control 控制缓存策略、Connection 管理持久连接。</p>
</li>
<li><p>常见的实体首部有 Content-Length 实体主体的大小、Expires 实体主体的过期时间、Last-Modified 资源的最后修改时间。</p>
</li>
</ul>
</li>
</ul>
<h2 id="URI-和-URL-有什么区别"><a href="#URI-和-URL-有什么区别" class="headerlink" title="URI 和 URL 有什么区别?"></a>URI 和 URL 有什么区别?</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914130151408.png" alt="image-20220914130151408"></p>
<ul>
<li>URI，统一资源标识符(Uniform Resource Identifier， URI)，标识的是We b上每一种可用的资源，如 HTML文档、图像、视频片段、程序等都是由一个URI进行标识的。</li>
<li>URL，统一资源定位符（Uniform Resource Location)，它是URI的一种子集，主要作用是提供资源的路径。</li>
</ul>
<p>它们的主要区别在于，URL除了提供了资源的标识，还提供了资源访问的方式。这么比喻，URI 像是身份证，可以唯一标识一个人，而 URL 更像一个住址，可以通过 URL 找到这个人——人类住址协议://地球/中国/北京市/海淀区/xx职业技术学院/14号宿舍楼/525号寝/张三.男。</p>
<h2 id="说下-HTTP-1-0，1-1，2-0-的区别？"><a href="#说下-HTTP-1-0，1-1，2-0-的区别？" class="headerlink" title="说下 HTTP/1.0，1.1，2.0 的区别？"></a>说下 HTTP/1.0，1.1，2.0 的区别？</h2><p>关键需要记住 <strong>HTTP/1.0</strong> 默认是<strong>短连接</strong>，可以强制开启，<strong>HTTP/1.1</strong> 默认<strong>长连接</strong>，<strong>HTTP/2.0</strong> 采用<strong>多路复用</strong> 。</p>
<h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h3><ul>
<li>默认使用短连接，每次请求都需要建立一个 TCP 连接。它可以设置Connection:keep-alive 这个字段，强制开启长连接。</li>
</ul>
<h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h3><ul>
<li>引入了持久连接，即 TCP 连接默认不关闭，可以被多个请求复用。</li>
<li>分块传输编码，即服务端每产生一块数据，就发送一块，用” 流模式” 取代” 缓存模式”。</li>
<li>管道机制，即在同一个 TCP 连接里面，客户端可以同时发送多个请求。</li>
</ul>
<h3 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP/2.0"></a>HTTP/2.0</h3><ul>
<li>二进制协议，1.1 版本的头信息是文本（ASCII 编码），数据体可以是文本或者二进制；2.0 中，头信息和数据体都是二进制。</li>
<li>完全多路复用，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应。</li>
<li>报头压缩，HTTP 协议不带有状态，每次请求都必须附上所有信息。Http/2.0 引入了头信息压缩机制，使用 gzip 或 compress 压缩后再发送。</li>
<li>服务端推送，允许服务器未经请求，主动向客户端发送资源。</li>
</ul>
<h2 id="HTTP-3了解吗？"><a href="#HTTP-3了解吗？" class="headerlink" title="HTTP/3了解吗？"></a>HTTP/3了解吗？</h2><p>HTTP/3主要有两大变化， <strong>传输层基于UDP</strong> 、使用 <strong>QUIC保证UDP可靠性</strong> 。<br>HTTP/2存在的一些问题，比如重传等等，都是由于TCP本身的特性导致的，所以HTTP/3在QUIC的基础上进行发展而来，QUIC（Quick UDP Connections）直译为<strong>快速UDP网络连接</strong>，底层使用UDP进行数据传输。<br>HTTP/3主要有这些特点：</p>
<ul>
<li>使用UDP作为传输层进行通信</li>
<li>在UDP的基础上QUIC协议保证了HTTP/3的安全性，在传输的过程中就完成了TLS加密握手</li>
<li>HTTPS 要建立一个连接，要花费 6 次交互，先是建立三次握手，然后是 TLS/1.3 的三次握手。QUIC 直接把以往的 TCP 和 TLS/1.3 的 6 次交互合并成了 3 次，减少了交互次数。</li>
<li>QUIC 有自己的一套机制可以保证传输的可靠性的。当某个流发生丢包时，只会阻塞这个流，其他流不会受到影响。</li>
</ul>
<p>我们拿一张图看一下HTTP协议的变迁：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914134739072.png" alt="image-20220914134739072"></p>
<h2 id="HTTP-如何实现长连接？在什么时候会超时？"><a href="#HTTP-如何实现长连接？在什么时候会超时？" class="headerlink" title="HTTP 如何实现长连接？在什么时候会超时？"></a>HTTP 如何实现长连接？在什么时候会超时？</h2><h3 id="什么是-HTTP-的长连接？"><a href="#什么是-HTTP-的长连接？" class="headerlink" title="什么是 HTTP 的长连接？"></a>什么是 HTTP 的长连接？</h3><ol>
<li><p>HTTP 分为长连接和短连接，本质上说的是 TCP 的长短连接。TCP 连接是一个双向的通<br> 道，它是可以保持一段时间不关闭的，因此 TCP 连接才具有真正的长连接和短连接这一说<br> 法。</p>
</li>
<li><p>TCP 长连接可以复用一个 TCP 连接，来发起多次的 HTTP 请求，这样就可以减少资源消<br> 耗，比如一次请求 HTML，如果是短连接的话，可能还需要请求后续的 JS/CSS。</p>
</li>
</ol>
<h3 id="如何设置长连接？"><a href="#如何设置长连接？" class="headerlink" title="如何设置长连接？"></a>如何设置长连接？</h3><p>  通过在头部（请求和响应头）设置 <strong>Connection</strong> 字段指定为<strong>keep-alive</strong>，HTTP/1.0 协议支<br>  持，但是是默认关闭的，从 HTTP/1.1 以后，连接默认都是长连接。</p>
<h3 id="在什么时候会超时呢？"><a href="#在什么时候会超时呢？" class="headerlink" title="在什么时候会超时呢？"></a>在什么时候会超时呢？</h3><ul>
<li>HTTP 一般会有 httpd 守护进程，里面可以设置 <strong>keep-alive timeout</strong>，当 tcp 连接闲置超过这个时间就会关闭，也可以在 HTTP 的 header 里面设置超时时间</li>
<li>TCP 的 keep-alive 包含三个参数，支持在系统内核的 net.ipv4 里面设置；当 TCP 连接之后，闲置了 tcp_keepalive_time，则会发生侦测包，如果没有收到对方的 ACK，那么会每隔 <strong>tcp_keepalive_intvl</strong> 再发一次，直到发送了 <strong>tcp_keepalive_probes</strong>，就会丢弃该连接。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">tcp_keepalive_intvl = 15</span><br><span class="line">tcp_keepalive_probes = 5</span><br><span class="line">tcp_keepalive_time = 1800</span><br></pre></td></tr></table></figure>

<h2 id="说说HTTP-与-HTTPS-有哪些区别？"><a href="#说说HTTP-与-HTTPS-有哪些区别？" class="headerlink" title="说说HTTP 与 HTTPS 有哪些区别？"></a>说说HTTP 与 HTTPS 有哪些区别？</h2><ol>
<li>HTTP 是<strong>超文本传输协议</strong>，信息是<strong>明文传输</strong>，存在安全风险的问题。HTTPS 则解决 HTTP不安全的缺陷，在TCP 和 HTTP 网络层之间加入了 <strong>SSL/TLS</strong> 安全协议，使得报文能够加密传输。</li>
<li>HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。而 HTTPS 在TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。</li>
<li>HTTP 的端又号是 <strong>80</strong> ，HTTPS 的端又号是 <strong>443</strong> 。</li>
<li>HTTPS 协议需要向 CA（证书权威机构）申请<strong>数字证书</strong>，来保证服务器的身份是可信的。</li>
</ol>
<h2 id="为什么要用HTTPS？解决了哪些问题？"><a href="#为什么要用HTTPS？解决了哪些问题？" class="headerlink" title="为什么要用HTTPS？解决了哪些问题？"></a>为什么要用HTTPS？解决了哪些问题？</h2><p>因为HTTP 是明文传输，存在安全上的风险：</p>
<ul>
<li><strong>窃听风险</strong> ，比如通信链路上可以获取通信内容，用户账号被盗。</li>
<li><strong>篡改风险</strong> ，比如强制植入垃圾广告，视觉污染。</li>
<li><strong>冒充风险</strong> ，比如冒充淘宝网站，用户金钱损失。</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914140946859.png" alt="image-20220914140946859"></p>
<p>所以引入了HTTPS，HTTPS 在 HTTP 与 TCP 层之间加入了 SSL/TLS 协议，可以很好的解决了这些风险：</p>
<ul>
<li><strong>信息加密</strong>：交互信息无法被窃取。</li>
<li><strong>校验机制</strong>：无法篡改通信内容，篡改了就不能正常显示。</li>
<li><strong>身份证书</strong>：能证明淘宝是真淘宝。</li>
</ul>
<p>所以SSL/TLS 协议是能保证通信是安全的。</p>
<h2 id="HTTPS工作流程是怎样的？"><a href="#HTTPS工作流程是怎样的？" class="headerlink" title="HTTPS工作流程是怎样的？"></a>HTTPS工作流程是怎样的？</h2><p>这道题有几个要点： <strong>公私钥、数字证书、加密、对称加密、非对称加密</strong> 。<br>HTTPS 主要工作流程：</p>
<ol>
<li><p>客户端发起 HTTPS 请求，连接到服务端的 443 端口。</p>
</li>
<li><p>服务端有一套数字证书（证书内容有公钥、证书颁发机构、失效日期等）。</p>
</li>
<li><p>服务端将自己的数字证书发送给客户端（公钥在证书里面，私钥由服务器持有）。</p>
</li>
<li><p>客户端收到数字证书之后，会验证证书的合法性。如果证书验证通过，就会生成一个随机的对称密钥，用证书的公钥加密。</p>
</li>
<li><p>客户端将公钥加密后的密钥发送到服务器。</p>
</li>
<li><p>服务器接收到客户端发来的密文密钥之后，用自己之前保留的私钥对其进行非对称解密，解密之后就得到客户端的密钥，然后用客户端密钥对返回数据进行对称加密，酱紫传输的数据都是密文啦。</p>
</li>
<li><p>服务器将加密后的密文返回到客户端。</p>
</li>
<li><p>客户端收到后，用自己的密钥对其进行对称解密，得到服务器返回的数据。</p>
</li>
</ol>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914141753002.png" alt="image-20220914141753002"></p>
<p>这里还画了一张更详尽的图：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914141816333.png" alt="image-20220914141816333"></p>
<h2 id="客户端怎么去校验证书的合法性？"><a href="#客户端怎么去校验证书的合法性？" class="headerlink" title="客户端怎么去校验证书的合法性？"></a>客户端怎么去校验证书的合法性？</h2><p>首先，服务端的证书从哪来的呢？</p>
<p>为了让服务端的公钥被大家信任，服务端的证书都是由 <strong>CA （Certificate Authority，证书认证机构）</strong>签名的，CA就是网络世界里的公安局、公证中心，具有极高的可信度，所以由它来给各个公钥签名，信任的一方签发的证书，那必然证书也是被信任的。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914141955788.png" alt="image-20220914141955788"></p>
<p>CA 签发证书的过程，如上图左边部分：</p>
<ul>
<li>首先 CA 会把持有者的公钥、用途、颁发者、有效时间等信息打成一个包，然后对这些信息进行 Hash 计算，得到一个 Hash 值；</li>
<li>然后 CA 会使用自己的私钥将该 Hash 值加密，生成 Certificate Signature，也就是 CA 对证书做了签名；</li>
<li>最后将 Certificate Signature 添加在文件证书上，形成数字证书；</li>
</ul>
<p>客户端校验服务端的数字证书的过程，如上图右边部分：</p>
<ul>
<li>首先客户端会使用同样的 Hash 算法获取该证书的 Hash 值 H1；</li>
<li>通常浏览器和操作系统中集成了 CA 的公钥信息，浏览器收到证书后可以使用 CA 的公钥解密 Certificate</li>
<li>Signature 内容，得到一个 Hash 值 H2 ；</li>
<li>最后比较 H1 和 H2，如果值相同，则为可信赖的证书，否则则认为证书不可信。</li>
</ul>
<p>假如在HTTPS的通信过程中，中间人篡改了证书原文，由于他没有CA机构的私钥，所以CA公钥解密的内容就不一致。</p>
<h2 id="如何理解-HTTP-协议是无状态的？"><a href="#如何理解-HTTP-协议是无状态的？" class="headerlink" title="如何理解 HTTP 协议是无状态的？"></a>如何理解 HTTP 协议是无状态的？</h2><p>这个无状态的的状态值的是什么？是客户端的状态，所以字面意思，就是HTTP协议中服务端不会保存客户端的任何信息。<br>比如当浏览器第一次发送请求给服务器时，服务器响应了；如果同个浏览器发起第二次请求给服务器时，它还是会响应，但是呢，服务器不知道你就是刚才的那个浏览器。</p>
<p><strong>那有什么办法记录状态呢？</strong></p>
<p>主要有两个办法，Session和Cookie。</p>
<h2 id="说说Session-和-Cookie-有什么联系和区别"><a href="#说说Session-和-Cookie-有什么联系和区别" class="headerlink" title="说说Session 和 Cookie 有什么联系和区别?"></a>说说Session 和 Cookie 有什么联系和区别?</h2><p>先来看看什么是 Session 和 Cookie ：</p>
<ul>
<li><strong>Cookie</strong> <strong>是保存在客户端的一小块文本串的数据</strong>。客户端向服务器发起请求时，服务端会向客户端发送一个 Cookie，客户端就把 Cookie 保存起来。在客户端下次向同一服务器再发起请求时，Cookie 被携带发送到服务器。<strong>服务端可以根据这个Cookie判断用户的身份和状态</strong>。</li>
<li><strong>Session</strong> <strong>指的就是服务器和客户端一次会话的过程</strong>。它是另一种记录客户状态的机制。不同的是cookie保存在客户端浏览器中，而session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。客户端浏览器再次访问时只需要从该session中查找用户的状态。</li>
</ul>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914145805140.png" alt="image-20220914145805140"></p>
<h3 id="Session-和-Cookie-到底有什么不同呢？"><a href="#Session-和-Cookie-到底有什么不同呢？" class="headerlink" title="Session 和 Cookie 到底有什么不同呢？"></a>Session 和 Cookie 到底有什么不同呢？</h3><ul>
<li>存储位置不一样，Cookie 保存在客户端，Session 保存在服务器端。</li>
<li>存储数据类型不一样，Cookie 只能保存ASCII，Session可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li>
<li>有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session一般有效时间较短，客户端关闭或者 Session 超时都会失效。</li>
<li>隐私策略不同，Cookie 存储在客户端，比较容易遭到不法获取，早期有人将用户的登录名和密码存储在 Cookie 中导致信息被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些。</li>
<li>存储大小不同， 单个Cookie保存的数据不能超过4K，Session可存储数据远高于 Cookie。</li>
</ul>
<h3 id="Session-和-Cookie有什么关联呢？"><a href="#Session-和-Cookie有什么关联呢？" class="headerlink" title="Session 和 Cookie有什么关联呢？"></a>Session 和 Cookie有什么关联呢？</h3><p>可以使用Cookie记录Session的标识。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914150505696.png" alt="image-20220914150505696"></p>
<p>用户第一次请求服务器时，服务器根据用户提交的信息，创建对应的 Session，请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器，浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入 Cookie 中，同时 Cookie 记录此 SessionID 是属于哪个域名。<br>当用户第二次访问服务器时，请求会自动判断此域名下是否存在 Cookie 信息，如果存在，则自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到，说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。</p>
<h3 id="分布式环境下Session怎么处理呢？"><a href="#分布式环境下Session怎么处理呢？" class="headerlink" title="分布式环境下Session怎么处理呢？"></a>分布式环境下Session怎么处理呢？</h3><p>分布式环境下，客户端请求经过负载均衡，可能会分配到不同的服务器上，假如一个用户的请求两次没有落到同一台服务器上，那么在新的服务器上就没有记录用户状态的Session。</p>
<p>这时候怎么办呢？</p>
<p>可以使用Redis等分布式缓存来存储Session，在多台服务器之间共享。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914151332272.png" alt="image-20220914151332272"></p>
<h3 id="客户端无法使用Cookie怎么办？"><a href="#客户端无法使用Cookie怎么办？" class="headerlink" title="客户端无法使用Cookie怎么办？"></a>客户端无法使用Cookie怎么办？</h3><p>有可能客户端无法使用Cookie，比如浏览器禁用Cookie，或者客户端是安卓、IOS等等。</p>
<p>这时候怎么办？SessionID怎么存？怎么传给服务端呢？</p>
<p>首先是SessionID的存储，可以使用客户端的本地存储，比如浏览器的sessionStorage。</p>
<p>接下来怎么传呢？</p>
<ul>
<li>拼接到URL里：直接把SessionID作为URL的请求参数</li>
<li>放到请求头里：把SessionID放到请求的Header里，比较常用。</li>
</ul>
<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><h2 id="详细说一下-TCP-的三次握手机制"><a href="#详细说一下-TCP-的三次握手机制" class="headerlink" title="详细说一下 TCP 的三次握手机制"></a>详细说一下 TCP 的三次握手机制</h2><p>TCP提供面向连接的服务，在传送数据前必须建立连接，TCP连接是通过三次握手建立的。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220914154622322.png" alt="image-20220914154622322"></p>
<p>三次握手的过程：</p>
<ul>
<li>最开始，客户端和服务端都处于CLOSE状态，服务端监听客户端的请求，进入<strong>LISTEN</strong>状态</li>
<li>客户端发送连接请求，第一次握手 (SYN=1, seq=x)，发送完毕后，客户端就进入<strong>SYN_SENT(同步已发送)</strong> 状态</li>
<li>服务端确认连接，第二次握手 (SYN=1, ACK=1, seq=y, ACKnum=x+1)， 发送完毕后，服<br>务器端就进入 <strong>SYN_RCV （同步已接受）</strong>状态。</li>
<li>客户端收到服务端的确认之后，再次向服务端确认，这就是第三次握手 (ACK=1，ACKnum=y+1)，发送完毕后，客户端进入 <strong>ESTABLISHED （连接已建立）</strong>状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态。</li>
</ul>
<h2 id="TCP-握手为什么是三次，为什么不能是两次？不能是四次？"><a href="#TCP-握手为什么是三次，为什么不能是两次？不能是四次？" class="headerlink" title="TCP 握手为什么是三次，为什么不能是两次？不能是四次？"></a>TCP 握手为什么是三次，为什么不能是两次？不能是四次？</h2><p><strong>为什么不能是两次？</strong></p>
<ul>
<li><strong>为了防止服务器端开启一些无用的连接增加服务器开销</strong></li>
<li><strong>防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</strong></li>
</ul>
<p>由于网络传输是有延时的(要通过网络光纤和各种中间代理服务器)，在传输的过程中，比如客户端发起了 <code>SYN=1</code> 的第一次握手。<br>如果服务器端就直接创建了这个连接并返回包含 <code>SYN</code>、<code>ACK </code>和 <code>Seq</code> 等内容的数据包给客户端，这个数据包因为网络传输的原因丢失了，丢失之后客户端就一直没有接收到服务器返回的数据包。</p>
<p>如果没有第三次握手告诉服务器端客户端收的到服务器端传输的数据的话，服务器端是不知道客户端有没有接收到服务器端返回的信息的。</p>
<p>服务端就认为这个连接是可用的，端口就一直开着，等到客户端因超时重新发出请求时，服务器就会重新开启一个端口连接。这样一来，就会有很多无效的连接端口白白地开着，导致资源的浪费。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917175738756.png" alt="image-20220917175738756"></p>
<p>还有一种情况是已经失效的客户端发出的请求信息，由于某种原因传输到了服务器端，服务器端以为是客户端发出的有效请求，接收后产生错误。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917175824100.png" alt="image-20220917175824100"></p>
<p>所以我们需要“第三次握手”来确认这个过程:</p>
<p>通过第三次握手的数据告诉服务端，客户端有没有收到服务器”<strong>第二次握手</strong>”时传过去的数据，以及这个连接的序号是不是有效的。若发送的这个数据是<strong>“收到且没有问题</strong>”的信息，接收后服务器就正常建立TCP连接，否则建立TCP连接失败，服务器关闭连接端口。由此减少服务器开销和接收到失效请求发生的错误。</p>
<p><strong>为什么不是四次?</strong></p>
<p>简单说，就是三次挥手已经足够创建可靠的连接，没有必要再多一次握手导致花费更多的时间建立连接。</p>
<h2 id="三次握手中每一次没收到报文会发生什么情况"><a href="#三次握手中每一次没收到报文会发生什么情况" class="headerlink" title="三次握手中每一次没收到报文会发生什么情况?"></a>三次握手中每一次没收到报文会发生什么情况?</h2><h3 id="第一次握手服务端未收到SYN报文"><a href="#第一次握手服务端未收到SYN报文" class="headerlink" title="第一次握手服务端未收到SYN报文"></a>第一次握手服务端未收到SYN报文</h3><p>服务端不会进行任何的动作，而客户端由于一段时间内没有收到服务端发来的确认报文，等待一段时间后会重新发送<code>SYN</code>报文，如果仍然没有回应，会重复这个过程，直到发送次数超过<strong>最大重传次数限制</strong>，就会返回连接建立失败。</p>
<h3 id="第二次握手客户端未收到服务端响应的ACK报文"><a href="#第二次握手客户端未收到服务端响应的ACK报文" class="headerlink" title="第二次握手客户端未收到服务端响应的ACK报文"></a>第二次握手客户端未收到服务端响应的ACK报文</h3><p>客户端会继续重传，直到次数限制;而服务端此时会阻塞在<code>accept()</code>处，等待客户端发送ACK报文</p>
<h3 id="第三次握手服务端为收到客户端发送过来的ACK报文"><a href="#第三次握手服务端为收到客户端发送过来的ACK报文" class="headerlink" title="第三次握手服务端为收到客户端发送过来的ACK报文"></a>第三次握手服务端为收到客户端发送过来的ACK报文</h3><p>服务端同样会采用类似客户端的超时重传机制，如果重试次数超过限制，则<code>accept()</code>调用返回-1，服务端建立连接失败;而此时客户端认为自己已经建立连接成功，因此开始向服务端发送数据，但是服务端的<code>accept()</code>系统调用已经返回，此时不在监听状态，因此服务端接收到客户端发送来的数据时会发送<code>RST</code>报文给客户端，消除客户端单方面建立连接的状态。</p>
<h2 id="第二次握手传回了ACK，为什么还要传回SYN"><a href="#第二次握手传回了ACK，为什么还要传回SYN" class="headerlink" title="第二次握手传回了ACK，为什么还要传回SYN?"></a>第二次握手传回了ACK，为什么还要传回SYN?</h2><ul>
<li>ACK是为了告诉客户端传来的数据已经接收无误。</li>
<li>而传回SYN是为了告诉客户端，服务端响应的确实是客户端发送的报文。</li>
</ul>
<h2 id="第3次握手可以携带数据吗"><a href="#第3次握手可以携带数据吗" class="headerlink" title="第3次握手可以携带数据吗?"></a>第3次握手可以携带数据吗?</h2><p>第3次握手是可以携带数据的。</p>
<p>此时客户端已经处于<code>ESTABLISHED</code>状态。对于客户端来说，它已经建立连接成功，并且确认服务端的接收和发送能力是正常的。<br>第一次握手不能携带数据是出于安全的考虑，因为如果允许携带数据，攻击者每次在<code>SYN</code>报文中携带大量数据，就会导致服务端消耗更多的时间和空间去处理这些报文，会造成CPU和内存的消耗。</p>
<h2 id="说说半连接队列和SYN-Flood攻击的关系"><a href="#说说半连接队列和SYN-Flood攻击的关系" class="headerlink" title="说说半连接队列和SYN Flood攻击的关系?"></a>说说半连接队列和SYN Flood攻击的关系?</h2><h3 id="什么是半连接队列"><a href="#什么是半连接队列" class="headerlink" title="什么是半连接队列?"></a>什么是半连接队列?</h3><p><code>TCP</code>进入三次握手前，服务端会从<code>CLOSED</code>状态变为<code>LISTEN</code>状态,同时在内部创建了两个队列;<strong>半连接队列(SYN队列）</strong>和**全连接队列(ACCEPT 队列)**。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917181313525.png" alt="image-20220917181313525"></p>
<p>顾名思义，半连接队列存放的是<strong>三次握手未完成</strong>的连接，全连接队列存放的是<strong>完成三次握手</strong>的连接。</p>
<ul>
<li><code>TCP</code>三次握手时，客户端发送<code>SYN</code>到服务端，服务端收到之后，便回复<code>ACK</code>和<code>SYN</code> ,状态由<code>LISTEN</code>变为<code>SYN_RCVD</code>，此时这个连接就被推入了<code>SYN队列</code>，即<strong>半连接队列</strong>。</li>
<li>当客户端回复<code>ACK</code>,服务端接收后，三次握手就完成了。这时连接会等待被具体的应用取走，在被取走之前,它被推入<code>ACCEPT队列</code>，即<strong>全连接队列</strong>。</li>
</ul>
<p>​    </p>
<h3 id="什么是SYN-Flood"><a href="#什么是SYN-Flood" class="headerlink" title="什么是SYN Flood ?"></a>什么是SYN Flood ?</h3><p><code>SYN Flood</code>是一种典型的<code>DDos攻击</code>，它在短时间内，伪造**==不存在的IP地址==**,向服务器发送大量<code>SYN报文</code>。当服务器回复<code>SYN+ACK</code>报文后，不会收到<code>ACK回应报文</code>，那么<code>SYN队列</code>里的连接旧不会出对队,久而久之就会占满服务端的<code>SYN 接收队列(半连接队列)</code>，使得服务器不能为正常用户服务。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917185644793.png" alt="image-20220917185644793"></p>
<h3 id="那有什么应对方案呢"><a href="#那有什么应对方案呢" class="headerlink" title="那有什么应对方案呢?"></a>那有什么应对方案呢?</h3><p><strong>主要有<code>syn cookie</code>和 <code>SYN Proxy</code> 防火墙等。</strong></p>
<p><code>syn cookie</code> :在收到<code>SYN包</code>后，服务器根据一定的方法，以数据包的源地址、端口等信息为参数计算出一个<code>cookie</code>值作为自己的<code>SYNACK包</code>的序列号，回复<code>SYN+ACK</code>后，服务器并不立即分配资源进行处理，等收到发送方的<code>ACK包</code>后，重新根据数据包的源地址、端口计算该包中的确认序列号是否正确，如果正确则建立连接，否则丢弃该包。<code>SYN Proxy</code>防火墙︰服务器防火墙会对收到的每一个<code>SYN报文</code>进行代理和回应，并保持半连接。等发送方将ACK包返回后，再重新构造SYN包发到服务器，建立真正的TCP连接。</p>
<h2 id="说说TCP四次挥手的过程"><a href="#说说TCP四次挥手的过程" class="headerlink" title="说说TCP四次挥手的过程?"></a>说说TCP四次挥手的过程?</h2><p>PS:问完三次握手，常常也会顺道问问四次挥手，所以也是必须掌握知识点。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917190254848.png" alt="image-20220917190254848"></p>
<p>TCP四次挥手过程:</p>
<ul>
<li>数据传输结束之后，通信双方都可以主动发起断开连接请求，这里假定客户端发起</li>
<li>客户端发送释放连接报文，第一次挥手<code>(FIN=1，seq=u)</code>，发送完毕后，客户端进入<code>FIN_WAIT_1</code> 状态。</li>
<li>服务端发送确认报文，第二次挥手<code>(ACK=1,ack=u+1,seq =v)</code>，发送完毕后，服务器端进入<code>CLOSE_WAIT</code>状态，客户端接收到这个确认包之后，进入<code>FIN_WAIT_2</code>状态。</li>
<li>服务端发送释放连接报文，第三次挥手<code>(FIN=1，ACK1,seq=w,ack=u+1)</code>，发送完毕后，服务器端进入<code>LAST_ACK</code>状态，等待来自客户端的最后一个<code>ACK</code>。</li>
<li>客户端发送确认报文，第四次挥手<code>(ACK=1，seq=u+1 ,ack=w+1)</code>，客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入<code>TIME_WAIT</code>状态，等待了某个固定时间(两个最大段生命周期，<code>2MSL</code>，<code>2 Maximum Segment Lifetime</code>）之后﹐没有收到服务器端的<code>ACK</code>,认为服务器端已经正常关闭连接，于是自己也关闭连接，进入<code>CLOSED</code>状态。服务器端接收到这个确认包之后，关闭连接，进入<code>CLOSED</code>状态。</li>
</ul>
<h2 id="TCP挥手为什么需要四次呢"><a href="#TCP挥手为什么需要四次呢" class="headerlink" title="TCP挥手为什么需要四次呢?"></a>TCP挥手为什么需要四次呢?</h2><p>再来回顾下四次挥手双方发<code>FIN包</code>的过程，就能理解为什么需要四次了。</p>
<ul>
<li>关闭连接时，客户端向服务端发送<code>FIN</code> 时，仅仅表示客户端不再发送数据了但是还能接收数据。</li>
<li>服务端收到客户端的<code>FIN报文</code>时，先回一个<code>ACK应答报文</code>，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 <code>FIN报文</code>给客户端来表示同意现在关闭连接。</li>
</ul>
<p>从上面过程可知，服务端通常需要等待完成数据的发送和处理，所以服务端的<code>ACK</code>和<code>FIN</code>一般都会分开发送，从而比三次握手导致多了一次。</p>
<h2 id="TCP四次挥手过程中，为什么需要等待2MSL-才进入CLOSED关闭状态"><a href="#TCP四次挥手过程中，为什么需要等待2MSL-才进入CLOSED关闭状态" class="headerlink" title="TCP四次挥手过程中，为什么需要等待2MSL,才进入CLOSED关闭状态?"></a>TCP四次挥手过程中，为什么需要等待2MSL,才进入CLOSED关闭状态?</h2><h3 id="为什么需要等待"><a href="#为什么需要等待" class="headerlink" title="为什么需要等待?"></a>为什么需要等待?</h3><p><strong>1.为了保证客户端发送的最后一个ACK报文段能够到达服务端</strong>。这个<code>ACK报文段</code>有可能丢失，因而使处在<code>LAST-ACK状态</code>的服务端就收不到对已发送的<code>FIN + ACK 报文段</code>的确认。服务端会超时重传这个<code>FIN+ACK报文段</code>，而客户端就能在<code>2MSL</code>时间内（超时＋1MSL传输）收到这个重传的<code>FIN+ACK报文段</code>。接着客户端重传一次确认，重新启动<code>2MSL</code>计时器。最后，客户端和服务器都正常进入到<code>CLOSED</code>状态。</p>
<p><strong>2.防止已失效的连接请求报文段出现在本连接中</strong>。客户端在发送完最后一个<code>ACK报文段</code>后，再经过时间<code>2MSL</code>，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样就可以使下一个连接中不会出现这种旧的连接请求报文段。</p>
<h3 id="为什么等待的时间是2MSL"><a href="#为什么等待的时间是2MSL" class="headerlink" title="为什么等待的时间是2MSL?"></a>为什么等待的时间是2MSL?</h3><p><code>MSL</code>是 <code>Maximum Segment Lifetime</code>，报文最大生存时间，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。</p>
<p><code>TIME_WAIT</code>等待2倍的<code>MSL</code>，比较合理的解释是︰网络中可能存在来自发送方的数据包，当这些发送方的数据包被接收方处理后口会向对方发送响应，所以一来一回需要等待2倍的时间。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917200851731.png" alt="image-20220917200851731"></p>
<p>比如如果被动关闭方没有收到断开连接的最后的<code>ACK报文</code>，就会触发超时重发<code>Fin报文</code>，另一方接收到<code>FIN</code>后，会重发<code>ACK</code>给被动关闭方，一来一去正好2个<code>MSL</code>。</p>
<h2 id="保活计时器有什么用"><a href="#保活计时器有什么用" class="headerlink" title="保活计时器有什么用?"></a>保活计时器有什么用?</h2><p>除时间等待计时器外，<code>TCP</code>还有一个保活计时器<code>(keepalive timer)</code>。</p>
<p>设想这样的场景:客户已主动与服务器建立了<code>TCP</code> 连接。但后来客户端的主机突然发生故障。显然，服务器以后就不能再收到客户端发来的数据。因此，应当有措施使服务器不要再白白等待下去。这就需要使用保活计时器了。</p>
<p>服务器每收到一次客户端的数据，就重新设置保活计时器，时间的设置通常是两个小时。若两个小时都没有收到客户端的数据，服务端就发送一个探测报文段，以后则<code>每隔75秒钟</code>发送一次。若连续发送<code>10个探测报文段</code>后仍然无客户端的响应，服务端就认为客户端出了故障，接着就关闭这个连接。</p>
<h2 id="CLOSE-WAIT和TIME-WAIT的状态和意义"><a href="#CLOSE-WAIT和TIME-WAIT的状态和意义" class="headerlink" title="CLOSE-WAIT和TIME-WAIT的状态和意义?"></a>CLOSE-WAIT和TIME-WAIT的状态和意义?</h2><h3 id="CLOSE-WAIT状态有什么意义"><a href="#CLOSE-WAIT状态有什么意义" class="headerlink" title="CLOSE-WAIT状态有什么意义?"></a>CLOSE-WAIT状态有什么意义?</h3><p>服务端收到客户端关闭连接的请求并确认之后，就会进入<code>CLOSE-WAIT</code>状态。此时服务端可能还有一些数据没有传输完成，因此不能立即关闭连接，而<code>CLOSE-WAIT</code>状态就是为了保证服务端在关闭连接之前将待发送的数据处理完。</p>
<h3 id="TIME-WAIT有什么意义"><a href="#TIME-WAIT有什么意义" class="headerlink" title="TIME-WAIT有什么意义?"></a>TIME-WAIT有什么意义?</h3><p><code>TIME-WAIT</code>状态发生在第四次挥手，当客户端向服务端发送<code>ACK确认报文</code>后进入<code>TIME-WAIT</code>状态。</p>
<p>它存在的意义主要是两个：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917201451466.png" alt="image-20220917201451466"></p>
<ul>
<li><strong>防止旧连接的数据包</strong></li>
</ul>
<p>如果客户端收到服务端的<code>FIN报文</code>之后立即关闭连接，但是此时服务端对应的端口并没有关闭，如果客户端在相同端口建立新的连接，可能会导致新连接收到旧连接残留的数据包，导致不可预料的异常发生。</p>
<ul>
<li><strong>保证连接正确关闭</strong></li>
</ul>
<p>假设客户端最后一次发送的<code>ACK包</code>在传输的时候丢失了，由于<code>TCP</code>协议的超时重传机制，服务端将重发<code>FIN</code>报文，如果客户端没有维持<code>TIME-WAIT</code>状态而直接关闭的话，当收到服务端重新发送的FIN包时，客户端就会使用<code>RST包</code>来响应服务端，导致服务端以为有错误发生，然而实际关闭连接过程是正常的。</p>
<h2 id="TIME-WAIT状态过多会导致什么问题-怎么解决"><a href="#TIME-WAIT状态过多会导致什么问题-怎么解决" class="headerlink" title="TIME_WAIT状态过多会导致什么问题?怎么解决?"></a>TIME_WAIT状态过多会导致什么问题?怎么解决?</h2><h3 id="TIME-WAIT状态过多会导致什么问题"><a href="#TIME-WAIT状态过多会导致什么问题" class="headerlink" title="TIME_WAIT状态过多会导致什么问题?"></a>TIME_WAIT状态过多会导致什么问题?</h3><p>如果服务器有处于<code>TIME-WAIT</code>状态的<code>TCP</code>，则说明是由服务器方主动发起的断开请求。<br>过多的<code>TIME-WAIT</code>状态主要的危害有两种:</p>
<ul>
<li>第一是内存资源占用;</li>
<li>第二是对端口资源的占用，一个TCP连接至少消耗一个本地端口;</li>
</ul>
<h3 id="怎么解决TIME-WAIT状态过多"><a href="#怎么解决TIME-WAIT状态过多" class="headerlink" title="怎么解决TIME_WAIT状态过多?"></a>怎么解决TIME_WAIT状态过多?</h3><ul>
<li>服务器可以设置<code>SO_REUSEADDR</code>套接字来通知内核，如果端口被占用，但是<code>TCP</code>连接位于<code>TIME_WAIT</code>状态时可以重用端口。</li>
<li>还可以使用长连接的方式来减少<code>TCP</code>的连接和断开，在长连接的业务里往往不需要考虑<code>TIME_WAIT</code>状态。</li>
</ul>
<h2 id="说说TCP报文首部的格式"><a href="#说说TCP报文首部的格式" class="headerlink" title="说说TCP报文首部的格式?"></a>说说TCP报文首部的格式?</h2><p>看一下TCP报文首部的格式:</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917204411106.png" alt="image-20220917204411106"></p>
<ul>
<li><strong>16位端口号</strong>︰源端口号，主机该报文段是来自哪里;目标端口号，要传给哪个上层协议或应用程序</li>
<li><strong>32位序号</strong>∶一次TCP通信（从TCP连接建立到断开）过程中某一个传输方向上的字节流的每个字节的编号。</li>
<li><strong>32位确认号</strong>︰用作对另一方发送的tcp报文段的响应。其值是收到的TCP报文段的序号值加1。</li>
<li><strong>4位首部长度</strong>︰表示 tcp头部有多少个32bit字(4字节)。因为4位最大能标识15，所以TCP头部最长是60字节。</li>
<li><strong>6位标志位</strong>︰URG(紧急指针是否有效)，ACk(表示确认号是否有效)，PST(缓冲区尚未填满)，RST(表示要求对方重新建立连接)，SYN(建立连接消息标志接)，FIN(表示告知对方本端要关闭连接了)</li>
<li><strong>16位窗口大小</strong>︰是TCP流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。</li>
<li><strong>16位校验和</strong>︰由发送端填充，接收端对TCP报文段执行CRC算法以检验TCP报文段在传输过程中是否损坏。注意，这个校验不仅包括TCP头部，也包括数据部分。这也是TCP可靠传输的一个重要保障。</li>
<li><strong>16位紧急指针</strong>:一个正的偏移量。它和序号字段的值相加表示最后一个紧急数据的下一字节的序号。因此，确切地说，这个字段是紧急指针相对当前序号的偏移，不妨称之为紧急偏移。TCP的紧急指针是发送端向接收端发送紧急数据的方法。</li>
</ul>
<h2 id="TCP是如何保证可靠性的"><a href="#TCP是如何保证可靠性的" class="headerlink" title="TCP是如何保证可靠性的?"></a>TCP是如何保证可靠性的?</h2><p>TCP主要提供了<strong>检验和、序列号/确认应答、超时重传、最大消息长度、滑动窗口控制</strong>等方法实现了可靠性传输。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917204856339.png" alt="image-20220917204856339"></p>
<p>1．<strong>连接管理</strong>:<code>TCP</code>使用三次握手和四次挥手保证可靠地建立连接和释放连接，这里就不用多说了。<br>2．<strong>校验和</strong>:<code>TCP</code>将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果接收端的检验和有差错，TCP将丢弃这个报文段和不确认收到此报文段。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917205011615.png" alt="image-20220917205011615"></p>
<p>3．<strong>序列号/确认应答</strong>:<code>TCP</code>给发送的每一个包进行编号，接收方会对收到的包进行应答，发送方就会知道接收方是否收到对应的包，如果发现没有收到，就会重发，这样就能保证数据的完整性。就像老师上课，会问一句，这一章听懂了吗?没听懂再讲一遍。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917205130755.png" alt="image-20220917205130755"></p>
<p>4．<strong>流量控制</strong>:<code>TCP</code>连接的每一方都有固定大小的缓冲空间，<code>TCP</code>的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。<code>TCP</code>使用的流量控制协议是可变大小的<strong>滑动窗口协议</strong>。**(TCP利用滑动窗口实现流量控制)**</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917205311385.png" alt="image-20220917205311385"></p>
<p>5．<strong>最大消息长度</strong>∶在建立<code>TCP连接</code>的时候，双方约定一个最大的长度<code>(MSS)</code>作为发送的单位，重传的时候也是以这个单位来进行重传。理想的情况下是该长度的数据刚好不被网络层分块。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917205422167.png" alt="image-20220917205422167"></p>
<p>6、<strong>超时重传</strong>:超时重传是指发送出去的数据包到接收到确认包之间的时间，如果超过了这个时间会被认为是丢包了，需要重传。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917205524690.png" alt="image-20220917205524690"></p>
<p>7．<strong>拥塞控制</strong>:如果网络非常拥堵，此时再发送数据就会加重网络负担，那么发送的数据段很可能超过了最大生存时间也没有到达接收方，就会产生丢包问题。为此<code>TCP</code>引入慢启动机制，先发出少量数据，就像探路一样，先摸清当前的网络拥堵状态后，再决定按照多大的速度传送数据。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220917205727095.png" alt="image-20220917205727095"></p>
]]></content>
  </entry>
  <entry>
    <title>黑马程序员-Docker</title>
    <url>/2022/11/17/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/</url>
    <content><![CDATA[<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221117203116193.png" alt="image-20221117203116193"></p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221117203143879.png" alt="image-20221117203143879"></p>
<h1 id="初识Docker"><a href="#初识Docker" class="headerlink" title="初识Docker"></a>初识Docker</h1><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221117203235114.png" alt="image-20221117203235114"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221117203248677.png" alt="image-20221117203248677"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221117203526799.png" alt="image-20221117203526799"></p>
<h2 id="Docker概念"><a href="#Docker概念" class="headerlink" title="Docker概念"></a>Docker概念</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221117203617473.png" alt="image-20221117203617473"></p>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221117203845853.png" alt="image-20221117203845853"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、yum 包更新到最新 </span></span><br><span class="line">yum update</span><br><span class="line"><span class="comment"># 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 </span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># 3、 设置yum源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 4、 安装docker，出现输入的界面都按 y </span></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="comment"># 5、 查看docker版本，验证是否验证成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure>

<p>当发生如下报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: Failed to download metadata for repo &#x27;appstream&#x27;: Cannot prepare internal mirrorlist: No URLs in mirrorlist</span><br></pre></td></tr></table></figure>

<p>依次执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">sed -i <span class="string">&#x27;s/mirrorlist/#mirrorlist/g&#x27;</span> /etc/yum.repos.d/CentOS-*</span><br><span class="line">sed -i <span class="string">&#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27;</span> /etc/yum.repos.d/CentOS-*</span><br><span class="line">yum makecache</span><br><span class="line">yum update -y</span><br></pre></td></tr></table></figure>

<p>安装成功</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118203938565.png" alt="image-20221118203938565"></p>
<h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118204247014.png" alt="image-20221118204247014"></p>
<h2 id="配置Docker镜像加速器"><a href="#配置Docker镜像加速器" class="headerlink" title="配置Docker镜像加速器"></a>配置Docker镜像加速器</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118204825959.png" alt="image-20221118204825959"></p>
<p>登录阿里云</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118205301984.png" alt="image-20221118205301984"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118205500436.png" alt="image-20221118205500436"></p>
<p>执行</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118205608837.png" alt="image-20221118205608837"></p>
<p>查看是否配置成功</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118205728239.png" alt="image-20221118205728239"></p>
<h1 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h1><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118205801023.png" alt="image-20221118205801023"></p>
<h2 id="Docker进程相关命令"><a href="#Docker进程相关命令" class="headerlink" title="Docker进程相关命令"></a>Docker进程相关命令</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118205827121.png" alt="image-20221118205827121"></p>
<h3 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="启动docker服务"></a>启动docker服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="停止docker服务"><a href="#停止docker服务" class="headerlink" title="停止docker服务"></a>停止docker服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>

<h3 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="查看docker服务状态"><a href="#查看docker服务状态" class="headerlink" title="查看docker服务状态"></a>查看docker服务状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure>

<h3 id="设置开机启动docker服务"><a href="#设置开机启动docker服务" class="headerlink" title="设置开机启动docker服务"></a>设置开机启动docker服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<p>演示</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118210207027.png" alt="image-20221118210207027"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118210314068.png" alt="image-20221118210314068"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118210349579.png" alt="image-20221118210349579"></p>
<h2 id="Docker镜像相关命令"><a href="#Docker镜像相关命令" class="headerlink" title="Docker镜像相关命令"></a>Docker镜像相关命令</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118210451012.png" alt="image-20221118210451012"></p>
<h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p>查看本地所有的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker images –q <span class="comment"># 查看所用镜像的id</span></span><br></pre></td></tr></table></figure>

<h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><p>从网络中查找需要的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure>

<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本。 如果不知道镜像版本，可以去docker hub 搜索对应镜像查看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure>

<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>删除本地镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像<span class="built_in">id</span> <span class="comment"># 删除指定本地镜像</span></span><br><span class="line">docker rmi `docker images -q` <span class="comment"># 删除所有本地镜像</span></span><br></pre></td></tr></table></figure>

<p>演示</p>
<p>查看指定镜像版本</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://hub.docker.com</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118211729005.png" alt="image-20221118211729005"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118211903298.png" alt="image-20221118211903298"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221118212120394.png" alt="image-20221118212120394"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119140320128.png" alt="image-20221119140320128"></p>
<h2 id="Docker容器相关命令"><a href="#Docker容器相关命令" class="headerlink" title="Docker容器相关命令"></a>Docker容器相关命令</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119140728720.png" alt="image-20221119140728720"></p>
<h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps <span class="comment"># 查看正在运行的容器 </span></span><br><span class="line">docker ps –a <span class="comment"># 查看所有容器</span></span><br></pre></td></tr></table></figure>

<h3 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run 参数</span><br></pre></td></tr></table></figure>

<p>参数说明:</p>
<ul>
<li><code>-i</code>:保持容器运行。通常与 -t 同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</li>
<li><code>-t</code>:为容器重新分配一个伪输入终端，通常与 -i 同时使用。</li>
<li><code>-d</code>:以守护(后台)模式运行容器。创建一个容器在后台运行，需要使用docker exec 进入容器。退出后，容器不会关闭。</li>
<li><code>-it </code>创建的容器一般称为交互式容器，-id 创建的容器一般称为守护式容器</li>
<li><code>--name</code>:为创建的容器命名。</li>
</ul>
<p>演示</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119142049706.png" alt="image-20221119142049706"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119142219103.png" alt="image-20221119142219103"></p>
<p>以后台方式运行容器，并进入容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 ~]<span class="comment"># docker run -id --name=c2 redis:5.0 /bin/bash</span></span><br><span class="line">3842cee27f9b97fa7fb512aa53f835351f38860ffd5a4dc0e19b9e36d7aadf54</span><br><span class="line">[root@hecs-33111 ~]<span class="comment"># docker exec -it c2 /bin/bash</span></span><br><span class="line">root@3842cee27f9b:/data<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119142659334.png" alt="image-20221119142659334"></p>
<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> 参数 <span class="comment"># 退出容器，容器不会关闭</span></span><br></pre></td></tr></table></figure>

<h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop 容器名称</span><br></pre></td></tr></table></figure>

<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start 容器名称</span><br></pre></td></tr></table></figure>

<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>如果容器是运行状态则删除失败，需要停止容器才能删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器名称</span><br></pre></td></tr></table></figure>

<h3 id="查看容器信息"><a href="#查看容器信息" class="headerlink" title="查看容器信息"></a>查看容器信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect 容器名称</span><br></pre></td></tr></table></figure>

<p>演示</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119143241802.png" alt="image-20221119143241802"></p>
<h1 id="Docker容器的数据卷"><a href="#Docker容器的数据卷" class="headerlink" title="Docker容器的数据卷"></a>Docker容器的数据卷</h1><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119143344613.png" alt="image-20221119143344613"></p>
<h2 id="数据卷的概念"><a href="#数据卷的概念" class="headerlink" title="数据卷的概念"></a>数据卷的概念</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119143512053.png" alt="image-20221119143512053"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119143520561.png" alt="image-20221119143520561"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119143527847.png" alt="image-20221119143527847"></p>
<h2 id="配置数据卷"><a href="#配置数据卷" class="headerlink" title="配置数据卷"></a>配置数据卷</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run ... –v 宿主机目录(文件):容器内目录(文件) ...</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119150642838.png" alt="image-20221119150642838"></p>
<p>演示</p>
<p>创建centos容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --name=c3 -v /root/data:/root/data_container centos /bin/bash</span><br></pre></td></tr></table></figure>

<p>观察创建的目录</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119151234849.png" alt="image-20221119151234849"></p>
<p>观察到宿主机创建的数据卷</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119151303778.png" alt="image-20221119151303778"></p>
<p>在宿主机data目录下创建文件</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119151436997.png" alt="image-20221119151436997"></p>
<p>观察容器内的同步情况</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119151518008.png" alt="image-20221119151518008"></p>
<p>在容器内修改文件</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119151627073.png" alt="image-20221119151627073"></p>
<p>观察宿主机内同步情况</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119151707877.png" alt="image-20221119151707877"></p>
<p>退出并关闭centos容器</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119152447918.png" alt="image-20221119152447918"></p>
<p>观察宿主机数据卷是否还在</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119152537404.png" alt="image-20221119152537404"></p>
<p>数据卷未丢失</p>
<p>重启启动容器</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119152812943.png" alt="image-20221119152812943"></p>
<p>一个容器内同步多个数据卷</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --name=c2 -v ~/data2:/root/data2 -v ~/data3:/root/data3 centos</span><br></pre></td></tr></table></figure>

<p>容器内</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119153548750.png" alt="image-20221119153548750"></p>
<p>宿主机</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119153605557.png" alt="image-20221119153605557"></p>
<p>容器与容器之间的同步</p>
<p>创建两个容器c1,c2</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119155040681.png" alt="image-20221119155040681"></p>
<p>进入容器c1并创建文件</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119155244415.png" alt="image-20221119155244415"></p>
<p>进入容器c2观察同步情况</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119155402217.png" alt="image-20221119155402217"></p>
<h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119155535372.png" alt="image-20221119155535372"></p>
<h3 id="配置数据卷容器"><a href="#配置数据卷容器" class="headerlink" title="配置数据卷容器"></a><strong>配置数据卷容器</strong></h3><ol>
<li>创建启动c3数据卷容器，使用 –v 参数 设置数据卷</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run –it --name=c3 –v /volume centos:7 /bin/bash</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建启动 c1 c2 容器，使用 –-volumes-from 参数 设置数据卷</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run –it --name=c1 --volumes-from c3 centos:7 /bin/bash </span><br><span class="line">docker run –it --name=c2 --volumes-from c3 centos:7 /bin/bash</span><br></pre></td></tr></table></figure>

<p>演示</p>
<p>创建数据卷容器c3和两个测试同步容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 data]# docker run -id --name=c3 -v /volume centos</span><br><span class="line">5a43ebf4f327441ae82f9fdebe640f88125f03e35ddfd34e5a7e21982f39a48c</span><br><span class="line">[root@hecs-33111 data]# docker run -id --name=c1 --volumes-from c3 centos</span><br><span class="line">e2ceb7739b1f57cd5b76c2c155b23fe5d1dedb29b9b1fc80c6e7ac50f1dd9eaf</span><br><span class="line">[root@hecs-33111 data]# docker run -id --name=c2 --volumes-from c3 centos</span><br><span class="line">f8cc38cff52549d6be3e3604d679b1556fda4c5ad1641a1cee4bde7fc63da9d4</span><br></pre></td></tr></table></figure>

<p>在c1容器内修改数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 data]# docker exec -it c1 /bin/bash</span><br><span class="line">[root@e2ceb7739b1f /]# cd volume/</span><br><span class="line">[root@e2ceb7739b1f volume]# ls</span><br><span class="line">[root@e2ceb7739b1f volume]# </span><br><span class="line">[root@e2ceb7739b1f volume]# touch test.txt</span><br><span class="line">[root@e2ceb7739b1f volume]# </span><br><span class="line">[root@e2ceb7739b1f volume]# ls</span><br><span class="line">test.txt</span><br></pre></td></tr></table></figure>

<p>观察c2容器数据变化,数据已经成功同步</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119173008858.png" alt="image-20221119173008858"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119203158768.png" alt="image-20221119203158768"></p>
<h1 id="Docker应用部署"><a href="#Docker应用部署" class="headerlink" title="Docker应用部署"></a>Docker应用部署</h1><h2 id="MsSQL部署"><a href="#MsSQL部署" class="headerlink" title="MsSQL部署"></a>MsSQL部署</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119203218070.png" alt="image-20221119203218070"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119203229479.png" alt="image-20221119203229479"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119203345769.png" alt="image-20221119203345769"></p>
<h3 id="搜索mysql镜像"><a href="#搜索mysql镜像" class="headerlink" title="搜索mysql镜像"></a>搜索mysql镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119204432501.png" alt="image-20221119204432501"></p>
<h3 id="拉取mysql镜像"><a href="#拉取mysql镜像" class="headerlink" title="拉取mysql镜像"></a>拉取mysql镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.6</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119204625163.png" alt="image-20221119204625163"></p>
<h3 id="创建容器，设置端口映射、目录映射"><a href="#创建容器，设置端口映射、目录映射" class="headerlink" title="创建容器，设置端口映射、目录映射"></a>创建容器，设置端口映射、目录映射</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line">mkdir ~/mysql</span><br><span class="line">cd ~/mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=c_mysql \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure>

<ul>
<li>参数说明：<ul>
<li><strong>-p 3307:3306</strong>：将容器的 3306 端口映射到宿主机的 3307 端口。</li>
<li><strong>-v $PWD/conf:/etc/mysql/conf.d</strong>：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。配置目录</li>
<li><strong>-v $PWD/logs:/logs</strong>：将主机当前目录下的 logs 目录挂载到容器的 /logs。日志目录</li>
<li><strong>-v $PWD/data:/var/lib/mysql</strong> ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。数据目录</li>
<li><strong>-e MYSQL_ROOT_PASSWORD=123456：</strong>初始化 root 用户的密码。</li>
</ul>
</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119204847664.png" alt="image-20221119204847664"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119205037008.png" alt="image-20221119205037008"></p>
<h2 id="Tomcat部署"><a href="#Tomcat部署" class="headerlink" title="Tomcat部署"></a>Tomcat部署</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119213329980.png" alt="image-20221119213329980"></p>
<h3 id="搜索tomcat镜像"><a href="#搜索tomcat镜像" class="headerlink" title="搜索tomcat镜像"></a>搜索tomcat镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure>

<h3 id="拉取tomcat镜像"><a href="#拉取tomcat镜像" class="headerlink" title="拉取tomcat镜像"></a>拉取tomcat镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119214222638.png" alt="image-20221119214222638"></p>
<h3 id="创建容器，设置端口映射、目录映射-1"><a href="#创建容器，设置端口映射、目录映射-1" class="headerlink" title="创建容器，设置端口映射、目录映射"></a>创建容器，设置端口映射、目录映射</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span><br><span class="line">mkdir ~/tomcat</span><br><span class="line">cd ~/tomcat</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id --name=c_tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v $PWD:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat </span><br></pre></td></tr></table></figure>

<ul>
<li><p>参数说明：</p>
<ul>
<li><p><strong>-p 8080:8080：</strong>将容器的8080端口映射到主机的8080端口</p>
<p><strong>-v $PWD:/usr/local/tomcat/webapps：</strong>将主机中当前目录挂载到容器的webapps</p>
</li>
</ul>
</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119214349524.png" alt="image-20221119214349524"></p>
<h3 id="使用外部机器访问tomcat"><a href="#使用外部机器访问tomcat" class="headerlink" title="使用外部机器访问tomcat"></a>使用外部机器访问tomcat</h3><p><img src="/Users/xuwei/Desktop/codeLearning/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98docker/%E8%B5%84%E6%96%99/imgs/1573649804623.png" alt="1573649804623"></p>
<h2 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119214456006.png" alt="image-20221119214456006"></p>
<h3 id="搜索nginx镜像"><a href="#搜索nginx镜像" class="headerlink" title="搜索nginx镜像"></a>搜索nginx镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure>

<h3 id="拉取nginx镜像"><a href="#拉取nginx镜像" class="headerlink" title="拉取nginx镜像"></a>拉取nginx镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>

<h3 id="创建容器，设置端口映射、目录映射-2"><a href="#创建容器，设置端口映射、目录映射-2" class="headerlink" title="创建容器，设置端口映射、目录映射"></a>创建容器，设置端口映射、目录映射</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class="line">mkdir ~/nginx</span><br><span class="line">cd ~/nginx</span><br><span class="line">mkdir conf</span><br><span class="line">cd conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span></span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id --name=c_nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v $PWD/logs:/var/log/nginx \</span><br><span class="line">-v $PWD/html:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>参数说明：<ul>
<li><strong>-p 80:80</strong>：将容器的 80端口映射到宿主机的 80 端口。</li>
<li><strong>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf</strong>：将主机当前目录下的 /conf/nginx.conf 挂载到容器的 :/etc/nginx/nginx.conf。配置目录</li>
<li><strong>-v $PWD/logs:/var/log/nginx</strong>：将主机当前目录下的 logs 目录挂载到容器的/var/log/nginx。日志目录</li>
</ul>
</li>
</ul>
<h3 id="使用外部机器访问nginx"><a href="#使用外部机器访问nginx" class="headerlink" title="使用外部机器访问nginx"></a>使用外部机器访问nginx</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/1573652396669.png" alt="1573652396669"></p>
<h2 id="Redis部署"><a href="#Redis部署" class="headerlink" title="Redis部署"></a>Redis部署</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119215440719.png" alt="image-20221119215440719"></p>
<h3 id="搜索redis镜像"><a href="#搜索redis镜像" class="headerlink" title="搜索redis镜像"></a>搜索redis镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure>

<h3 id="拉取redis镜像"><a href="#拉取redis镜像" class="headerlink" title="拉取redis镜像"></a>拉取redis镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis:5.0</span><br></pre></td></tr></table></figure>

<h3 id="创建容器，设置端口映射"><a href="#创建容器，设置端口映射" class="headerlink" title="创建容器，设置端口映射"></a>创建容器，设置端口映射</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id --name=c_redis -p 6379:6379 redis:5.0</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221119221014974.png" alt="image-20221119221014974"></p>
<h3 id="使用外部机器连接redis"><a href="#使用外部机器连接redis" class="headerlink" title="使用外部机器连接redis"></a>使用外部机器连接redis</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./redis-cli.exe -h 192.168.149.135 -p 6379</span><br></pre></td></tr></table></figure>

<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120130715968.png" alt="image-20221120130715968"></p>
<h2 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120130749819.png" alt="image-20221120130749819"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120131008869.png" alt="image-20221120131008869"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120131751168.png" alt="image-20221120131751168"></p>
<h2 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a><strong>镜像制作</strong></h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120132440129.png" alt="image-20221120132440129"></p>
<p>演示</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120133459889.png" alt="image-20221120133459889"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120133726220.png" alt="image-20221120133726220"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120133948978.png" alt="image-20221120133948978"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120134315829.png" alt="image-20221120134315829"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120134530599.png" alt="image-20221120134530599"></p>
<h2 id="Dockerfile概念"><a href="#Dockerfile概念" class="headerlink" title="Dockerfile概念"></a>Dockerfile概念</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120134838135.png" alt="image-20221120134838135"></p>
<h2 id="Dockerfile关键字"><a href="#Dockerfile关键字" class="headerlink" title="Dockerfile关键字"></a>Dockerfile关键字</h2><table>
<thead>
<tr>
<th>关键字</th>
<th>作用</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>FROM</td>
<td>指定父镜像</td>
<td>指定dockerfile基于那个image构建</td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>作者信息</td>
<td>用来标明这个dockerfile谁写的</td>
</tr>
<tr>
<td>LABEL</td>
<td>标签</td>
<td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td>
</tr>
<tr>
<td>RUN</td>
<td>执行命令</td>
<td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td>
</tr>
<tr>
<td>CMD</td>
<td>容器启动命令</td>
<td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>入口</td>
<td>一般在制作一些执行就关闭的容器中会使用</td>
</tr>
<tr>
<td>COPY</td>
<td>复制文件</td>
<td>build的时候复制文件到image中</td>
</tr>
<tr>
<td>ADD</td>
<td>添加文件</td>
<td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td>
</tr>
<tr>
<td>ENV</td>
<td>环境变量</td>
<td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value</td>
</tr>
<tr>
<td>ARG</td>
<td>构建参数</td>
<td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td>
</tr>
<tr>
<td>VOLUME</td>
<td>定义外部可以挂载的数据卷</td>
<td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>暴露端口</td>
<td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td>
</tr>
<tr>
<td>WORKDIR</td>
<td>工作目录</td>
<td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td>
</tr>
<tr>
<td>USER</td>
<td>指定执行用户</td>
<td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td>
</tr>
<tr>
<td>HEALTHCHECK</td>
<td>健康检查</td>
<td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td>
</tr>
<tr>
<td>ONBUILD</td>
<td>触发器</td>
<td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td>
</tr>
<tr>
<td>STOPSIGNAL</td>
<td>发送信号量到宿主机</td>
<td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td>
</tr>
<tr>
<td>SHELL</td>
<td>指定执行脚本的shell</td>
<td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td>
</tr>
</tbody></table>
<h2 id="Dockerfile案例"><a href="#Dockerfile案例" class="headerlink" title="Dockerfile案例"></a>Dockerfile案例</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120163713655.png" alt="image-20221120163713655"></p>
<p>准备好springboot jar包并传至宿主机的根目录</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120164903532.png" alt="image-20221120164903532"></p>
<p>创建docker-files目录，并把jar包移动进去</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120165116968.png" alt="image-20221120165116968"></p>
<p>创建dockerfile文件并编辑</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">MAINTAINER itheima &lt;itheima@itcast.cn&gt;</span><br><span class="line">ADD HelloDocker-0.0.1-SNAPSHOT.jar app.jar</span><br><span class="line">CMD java -jar app.jar</span><br></pre></td></tr></table></figure>

<p>根据dockerfile制作镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -f ./springboot_dockerfile -t app .</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120170212253.png" alt="image-20221120170212253"></p>
<p>启动并做端口映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id -p 9000:8080 app</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120170509684.png" alt="image-20221120170509684"></p>
<p>成功访问</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120170920994.png" alt="image-20221120170920994"></p>
<h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120171246537.png" alt="image-20221120171246537"></p>
<p>编辑dockerfile文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 docker-files]# vim centos_dockerfile</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER itheima&lt;itheima@itcast.cn&gt;</span><br><span class="line">RUN yum install -y vim</span><br><span class="line">WORKDIR /usr</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>

<p>构建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 docker-files]# docker build -f centos_dockerfile -t itheima_centos:1 .</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120174043683.png" alt="image-20221120174043683"></p>
<p>创建容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name=c5 itheima_centos:1</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120174230249.png" alt="image-20221120174230249"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120174417280.png" alt="image-20221120174417280"></p>
<h1 id="Docker服务编排"><a href="#Docker服务编排" class="headerlink" title="Docker服务编排"></a>Docker服务编排</h1><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120174501970.png" alt="image-20221120174501970"></p>
<h2 id="服务编排"><a href="#服务编排" class="headerlink" title="服务编排"></a>服务编排</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120174617528.png" alt="image-20221120174617528"></p>
<h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120174712386.png" alt="image-20221120174712386"></p>
<h2 id="Docker-Compose-安装使用"><a href="#Docker-Compose-安装使用" class="headerlink" title="Docker Compose 安装使用"></a>Docker Compose 安装使用</h2><h3 id="一、安装Docker-Compose"><a href="#一、安装Docker-Compose" class="headerlink" title="一、安装Docker Compose"></a>一、安装Docker Compose</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。下面我 们以编译好的二进制包方式安装在Linux系统中。</span> </span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置文件可执行权限</span> </span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本信息</span> </span><br><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120181950479.png" alt="image-20221120181950479"></p>
<h3 id="二、卸载Docker-Compose"><a href="#二、卸载Docker-Compose" class="headerlink" title="二、卸载Docker Compose"></a>二、卸载Docker Compose</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">二进制包方式安装的，删除二进制文件即可</span></span><br><span class="line">rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="三、-使用docker-compose编排nginx-springboot项目"><a href="#三、-使用docker-compose编排nginx-springboot项目" class="headerlink" title="三、 使用docker compose编排nginx+springboot项目"></a>三、 使用docker compose编排nginx+springboot项目</h3><ol>
<li>创建docker-compose目录</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/docker-compose</span><br><span class="line">cd ~/docker-compose</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写 docker-compose.yml 文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">   image: nginx</span><br><span class="line">   ports:</span><br><span class="line">    - 80:80</span><br><span class="line">   links:</span><br><span class="line">    - app</span><br><span class="line">   volumes:</span><br><span class="line">    - ./nginx/conf.d:/etc/nginx/conf.d</span><br><span class="line">  app:</span><br><span class="line">    image: app</span><br><span class="line">    expose:</span><br><span class="line">      - &quot;8080&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120182206246.png" alt="image-20221120182206246"></p>
<ol start="3">
<li>创建./nginx/conf.d目录</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ./nginx/conf.d</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120182309055.png" alt="image-20221120182309055"></p>
<ol start="4">
<li>在./nginx/conf.d目录下 编写itheima.conf文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    access_log off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://app:8080;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120182520017.png" alt="image-20221120182520017"></p>
<ol start="5">
<li>在~/docker-compose 目录下 使用docker-compose 启动容器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120182758615.png" alt="image-20221120182758615"></p>
<ol start="6">
<li>测试访问</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://192.168.149.135/hello</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120182940496.png" alt="image-20221120182940496"></p>
<h1 id="Docker私有仓库"><a href="#Docker私有仓库" class="headerlink" title="Docker私有仓库"></a>Docker私有仓库</h1><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120183215288.png" alt="image-20221120183215288"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120183254474.png" alt="image-20221120183254474"></p>
<h3 id="一、私有仓库搭建"><a href="#一、私有仓库搭建" class="headerlink" title="一、私有仓库搭建"></a>一、私有仓库搭建</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、拉取私有仓库镜像</span> </span><br><span class="line">docker pull registry</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、启动私有仓库容器</span> </span><br><span class="line">docker run -id --name=registry -p 5000:5000 registry</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、打开浏览器 输入地址http://私有仓库服务器ip:5000/v2/_catalog，看到&#123;<span class="string">&quot;repositories&quot;</span>:[]&#125; 表示私有仓库 搭建成功</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、修改daemon.json</span>   </span><br><span class="line">vim /etc/docker/daemon.json    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip</span> </span><br><span class="line">&#123;&quot;insecure-registries&quot;:[&quot;私有仓库服务器ip:5000&quot;]&#125; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、重启docker 服务</span> </span><br><span class="line">systemctl restart docker</span><br><span class="line">docker start registry</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120201936298.png" alt="image-20221120201936298"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120202727139.png" alt="image-20221120202727139"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120203058041.png" alt="image-20221120203058041"></p>
<h3 id="二、将镜像上传至私有仓库"><a href="#二、将镜像上传至私有仓库" class="headerlink" title="二、将镜像上传至私有仓库"></a>二、将镜像上传至私有仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、标记镜像为私有仓库的镜像</span>     </span><br><span class="line">docker tag centos:7 私有仓库服务器IP:5000/centos:7</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、上传标记的镜像</span>     </span><br><span class="line">docker push 私有仓库服务器IP:5000/centos:7</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120203333919.png" alt="image-20221120203333919"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120204528268.png" alt="image-20221120204528268"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120204549966.png" alt="image-20221120204549966"></p>
<h3 id="三、-从私有仓库拉取镜像"><a href="#三、-从私有仓库拉取镜像" class="headerlink" title="三、 从私有仓库拉取镜像"></a>三、 从私有仓库拉取镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拉取镜像</span> </span><br><span class="line">docker pull 私有仓库服务器ip:5000/centos:7</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120204927944.png" alt="image-20221120204927944"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120205000360.png" alt="image-20221120205000360"></p>
<h1 id="Docker-相关观念"><a href="#Docker-相关观念" class="headerlink" title="Docker 相关观念"></a>Docker 相关观念</h1><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120205102272.png" alt="image-20221120205102272"></p>
<h2 id="Docker容器化虚拟化与传统虚拟机比较"><a href="#Docker容器化虚拟化与传统虚拟机比较" class="headerlink" title="Docker容器化虚拟化与传统虚拟机比较"></a>Docker容器化虚拟化与传统虚拟机比较</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120205141989.png" alt="image-20221120205141989"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Docker/image-20221120205344250.png" alt="image-20221120205344250"></p>
]]></content>
      <categories>
        <category>运维部署</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>面试-Spring</title>
    <url>/2022/08/29/%E9%9D%A2%E8%AF%95-Spring/</url>
    <content><![CDATA[<h1 id="Spring-基础"><a href="#Spring-基础" class="headerlink" title="Spring 基础"></a><strong>Spring 基础</strong></h1><h2 id="什么是-Spring-框架"><a href="#什么是-Spring-框架" class="headerlink" title="什么是 Spring 框架?"></a>什么是 Spring 框架?</h2><p>Spring 是一款开源的轻量级 Java 开发框架，旨在提高开发人员的开发效率以及系统的可维护性。</p>
<p>Spring 翻译过来就是春天的意思，可见其目标和使命就是为 Java 程序员带来春天啊！感动！</p>
<p>题外话 ： 语言的流行通常需要一个杀手级的应用，Spring 就是 Java 生态的一个杀手级的应用框架。</p>
<p>我们一般说 Spring 框架指的都是 Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发。</p>
<p>比如说 Spring 自带 IoC（Inverse of Control:控制反转） 和 AOP(Aspect-Oriented Programming:面向切面编程)、可以很方便地对数据库进行访问、可以很方便地集成第三方组件（电子邮件，任务，调度，缓存等等）、对单元测试支持比较好、支持 RESTful Java 应用程序的开发。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829094121471.png" alt="image-20220829094121471"></p>
<p>Spring 最核心的思想就是不重新造轮子，开箱即用！</p>
<p>Spring 提供的核心功能主要是 IoC 和 AOP。学习 Spring ，一定要把 IoC 和 AOP 的核心思想搞懂！</p>
<ul>
<li><p>Spring 官网：<a href="https://spring.io/">https://spring.io/open in new window</a></p>
</li>
<li><p>Github 地址： <a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p>
</li>
</ul>
<h2 id="Spring的特性"><a href="#Spring的特性" class="headerlink" title="Spring的特性"></a>Spring的特性</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829094232799.png" alt="image-20220829094232799"></p>
<p>Spring有很多优点：</p>
<p><strong>1.IOC 和 DI 的支持</strong></p>
<p>Spring 的核心就是一个大的工厂容器，可以维护所有对象的创建和依赖关系，Spring 工厂用<br>于生成 Bean，并且管理 Bean 的生命周期，实现 <strong>高内聚低耦合</strong> 的设计理念。</p>
<p><strong>2.AOP 编程的支持</strong></p>
<p>Spring 提供了 <strong>面向切面编程</strong> ，可以方便的实现对程序进行权限拦截、运行监控等切面功能。</p>
<p><strong>3. 声明式事务的支持</strong></p>
<p>支持通过配置就来完成对事务的管理，而不需要通过硬编码的方式，以前重复的一些事务提<br>交、回滚的JDBC代码，都可以不用自己写了。</p>
<p><strong>4. 快捷测试的支持</strong></p>
<p>Spring 对 Junit 提供支持，可以通过 <strong>注解</strong> 快捷地测试 Spring 程序。</p>
<p><strong>5. 快速集成功能</strong></p>
<p>方便集成各种优秀框架，Spring 不排斥各种优秀的开源框架，其内部提供了对各种优秀框架<br>（如：Struts、Hibernate、MyBatis、Quartz 等）的直接支持。</p>
<p><strong>6. 复杂API模板封装</strong></p>
<p>Spring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等）都提供了模板<br>化的封装，这些封装 API 的提供使得应用难度大大降低。</p>
<h2 id="列举一些重要的-Spring-模块？"><a href="#列举一些重要的-Spring-模块？" class="headerlink" title="列举一些重要的 Spring 模块？"></a>列举一些重要的 Spring 模块？</h2><p>下图对应的是 Spring4.x 版本。目前最新的 5.x 版本中 Web 模块的 Portlet 组件已经被废弃掉，同时增加了用于异步响应式处理的 WebFlux 组件。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829095453700.png" alt="image-20220829095453700"></p>
<p><strong>Spring Core</strong></p>
<p>核心模块， Spring 其他所有的功能基本都需要依赖于该模块，主要提供 IoC 依赖注入功能的支持。</p>
<p><strong>Spring Aspects</strong></p>
<p>该模块为与 AspectJ 的集成提供支持。</p>
<p><strong>Spring AOP</strong></p>
<p>提供了面向切面的编程实现。</p>
<p><strong>Spring Data Access/Integration ：</strong></p>
<p>Spring Data Access/Integration 由 5 个模块组成：</p>
<ul>
<li><p>spring-jdbc : 提供了对数据库访问的抽象 JDBC。不同的数据库都有自己独立的 API 用于操作数据库，而 Java 程序只需要和 JDBC API 交互，这样就屏蔽了数据库的影响。</p>
</li>
<li><p>spring-tx : 提供对事务的支持。</p>
</li>
<li><p>spring-orm : 提供对 Hibernate 等 ORM 框架的支持。</p>
</li>
<li><p>spring-oxm ： 提供对 Castor 等 OXM 框架的支持。</p>
</li>
<li><p>spring-jms : Java 消息服务。</p>
</li>
</ul>
<p><strong>Spring Web</strong></p>
<p>Spring Web 由 4 个模块组成：</p>
<ul>
<li><p>spring-web ：对 Web 功能的实现提供一些最基础的支持。</p>
</li>
<li><p>spring-webmvc ： 提供对 Spring MVC 的实现。</p>
</li>
<li><p>spring-websocket ： 提供了对 WebSocket 的支持，WebSocket 可以让客户端和服务端进行双向通信。</p>
</li>
<li><p>spring-webflux ：提供对 WebFlux 的支持。WebFlux 是 Spring Framework 5.0 中引入的新的响应式框架。与 Spring MVC 不同，它不需要 Servlet API，是完全异步.</p>
</li>
</ul>
<p><strong>Spring Test</strong></p>
<p>Spring 团队提倡测试驱动开发（TDD）。有了控制反转 (IoC)的帮助，单元测试和集成测试变得更简单。</p>
<p>Spring 的测试模块对 JUnit（单元测试框架）、TestNG（类似 JUnit）、Mockito（主要用来 Mock 对象）、PowerMock（解决 Mockito 的问题比如无法模拟 final, static， private 方法）等等常用的测试框架支持的都比较好。</p>
<h2 id="Spring有哪些常用注解呢？"><a href="#Spring有哪些常用注解呢？" class="headerlink" title="Spring有哪些常用注解呢？"></a>Spring有哪些常用注解呢？</h2><p>Spring有很多模块，甚至广义的SpringBoot、SpringCloud也算是Spring的一部分，我们来分模块，按功能来看一下一些常用的注解：</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829095848193.png" alt="image-20220829095848193" style="zoom:67%;" />

<p><strong>Web</strong> :</p>
<p><strong>@Controller</strong>：组合注解（组合了@Component注解），应用在MVC层（控制层）。<br><strong>@RestController</strong>：该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody。<br><strong>@RequestMapping</strong>：用于映射Web请求，包括访问路径和参数。如果是Restful风格接又，还可以根据请求类型使用不同的注解：<br><strong>@GetMapping</strong><br><strong>@PostMapping</strong><br><strong>@PutMapping</strong><br><strong>@DeleteMapping</strong><br><strong>@ResponseBody</strong>：支持将返回值放在response内，而不是一个页面，通常用户返回json数据。<br><strong>@RequestBody</strong>：允许request的参数在request体中，而不是在直接连接在地址后面。<br><strong>@PathVariable</strong>：用于接收路径参数，比如@RequestMapping(“/hello/{name}”)申明的路径，将注解放在参数中前，即可获取该值，通常作为Restful的接口实现方法。</p>
<p><strong>容器</strong> :</p>
<p><strong>@Component</strong>：表示一个带注释的类是一个“组件”，成为Spring管理的Bean。当使用基于注解的配置和类路径扫描时，这些类被视为自动检测的候选对象。同时@Component还是一个元注解。<br><strong>@Service</strong>：组合注解（组合了@Component注解），应用在service层（业务逻辑层）。<br><strong>@Repository</strong>：组合注解（组合了@Component注解），应用在dao层（数据访问层）。<br><strong>@Autowired</strong>：Spring提供的工具（由Spring的依赖注入工具（BeanPostProcessor、BeanFactoryPostProcessor）自动注入）。<br><strong>@Qualifier</strong>：该注解通常跟 @Autowired 一起使用，当想对注入的过程做更多的控制，@Qualifier 可帮助配置，比如两个以上相同类型的 Bean 时 Spring 无法抉择，用到此注解<br><strong>@Configuration</strong>：声明当前类是一个配置类（相当于一个Spring配置的xml文件）<br><strong>@Value</strong>：可用在字段，构造器参数跟方法参数，指定一个默认值，支持 #{} 跟 ${} 两个方式。一般将 SpringbBoot 中的 application.properties 配置的属性值赋值给变量。<br><strong>@Bean</strong>：注解在方法上，声明当前方法的返回值为一个Bean。返回的Bean对应的类中可以定义init()方法和destroy()方法，然后在@Bean(initMethod=”init”,destroyMethod=”destroy”)定义，在构造之后执行init，在销毁之前执行destroy。<br><strong>@Scope</strong>:定义我们采用什么模式去创建Bean（方法上，得有@Bean） 其设置类型包括：Singleton 、Prototype、Request 、 Session、GlobalSession。</p>
<p><strong>AOP :</strong></p>
<p><strong>@Aspect</strong>:声明一个切面（类上） 使用@After、@Before、@Around定义建言（advice），<br>可直接将拦截规则（切点）作为参数。<br><strong>@After</strong> ：在方法执行之后执行（方法上）。<br><strong>@Before</strong> ： 在方法执行之前执行（方法上）。<br><strong>@Around</strong> ： 在方法执行之前与之后执行（方法上）。<br><strong>@PointCut</strong> ： 声明切点 在java配置类中使用@EnableAspectJAutoProxy注解开启Spring对AspectJ代理的支持（类上）。</p>
<p><strong>事务</strong>：<br><strong>@Transactional</strong>：在要开启事务的方法上使用@Transactional注解，即可声明式开启事务。</p>
<h2 id="Spring-Spring-MVC-Spring-Boot-之间什么关系"><a href="#Spring-Spring-MVC-Spring-Boot-之间什么关系" class="headerlink" title="Spring,Spring MVC,Spring Boot 之间什么关系?"></a>Spring,Spring MVC,Spring Boot 之间什么关系?</h2><p>很多人对 <strong>Spring,Spring MVC,Spring Boot</strong> 这三者傻傻分不清楚！这里简单介绍一下这三者，其实很简单，没有什么高深的东西。</p>
<p>Spring 包含了多个功能模块（上面刚刚提高过），其中最重要的是 Spring-Core（主要提供 IoC 依赖注入功能的支持） 模块， Spring 中的其他模块（比如 Spring MVC）的功能实现基本都需要依赖于该模块。</p>
<p>下图对应的是 Spring4.x 版本。目前最新的 5.x 版本中 Web 模块的 Portlet 组件已经被废弃掉，同时增加了用于异步响应式处理的 WebFlux 组件。</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829100915670.png" alt="image-20220829100915670" style="zoom:80%;" />

<p>Spring MVC 是 Spring 中的一个很重要的模块，主要赋予 **Spring 快速构建 MVC 架构的 Web 程序的能力。MVC 是模型(Model)、视图(View)、控制器(Controller)**的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829101135375.png" alt="image-20220829101135375"></p>
<p>使用 Spring 进行开发各种配置过于麻烦比如开启某些 Spring 特性时，需要用 XML 或 Java 进行显式配置。于是，Spring Boot 诞生了！</p>
<p>Spring 旨在简化 J2EE 企业应用程序开发。Spring Boot 旨在简化 Spring 开发（减少配置文件，开箱即用！）。</p>
<p>Spring Boot 只是简化了配置，如果你需要构建 MVC 架构的 Web 程序，你还是需要使用 Spring MVC 作为 MVC 框架，只是说 Spring Boot 帮你简化了 Spring MVC 的很多配置，真正做到开箱即用！</p>
<h1 id="Spring-IOC-amp-AOP"><a href="#Spring-IOC-amp-AOP" class="headerlink" title="Spring IOC &amp; AOP"></a><strong>Spring IOC &amp; AOP</strong></h1><h2 id="谈谈自己对于-Spring-IoC-的了解"><a href="#谈谈自己对于-Spring-IoC-的了解" class="headerlink" title="谈谈自己对于 Spring IoC 的了解"></a>谈谈自己对于 Spring IoC 的了解</h2><p><strong>IoC（Inverse of Control:控制反转）</strong> 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。</p>
<p><strong>为什么叫控制反转？</strong></p>
<ul>
<li><p><strong>控制</strong> ：指的是对象创建（实例化、管理）的权力</p>
</li>
<li><p><strong>反转</strong> ：控制权交给外部环境（Spring 框架、IoC 容器）</p>
</li>
</ul>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829101428860.png" alt="image-20220829101428860" style="zoom:80%;" />

<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829101503950.png" alt="image-20220829101503950" style="zoom:67%;" />

<p>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。 IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。</p>
<p>在实际项目中一个 Service 类可能依赖了很多其他的类，假如我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。如果利用 IoC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。</p>
<p>在 Spring 中， IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 Map（key，value），Map 中存放的是各种对象。</p>
<p>Spring 时代我们一般通过 XML 文件来配置 Bean，后来开发人员觉得 XML 文件来配置不太好，于是 SpringBoot 注解配置就慢慢开始流行起来。</p>
<p><strong>为什么要使⽤IOC呢？</strong></p>
<p>最主要的是两个字 解耦 ，硬编码会造成对象间的过度耦合，使用IOC之后，我们可以不用关心对象间的依赖，专心开发应用就行。</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829101858257.png" alt="image-20220829101858257" style="zoom:67%;" />

<p>DI（依赖注入） ：指的是容器在实例化对象的时候把它依赖的类注入给它。有的说法IOC和DI是一回事，有的说法是IOC是思想，DI是IOC的实现。</p>
<hr>
<h2 id="能简单说⼀下Spring-IOC的实现机制吗？"><a href="#能简单说⼀下Spring-IOC的实现机制吗？" class="headerlink" title="能简单说⼀下Spring IOC的实现机制吗？"></a>能简单说⼀下Spring IOC的实现机制吗？</h2><p>Spring的IOC本质就是一个大工厂，我们想想一个工厂是怎么运行的呢？</p>
<p><strong>生产产品 ：</strong></p>
<p>一个工厂最核心的功能就是生产产品。在Spring里，不用Bean自己来实例化，而是交给Spring，应该怎么实现呢？——答案毫无疑问， 反射 。那么这个厂子的生产管理是怎么做的？你应该也知道—— 工厂模式 。</p>
<p><strong>库存产品 ：</strong></p>
<p>工厂一般都是有库房的，用来库存产品，毕竟生产的产品不能立马就拉走。Spring我们都知道是一个容器，这个容器里存的就是对象，不能每次来取对象，都得现场来反射创建对象，得把创建出的对象存起来。</p>
<p><strong>订单处理</strong> ：</p>
<p>还有最重要的一点，工厂根据什么来提供产品呢？订单。这些订单可能五花八门，有线上签签的、有到工厂签的、还有工厂销售上门签的……最后经过处理，指导工厂的出货。在Spring里，也有这样的订单，它就是我们bean的定义和依赖关系，可以是xml形式，也可以是我们最熟悉的注解形式。</p>
<p>我们简单地实现一个mini版的Spring IOC：</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829102611661.png" alt="image-20220829102611661" style="zoom:80%;" />

<p>Bean定义：</p>
<p>Bean通过一个配置文件定义，把它解析成一个类型。</p>
<p>beans.properties<br>这里直接用了最方便解析的properties，这里直接用一个&lt;key,value&gt;类型的配置来代表Bean的定义，其中key是beanName，value是class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">userDao:cn.fighter3.bean.UserDao</span><br></pre></td></tr></table></figure>

<p>BeanDefinition.java<br>bean定义类，配置文件中bean定义对应的实体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanDefinition</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> String beanName;</span><br><span class="line"> <span class="keyword">private</span> Class beanClass;</span><br><span class="line"> <span class="comment">//省略getter、setter </span></span><br><span class="line"> &#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ResourceLoader.java<br>资源加载器，用来完成配置文件中配置的加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceLoader</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, BeanDefinition&gt; <span class="title function_">getResource</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"> <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span></span><br><span class="line">ResourceLoader.class.getResourceAsStream(<span class="string">&quot;/beans.properties&quot;</span>);</span><br><span class="line">      properties.load(inputStream);</span><br><span class="line">     Iterator&lt;String&gt; it =</span><br><span class="line">properties.stringPropertyNames().iterator();</span><br><span class="line">     <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> it.next();</span><br><span class="line">         <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> properties.getProperty(key);</span><br><span class="line">         <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>();</span><br><span class="line">         beanDefinition.setBeanName(key);</span><br><span class="line">         <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">         beanDefinition.setBeanClass(clazz);</span><br><span class="line">         beanDefinitionMap.put(key, beanDefinition);</span><br><span class="line">         &#125;</span><br><span class="line">         inputStream.close();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> beanDefinitionMap;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>BeanRegister.java<br>对象注册器，这里用于单例bean的缓存，我们大幅简化，默认所有bean都是单例的。可以看到所谓单例注册，也很简单，不过是往HashMap里存对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanRegister</span> &#123;</span><br><span class="line"> <span class="comment">//单例Bean缓存</span></span><br><span class="line"> <span class="keyword">private</span> Map&lt;String, Object&gt; singletonMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">32</span>);</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取单例Bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName bean名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> Object <span class="title function_">getSingletonBean</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> singletonMap.get(beanName);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册单例bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerSingletonBean</span><span class="params">(String beanName, Object bean)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (singletonMap.containsKey(beanName)) &#123;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> singletonMap.put(beanName, bean);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>BeanFactory.java</li>
</ul>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829103144117.png" alt="image-20220829103144117" style="zoom:80%;" />

<p>对象工厂，我们最 核心 的一个类，在它初始化的时候，创建了bean注册器，完成了资源的加载。<br>获取bean的时候，先从单例缓存中取，如果没有取到，就创建并注册一个bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">     <span class="keyword">private</span> BeanRegister beanRegister;</span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">BeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="comment">//创建bean注册器</span></span><br><span class="line">         beanRegister = <span class="keyword">new</span> <span class="title class_">BeanRegister</span>();</span><br><span class="line">         <span class="comment">//加载资源</span></span><br><span class="line">         <span class="built_in">this</span>.beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">ResourceLoader</span>().getResource();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName bean名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">     <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">         <span class="comment">//从bean缓存中取</span></span><br><span class="line">         <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> beanRegister.getSingletonBean(beanName);</span><br><span class="line">         <span class="keyword">if</span> (bean != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//根据bean定义，创建bean</span></span><br><span class="line">         <span class="keyword">return</span> createBean(beanDefinitionMap.get(beanName));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建Bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanDefinition bean定义</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">     <span class="keyword">private</span> Object <span class="title function_">createBean</span><span class="params">(BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> beanDefinition.getBeanClass().newInstance();</span><br><span class="line"> <span class="comment">//缓存bean</span></span><br><span class="line"></span><br><span class="line">        beanRegister.registerSingletonBean(beanDefinition.getBeanName(),</span><br><span class="line">        bean);</span><br><span class="line">         <span class="keyword">return</span> bean;</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e)</span><br><span class="line">&#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试 <ul>
<li>UserDao.java<br>我们的Bean类，很简单</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryUserInfo</span><span class="params">()</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;A good man.&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>单元测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiTest</span> &#123;</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_BeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//1.创建bean⼯⼚(同时完成了加载资源、创建注册单例bean注册器的操作)</span></span><br><span class="line">    <span class="type">BeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanFactory</span>();</span><br><span class="line">    <span class="comment">//2.第⼀次获取bean（通过反射创建bean，缓存bean）</span></span><br><span class="line">     <span class="type">UserDao</span> <span class="variable">userDao1</span> <span class="operator">=</span> (UserDao) beanFactory.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">     userDao1.queryUserInfo();</span><br><span class="line">     <span class="comment">//3.第⼆次获取bean（从缓存中获取bean）</span></span><br><span class="line">     <span class="type">UserDao</span> <span class="variable">userDao2</span> <span class="operator">=</span> (UserDao) beanFactory.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">     userDao2.queryUserInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A good man.</span><br><span class="line">A good man.</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="谈谈自己对于-AOP-的了解"><a href="#谈谈自己对于-AOP-的了解" class="headerlink" title="谈谈自己对于 AOP 的了解"></a>谈谈自己对于 AOP 的了解</h2><p>AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829104652577.png" alt="image-20220829104652577" style="zoom:80%;" />

<p>具体来说，假如我现在要crud写一堆业务，可是如何业务代码前后前后进行打印日志和参数的校验呢？</p>
<p>我们可以把日志记录和数据校验可重用的功能模块分离出来，然后在程序的执行的合适的地方动态地植入这些代码并执行。这样就简化了代码的书写。</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829104940660.png" alt="image-20220829104940660" style="zoom:80%;" />

<p>业务逻辑代码中没有参和通用逻辑的代码，业务模块更简洁，只包含核心业务代码。实现了业务逻辑和通用逻辑的代码分离，便于维护和升级，降低了业务逻辑和通用逻辑的耦合性。</p>
<p>AOP 可以将遍布应用各处的功能分离出来形成可重用的组件。在编译期间、装载期间或运行期间实现在不修改源代码的情况下给程序动态添加功能。从而实现对业务逻辑的隔离，提高代码的模块化能力。</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829105759783.png" alt="image-20220829105759783" style="zoom:80%;" />

<p>AOP 的核心其实就是 动态代理 ，如果是实现了接又的话就会使用 JDK 动态代理，否则使用CGLIB 代理，主要应用于处理一些具有横切性质的系统级服务，如日志收集、事务管理、安全检查、缓存、对象池管理等。</p>
<p>Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 <strong>JDK Proxy</strong>，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 <strong>Cglib</strong> 生成一个被代理对象的子类来作为代理，如下图所示：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829105922451.png"></p>
<p>当然你也可以使用 <strong>AspectJ</strong> ！Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。</p>
<h2 id="AOP有哪些核心概念？"><a href="#AOP有哪些核心概念？" class="headerlink" title="AOP有哪些核心概念？"></a>AOP有哪些核心概念？</h2><ul>
<li><p><strong>切面 （Aspect）</strong>：类是对物体特征的抽象，切面就是对横切关注点的抽象</p>
</li>
<li><p><strong>连接点 （Joinpoint）</strong>：被拦截到的点，因为 Spring 只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</p>
</li>
<li><p><strong>切点 （Pointcut）</strong>：对连接点进行拦截的定位</p>
</li>
<li><p><strong>通知 （Advice）</strong>：所谓通知指的就是指拦截到连接点之后要执行的代码，也可以称作增强</p>
</li>
<li><p><strong>目标对象 （Target）</strong>：代理的目标对象</p>
</li>
<li><p><strong>织入 （Weabing）</strong>：织入是将增强添加到目标类的具体连接点上的过程。</p>
<ul>
<li><p><strong>编译期织入</strong>：切面在目标类编译时被织入</p>
</li>
<li><p><strong>类加载期织入</strong>：切面在目标类加载到JVM时被织入。需要特殊的类加载器，它可以在目标类被引入应用之前增强该目标类的字节码。</p>
</li>
<li><p><strong>运行期织入</strong>：切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。SpringAOP就是以这种方式织入切面。Spring采用运行期织入，而AspectJ采用编译期织入和类加载器织入。</p>
</li>
<li><p><strong>引介 （introduction）</strong>：引介是一种特殊的增强，可以动态地为类添加一些属性和方法</p>
</li>
</ul>
</li>
</ul>
<h2 id="AOP有哪些环绕方式？"><a href="#AOP有哪些环绕方式？" class="headerlink" title="AOP有哪些环绕方式？"></a>AOP有哪些环绕方式？</h2><p>AOP 一般有 <strong>5 种</strong> 环绕方式：</p>
<ul>
<li><strong>前置通知 (@Before)</strong></li>
<li><strong>返回通知 (@AfterReturning)</strong></li>
<li><strong>异常通知 (@AfterThrowing)</strong></li>
<li><strong>后置通知 (@After)</strong></li>
<li><strong>环绕通知 (@Around)</strong></li>
</ul>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829110716136.png" alt="image-20220829110716136" style="zoom:80%;" />

<p>多个切面的情况下，可以通过 @Order 指定先后顺序，数字越小，优先级越高。</p>
<hr>
<h2 id="说说你平时有用到AOP吗？"><a href="#说说你平时有用到AOP吗？" class="headerlink" title="说说你平时有用到AOP吗？"></a>说说你平时有用到AOP吗？</h2><p>SpringBoot项目中，利用AOP打印接又的入参和出参日志，以及执行时间，还是比较快捷的。</p>
<p>引入依赖：引入AOP依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自定义注解：自定义一个注解作为切点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebLog &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置AOP切面：</p>
<p><strong>@Aspect</strong>：标识切面<br><strong>@Pointcut</strong>：设置切点，这里以自定义注解为切点，定义切点有很多其它种方式，自定<br>义注解是比较常用的一种。<br><strong>@Before</strong>：在切点之前织入，打印了一些入参信息<br><strong>@Around</strong>：环绕切点，打印返回参数和接又执行时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebLogAspect</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span>LoggerFactory.getLogger(WebLogAspect.class);</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 以自定义 <span class="doctag">@WebLog</span> 注解为切点</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(cn.fighter3.spring.aop_demo.WebLog)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">webLog</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 在切点之前织入</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Before(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// 开始打印请求日志</span></span><br><span class="line">    <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span></span><br><span class="line">    (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line">    <span class="comment">// 打印请求相关参数</span></span><br><span class="line">    logger.info(<span class="string">&quot;========================================== Start</span></span><br><span class="line"><span class="string">    ==========================================&quot;</span>);</span><br><span class="line">    <span class="comment">// 打印请求 url</span></span><br><span class="line">    logger.info(<span class="string">&quot;URL : &#123;&#125;&quot;</span>,</span><br><span class="line">    request.getRequestURL().toString());</span><br><span class="line">    <span class="comment">// 打印 Http method</span></span><br><span class="line">    logger.info(<span class="string">&quot;HTTP Method : &#123;&#125;&quot;</span>, request.getMethod());</span><br><span class="line">    <span class="comment">// 打印调用 controller 的全路径以及执行方法</span></span><br><span class="line">    logger.info(<span class="string">&quot;Class Method : &#123;&#125;.&#123;&#125;&quot;</span>,</span><br><span class="line">    joinPoint.getSignature().getDeclaringTypeName(),</span><br><span class="line">    joinPoint.getSignature().getName());</span><br><span class="line">    <span class="comment">// 打印请求的 IP</span></span><br><span class="line">    logger.info(<span class="string">&quot;IP : &#123;&#125;&quot;</span>, request.getRemoteAddr());</span><br><span class="line">    <span class="comment">// 打印请求入参</span></span><br><span class="line">    logger.info(<span class="string">&quot;Request Args : &#123;&#125;&quot;</span>,<span class="keyword">new</span></span><br><span class="line">    <span class="title class_">ObjectMapper</span>().writeValueAsString(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 在切点之后织入</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@After(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfter</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// 结束后打个分隔线，方便查看</span></span><br><span class="line">    logger.info(<span class="string">&quot;===========================================End===========================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 环绕</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Around(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span></span><br><span class="line">    <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">//开始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">    <span class="comment">// 打印出参</span></span><br><span class="line">	logger.info(<span class="string">&quot;Response Args : &#123;&#125;&quot;</span>, <span class="keyword">new</span></span><br><span class="line">    <span class="title class_">ObjectMapper</span>().writeValueAsString(result));</span><br><span class="line">    <span class="comment">// 执行耗时</span></span><br><span class="line">    logger.info(<span class="string">&quot;Time-Consuming : &#123;&#125; ms&quot;</span>,</span><br><span class="line">    System.currentTimeMillis() - startTime);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>使用：只需要在接又上加上自定义注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@WebLog(desc = &quot;这是一个欢迎接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String name)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span>+name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：可以看到日志打印了入参、出参和执行时间</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829135120441.png" alt="image-20220829135120441"></p>
<h2 id="说说JDK-动态代理和-CGLIB-代理-？"><a href="#说说JDK-动态代理和-CGLIB-代理-？" class="headerlink" title="说说JDK 动态代理和 CGLIB 代理 ？"></a>说说JDK 动态代理和 CGLIB 代理 ？</h2><p>Spring的AOP是通过<strong>动态代理</strong>来实现的，动态代理主要有两种方式<strong>JDK动态代理</strong>和<strong>Cglib动态代理</strong>，这两种动态代理的使用和原理有些不同。</p>
<p><strong>JDK 动态代理</strong></p>
<p><strong>1.</strong> <strong>Interface</strong>：对于 JDK 动态代理，目标类需要实现一个Interface。<br><strong>2.</strong> <strong>InvocationHandler</strong>：InvocationHandler是一个接口，可以通过实现这个接口，定义横切逻辑，再通过反射机制（invoke）调用目标类的代码，在次过程，可能包装逻辑，对目标方法进行前置后置处理。<br><strong>3.</strong> <strong>Proxy</strong>：Proxy利用InvocationHandler动态创建一个符合目标类实现的接口的实例，生成目标类的代理对象。</p>
<p><strong>CgLib 动态代理</strong></p>
<p><strong>1.</strong> 使用JDK创建代理有一大限制，它只能为接又创建代理实例，而CgLib 动态代理就没有这个限制。<br><strong>2.</strong> CgLib 动态代理是使用字节码处理框架 ASM，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。<br><strong>3.</strong> CgLib 创建的动态代理对象性能比 JDK 创建的动态代理对象的性能高不少，但是 CGLib在创建代理对象时所花费的时间却比 JDK 多得多，所以对于单例的对象，因为无需频繁创建对象，用 CGLib 合适，反之，使用 JDK 方式要更为合适一些。同时，由于 CGLib 由于是采用动态创建子类的方法，对于 final 方法，无法进行代理。</p>
<p>我们来看一个常见的小场景，客服中转，解决用户问题：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829135838484.png" alt="image-20220829135838484"></p>
<p><strong>JDK动态代理实现：</strong></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829135923848.png" alt="image-20220829135923848"></p>
<ul>
<li>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ISolver</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>目标类:需要实现对应接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solver</span> <span class="keyword">implements</span> <span class="title class_">ISolver</span> &#123;</span><br><span class="line">	    <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> &#123;</span><br><span class="line">        	System.out.println(<span class="string">&quot;疯狂掉头发解决问题......&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态代理工厂:ProxyFactory，直接用反射方式生成一个目标对象的代理对象，这里用了一个匿名内部类方式重写InvocationHandler方法，实现接口重写也差不多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">	<span class="comment">// 维护一个目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">    	<span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 为目标对象生成代理对象</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxyInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method,Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        	System.out.println(<span class="string">&quot;请问有什么可以帮到您？&quot;</span>);</span><br><span class="line">         	<span class="comment">// 调用目标对象方法</span></span><br><span class="line">        	<span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> method.invoke(target,args);</span><br><span class="line">        	System.out.println(<span class="string">&quot;问题已经解决啦！&quot;</span>);</span><br><span class="line">        	<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端：Client，生成一个代理对象实例，通过代理对象调用目标对象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//目标对象:程序员</span></span><br><span class="line">		<span class="type">ISolver</span> <span class="variable">developer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solver</span>();</span><br><span class="line">		<span class="comment">//代理：客服小姐姐</span></span><br><span class="line">		<span class="type">ISolver</span> <span class="variable">csProxy</span> <span class="operator">=</span> (ISolver) <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(developer).getProxyInstance();</span><br><span class="line">		<span class="comment">//目标方法：解决问题</span></span><br><span class="line">		csProxy.solve();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Cglib动态代理实现：</strong></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829141015357.png" alt="image-20220829141015357"></p>
<p>目标类：Solver，这里目标类不用再实现接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> &#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;疯狂掉头发解决问题......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态代理工厂：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//维护一个目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">    	<span class="built_in">this</span>.target = target;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为目标对象生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getProxyInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//工具类</span></span><br><span class="line">    <span class="type">Enhancer</span> <span class="variable">en</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">    <span class="comment">//设置父类</span></span><br><span class="line">    en.setSuperclass(target.getClass());</span><br><span class="line">    <span class="comment">//设置回调函数</span></span><br><span class="line">    en.setCallback(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">//创建子类对象代理</span></span><br><span class="line">    <span class="keyword">return</span> en.create();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, Method method, Object[] args,MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请问有什么可以帮到您？&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行目标对象的方法</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">    System.out.println(<span class="string">&quot;问题已经解决啦！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端：Client</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//目标对象:程序员</span></span><br><span class="line">        <span class="type">Solver</span> <span class="variable">developer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solver</span>();</span><br><span class="line">        <span class="comment">//代理：客服小姐姐</span></span><br><span class="line">        <span class="type">Solver</span> <span class="variable">csProxy</span> <span class="operator">=</span> (Solver) <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(developer).getProxyInstance();</span><br><span class="line">        <span class="comment">//目标方法：解决问题</span></span><br><span class="line">        csProxy.solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Spring-AOP-和-AspectJ-AOP-有什么区别？"><a href="#Spring-AOP-和-AspectJ-AOP-有什么区别？" class="headerlink" title="Spring AOP 和 AspectJ AOP 有什么区别？"></a>Spring AOP 和 AspectJ AOP 有什么区别？</h2><p><strong>Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。</strong> Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(Bytecode Manipulation)。</p>
<p>Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。AspectJ 相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，</p>
<p>如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ ，它比 Spring AOP 快很多。</p>
<p><strong>Spring AOP 属于运行时增强</strong>，主要具有如下特点：</p>
<p><strong>1.</strong> 基于动态代理来实现，默认如果使用接又的，用 JDK 提供的动态代理实现，如果是方法则使用 CGLIB 实现<br><strong>2.</strong> Spring AOP 需要依赖 IOC 容器来管理，并且只能作用于 Spring 容器，使用纯 Java 代码实现<br><strong>3.</strong> 在性能上，由于 Spring AOP 是基于动态代理来实现的，在容器启动时需要生成代理实例，在方法调用上也会增加栈的深度，使得 Spring AOP 的性能不如 AspectJ 的那么好。<br><strong>4.</strong> Spring AOP 致力于解决企业级开发中最普遍的 AOP(方法织入)。</p>
<p><strong>AspectJ</strong></p>
<p><strong>AspectJ 是一个易用的功能强大的 AOP 框架，属于编译时增强</strong>， 可以单独使用，也可以整合到其它框架中，是 AOP 编程的完全解决方案。AspectJ 需要用到单独的编译器 ajc。</p>
<p>AspectJ 属于 <strong>静态织入</strong> ，通过修改代码来实现，在实际运行之前就完成了织入，所以说它生成的类是没有额外运行时开销的，一般有如下几个织入的时机：</p>
<p><strong>1.</strong> <strong>编译期织入</strong>（Compile-time weaving）：如类 A 使用 AspectJ 添加了一个属性，类 B 引用了它，这个场景就需要编译期的时候就进行织入，否则没法编译类 B。<br><strong>2.</strong> <strong>编译后织入</strong>（Post-compile weaving）：也就是已经生成了 .class 文件，或已经打成 jar 包了，这种情况我们需要增强处理的话，就要用到编译后织入。<br><strong>3.</strong> <strong>类加载后织入</strong>（Load-time weaving）：指的是在加载类的时候进行织入，要实现这个时期的织入，有几种常见的方法</p>
<p><strong>整体对比如下：</strong></p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829170537767.png" alt="image-20220829170537767"></p>
<hr>
<h1 id="Spring-Bean"><a href="#Spring-Bean" class="headerlink" title="Spring Bean"></a><strong>Spring Bean</strong></h1><h2 id="什么是-Spring-Bean？"><a href="#什么是-Spring-Bean？" class="headerlink" title="什么是 Spring Bean？"></a>什么是 Spring Bean？</h2><p>简单来说，Bean 代指的就是那些被 IoC 容器所管理的对象。</p>
<p>我们需要告诉 IoC 容器帮助我们管理哪些对象，这个是通过配置元数据来定义的。配置元数据可以是 XML 文件、注解或者 Java 配置类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- Constructor-arg with <span class="string">&#x27;value&#x27;</span> attribute --&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;...&quot;</span> class=<span class="string">&quot;...&quot;</span>&gt;</span><br><span class="line">   &lt;constructor-arg value=<span class="string">&quot;...&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>下图简单地展示了 IoC 容器如何使用配置元数据来管理对象。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829170830985.png" alt="image-20220829170830985"></p>
<p><strong>org.springframework.beans</strong>和 <strong>org.springframework.context</strong> 这两个包是 IoC 实现的基础，如果想要研究 IoC 相关的源码的话，可以去看看</p>
<hr>
<h2 id="Bean定义和依赖定义有哪些方式？"><a href="#Bean定义和依赖定义有哪些方式？" class="headerlink" title="Bean定义和依赖定义有哪些方式？"></a>Bean定义和依赖定义有哪些方式？</h2><p>有三种方式： 直接编码方式 、 配置文件方式 、 注解方式 。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829171034149.png" alt="image-20220829171034149"></p>
<ul>
<li><strong>直接编码方式</strong>：我们一般接触不到直接编码的方式，但其实其它的方式最终都要通过直接编码来实现。</li>
<li><strong>配置文件方式</strong>：通过xml、propreties类型的配置文件，配置相应的依赖关系，Spring读取配置文件，完成依赖关系的注入。</li>
<li><strong>注解方式</strong>：注解方式应该是我们用的最多的一种方式了，在相应的地方使用注解修饰，Spring会扫描注解，完成依赖关系的注入。</li>
</ul>
<h2 id="有哪些依赖注入的方法？"><a href="#有哪些依赖注入的方法？" class="headerlink" title="有哪些依赖注入的方法？"></a>有哪些依赖注入的方法？</h2><p>Spring支持 <strong>构造方法注入</strong> 、 <strong>属性注入</strong> 、 <strong>工厂方法注入</strong> ,其中工厂方法注入，又可以分为 <strong>静态工厂方法注入</strong> 和 <strong>非静态工厂方法注入</strong> 。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829172455414.png" alt="image-20220829172455414"></p>
<ul>
<li><h6 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a><strong>构造方法注入</strong></h6><p>通过调用类的构造方法，将接又实现类通过构造方法变量传入</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">CatDaoImpl</span><span class="params">(String message)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>. message = message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;CatDaoImpl&quot;</span> class=<span class="string">&quot;com.CatDaoImpl&quot;</span>&gt;</span><br><span class="line">	&lt;constructor-arg value=<span class="string">&quot; message &quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>属性注入</strong></p>
<p>通过Setter方法完成调用类所需依赖的注入</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Id</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123; <span class="built_in">this</span>.id = id; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;id&quot;</span> class=<span class="string">&quot;com.id &quot;</span>&gt;</span><br><span class="line">	&lt;property name=<span class="string">&quot;id&quot;</span> value=<span class="string">&quot;123&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>工厂方法注入</strong><ul>
<li><strong>静态工厂注入</strong></li>
</ul>
</li>
</ul>
<p>​            静态工厂顾名思义，就是通过调用静态工厂的方法来获取自己需要的对象，为了让Spring 管理所有对象，我们不能直接通过”工程类.静态方法()”来获取对象，而是依然通过 Spring 注入的形式获取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaoFactory</span> &#123; <span class="comment">//静态工厂</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> FactoryDao <span class="title function_">getStaticFactoryDaoImpl</span><span class="params">()</span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StaticFacotryDaoImpl</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAction</span> &#123;</span><br><span class="line">    <span class="comment">//注入对象</span></span><br><span class="line">    <span class="keyword">private</span> FactoryDao staticFactoryDao;</span><br><span class="line">    <span class="comment">//注入对象的 set 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStaticFactoryDao</span><span class="params">(FactoryDao staticFactoryDao)</span> &#123;</span><br><span class="line">    	<span class="built_in">this</span>.staticFactoryDao = staticFactoryDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//factory-method=&quot;getStaticFactoryDaoImpl&quot;指定调用哪个工厂方法</span></span><br><span class="line">&lt;bean name=<span class="string">&quot;springAction&quot;</span> class=<span class="string">&quot; SpringAction&quot;</span> &gt;</span><br><span class="line">	&lt;!--使用静态工厂的方法注入对象,对应下面的配置文件--&gt;</span><br><span class="line">	&lt;property name=<span class="string">&quot;staticFactoryDao&quot;</span> ref=<span class="string">&quot;staticFactoryDao&quot;</span>&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--此处获取对象的方式是从工厂类中获取静态方法--&gt;</span><br><span class="line">&lt;bean name=<span class="string">&quot;staticFactoryDao&quot;</span> class=<span class="string">&quot;DaoFactory&quot;</span> factory-method=<span class="string">&quot;getStaticFactoryDaoImpl&quot;</span>&gt;&lt;/bean&gt;	</span><br></pre></td></tr></table></figure>

<ul>
<li>非静态工厂注入<br>非静态工厂，也叫实例工厂，意思是工厂方法不是静态的，所以我们需要首先 new 一个工厂实例，再调用普通的实例方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaoFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> FactoryDao <span class="title function_">getFactoryDaoImpl</span><span class="params">()</span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FacotryDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAction</span> &#123;</span><br><span class="line">    <span class="comment">//注入对象</span></span><br><span class="line">    <span class="keyword">private</span> FactoryDao staticFactoryDao;</span><br><span class="line">    <span class="comment">//注入对象的 set 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFactoryDao</span><span class="params">(FactoryDao FactoryDao)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.FactoryDao = FactoryDao;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean name=<span class="string">&quot;springAction&quot;</span> class=<span class="string">&quot;SpringAction&quot;</span>&gt;</span><br><span class="line">    &lt;!--使用非静态工厂的方法注入对象,对应下面的配置文件--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;factoryDao&quot;</span> ref=<span class="string">&quot;factoryDao&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--此处获取对象的方式是从工厂类中获取实例方法--&gt;</span><br><span class="line">&lt;bean name=<span class="string">&quot;daoFactory&quot;</span> class=<span class="string">&quot;com.DaoFactory&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">&lt;bean name=<span class="string">&quot;factoryDao&quot;</span> factory-bean=<span class="string">&quot;daoFactory&quot;</span> factory-method=<span class="string">&quot;getFactoryDaoImpl&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="什么是自动装配？"><a href="#什么是自动装配？" class="headerlink" title="什么是自动装配？"></a>什么是自动装配？</h2><p>Spring IOC容器知道所有Bean的配置信息，此外，通过Java反射机制还可以获知实现类的结构信息，如构造方法的结构、属性等信息。掌握所有Bean的这些信息后，Spring IOC容器就可以按照某种规则对容器中的Bean进行自动装配，而无须通过显式的方式进行依赖配置。</p>
<p>Spring提供的这种方式，可以按照某些规则进行Bean的自动装配，元素提供了一个指定自动装配类型的属性：<br>autowire=”&lt;自动装配类型&gt;”</p>
<p>Spring提供了 4 种自动装配类型：</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220829212327996.png" alt="image-20220829212327996" style="zoom:80%;" />

<ul>
<li><strong>byName</strong>：根据名称进行自动匹配，假设Boss又一个名为car的属性，如果容器中刚好有一个名为car的bean，Spring就会自动将其装配给Boss的car属性</li>
<li><strong>byType</strong>：根据类型进行自动匹配，假设Boss有一个Car类型的属性，如果容器中刚好有一个Car类型的Bean，Spring就会自动将其装配给Boss这个属性</li>
<li><strong>constructor</strong>：与 byType类似， 只不过它是针对构造函数注入而言的。如果Boss有一个构造函数，构造函数包含一个Car类型的入参，如果容器中有一个Car类型的Bean，则Spring将自动把这个Bean作为Boss构造函数的入参；如果容器中没有找到和构造函数入参匹配类型的Bean，则Spring将抛出异常。</li>
<li><strong>autodetect</strong>：根据Bean的自省机制决定采用byType还是constructor进行自动装配，如果Bean提供了默认的构造函数，则采用byType，否则采用constructor。</li>
</ul>
<hr>
<h2 id="将一个类声明为-Bean-的注解有哪些"><a href="#将一个类声明为-Bean-的注解有哪些" class="headerlink" title="将一个类声明为 Bean 的注解有哪些?"></a>将一个类声明为 Bean 的注解有哪些?</h2><ul>
<li><p><strong>@Component</strong> ：通用的注解，可标注任意类为 Spring 组件。如果一个 Bean 不知道属于哪个层，可以使用@Component 注解标注。</p>
</li>
<li><p><strong>@Repository</strong> : 对应持久层即 Dao 层，主要用于数据库相关操作。</p>
</li>
<li><p><strong>@Service</strong> : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。</p>
</li>
<li><p><strong>@Controller</strong> : 对应 Spring MVC 控制层，主要用户接受用户请求并调用 Service 层返回数据给前端页面。</p>
</li>
</ul>
<hr>
<h2 id="Component-和-Bean-的区别是什么？"><a href="#Component-和-Bean-的区别是什么？" class="headerlink" title="@Component 和 @Bean 的区别是什么？"></a>@Component 和 @Bean 的区别是什么？</h2><ul>
<li><p>@Component 注解作用于类，而@Bean注解作用于方法。</p>
</li>
<li><p>@Component通常是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中（我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中）。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean,@Bean告诉了 Spring 这是某个类的实例，当我需要用它的时候还给我。</p>
</li>
<li><p>@Bean 注解比 @Component 注解的自定义性更强，而且很多地方我们只能通过 @Bean 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 Spring容器时，则只能通过 @Bean来实现。</p>
</li>
</ul>
<p>@Bean注解使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TransferService <span class="title function_">transferService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransferServiceImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码相当于下面的 xml 配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;transferService&quot;</span> class=<span class="string">&quot;com.acme.TransferServiceImpl&quot;</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>下面这个例子是通过 @Component 无法实现的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> OneService <span class="title function_">getService</span><span class="params">(status)</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> (status)  &#123;</span><br><span class="line">        when <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">serviceImpl1</span>();</span><br><span class="line">        when <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">serviceImpl2</span>();</span><br><span class="line">        when <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">serviceImpl3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Autowired-和-Resource-的区别是什么？"><a href="#Autowired-和-Resource-的区别是什么？" class="headerlink" title="@Autowired 和 @Resource 的区别是什么？"></a>@Autowired 和 @Resource 的区别是什么？</h2><p><strong>Autowired</strong> 属于 <strong>Spring 内置</strong>的注解，默认的注入方式为<strong>byType</strong>（根据类型进行匹配），也就是说会优先根据接口类型去匹配并注入 Bean （接口的实现类）。</p>
<p><strong>这会有什么问题呢？</strong> 当一个接口存在多个实现类的话，byType这种方式就无法正确注入对象了，因为这个时候 Spring 会同时找到多个满足条件的选择，默认情况下它自己不知道选择哪一个。</p>
<p>这种情况下，注入方式会变为 <strong>byName</strong>（根据名称进行匹配），这个名称通常就是类名（首字母小写）。就比如说下面代码中的 smsService 就是我这里所说的名称，这样应该比较好理解了吧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// smsService 就是我们上面所说的名称</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SmsService smsService;</span><br></pre></td></tr></table></figure>

<p>举个例子，SmsService 接口有两个实现类: SmsServiceImpl1和 SmsServiceImpl2，且它们都已经被 Spring 容器所管理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错，byName 和 byType 都无法匹配到 bean</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SmsService smsService;</span><br><span class="line"><span class="comment">// 正确注入 SmsServiceImpl1 对象对应的 bean</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SmsService smsServiceImpl1;</span><br><span class="line"><span class="comment">// 正确注入  SmsServiceImpl1 对象对应的 bean</span></span><br><span class="line"><span class="comment">// smsServiceImpl1 就是我们上面所说的名称</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;smsServiceImpl1&quot;)</span></span><br><span class="line"><span class="keyword">private</span> SmsService smsService;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Autowired的实现原理？"><a href="#Autowired的实现原理？" class="headerlink" title="@Autowired的实现原理？"></a>@Autowired的实现原理？</h2><p>实现@Autowired的关键是： <strong>AutowiredAnnotationBeanPostProcessor</strong></p>
<p>在Bean的初始化阶段，会通过Bean后置处理器来进行一些前置和后置的处理。</p>
<p>实现@Autowired的功能，也是通过后置处理器来完成的。这个后置处理器就是<strong>AutowiredAnnotationBeanPostProcessor</strong>。</p>
<p>Spring在创建bean的过程中，最终会调用到<strong>doCreateBean()**方法，在doCreateBean()方法中会调用</strong>populateBean()<strong>方法，来为bean进行属性填充，完成自动装配等工作。<br>在populateBean()方法中一共调用了两次后置处理器，第一次是为了判断是否需要属性填充，如果不需要进行属性填充，那么就会直接进行return，如果需要进行属性填充，那么方法就会继续向下执行，后面会进行</strong>第二次后置处理器<strong>的调用，这个时候，就会调用到<br>**AutowiredAnnotationBeanPostProcessor</strong>的<strong>postProcessPropertyValues()**方法，在该方法中就会进行</strong>@Autowired注解**的解析，然后实现自动装配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 属性赋值</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd,<span class="meta">@Nullable</span> BeanWrapper bw)</span> &#123;</span><br><span class="line"><span class="comment">//............</span></span><br><span class="line">	<span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pvs == <span class="literal">null</span>) &#123;</span><br><span class="line">            pvs = mbd.getPropertyValues();</span><br><span class="line">        &#125;</span><br><span class="line">		PropertyValues pvsToUse;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">var9</span> <span class="operator">=</span><span class="built_in">this</span>.getBeanPostProcessorCache().instantiationAware.iterator();var9.hasNext(); pvs = pvsToUse) &#123;</span><br><span class="line">	<span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">bp</span> <span class="operator">=</span>(InstantiationAwareBeanPostProcessor)var9.next();</span><br><span class="line">	pvsToUse =bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(),beanName);</span><br><span class="line">	<span class="keyword">if</span> (pvsToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (filteredPds == <span class="literal">null</span>) &#123;</span><br><span class="line">        filteredPds =<span class="built_in">this</span>.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行后处理器，填充属性，完成自动装配</span></span><br><span class="line">        <span class="comment">//调用InstantiationAwareBeanPostProcessor的</span></span><br><span class="line">		postProcessPropertyValues()方法</span><br><span class="line">pvsToUse =bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds,bw.getWrappedInstance(), beanName);</span><br><span class="line">            <span class="keyword">if</span> (pvsToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//............</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>postProcessorPropertyValues()**方法的源码如下，在该方法中，会先调用</strong>findAutowiringMetadata()<strong>方法解析出bean中带有</strong>@Autowired注解、@Inject和@Value**注解的属性和方法。然后调用metadata.inject()方法，进行属性填充。</li>
</ul>
<hr>
<h2 id="Bean-的作用域有哪些"><a href="#Bean-的作用域有哪些" class="headerlink" title="Bean 的作用域有哪些?"></a>Bean 的作用域有哪些?</h2><p>Spring 中 Bean 的作用域通常有下面几种：</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830105345669.png" alt="image-20220830105345669" style="zoom:80%;" />

<ul>
<li><p><strong>singleton</strong> : 唯一 bean 实例，Spring 中的 bean 默认都是单例的，对单例设计模式的应用。</p>
</li>
<li><p><strong>prototype</strong> : 每次请求都会创建一个新的 bean 实例。</p>
</li>
<li><p><strong>request</strong> : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP request 内有效。</p>
</li>
<li><p><strong>session</strong> : 每一次来自新 session 的 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP session 内有效。</p>
</li>
<li><p><strong>global-session</strong> ： 全局 session 作用域，仅仅在基于 portlet 的 web 应用中才有意义，Spring5 已经没有了。Portlet 是能够生成语义代码(例如：HTML)片段的小型 Java Web 插件。它们基于 portlet 容器，可以像 servlet 一样处理 HTTP 请求。但是，与 servlet 不同，每个 portlet 都有不同的会话。</p>
</li>
</ul>
<p><strong>如何配置 bean 的作用域呢？</strong></p>
<p><strong>xml 方式：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;...&quot;</span> class=<span class="string">&quot;...&quot;</span> scope=<span class="string">&quot;singleton&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注解方式：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">personPrototype</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="单例-Bean-的线程安全问题了解吗？"><a href="#单例-Bean-的线程安全问题了解吗？" class="headerlink" title="单例 Bean 的线程安全问题了解吗？"></a>单例 Bean 的线程安全问题了解吗？</h2><p>首先结论在这：Spring中的单例Bean <strong>不是线程安全的</strong> 。</p>
<p>因为单例Bean，是全局只有一个Bean，所有<strong>线程共享</strong>。如果说单例Bean，是一个无状态的，也就是线程中的操作不会对Bean中的成员变量执行 <strong>查询</strong> 以外的操作，那么这个单例Bean是线程安全的。比如Spring mvc 的 Controller、Service、Dao等，这些Bean大多是无状态的，只关注于方法本身。</p>
<p>假如这个Bean是有状态的，也就是会对Bean中的成员变量进行<strong>写操作</strong>，那么可能就存在线程安全的问题。</p>
<p>大部分时候我们并没有在项目中使用多线程，所以很少有人会关注这个问题。单例 Bean 存在线程问题，主要是因为当多个线程操作同一个对象的时候是存在资源竞争的。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830110402167.png" alt="image-20220830110402167"></p>
<hr>
<h2 id="单例Bean线程安全问题怎么解决呢？"><a href="#单例Bean线程安全问题怎么解决呢？" class="headerlink" title="单例Bean线程安全问题怎么解决呢？"></a>单例Bean线程安全问题怎么解决呢？</h2><p>常见的有这么些解决办法：</p>
<p><strong>1.</strong> 将Bean定义为多例这样每一个线程请求过来都会创建一个新的Bean，但是这样容器就不好管理Bean，不能这么办。<br><strong>2.</strong> 在Bean对象中尽量避免定义可变的成员变量削足适履了属于是，也不能这么干。<br><strong>3.</strong> 将Bean中的成员变量保存在ThreadLocal中⭐我们知道ThredLoca能保证多线程下变量的隔离，可以在类中定义一个ThreadLocal成员变量，将需要的可变成员变量保存在ThreadLocal里，这是推荐的一种方式。</p>
<hr>
<h2 id="Bean-的生命周期了解么"><a href="#Bean-的生命周期了解么" class="headerlink" title="Bean 的生命周期了解么?"></a>Bean 的生命周期了解么?</h2><p>在Spring中，基本容器BeanFactory和扩展容器ApplicationContext的实例化时机不太一样，BeanFactory采用的是延迟初始化的方式，也就是只有在第一次getBean()的时候，才会实例化Bean；ApplicationContext启动之后会实例化所有的Bean定义。</p>
<p>Spring IOC 中Bean的生命周期大致分为四个阶段： <strong>实例化</strong> （Instantiation）、 <strong>属性赋值</strong>（Populate）、 <strong>初始化</strong> （Initialization）、 <strong>销毁</strong> （Destruction）。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830113023936.png" alt="image-20220830113023936"></p>
<p><strong>实例化</strong>：第 1 步，实例化一个 Bean 对象<br><strong>属性赋值</strong>：第 2 步，为 Bean 设置相关属性和依赖<br><strong>初始化</strong>：初始化的阶段的步骤比较多， 5 、 6 步是真正的初始化，第 3 、 4 步为在初始化前执行，第 7 步在初始化后执行，初始化完成之后，Bean就可以被使用了<br><strong>销毁</strong>：第 8~10步，第 8 步其实也可以算到销毁阶段，但不是真正意义上的销毁，而是先在使用前注册了销毁的相关调用接又，为了后面第 9 、 10 步真正销毁 Bean 时再执行相应的方法</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830113036173.png" alt="image-20220830113036173"></p>
<p>简单总结⼀下，Bean⽣命周期⾥初始化的过程相对步骤会多⼀些，⽐如前置、后置的处理。 最后通过⼀个实例来看⼀下具体的细节</p>
<p>定义一个PersonBean 类，实现DisposableBean ,InitializingBean ,BeanFactoryAware , BeanNameAware 这 4 个接又，同时还有自定义的init-method和destroy-method 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonBean</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>, BeanFactoryAware,BeanNameAware, DisposableBean &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">身份证号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> Integer no;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">姓名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">PersonBean</span><span class="params">()</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;1.调用构造方法：我出生了！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(Integer no)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">System.out.println(<span class="string">&quot;2.设置属性：我的名字叫&quot;</span>+name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String s)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;3.调用BeanNameAware#setBeanName方法:我要上学了，起</span></span><br><span class="line"><span class="string">了个学名&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span></span><br><span class="line">BeansException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;4.调用BeanFactoryAware#setBeanFactory方法：选好学</span></span><br><span class="line"><span class="string">校了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;6.InitializingBean#afterPropertiesSet方法：入学</span></span><br><span class="line"><span class="string">登记&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;7.自定义init方法：努力上学ing&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;9.DisposableBean#destroy方法：平淡的一生落幕了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;10.自定义destroy方法:睡了，别想叫醒我&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Bean使用中：工作，只有对社会没有用的人才放假。。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String</span></span><br><span class="line"><span class="params">beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;5.BeanPostProcessor.postProcessBeforeInitialization方</span></span><br><span class="line"><span class="string">法：到学校报名啦&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String</span></span><br><span class="line"><span class="params">beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;8.BeanPostProcessor#postProcessAfterInitialization方</span></span><br><span class="line"><span class="string">法：终于毕业，拿到毕业证啦！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件，指定init-method 和destroy-method 属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"> 		<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> 		<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;myBeanPostProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.fighter3.spring.life.MyBeanPostProcessor&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;personBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.fighter3.spring.life.PersonBean&quot;</span></span></span><br><span class="line"><span class="tag"> 	<span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;idNo&quot;</span> <span class="attr">value</span>= <span class="string">&quot;80669865&quot;</span>/&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张铁钢&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-config.xml&quot;</span>);</span><br><span class="line">        <span class="type">PersonBean</span> <span class="variable">personBean</span> <span class="operator">=</span> (PersonBean)</span><br><span class="line">        context.getBean(<span class="string">&quot;personBean&quot;</span>);</span><br><span class="line">        personBean.work();</span><br><span class="line">        ((ClassPathXmlApplicationContext) context).destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>调用构造方法：我出生了！</span><br><span class="line"><span class="number">2.</span>设置属性：我的名字叫张铁钢</span><br><span class="line"><span class="number">3.</span>调用BeanNameAware#setBeanName方法:我要上学了，起了个学名</span><br><span class="line"><span class="number">4.</span>调用BeanFactoryAware#setBeanFactory方法：选好学校了</span><br><span class="line"><span class="number">5.</span>BeanPostProcessor#postProcessBeforeInitialization方法：到学校报名啦</span><br><span class="line"><span class="number">6.</span>InitializingBean#afterPropertiesSet方法：入学登记</span><br><span class="line"><span class="number">7.</span>自定义init方法：努力上学ing</span><br><span class="line"><span class="number">8.</span>BeanPostProcessor#postProcessAfterInitialization方法：终于毕业，拿到毕业证</span><br><span class="line">啦！</span><br><span class="line">Bean使用中：工作，只有对社会没有用的人才放假。。</span><br><span class="line"><span class="number">9.</span>DisposableBean#destroy方法：平淡的一生落幕了</span><br><span class="line"><span class="number">10.</span>自定义destroy方法:睡了，别想叫醒我</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="说说循环依赖"><a href="#说说循环依赖" class="headerlink" title="说说循环依赖"></a>说说循环依赖</h2><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830123010500.png" alt="image-20220830123010500" style="zoom:80%;" />

<p>Spring 循环依赖：简单说就是自己依赖自己，或者和别的Bean相互依赖。</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830123040716.png" alt="image-20220830123040716" style="zoom:80%;" />

<p>只有单例的Bean才存在循环依赖的情况， <strong>原型</strong> (Prototype)情况下，Spring会直接抛出异常。原因很简单，AB循环依赖，A实例化的时候，发现依赖B，创建B实例，创建B的时候发现需要A，创建A1实例……无限套娃，直接把系统干垮。</p>
<h2 id="Spring可以解决哪些情况的循环依赖？"><a href="#Spring可以解决哪些情况的循环依赖？" class="headerlink" title="Spring可以解决哪些情况的循环依赖？"></a>Spring可以解决哪些情况的循环依赖？</h2><p>Spring不支持基于构造器注入的循环依赖，但是假如AB循环依赖，如果一个是构造器注入，一个是setter注入呢？</p>
<p>看看几种情形：</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830124807448.png" alt="image-20220830124807448" style="zoom:80%;" />

<p>第四种可以而第五种不可以的原因是 Spring 在创建 Bean 时默认会根据自然排序进行创建，所以 A 会先于 B 进行创建。</p>
<p>所以简单总结，当循环依赖的实例都采用setter方法注入的时候，Spring可以支持，都采用构造器注入的时候，不支持，构造器注入和setter注入同时存在的时候，看天。</p>
<hr>
<h2 id="那Spring怎么解决循环依赖的呢？"><a href="#那Spring怎么解决循环依赖的呢？" class="headerlink" title="那Spring怎么解决循环依赖的呢？"></a>那Spring怎么解决循环依赖的呢？</h2><p>我们都知道，单例Bean初始化完成，要经历三步：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830145252769.png" alt="image-20220830145252769"></p>
<p>注入就发生在第二步， <strong>属性赋值</strong> ，结合这个过程，Spring 通过 <strong>三级缓存</strong> 解决了循环依赖：</p>
<p><strong>1.</strong> 一级缓存 : Map&lt;String,Object&gt; singletonObjects，单例池，用于保存实例化、属性赋值（注入）、初始化完成的 bean 实例<br><strong>2.</strong> 二级缓存 : Map&lt;String,Object&gt; earlySingletonObjects，早期曝光对象，用于保存实例化完成的 bean 实例<br><strong>3.</strong> 三级缓存 : Map&lt;String,ObjectFactory&lt;?&gt;&gt; singletonFactories，早期曝光对象工厂，用于保存 bean 创建工厂，以便于后面扩展有机会创建代理对象。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830145321038.png" alt="image-20220830145321038"></p>
<p>我们来看一下三级缓存解决循环依赖的过程：</p>
<p>当 A、B 两个类发生循环依赖时：</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830145354533.png" alt="image-20220830145354533" style="zoom:80%;" />

<p>A实例的初始化过程：</p>
<ol>
<li>创建A实例，实例化的时候把A对象工厂放入三级缓存，表示A开始实例化了，虽然我这个对象还不完整，但是先曝光出来让大家知道</li>
</ol>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830145430449.png" alt="image-20220830145430449" style="zoom:80%;" />

<ol start="2">
<li><p>A注入属性时，发现依赖B，此时B还没有被创建出来，所以去实例化B</p>
</li>
<li><p>同样，B注入属性时发现依赖A，它就会从缓存里找A对象。依次从一级到三级缓存查询A，从三级缓存通过对象工厂拿到A，发现A虽然不太完善，但是存在，把A放入二级缓存，同时删除三级缓存中的A，此时，B已经实例化并且初始化完成，把B放入一级缓存。</p>
</li>
</ol>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830145515442.png" alt="image-20220830145515442" style="zoom:80%;" />

<ol start="4">
<li><p>接着A继续属性赋值，顺利从一级缓存拿到实例化且初始化完成的B对象，A对象创建也完成，删除二级缓存中的A，同时把A放入一级缓存</p>
</li>
<li><p>最后，一级缓存中保存着实例化、初始化都完成的A、B对象</p>
</li>
</ol>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830145605736.png" alt="image-20220830145605736" style="zoom:80%;" />

<p>所以，我们就知道为什么Spring能解决setter注入的循环依赖了，因为实例化和属性赋值是分开的，所以里面有操作的空间。如果都是构造器注入的化，那么都得在实例化这一步完成注入，所以自然是无法支持了。</p>
<hr>
<h2 id="为什么要三级缓存？二级不行吗？"><a href="#为什么要三级缓存？二级不行吗？" class="headerlink" title="为什么要三级缓存？二级不行吗？"></a>为什么要三级缓存？二级不行吗？</h2><p>不行，主要是为了生成代理对象 。如果是没有代理的情况下，使用二级缓存解决循环依赖也是OK的。但是如果存在代理，三级没有问题，二级就不行了。</p>
<p>因为三级缓存中放的是生成具体对象的匿名内部类，获取Object的时候，它可以生成代理对象，也可以返回普通对象。使用三级缓存主要是为了保证不管什么时候使用的都是一个对象。</p>
<p>假设只有二级缓存的情况，往二级缓存中放的显示一个普通的Bean对象，Bean初始化过程中，通过 BeanPostProcessor 去生成代理对象之后，覆盖掉二级缓存中的普通Bean对象，那么可能就导致取到的Bean对象不一致了。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830145941780.png" alt="image-20220830145941780"></p>
<hr>
<h1 id="Spring-事务"><a href="#Spring-事务" class="headerlink" title="Spring 事务"></a><strong>Spring 事务</strong></h1><p>Spring 事务的本质其实就是<strong>数据库</strong>对事务的支持，没有数据库的事务支持，Spring 是无法提供事务功能的。Spring 只提供统一事务管理接口，具体实现都是由各数据库自己实现，数据库事务的提交和回滚是通过数据库自己的事务机制实现。</p>
<h2 id="Spring-事务的种类？"><a href="#Spring-事务的种类？" class="headerlink" title="Spring 事务的种类？"></a>Spring 事务的种类？</h2><p>Spring 支持<strong>编程式事务管理</strong>和<strong>声明式事务</strong>管理两种方式：</p>
<p><strong>1.**编程式事务<br>编程式事务管理使用 **TransactionTemplate</strong>，需要显式执行事务。</p>
<p><strong>2.</strong> 声明式事务<br><strong>3.</strong> 声明式事务管理建立在 <strong>AOP</strong> 之上的。其本质是通过 AOP 功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前启动一个事务，在执行完目标方法之后根据执行情况<strong>提交或者回滚事务</strong><br><strong>4.</strong> 优点是不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明或通过 <strong>@Transactional</strong> 注解的方式，便可以将事务规则应用到业务逻辑中，减少业务代码的污染。唯一不足地方是，最细粒度只能作用到方法级别，无法做到像编程式事务<br>那样可以作用到代码块级别。</p>
<hr>
<h2 id="Spring-的事务传播机制？"><a href="#Spring-的事务传播机制？" class="headerlink" title="Spring 的事务传播机制？"></a>Spring 的事务传播机制？</h2><p>Spring 事务的传播机制说的是，当多个事务同时存在的时候——一般指的是多个事务方法相互调用时，Spring 如何处理这些事务的行为。</p>
<p>事务传播机制是使用简单的 ThreadLocal 实现的，所以，如果调用的方法是在新线程调用的，事务传播实际上是会失效的。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830174152992.png" alt="image-20220830174152992"></p>
<p>Spring默认的事务传播行为是PROPAFATION_REQUIRED，它适合绝大多数情况，如果多个ServiceX#methodX()都工作在事务环境下（均被Spring事务增强），且程序中存在调用链Service1#method1()-&gt;Service2#method2()-&gt;Service3#method3()，那么这 3 个服务类的三个方法通过Spring的事务传播机制都工作在同一个事务中。</p>
<h3 id="七种事务传播行为详解与示例"><a href="#七种事务传播行为详解与示例" class="headerlink" title="七种事务传播行为详解与示例"></a>七种事务传播行为详解与示例</h3><p>在介绍七种事务传播行为前，我们先设计一个场景，帮助大家理解，场景描述如下</p>
<p>现有两个方法A和B，方法A执行会在数据库ATable插入一条数据，方法B执行会在数据库BTable插入一条数据，伪代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将传入参数a存入ATable</span></span><br><span class="line">pubilc <span class="keyword">void</span> <span class="title function_">A</span><span class="params">(a)</span>&#123;</span><br><span class="line">    insertIntoATable(a);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将传入参数b存入BTable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">B</span><span class="params">(b)</span>&#123;</span><br><span class="line">    insertIntoBTable(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，我们看看在如下场景下，没有事务，情况会怎样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMain</span><span class="params">()</span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testB</span><span class="params">()</span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    <span class="keyword">throw</span> Exception;     <span class="comment">//发生异常抛出</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里要做一个重要提示：<strong>Spring中事务的默认实现使用的是AOP，也就是代理的方式，如果大家在使用代码测试时，同一个Service类中的方法相互调用需要使用注入的对象来调用，不要直接使用this.方法名来调用，this.方法名调用是对象内部方法调用，不会通过Spring代理，也就是事务不会起作用</strong></p>
<p>以上伪代码描述的一个场景，方法testMain和testB都没有事务，执行testMain方法，那么结果会怎么样呢？</p>
<p>相信大家都知道了，就是a1数据成功存入ATable表，b1数据成功存入BTable表，而在抛出异常后b2数据存储就不会执行，也就是b2数据不会存入数据库，这就是没有事务的场景。</p>
<p>可想而知，在上一篇文章（认识事务）中举例的转账操作，如果在某一步发生异常，且没有事务，那么钱是不是就凭空消失了，所以事务在数据库操作中的重要性可想而知。接下我们就开始理解七种不同事务传播类型的含义</p>
<h4 id="REQUIRED-Spring默认的事务传播类型"><a href="#REQUIRED-Spring默认的事务传播类型" class="headerlink" title="REQUIRED(Spring默认的事务传播类型)"></a><strong>REQUIRED(Spring默认的事务传播类型)</strong></h4><p><strong>如果当前没有事务，则自己新建一个事务，如果当前存在事务，则加入这个事务</strong></p>
<p>*(示例1)*根据场景举栗子,我们在testMain和testB上声明事务，设置传播行为REQUIRED，伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMain</span><span class="params">()</span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testB</span><span class="params">()</span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    <span class="keyword">throw</span> Exception;     <span class="comment">//发生异常抛出</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该场景下执行testMain方法结果如何呢？</p>
<p>数据库没有插入新的数据，数据库还是保持着执行testMain方法之前的状态，没有发生改变。testMain上声明了事务，在执行testB方法时就加入了testMain的事务（<strong>当前存在事务，则加入这个事务</strong>），在执行testB方法抛出异常后事务会发生回滚，又testMain和testB使用的同一个事务，所以事务回滚后testMain和testB中的操作都会回滚，也就使得数据库仍然保持初始状态。</p>
<p>*(示例2)*根据场景再举一个栗子,我们只在testB上声明事务，设置传播行为REQUIRED，伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMain</span><span class="params">()</span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testB</span><span class="params">()</span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    <span class="keyword">throw</span> Exception;     <span class="comment">//发生异常抛出</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时的执行结果又如何呢？</p>
<p>数据a1存储成功，数据b1和b2没有存储。由于testMain没有声明事务，testB有声明事务且传播行为是REQUIRED，所以在执行testB时会自己新建一个事务（<strong>如果当前没有事务，则自己新建一个事务</strong>），testB抛出异常则只有testB中的操作发生了回滚，也就是b1的存储会发生回滚，但a1数据不会回滚，所以最终a1数据存储成功，b1和b2数据没有存储。</p>
<h4 id="SUPPORTS"><a href="#SUPPORTS" class="headerlink" title="SUPPORTS"></a><strong>SUPPORTS</strong></h4><p><strong>当前存在事务，则加入当前事务，如果当前没有事务，就以非事务方法执行</strong></p>
<p>*(示例3)*根据场景举栗子，我们只在testB上声明事务，设置传播行为SUPPORTS，伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMain</span><span class="params">()</span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testB</span><span class="params">()</span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    <span class="keyword">throw</span> Exception;     <span class="comment">//发生异常抛出</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种情况下，执行testMain的最终结果就是，a1，b1存入数据库，b2没有存入数据库。由于testMain没有声明事务，且testB的事务传播行为是SUPPORTS，所以执行testB时就是没有事务的（<strong>如果当前没有事务，就以非事务方法执行</strong>），则在testB抛出异常时也不会发生回滚，所以最终结果就是a1和b1存储成功，b2没有存储。</p>
<p>那么当我们在testMain上声明事务且使用REQUIRED传播方式的时候，这个时候执行testB就满足<strong>当前存在事务，则加入当前事务</strong>，在testB抛出异常时事务就会回滚，最终结果就是a1，b1和b2都不会存储到数据库。</p>
<h4 id="MANDATORY"><a href="#MANDATORY" class="headerlink" title="MANDATORY"></a><strong>MANDATORY</strong></h4><p><strong>当前存在事务，则加入当前事务，如果当前事务不存在，则抛出异常。</strong></p>
<p>*(示例4)*场景举栗子，我们只在testB上声明事务，设置传播行为MANDATORY，伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMain</span><span class="params">()</span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.MANDATORY)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testB</span><span class="params">()</span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    <span class="keyword">throw</span> Exception;     <span class="comment">//发生异常抛出</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种情形的执行结果就是a1存储成功，而b1和b2没有存储。b1和b2没有存储，并不是事务回滚的原因，而是因为testMain方法没有声明事务，在去执行testB方法时就直接抛出事务要求的异常（<strong>如果当前事务不存在，则抛出异常</strong>），所以testB方法里的内容就没有执行。</p>
<p>那么如果在testMain方法进行事务声明，并且设置为REQUIRED，则执行testB时就会使用testMain已经开启的事务，遇到异常就正常的回滚了。</p>
<h4 id="REQUIRES-NEW"><a href="#REQUIRES-NEW" class="headerlink" title="REQUIRES_NEW"></a><strong>REQUIRES_NEW</strong></h4><p><strong>创建一个新事务，如果存在当前事务，则挂起该事务。</strong></p>
<p>可以理解为设置事务传播类型为REQUIRES_NEW的方法，在执行时，不论当前是否存在事务，总是会新建一个事务。</p>
<p>*(示例5)*场景举栗子，为了说明设置REQUIRES_NEW的方法会开启新事务，我们把异常发生的位置换到了testMain，然后给testMain声明事务，传播类型设置为REQUIRED，testB也声明事务，设置传播类型为REQUIRES_NEW，伪代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMain</span><span class="params">()</span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">    <span class="keyword">throw</span> Exception;     <span class="comment">//发生异常抛出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testB</span><span class="params">()</span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种情形的执行结果就是a1没有存储，而b1和b2存储成功，因为testB的事务传播设置为REQUIRES_NEW,所以在执行testB时会开启一个新的事务，testMain中发生的异常时在testMain所开启的事务中，所以这个异常不会影响testB的事务提交，testMain中的事务会发生回滚，所以最终a1就没有存储，而b1和b2就存储成功了。</p>
<p>与这个场景对比的一个场景就是testMain和testB都设置为REQUIRED，那么上面的代码执行结果就是所有数据都不会存储，因为testMain和testMain是在同一个事务下的，所以事务发生回滚时，所有的数据都会回滚。</p>
<h4 id="NOT-SUPPORTED"><a href="#NOT-SUPPORTED" class="headerlink" title="NOT_SUPPORTED"></a><strong>NOT_SUPPORTED</strong></h4><p><strong>始终以非事务方式执行,如果当前存在事务，则挂起当前事务</strong></p>
<p>可以理解为设置事务传播类型为NOT_SUPPORTED的方法，在执行时，不论当前是否存在事务，都会以非事务的方式运行。</p>
<p>*(示例6)*场景举栗子，testMain传播类型设置为REQUIRED，testB传播类型设置为NOT_SUPPORTED，且异常抛出位置在testB中，伪代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMain</span><span class="params">()</span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.NOT_SUPPORTED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testB</span><span class="params">()</span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    <span class="keyword">throw</span> Exception;     <span class="comment">//发生异常抛出</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该场景的执行结果就是a1和b2没有存储，而b1存储成功。testMain有事务，而testB不使用事务，所以执行中testB的存储b1成功，然后抛出异常，此时testMain检测到异常事务发生回滚，但是由于testB不在事务中，所以只有testMain的存储a1发生了回滚，最终只有b1存储成功，而a1和b1都没有存储。</p>
<h4 id="NEVER"><a href="#NEVER" class="headerlink" title="NEVER"></a><strong>NEVER</strong></h4><p><strong>不使用事务，如果当前事务存在，则抛出异常</strong></p>
<p>很容易理解，就是我这个方法不使用事务，并且调用我的方法也不允许有事务，如果调用我的方法有事务则我直接抛出异常。</p>
<p>*示例7)*场景举栗子，testMain设置传播类型为REQUIRED，testB传播类型设置为NEVER，并且把testB中的抛出异常代码去掉，则伪代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMain</span><span class="params">()</span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.NEVER)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testB</span><span class="params">()</span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该场景执行，直接抛出事务异常，且不会有数据存储到数据库。由于testMain事务传播类型为REQUIRED，所以testMain是运行在事务中，而testB事务传播类型为NEVER，所以testB不会执行而是<strong>直接抛出事务异常</strong>，此时testMain检测到异常就发生了回滚，所以最终数据库不会有数据存入。</p>
<h4 id="NESTED"><a href="#NESTED" class="headerlink" title="NESTED"></a><strong>NESTED</strong></h4><p><strong>如果当前事务存在，则在嵌套事务中执行，否则REQUIRED的操作一样（开启一个事务）</strong></p>
<p>这里需要注意两点：</p>
<ul>
<li>和REQUIRES_NEW的区别</li>
</ul>
<blockquote>
<p>REQUIRES_NEW是新建一个事务并且新开启的这个事务与原有事务无关，而NESTED则是当前存在事务时（我们把当前事务称之为父事务）会开启一个嵌套事务（称之为一个子事务）。<br>在NESTED情况下父事务回滚时，子事务也会回滚，而在REQUIRES_NEW情况下，原有事务回滚，不会影响新开启的事务。</p>
</blockquote>
<ul>
<li>和REQUIRED的区别</li>
</ul>
<blockquote>
<p>REQUIRED情况下，调用方存在事务时，则被调用方和调用方使用同一事务，那么被调用方出现异常时，由于共用一个事务，所以无论调用方是否catch其异常，事务都会回滚<br>而在NESTED情况下，被调用方发生异常时，调用方可以catch其异常，这样只有子事务回滚，父事务不受影响</p>
</blockquote>
<p>*(示例8)*场景举栗子，testMain设置为REQUIRED，testB设置为NESTED，且异常发生在testMain中，伪代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMain</span><span class="params">()</span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">    <span class="keyword">throw</span> Exception;     <span class="comment">//发生异常抛出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.NESTED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testB</span><span class="params">()</span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该场景下，所有数据都不会存入数据库，因为在testMain发生异常时，父事务回滚则子事务也跟着回滚了，可以与*(示例5)*比较看一下，就找出了与REQUIRES_NEW的不同</p>
<p>*(示例9)*场景举栗子，testMain设置为REQUIRED，testB设置为NESTED，且异常发生在testB中，伪代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMain</span><span class="params">()</span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        testB();    <span class="comment">//调用testB</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>（Exception e)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    A(a2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.NESTED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testB</span><span class="params">()</span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    <span class="keyword">throw</span> Exception;     <span class="comment">//发生异常抛出</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种场景下，结果是a1,a2存储成功，b1和b2存储失败，因为调用方catch了被调方的异常，所以只有子事务回滚了。</p>
<p>同样的代码，如果我们把testB的传播类型改为REQUIRED，结果也就变成了：没有数据存储成功。就算在调用方catch了异常，整个事务还是会回滚，因为，调用方和被调方共用的同一个事务。</p>
<hr>
<h2 id="Spring-的事务隔离级别"><a href="#Spring-的事务隔离级别" class="headerlink" title="Spring 的事务隔离级别"></a>Spring 的事务隔离级别</h2><p>Spring的接又TransactionDefinition中定义了表示隔离级别的常量，当然其实主要还是对应数据<br>库的事务隔离级别：</p>
<p><strong>1.</strong> <strong>ISOLATION_DEFAULT</strong>：使用后端数据库默认的隔离界别，MySQL 默认可重复读，Oracle 默认读已提交。<br><strong>2.</strong> <strong>ISOLATION_READ_UNCOMMITTED</strong>：读未提交<br><strong>3.</strong> <strong>ISOLATION_READ_COMMITTED</strong>：读已提交<br><strong>4.</strong> <strong>ISOLATION_REPEATABLE_READ</strong>：可重复读<br><strong>5.</strong> <strong>ISOLATION_SERIALIZABLE</strong>：串行化</p>
<hr>
<h2 id="Transactional-rollbackFor-Exception-class-注解了解吗？"><a href="#Transactional-rollbackFor-Exception-class-注解了解吗？" class="headerlink" title="@Transactional(rollbackFor = Exception.class)注解了解吗？"></a>@Transactional(rollbackFor = Exception.class)注解了解吗？</h2><p>Exception 分为运行时异常 RuntimeException 和非运行时异常。事务管理对于企业应用来说是至关重要的，即使出现异常情况，它也可以保证数据的一致性。</p>
<p>当 @Transactional 注解作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。如果类或者方法加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。</p>
<p>在 @Transactional 注解中如果不配置rollbackFor属性,那么事务只会在遇到RuntimeException的时候才会回滚，加上 <strong>rollbackFor=Exception.class</strong>,可以让事务在遇到<strong>非运行时异常</strong>时也回滚。</p>
<hr>
<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a><strong>Spring MVC</strong></h1><h2 id="说说自己对于-Spring-MVC-了解"><a href="#说说自己对于-Spring-MVC-了解" class="headerlink" title="说说自己对于 Spring MVC 了解?"></a>说说自己对于 Spring MVC 了解?</h2><p>MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830150347255.png" alt="image-20220830150347255"></p>
<p><strong>Model 1 时代</strong></p>
<p>很多学 Java 后端比较晚的朋友可能并没有接触过 Model 1 时代下的 JavaWeb 应用开发。在 Model1 模式下，整个 Web 应用几乎全部用 JSP 页面组成，只用少量的 JavaBean 来处理数据库连接、访问等操作。</p>
<p>这个模式下 JSP 即是控制层（Controller）又是表现层（View）。显而易见，这种模式存在很多问题。比如控制逻辑和表现逻辑混杂在一起，导致代码重用率极低；再比如前端和后端相互依赖，难以进行测试维护并且开发效率极低。</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830152500012.png" alt="image-20220830152500012" style="zoom:80%;" />

<p><strong>Model 2 时代</strong></p>
<p>学过 Servlet 并做过相关 Demo 的朋友应该了解“Java Bean(Model)+ JSP（View）+Servlet（Controller） ”这种开发模式，这就是早期的 JavaWeb MVC 开发模式。</p>
<ul>
<li><p>Model:系统涉及的数据，也就是 dao 和 bean。</p>
</li>
<li><p>View：展示模型中的数据，只是用来展示。</p>
</li>
<li><p>Controller：处理用户请求都发送给 ，返回数据给 JSP 并展示给用户。</p>
</li>
</ul>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830152547208.png" alt="image-20220830152547208" style="zoom:80%;" />

<p>Model2 模式下还存在很多问题，Model2 的抽象和封装程度还远远不够，使用 Model2 进行开发时不可避免地会重复造轮子，这就大大降低了程序的可维护性和复用性。</p>
<p>于是，很多 JavaWeb 开发相关的 MVC 框架应运而生比如 Struts2，但是 Struts2 比较笨重。</p>
<p><strong>Spring MVC 时代</strong></p>
<p>随着 Spring 轻量级开发框架的流行，Spring 生态圈出现了 Spring MVC 框架， Spring MVC 是当前最优秀的 MVC 框架。相比于 Struts2 ， Spring MVC 使用更加简单和方便，开发效率更高，并且 Spring MVC 运行速度更快。</p>
<p>MVC 是一种设计模式，Spring MVC 是一款很优秀的 MVC 框架。Spring MVC 可以帮助我们进行更简洁的 Web 层的开发，并且它天生与 Spring 框架集成。Spring MVC 下我们一般把后端项目分为 Service 层（处理业务）、Dao 层（数据库操作）、Entity 层（实体类）、Controller 层(控制层，返回数据给前台页面)。</p>
<hr>
<h2 id="Spring-MVC-的核心组件？"><a href="#Spring-MVC-的核心组件？" class="headerlink" title="Spring MVC 的核心组件？"></a>Spring MVC 的核心组件？</h2><p><strong>1.</strong> <strong>DispatcherServlet</strong>：<strong>前置控制器</strong>，是整个流程控制的核心，控制其他组件的执行，进行统一调度，降低组件之间的耦合性，相当于总指挥。<br><strong>2.</strong> <strong>Handler</strong>：<strong>处理器</strong>，完成具体的业务逻辑，相当于 Servlet 或 Action。<br><strong>3.</strong> <strong>HandlerMapping</strong>：DispatcherServlet 接收到请求之后，通过 HandlerMapping 将不同的请求映射到不同的 Handler。<br><strong>4.</strong> <strong>HandlerInterceptor</strong>：<strong>处理器拦截器</strong>，是一个接口，如果需要完成一些拦截处理，可以实现该接口。<br><strong>5.</strong> <strong>HandlerExecutionChain</strong>：<strong>处理器执行链</strong>，包括两部分内容：Handler 和 HandlerInterceptor(系统会有一个默认的 HandlerInterceptor，如果需要额外设置拦截，可以添加拦截器）。<br><strong>6.</strong> <strong>HandlerAdapter</strong>：<strong>处理器适配器</strong>，Handler 执行业务方法之前，需要进行一系列的操作，包括表单数据的验证、数据类型的转换、将表单数据封装到 JavaBean 等，这些操作都是由 HandlerApater 来完成，开发者只需将注意力集中业务逻辑的处理上，DispatcherServlet<br>通过 HandlerAdapter 执行不同的 Handler。<br><strong>7.</strong> <strong>ModelAndView</strong>：<strong>装载了模型数据和视图信息</strong>，作为 Handler 的处理结果，返回给DispatcherServlet。<br><strong>8.</strong> <strong>ViewResolver</strong>：<strong>视图解析器</strong>，DispatcheServlet 通过它将逻辑视图解析为物理视图，最终将渲染结果响应给客户端。</p>
<hr>
<h2 id="Spring-MVC-的工作流程？"><a href="#Spring-MVC-的工作流程？" class="headerlink" title="Spring MVC 的工作流程？"></a>Spring MVC 的工作流程？</h2><p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830154256885.png" alt="image-20220830154256885"></p>
<p><strong>1.</strong> 客户端向服务端发送一次请求，这个请求会先到<strong>前端控制器DispatcherServlet</strong>(也叫中央控制器)。<br><strong>2.</strong> DispatcherServlet接收到请求后会调用<strong>HandlerMapping处理器映射器</strong>。由此得知，该请求该由哪个Controller来处理（并未调用Controller，只是得知）<br><strong>3.</strong> DispatcherServlet调用<strong>HandlerAdapter处理器适配器</strong>，告诉处理器适配器应该要去执行哪个Controller<br><strong>4.</strong> HandlerAdapter处理器适配器去执行Controller并得到<strong>ModelAndView(数据和视图)**，并层层返回给DispatcherServlet<br>**5.</strong> DispatcherServlet将ModelAndView交给<strong>ViewReslover视图解析器</strong>解析，然后返回真正的视图<br><strong>6.</strong> DispatcherServlet将模型数据填充到视图中<br><strong>7.</strong> DispatcherServlet将结果响应给客户端</p>
<p><strong>Spring MVC</strong> 虽然整体流程复杂，但是实际开发中很简单，大部分的组件不需要开发人员创建和管理，只需要通过配置文件的方式完成配置即可，真正需要开发人员进行处理的只有<strong>Handler（Controller）</strong> 、 <strong>View</strong> 、 <strong>Model</strong> 。</p>
<p>当然我们现在大部分的开发都是前后端分离，Restful风格接口，后端只需要返回Json数据就行了。</p>
<h2 id="SpringMVC-Restful风格的接又的流程是什么样的呢？"><a href="#SpringMVC-Restful风格的接又的流程是什么样的呢？" class="headerlink" title="SpringMVC Restful风格的接又的流程是什么样的呢？"></a>SpringMVC Restful风格的接又的流程是什么样的呢？</h2><p>我们都知道Restful接又，响应格式是json，这就用到了一个常用注解： <strong>@ResponseBody</strong></p>
<p>加入了这个注解后，整体的流程上和使用ModelAndView大体上相同，但是细节上有一些不同：</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830162855421.png" alt="image-20220830162855421" style="zoom:80%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>( <span class="number">1</span> ,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>1.</strong> 客户端向服务端发送一次请求，这个请求会先到前端控制器<strong>DispatcherServlet</strong><br><strong>2.</strong> DispatcherServlet接收到请求后会调用<strong>HandlerMapping</strong>处理器映射器。由此得知，该请求该由哪个<strong>Controller</strong>来处理<br><strong>3.</strong> DispatcherServlet调用<strong>HandlerAdapter处理器适配器</strong>，告诉处理器适配器应该要去执行哪个Controller<br><strong>4.</strong> Controller被封装成了<strong>ServletInvocableHandlerMethod</strong>，HandlerAdapter处理器适配器去执行<strong>invokeAndHandle</strong>方法，完成对Controller的请求处理<br><strong>5.</strong> HandlerAdapter执行完对Controller的请求，会调用<strong>HandlerMethodReturnValueHandler</strong>去处理返回值，主要的过程：<br>    <strong>5.1.</strong> 调用RequestResponseBodyMethodProcessor，创建ServletServerHttpResponse（Spring对原生ServerHttpResponse的封装）实例<br>    <strong>5.2.**使用HttpMessageConverter的write方法，将返回值写入ServletServerHttpResponse的OutputStream输出流中<br>    **5.3.**在写入的过程中，会使用JsonGenerator（默认使用Jackson框架）对返回值进行Json序列化<br>**6.</strong> 执行完请求后，返回的ModealAndView为null，ServletServerHttpResponse里也已经写入了响应，所以不用关心View的处理</p>
<hr>
<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a><strong>Spring Boot</strong></h1><h2 id="介绍一下SpringBoot，有哪些优点？"><a href="#介绍一下SpringBoot，有哪些优点？" class="headerlink" title="介绍一下SpringBoot，有哪些优点？"></a>介绍一下SpringBoot，有哪些优点？</h2><p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。它并不是用来替代Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。</p>
<p>Spring Boot 以<strong>约定大于配置核心思想</strong>开展工作，相比Spring具有如下优势：</p>
<p><strong>1.</strong> Spring Boot 可以<strong>快速创建</strong>独立的Spring应用程序。<br><strong>2.</strong> Spring Boot <strong>内嵌了如Tomcat，Jetty和Undertow</strong>这样的容器，也就是说可以直接跑起来，用不着再做部署工作了。<br><strong>3.</strong> Spring Boot 无需再像Spring一样使用一堆<strong>繁琐的xml文件配置</strong>。<br><strong>4.</strong> Spring Boot 可以<strong>自动配置(核心)Spring</strong>。SpringBoot将原有的XML配置改为Java配置，将bean注入改为使用注解注入的方式(@Autowire)，并将多个xml、properties配置浓缩在一个<strong>appliaction.yml</strong>配置文件中。<br><strong>5.</strong> Spring Boot 提供了一些现有的功能，如量度工具，表单数据验证以及一些外部配置这样的一些第三方功能。<br><strong>6.</strong> Spring Boot 可以<strong>快速整合常用依赖</strong>（开发库，例如spring-webmvc、jackson-json、validation-api和tomcat等），提供的POM可以简化Maven的配置。当我们引入核心依赖时，SpringBoot会自引入其他依赖。</p>
<hr>
<h2 id="SpringBoot自动配置原理了解吗？"><a href="#SpringBoot自动配置原理了解吗？" class="headerlink" title="SpringBoot自动配置原理了解吗？"></a>SpringBoot自动配置原理了解吗？</h2><p>SpringBoot开启自动配置的注解是**@EnableAutoConfiguration** ，启动类上的注解**@SpringBootApplication<strong>是一个</strong>复合注解<strong>，包含了</strong>@EnableAutoConfiguration**：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830164916522.png" alt="image-20220830164916522"></p>
<p><strong>EnableAutoConfiguration</strong> 只是一个简单的注解，自动装配核心功能的实现实际是通过 <strong>AutoConfigurationImportSelector</strong>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span> <span class="comment">//将main同级的包下的所有组件注册到容器中</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span> <span class="comment">//加载自动装配类</span></span><br><span class="line">xxxAutoconfiguration</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span><span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>AutoConfigurationImportSelector</strong>实现了<strong>ImportSelector</strong>接口，这个接口的作用就是<strong>收集需要导入的配置类</strong>，配合**@Import(）<strong>就可以将相应的类导入到</strong>Spring容器<strong>中获取注入类的方法是</strong>selectImports()<strong>，它实际调用的是</strong>getAutoConfigurationEntry**，这个方法是获取自动装配类的关键，主要流程可以分为这么几步：</p>
<p><strong>1.</strong> 获取注解的属性，用于后面的排除<br><strong>2.</strong> 获取所有需要自动装配的配置类的路径：这一步是最关键的，从<strong>META-INF/spring.factories</strong>获取自动配置类的路径<br><strong>3.</strong> 去掉重复的配置类和需要排除的重复类，把需要自动加载的配置类的路径存储起来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rotected AutoConfigurationImportSelector.AutoConfigurationEntry</span><br><span class="line"><span class="title function_">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取到注解的属性</span></span><br><span class="line">        <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span><span class="built_in">this</span>.getAttributes(annotationMetadata);</span><br><span class="line">        <span class="comment">//2.获取需要自动装配的所有配置类，读取META-INF/spring.factories，获取自动配置类路径</span></span><br><span class="line">        List&lt;String&gt; configurations =<span class="built_in">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">        <span class="comment">//3.1.移除重复的配置</span></span><br><span class="line">        configurations = <span class="built_in">this</span>.removeDuplicates(configurations);</span><br><span class="line">        <span class="comment">//3.2.处理需要排除的配置</span></span><br><span class="line">        Set&lt;String&gt; exclusions =<span class="built_in">this</span>.getExclusions(annotationMetadata, attributes);</span><br><span class="line">        <span class="built_in">this</span>.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">        configurations.removeAll(exclusions);</span><br><span class="line">        configurations =<span class="built_in">this</span>.getConfigurationClassFilter().filter(configurations);</span><br><span class="line">        <span class="built_in">this</span>.fireAutoConfigurationImportEvents(configurations,exclusions);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationImportSelector</span>.AutoConfigurationEntry(configurations,exclusions);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="如何自定义一个SpringBoot-Srarter"><a href="#如何自定义一个SpringBoot-Srarter" class="headerlink" title="如何自定义一个SpringBoot Srarter?"></a>如何自定义一个SpringBoot Srarter?</h2><p><strong>1.</strong> <strong>创建一个项目，命名为demo-spring-boot-starter，引入SpringBoot相关依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.</strong> <strong>编写配置文件</strong></p>
<p>这里定义了属性配置的前缀</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//省略getter、setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.自动装配</strong></p>
<p>创建自动配置类HelloPropertiesConfigure</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloPropertiesConfigure</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.配置自动类</strong></p>
<p>在/resources/META-INF/spring.factories文件中添加自动配置类路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">cn.fighter3.demo.starter.configure.HelloPropertiesConfigure</span><br></pre></td></tr></table></figure>

<p><strong>5.测试</strong></p>
<ul>
<li>创建一个工程，引入自定义starter依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.fighter3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在配置文件里添加配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hello.name=张三</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloTest</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">HelloProperties helloProperties;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好，&quot;</span>+helloProperties.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830171452171.png" alt="image-20220830171452171" style="zoom:50%;" />

<hr>
<h2 id="Springboot-启动原理？"><a href="#Springboot-启动原理？" class="headerlink" title="Springboot 启动原理？"></a>Springboot 启动原理？</h2><p>SpringApplication 这个类主要做了以下四件事情：</p>
<p><strong>1.</strong> 推断应用的类型是普通的项目还是 Web 项目<br><strong>2.</strong> 查找并加载所有可用初始化器 ， 设置到 initializers 属性中<br><strong>3.</strong> 找出所有的应用程序监听器，设置到 listeners 属性中<br><strong>4.</strong> 推断并设置 main 方法的定义类，找到运行的主类</p>
<p>SpringBoot 启动大致流程如下 ：</p>
<p><img src="/img/%E9%9D%A2%E8%AF%95-Spring/image-20220830171724441.png" alt="image-20220830171724441"></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马程序员-Mybatis-Plus</title>
    <url>/2022/10/25/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/</url>
    <content><![CDATA[<h1 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h1><ul>
<li>了解Mybatis-Plus </li>
<li>整合Mybatis-Plus </li>
<li>通用CRUD </li>
<li>Mybatis-Plus的配置 </li>
<li>条件构造器</li>
</ul>
<h1 id="1、了解Mybatis-Plus"><a href="#1、了解Mybatis-Plus" class="headerlink" title="1、了解Mybatis-Plus"></a>1、了解Mybatis-Plus</h1><h2 id="1-1、Mybatis-Plus介绍"><a href="#1-1、Mybatis-Plus介绍" class="headerlink" title="1.1、Mybatis-Plus介绍"></a>1.1、Mybatis-Plus介绍</h2><p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高 效率而生。</p>
<p>官网：<a href="https://mybatis.plus/">https://mybatis.plus/</a> 或 <a href="https://mp.baomidou.com/">https://mp.baomidou.com/</a></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221025121634953.png" alt="image-20221025121634953"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221025121654252.png" alt="image-20221025121654252"></p>
<h2 id="1-2、代码以及文档"><a href="#1-2、代码以及文档" class="headerlink" title="1.2、代码以及文档"></a>1.2、代码以及文档</h2><p>文档地址：<a href="https://mybatis.plus/guide/">https://mybatis.plus/guide/</a> </p>
<p>源码地址：<a href="https://github.com/baomidou/mybatis-plus">https://github.com/baomidou/mybatis-plus</a></p>
<h2 id="1-3、特性"><a href="#1-3、特性" class="headerlink" title="1.3、特性"></a>1.3、特性</h2><ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑 </li>
<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作 </li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作， 更有强大的条件构造器，满足各类使用需求 </li>
<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错 </li>
<li><strong>支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、 SQLServer2005、SQLServer 等多种数据库 支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解 决主键问题 </li>
<li><strong>支持 XML 热加载</strong>：Mapper 对应的 XML 支持热加载，对于简单的 CRUD 操作，甚至可以无 XML 启动 支持 ActiveRecord 模式：</li>
<li><strong>支持 ActiveRecord 形式调用</strong>，实体类只需继承 Model 类即可进行强大的 CRUD 操 作 </li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ） </li>
<li><strong>支持关键词自动转义</strong>：支持数据库关键词（order、key……）自动转义，还可自定义关键词 </li>
<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码， 支持模板引擎，更有超多自定义配置等您来使用 </li>
<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询 内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询 </li>
<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作 </li>
<li><strong>内置 Sql 注入剥离器</strong>：支持 Sql 注入剥离，有效预防 Sql 注入攻击</li>
</ul>
<h2 id="1-4、架构"><a href="#1-4、架构" class="headerlink" title="1.4、架构"></a>1.4、架构</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221025122017908.png" alt="image-20221025122017908"></p>
<h2 id="1-5、作者"><a href="#1-5、作者" class="headerlink" title="1.5、作者"></a>1.5、作者</h2><p>Mybatis-Plus是由baomidou（苞米豆）组织开发并且开源的，目前该组织大概有30人左右。</p>
<p>码云地址：<a href="https://gitee.com/organizations/baomidou">https://gitee.com/organizations/baomidou</a></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221025122245055.png" alt="image-20221025122245055"></p>
<h1 id="2、快速开始"><a href="#2、快速开始" class="headerlink" title="2、快速开始"></a>2、快速开始</h1><p>对于Mybatis整合MP有常常有三种用法，分别是<code>Mybatis+MP</code>、<code>Spring+Mybatis+MP</code>、<code>Spring Boot+Mybatis+MP</code>。</p>
<h2 id="2-1、创建数据库以及表"><a href="#2-1、创建数据库以及表" class="headerlink" title="2.1、创建数据库以及表"></a>2.1、创建数据库以及表</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221025122741423.png" alt="image-20221025122741423"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建测试表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">`user_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">`email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="comment">-- 插入测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;18&#x27;</span>, <span class="string">&#x27;test1@itcast.cn&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;test2@itcast.cn&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;28&#x27;</span>, <span class="string">&#x27;test3@itcast.cn&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;zhaoliu&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;21&#x27;</span>, <span class="string">&#x27;test4@itcast.cn&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;sunqi&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;孙七&#x27;</span>, <span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;test5@itcast.cn&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="2-2、创建工程"><a href="#2-2、创建工程" class="headerlink" title="2.2、创建工程"></a>2.2、创建工程</h2><p><strong>创建maven工程</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221025142419290.png" alt="image-20221025142419290"></p>
<p><strong>配置依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-plus插件依赖 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- MySql --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--简化bean代码的工具包--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3、Mybatis-MP"><a href="#2-3、Mybatis-MP" class="headerlink" title="2.3、Mybatis + MP"></a>2.3、Mybatis + MP</h2><p>下面演示，通过纯Mybatis与Mybatis-Plus整合。</p>
<h3 id="2-3-1、创建子Module"><a href="#2-3-1、创建子Module" class="headerlink" title="2.3.1、创建子Module"></a>2.3.1、创建子Module</h3><p>![截屏2022-10-25 14.41.43](/img/黑马程序员-Mybatis-Plus/截屏2022-10-25 14.41.43.png)</p>
<p>![截屏2022-10-25 14.45.35](/img/黑马程序员-Mybatis-Plus/截屏2022-10-25 14.45.35.png)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itcast-mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itcast-mybatis-plus-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>新建配置文件</strong><code>log4j.properties</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG,A1</span><br><span class="line">log4j.appender.A1=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.A1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A1.layout.ConversionPattern=[%t] [%c]-[%p] %m%n</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221025145455050.png" alt="image-20221025145455050"></p>
<h3 id="2-3-2、Mybatis实现查询User"><a href="#2-3-2、Mybatis实现查询User" class="headerlink" title="2.3.2、Mybatis实现查询User"></a>2.3.2、Mybatis实现查询User</h3><p><strong>第一步，编写mybatis-config.xml文件</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>autoReconnect=true<span class="symbol">&amp;amp;</span>allowMultiQueries=true<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Xuwei19941214~&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221025150511683.png" alt="image-20221025150511683"></p>
<p>第二步，编写User实体对象：（这里使用lombok进行了进化bean操作）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.cn.itcast.mp.simple.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第三步，编写UserMapper接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.cn.itcast.mp.simple.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.cn.itcast.mp.simple.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第四步，编写UserMapper.xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.itcast.mp.simple.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.example.cn.itcast.mp.simple.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第五步，编写TestMybatis测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.example.cn.itcast.mp.simple.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.example.cn.itcast.mp.simple.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMybatis</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserList</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; list = userMapper.findAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[main] [org.apache.ibatis.logging.LogFactory]-[DEBUG] Logging initialized using <span class="string">&#x27;class org.apache.ibatis.logging.slf4j.Slf4jImpl&#x27;</span> adapter.</span><br><span class="line">[main] [org.apache.ibatis.datasource.pooled.PooledDataSource]-[DEBUG] PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">[main] [org.apache.ibatis.datasource.pooled.PooledDataSource]-[DEBUG] PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">[main] [org.apache.ibatis.datasource.pooled.PooledDataSource]-[DEBUG] PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">[main] [org.apache.ibatis.datasource.pooled.PooledDataSource]-[DEBUG] PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">[main] [org.apache.ibatis.transaction.jdbc.JdbcTransaction]-[DEBUG] Opening JDBC Connection</span><br><span class="line">[main] [org.apache.ibatis.datasource.pooled.PooledDataSource]-[DEBUG] Created connection 1997287019.</span><br><span class="line">[main] [org.apache.ibatis.transaction.jdbc.JdbcTransaction]-[DEBUG] Setting autocommit to <span class="literal">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@770c2e6b]</span><br><span class="line">[main] [org.example.cn.itcast.mp.simple.mapper.UserMapper.findAll]-[DEBUG] ==&gt;  Preparing: select * from tb_user </span><br><span class="line">[main] [org.example.cn.itcast.mp.simple.mapper.UserMapper.findAll]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.example.cn.itcast.mp.simple.mapper.UserMapper.findAll]-[DEBUG] &lt;==      Total: 5</span><br><span class="line">User(<span class="built_in">id</span>=1, userName=null, password=123456, name=张三, age=18, email=test1@itcast.cn)</span><br><span class="line">User(<span class="built_in">id</span>=2, userName=null, password=123456, name=李四, age=20, email=test2@itcast.cn)</span><br><span class="line">User(<span class="built_in">id</span>=3, userName=null, password=123456, name=王五, age=28, email=test3@itcast.cn)</span><br><span class="line">User(<span class="built_in">id</span>=4, userName=null, password=123456, name=赵六, age=21, email=test4@itcast.cn)</span><br><span class="line">User(<span class="built_in">id</span>=5, userName=null, password=123456, name=孙七, age=24, email=test5@itcast.cn)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>

<h3 id="2-3-3、Mybatis-MP实现查询User"><a href="#2-3-3、Mybatis-MP实现查询User" class="headerlink" title="2.3.3、Mybatis+MP实现查询User"></a>2.3.3、Mybatis+MP实现查询User</h3><p>第一步，将UserMapper继承BaseMapper，将拥有了BaseMapper中的所有方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.cn.itcast.mp.simple.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.example.cn.itcast.mp.simple.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二步，使用MP中的MybatisSqlSessionFactoryBuilder进程构建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.MybatisSqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.example.cn.itcast.mp.simple.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.example.cn.itcast.mp.simple.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMybatisPlus</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserList</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="comment">//这里使用的是MP中的MybatisSqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">MybatisSqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以调用BaseMapper中定义的方法</span></span><br><span class="line">        List&lt;User&gt; list = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行报错：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221026110214512.png" alt="image-20221026110214512"></p>
<p>解决：在<code>User</code>对象中添加<code>@TableName</code>，指定数据库表名</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221026110321585.png" alt="image-20221026110321585"></p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[main] [org.example.cn.itcast.mp.simple.mapper.UserMapper.selectList]-[DEBUG] ==&gt;  Preparing: SELECT id,user_name,password,name,age,email FROM tb_user </span><br><span class="line">[main] [org.example.cn.itcast.mp.simple.mapper.UserMapper.selectList]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.example.cn.itcast.mp.simple.mapper.UserMapper.selectList]-[DEBUG] &lt;==      Total: <span class="number">5</span></span><br><span class="line">User(id=<span class="number">1</span>, userName=zhangsan, password=<span class="number">123456</span>, name=张三, age=<span class="number">18</span>, email=test1<span class="meta">@itcast</span>.cn)</span><br><span class="line">User(id=<span class="number">2</span>, userName=lisi, password=<span class="number">123456</span>, name=李四, age=<span class="number">20</span>, email=test2<span class="meta">@itcast</span>.cn)</span><br><span class="line">User(id=<span class="number">3</span>, userName=wangwu, password=<span class="number">123456</span>, name=王五, age=<span class="number">28</span>, email=test3<span class="meta">@itcast</span>.cn)</span><br><span class="line">User(id=<span class="number">4</span>, userName=zhaoliu, password=<span class="number">123456</span>, name=赵六, age=<span class="number">21</span>, email=test4<span class="meta">@itcast</span>.cn)</span><br><span class="line">User(id=<span class="number">5</span>, userName=sunqi, password=<span class="number">123456</span>, name=孙七, age=<span class="number">24</span>, email=test5<span class="meta">@itcast</span>.cn)</span><br></pre></td></tr></table></figure>

<p>简单说明：</p>
<p>由于使用了<code>MybatisSqlSessionFactoryBuilder</code>进行了构建，继承的<code>BaseMapper</code>中的方法就载入到了 <code>SqlSession</code>中，所以就可以直接使用相关的方法；</p>
<p>如图：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221026110808833.png" alt="image-20221026110808833"></p>
<h2 id="2-4、Spring-Mybatis-MP"><a href="#2-4、Spring-Mybatis-MP" class="headerlink" title="2.4、Spring + Mybatis + MP"></a>2.4、Spring + Mybatis + MP</h2><p>引入了Spring框架，数据源、构建等工作就交给了Spring管理。</p>
<h3 id="2-4-1、创建子Module"><a href="#2-4-1、创建子Module" class="headerlink" title="2.4.1、创建子Module"></a>2.4.1、创建子Module</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221026111546338.png" alt="image-20221026111546338"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itcast-mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itcast-mybatis-plus-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-2、实现查询User"><a href="#2-4-2、实现查询User" class="headerlink" title="2.4.2、实现查询User"></a>2.4.2、实现查询User</h3><p>第一步，编写<code>jdbc.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/mp?</span></span><br><span class="line"><span class="attr">useUnicode</span>=<span class="string">true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>第二步，编写<code>applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描mapper接口，使用的依然是Mybatis原生的扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.example.cn.itcast.mp.simple.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第三步，编写User对象以及UserMapper接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.cn.itcast.mp.simple.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.cn.itcast.mp.simple.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.example.cn.itcast.mp.simple.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第四步，编写测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.cn.itcast.mp.simple.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.example.cn.itcast.mp.simple.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpringMP</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>添加测试模块的配置</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221026121206190.png" alt="image-20221026121206190"></p>
<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[main] [org.example.cn.itcast.mp.simple.mapper.UserMapper.selectList]-[DEBUG] ==&gt;  Preparing: SELECT <span class="built_in">id</span>,user_name,password,name,age,email FROM tb_user </span><br><span class="line">[main] [org.example.cn.itcast.mp.simple.mapper.UserMapper.selectList]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.example.cn.itcast.mp.simple.mapper.UserMapper.selectList]-[DEBUG] &lt;==      Total: 5</span><br><span class="line">[main] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@24959ca4]</span><br><span class="line">User(<span class="built_in">id</span>=1, userName=zhangsan, password=123456, name=张三, age=18, email=test1@itcast.cn)</span><br><span class="line">User(<span class="built_in">id</span>=2, userName=lisi, password=123456, name=李四, age=20, email=test2@itcast.cn)</span><br><span class="line">User(<span class="built_in">id</span>=3, userName=wangwu, password=123456, name=王五, age=28, email=test3@itcast.cn)</span><br><span class="line">User(<span class="built_in">id</span>=4, userName=zhaoliu, password=123456, name=赵六, age=21, email=test4@itcast.cn)</span><br><span class="line">User(<span class="built_in">id</span>=5, userName=sunqi, password=123456, name=孙七, age=24, email=test5@itcast.cn)</span><br></pre></td></tr></table></figure>

<h2 id="2-5、SpringBoot-Mybatis-MP"><a href="#2-5、SpringBoot-Mybatis-MP" class="headerlink" title="2.5、SpringBoot + Mybatis + MP"></a>2.5、SpringBoot + Mybatis + MP</h2><p>使用<code>SpringBoot</code>将进一步的简化<code>MP</code>的整合，需要注意的是，由于使用<code>SpringBoot</code>需要继承<code>parent</code>，所以需要重新创 建工程，并不是创建子<code>Module</code>。</p>
<h3 id="2-5-1、创建工程"><a href="#2-5-1、创建工程" class="headerlink" title="2.5.1、创建工程"></a>2.5.1、创建工程</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221026122123916.png" alt="image-20221026122123916"></p>
<h3 id="2-5-2、导入依赖"><a href="#2-5-2、导入依赖" class="headerlink" title="2.5.2、导入依赖"></a>2.5.2、导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itcast-mp-springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>itcast-mp-springboot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>itcast-mp-springboot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--简化代码的工具包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus的springboot支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>配置日志文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,A1</span></span><br><span class="line"><span class="attr">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">[%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221026150031093.png" alt="image-20221026150031093"></p>
<h3 id="2-5-3、编写application-properties"><a href="#2-5-3、编写application-properties" class="headerlink" title="2.5.3、编写application.properties"></a>2.5.3、编写application.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span> = <span class="string">itcast-mp-springboot</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/mp?</span></span><br><span class="line"><span class="attr">useUnicode</span>=<span class="string">true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging.level.com.baomidou.mybatisplus</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="comment">#项目mapper目录</span></span><br><span class="line"><span class="attr">logging.level.cn.itcast.mp.mapper</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.slf4j.Slf4jImpl</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221027112128002.png" alt="image-20221027112128002"></p>
<h3 id="2-5-4、编写pojo"><a href="#2-5-4、编写pojo" class="headerlink" title="2.5.4、编写pojo"></a>2.5.4、编写pojo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221026150647229.png" alt="image-20221026150647229"></p>
<h3 id="2-5-5、编写mapper"><a href="#2-5-5、编写mapper" class="headerlink" title="2.5.5、编写mapper"></a>2.5.5、编写mapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221026150733439.png" alt="image-20221026150733439"></p>
<h3 id="2-5-6、编写启动类"><a href="#2-5-6、编写启动类" class="headerlink" title="2.5.6、编写启动类"></a>2.5.6、编写启动类</h3><p>新建springboot项目时可以自动生成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.itcastmpspringboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.mp.mapper&quot;)</span> <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItcastMpSpringbootApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ItcastMpSpringbootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221026151123697.png" alt="image-20221026151123697"></p>
<h3 id="2-5-7、编写测试用例"><a href="#2-5-7、编写测试用例" class="headerlink" title="2.5.7、编写测试用例"></a>2.5.7、编写测试用例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ItcastMpSpringbootApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221026153826286.png" alt="image-20221026153826286"></p>
<p>可以正常查询出数据，但是idea工具会有一个报红</p>
<p><strong>解决方法</strong></p>
<p>将mapper层进行注入</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221026153924016.png" alt="image-20221026153924016"></p>
<h1 id="3、通用CRUD"><a href="#3、通用CRUD" class="headerlink" title="3、通用CRUD"></a>3、通用CRUD</h1><p>通过前面的学习，我们了解到通过继承BaseMapper就可以获取到各种各样的单表操作，接下来我们将详细讲解这些 操作。</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221027103547226.png" alt="image-20221027103547226"></p>
<h2 id="3-1、插入操作"><a href="#3-1、插入操作" class="headerlink" title="3.1、插入操作"></a>3.1、插入操作</h2><h3 id="3-1-1、方法定义"><a href="#3-1-1、方法定义" class="headerlink" title="3.1.1、方法定义"></a>3.1.1、方法定义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 插入一条记录</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(T entity)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2、测试用例"><a href="#3-1-2、测试用例" class="headerlink" title="3.1.2、测试用例"></a>3.1.2、测试用例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;test@itcast.cn&quot;</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;曹操&quot;</span>);</span><br><span class="line">        user.setUserName(<span class="string">&quot;caocao&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.insert(user); <span class="comment">//返回的result是受影响的行数，并不是自增后的id</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">        System.out.println(user.getId()); <span class="comment">//自增后的id会回填到对象中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-1-3、测试"><a href="#3-1-3、测试" class="headerlink" title="3.1.3、测试"></a>3.1.3、测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">27</span> <span class="number">11</span>:<span class="number">10</span>:<span class="number">19.222</span>  INFO <span class="number">1387</span> --- [           main] cn.itcast.mp.UserMapperTest              : Started UserMapperTest in <span class="number">3.961</span> seconds (JVM running <span class="keyword">for</span> <span class="number">5.2</span>)</span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">27</span> <span class="number">11</span>:<span class="number">10</span>:<span class="number">19.597</span> DEBUG <span class="number">1387</span> --- [           main] cn.itcast.mp.mapper.UserMapper.insert    : ==&gt;  Preparing: INSERT INTO <span class="title function_">tb_user</span> <span class="params">( id, user_name, password, name, age, email )</span> VALUES ( ?, ?, ?, ?, ?, ? ) </span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">27</span> <span class="number">11</span>:<span class="number">10</span>:<span class="number">19.620</span> DEBUG <span class="number">1387</span> --- [           main] cn.itcast.mp.mapper.UserMapper.insert    : ==&gt; Parameters: <span class="number">1585468910826754050</span>(Long), caocao(String), <span class="number">123456</span>(String), 曹操(String), <span class="number">20</span>(Integer), test<span class="meta">@itcast</span>.cn(String)</span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">27</span> <span class="number">11</span>:<span class="number">10</span>:<span class="number">19.626</span> DEBUG <span class="number">1387</span> --- [           main] cn.itcast.mp.mapper.UserMapper.insert    : &lt;==    Updates: <span class="number">1</span></span><br><span class="line">result = <span class="number">1</span></span><br><span class="line"><span class="number">1585468910826754050</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">27</span> <span class="number">11</span>:<span class="number">10</span>:<span class="number">19.654</span>  INFO <span class="number">1387</span> --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-<span class="number">1</span> - Shutdown initiated...</span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">27</span> <span class="number">11</span>:<span class="number">10</span>:<span class="number">19.690</span>  INFO <span class="number">1387</span> --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-<span class="number">1</span> - Shutdown completed.</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221027112345047.png" alt="image-20221027112345047"></p>
<p>可以看到，数据已经写入到了数据库，但是，id的值不正确，我们期望的是数据库自增长，实际是MP生成了id的值 写入到了数据库。 如何设置id的生成策略呢？</p>
<p>MP支持的id策略：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baomidou.mybatisplus.annotation;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 生成ID类型枚举类</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hubin</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 2015-11-10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">IdType</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 数据库ID自增</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">AUTO(<span class="number">0</span>),</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 该类型为未设置主键类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">NONE(<span class="number">1</span>),</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户输入ID</span></span><br><span class="line"><span class="comment">* &lt;p&gt;该类型可以通过自己注册自动填充插件进行填充&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">INPUT(<span class="number">2</span>),</span><br><span class="line"><span class="comment">/* 以下3种类型、只有当插入对象ID 为空，才自动填充。 */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 全局唯一ID (idWorker)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">ID_WORKER(<span class="number">3</span>),</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 全局唯一ID (UUID)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">UUID(<span class="number">4</span>),</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 字符串全局唯一ID (idWorker 的字符串表示)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">ID_WORKER_STR(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> key;</span><br><span class="line">IdType(<span class="type">int</span> key) &#123;</span><br><span class="line"><span class="built_in">this</span>.key = key;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改当前自增长的id</p>
<p>执行插入操作</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221027114545829.png" alt="image-20221027114545829"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221027121309606.png" alt="image-20221027121309606"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221027121339725.png" alt="image-20221027121339725"></p>
<h3 id="3-1-4、-TableField"><a href="#3-1-4、-TableField" class="headerlink" title="3.1.4、@TableField"></a>3.1.4、@TableField</h3><p>在MP中通过<code>@TableField</code>注解可以指定字段的一些属性，常常解决的问题有2个： </p>
<p>1、对象中的属性名和字段名不一致的问题（非驼峰） </p>
<p>2、对象中的属性字段在表中不存在的问题</p>
<p>使用：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221027121954576.png" alt="image-20221027121954576"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221027122717595.png" alt="image-20221027122717595"></p>
<p>添加<code>@TableField(exist = false )</code>后正常插入</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221027122919602.png" alt="image-20221027122919602"></p>
<p>其他用法，如大字段不加入查询字段：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221027122023261.png" alt="image-20221027122023261"></p>
<p>效果：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221027123203415.png" alt="image-20221027123203415"></p>
<h2 id="3-2、更新操作"><a href="#3-2、更新操作" class="headerlink" title="3.2、更新操作"></a>3.2、更新操作</h2><p>在MP中，更新操作有2种，一种是根据id更新，另一种是根据条件更新。</p>
<h3 id="3-2-1、根据id更新"><a href="#3-2-1、根据id更新" class="headerlink" title="3.2.1、根据id更新"></a>3.2.1、根据id更新</h3><p>方法定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据 ID 修改</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateById</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setId(<span class="number">6L</span>); <span class="comment">//主键</span></span><br><span class="line">       user.setAge(<span class="number">21</span>); <span class="comment">//更新的字段</span></span><br><span class="line">       <span class="comment">//根据id更新，更新不为null的字段</span></span><br><span class="line">       <span class="built_in">this</span>.userMapper.updateById(user);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-10-28 10:14:47.302  INFO 1261 --- [           main] c.i.m.ItcastMpSpringbootApplicationTests : Started ItcastMpSpringbootApplicationTests <span class="keyword">in</span> 4.081 seconds (JVM running <span class="keyword">for</span> 5.654)</span><br><span class="line">2022-10-28 10:14:47.603 DEBUG 1261 --- [           main] c.i.mp.mapper.UserMapper.updateById      : ==&gt;  Preparing: UPDATE tb_user SET age=? WHERE <span class="built_in">id</span>=? </span><br><span class="line">2022-10-28 10:14:47.637 DEBUG 1261 --- [           main] c.i.mp.mapper.UserMapper.updateById      : ==&gt; Parameters: 21(Integer), 6(Long)</span><br><span class="line">2022-10-28 10:14:47.643 DEBUG 1261 --- [           main] c.i.mp.mapper.UserMapper.updateById      : &lt;==    Updates: 1</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221028101737072.png" alt="image-20221028101737072"></p>
<h3 id="3-2-2、根据条件更新"><a href="#3-2-2、根据条件更新" class="headerlink" title="3.2.2、根据条件更新"></a>3.2.2、根据条件更新</h3><p>方法定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> entity 实体对象 (set 条件值,可以为 null)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt;</span></span><br><span class="line"><span class="params">updateWrapper)</span>;</span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateByQuery</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">     user.setAge(<span class="number">22</span>);</span><br><span class="line">	<span class="comment">//更新的条件</span></span><br><span class="line">     QueryWrapper&lt;User&gt; objectQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">     objectQueryWrapper.eq(<span class="string">&quot;id&quot;</span>,<span class="number">6</span>);</span><br><span class="line">	<span class="comment">//执行更新操作</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.update(user, objectQueryWrapper);</span><br><span class="line">     System.out.println(<span class="string">&quot;result=&quot;</span>+update);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>或者，通过UpdateWrapper进行更新：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testUpdateByUpdateWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">			<span class="comment">//更新的条件以及字段</span></span><br><span class="line">       UpdateWrapper&lt;User&gt; objectUpdateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">       objectUpdateWrapper.eq(<span class="string">&quot;id&quot;</span>,<span class="number">6</span>).set(<span class="string">&quot;age&quot;</span>,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//执行更新操作</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.update(<span class="literal">null</span>, objectUpdateWrapper);</span><br><span class="line">       System.out.println(<span class="string">&quot;result=&quot;</span>+update );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-10-28 10:25:53.316  INFO 1314 --- [           main] c.i.m.ItcastMpSpringbootApplicationTests : Started ItcastMpSpringbootApplicationTests <span class="keyword">in</span> 3.449 seconds (JVM running <span class="keyword">for</span> 4.88)</span><br><span class="line">2022-10-28 10:25:53.640 DEBUG 1314 --- [           main] cn.itcast.mp.mapper.UserMapper.update    : ==&gt;  Preparing: UPDATE tb_user SET age=? WHERE <span class="built_in">id</span> = ? </span><br><span class="line">2022-10-28 10:25:53.698 DEBUG 1314 --- [           main] cn.itcast.mp.mapper.UserMapper.update    : ==&gt; Parameters: 23(Integer), 6(Integer)</span><br><span class="line">2022-10-28 10:25:53.710 DEBUG 1314 --- [           main] cn.itcast.mp.mapper.UserMapper.update    : &lt;==    Updates: 1</span><br><span class="line">result=1</span><br><span class="line">2022-10-28 10:25:53.763  INFO 1314 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...</span><br><span class="line">2022-10-28 10:25:53.788  INFO 1314 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</span><br></pre></td></tr></table></figure>

<p>均可达到更新的效果。 关于<code>wrapper</code>更多的用法后面会详细讲解。</p>
<h2 id="3-3、删除操作"><a href="#3-3、删除操作" class="headerlink" title="3.3、删除操作"></a>3.3、删除操作</h2><h3 id="3-3-1、deleteById"><a href="#3-3-1、deleteById" class="headerlink" title="3.3.1、deleteById"></a>3.3.1、deleteById</h3><p>方法定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据 ID 删除</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id 主键ID</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//执行删除操作</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.deleteById(<span class="number">6L</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-10-28 10:28:49.951  INFO 1326 --- [           main] c.i.m.ItcastMpSpringbootApplicationTests : Started ItcastMpSpringbootApplicationTests <span class="keyword">in</span> 3.916 seconds (JVM running <span class="keyword">for</span> 5.418)</span><br><span class="line">2022-10-28 10:28:50.205 DEBUG 1326 --- [           main] c.i.mp.mapper.UserMapper.deleteById      : ==&gt;  Preparing: DELETE FROM tb_user WHERE <span class="built_in">id</span>=? </span><br><span class="line">2022-10-28 10:28:50.236 DEBUG 1326 --- [           main] c.i.mp.mapper.UserMapper.deleteById      : ==&gt; Parameters: 6(Long)</span><br><span class="line">2022-10-28 10:28:50.244 DEBUG 1326 --- [           main] c.i.mp.mapper.UserMapper.deleteById      : &lt;==    Updates: 1</span><br><span class="line">result = 1</span><br><span class="line">2022-10-28 10:28:50.293  INFO 1326 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...</span><br><span class="line">2022-10-28 10:28:50.318  INFO 1326 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221028102951516.png" alt="image-20221028102951516"></p>
<p>数据被删除。</p>
<h3 id="3-3-2、deleteByMap"><a href="#3-3-2、deleteByMap" class="headerlink" title="3.3.2、deleteByMap"></a>3.3.2、deleteByMap</h3><p>方法定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> columnMap 表字段 map 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">testDeleteByMap</span><span class="params">()</span>&#123;</span><br><span class="line">       HashMap&lt;String, Object&gt; objectObjectHashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       objectObjectHashMap.put(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line">       objectObjectHashMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.deleteByMap(objectObjectHashMap);</span><br><span class="line">       System.out.println(<span class="string">&quot;result=&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-10-28 10:35:20.650  INFO 1365 --- [           main] c.i.m.ItcastMpSpringbootApplicationTests : Started ItcastMpSpringbootApplicationTests <span class="keyword">in</span> 3.496 seconds (JVM running <span class="keyword">for</span> 4.92)</span><br><span class="line">2022-10-28 10:35:20.937 DEBUG 1365 --- [           main] c.i.mp.mapper.UserMapper.deleteByMap     : ==&gt;  Preparing: DELETE FROM tb_user WHERE name = ? AND age = ? </span><br><span class="line">2022-10-28 10:35:20.967 DEBUG 1365 --- [           main] c.i.mp.mapper.UserMapper.deleteByMap     : ==&gt; Parameters: 张三(String), 20(Integer)</span><br><span class="line">2022-10-28 10:35:20.974 DEBUG 1365 --- [           main] c.i.mp.mapper.UserMapper.deleteByMap     : &lt;==    Updates: 0</span><br><span class="line">result=0</span><br></pre></td></tr></table></figure>

<h3 id="3-3-3、delete"><a href="#3-3-3、delete" class="headerlink" title="3.3.3、delete"></a>3.3.3、delete</h3><p>方法定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> wrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span>;</span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByQueryWapper</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">      user.setAge(<span class="number">20</span>);</span><br><span class="line">      user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">      QueryWrapper&lt;User&gt; objectQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;(user);</span><br><span class="line">      <span class="type">int</span> <span class="variable">delete</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.delete(objectQueryWrapper);</span><br><span class="line">      System.out.println(<span class="string">&quot;result =&quot;</span>+ delete);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-10-28 10:45:13.485  INFO 1392 --- [           main] c.i.m.ItcastMpSpringbootApplicationTests : Started ItcastMpSpringbootApplicationTests <span class="keyword">in</span> 4.318 seconds (JVM running <span class="keyword">for</span> 6.039)</span><br><span class="line">2022-10-28 10:45:13.843 DEBUG 1392 --- [           main] cn.itcast.mp.mapper.UserMapper.delete    : ==&gt;  Preparing: DELETE FROM tb_user WHERE name=? AND age=? </span><br><span class="line">2022-10-28 10:45:13.889 DEBUG 1392 --- [           main] cn.itcast.mp.mapper.UserMapper.delete    : ==&gt; Parameters: 张三(String), 20(Integer)</span><br><span class="line">2022-10-28 10:45:13.896 DEBUG 1392 --- [           main] cn.itcast.mp.mapper.UserMapper.delete    : &lt;==    Updates: 0</span><br><span class="line">result =0</span><br></pre></td></tr></table></figure>

<h3 id="3-3-4、deleteBatchIds"><a href="#3-3-4、deleteBatchIds" class="headerlink" title="3.3.4、deleteBatchIds"></a>3.3.4、deleteBatchIds</h3><p>方法定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> idList 主键ID列表(不能为 null 以及 empty)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt;</span></span><br><span class="line"><span class="params">idList)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">testDeleteByBatchIds</span></span>()&#123;</span><br><span class="line">    //根据<span class="built_in">id</span>集合批量删除</span><br><span class="line">    int i = this.userMapper.deleteBatchIds(Arrays.asList(1L, 2L, 3L));</span><br><span class="line">    System.out.println(<span class="string">&quot;result =&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-10-28 10:49:29.675  INFO 1415 --- [           main] c.i.m.ItcastMpSpringbootApplicationTests : Started ItcastMpSpringbootApplicationTests <span class="keyword">in</span> 3.402 seconds (JVM running <span class="keyword">for</span> 4.826)</span><br><span class="line">2022-10-28 10:49:29.939 DEBUG 1415 --- [           main] c.i.mp.mapper.UserMapper.deleteBatchIds  : ==&gt;  Preparing: DELETE FROM tb_user WHERE <span class="built_in">id</span> IN ( ? , ? , ? ) </span><br><span class="line">2022-10-28 10:49:29.975 DEBUG 1415 --- [           main] c.i.mp.mapper.UserMapper.deleteBatchIds  : ==&gt; Parameters: 1(Long), 2(Long), 3(Long)</span><br><span class="line">2022-10-28 10:49:29.980 DEBUG 1415 --- [           main] c.i.mp.mapper.UserMapper.deleteBatchIds  : &lt;==    Updates: 3</span><br><span class="line">result =3</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221028105100892.png" alt="image-20221028105100892"></p>
<p>数据已删除。</p>
<h2 id="3-4、查询操作"><a href="#3-4、查询操作" class="headerlink" title="3.4、查询操作"></a>3.4、查询操作</h2><p>MP提供了多种查询操作，包括根据id查询、批量查询、查询单条数据、查询列表、分页查询等操作。</p>
<h3 id="3-4-1、selectById"><a href="#3-4-1、selectById" class="headerlink" title="3.4.1、selectById"></a>3.4.1、selectById</h3><p>方法定义：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* 根据 ID 查询</span><br><span class="line">*</span><br><span class="line">* @param <span class="built_in">id</span> 主键ID</span><br><span class="line">*/</span><br><span class="line">T selectById(Serializable <span class="built_in">id</span>);</span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//根据id查询数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectById(<span class="number">4L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result&quot;</span>+user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-10-28 11:00:38.546  INFO 1591 --- [           main] c.i.m.ItcastMpSpringbootApplicationTests : Started ItcastMpSpringbootApplicationTests <span class="keyword">in</span> 3.542 seconds (JVM running <span class="keyword">for</span> 5.09)</span><br><span class="line">2022-10-28 11:00:38.806 DEBUG 1591 --- [           main] c.i.mp.mapper.UserMapper.selectById      : ==&gt;  Preparing: SELECT <span class="built_in">id</span>,user_name,name,age,email AS mail FROM tb_user WHERE <span class="built_in">id</span>=? </span><br><span class="line">2022-10-28 11:00:38.836 DEBUG 1591 --- [           main] c.i.mp.mapper.UserMapper.selectById      : ==&gt; Parameters: 4(Long)</span><br><span class="line">2022-10-28 11:00:38.863 DEBUG 1591 --- [           main] c.i.mp.mapper.UserMapper.selectById      : &lt;==      Total: 1</span><br><span class="line">resultUser(<span class="built_in">id</span>=4, userName=zhaoliu, password=null, name=赵六, age=21, mail=test4@itcast.cn, address=null)</span><br></pre></td></tr></table></figure>

<h3 id="3-4-2、selectBatchIds"><a href="#3-4-2、selectBatchIds" class="headerlink" title="3.4.2、selectBatchIds"></a>3.4.2、selectBatchIds</h3><p>方法定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> idList 主键ID列表(不能为 null 以及 empty)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt;</span></span><br><span class="line"><span class="params">idList)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByBatchIds</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//根据id集合批量查询</span></span><br><span class="line">    List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectBatchIds(Arrays.asList(<span class="number">4L</span>, <span class="number">5L</span>, <span class="number">6L</span>, <span class="number">7L</span>, <span class="number">8L</span>));</span><br><span class="line">    <span class="keyword">for</span> (User user:users)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-10-28 11:04:38.814 DEBUG 1607 --- [           main] c.i.mp.mapper.UserMapper.selectBatchIds  : ==&gt;  Preparing: SELECT <span class="built_in">id</span>,user_name,name,age,email AS mail FROM tb_user WHERE <span class="built_in">id</span> IN ( ? , ? , ? , ? , ? ) </span><br><span class="line">2022-10-28 11:04:38.848 DEBUG 1607 --- [           main] c.i.mp.mapper.UserMapper.selectBatchIds  : ==&gt; Parameters: 4(Long), 5(Long), 6(Long), 7(Long), 8(Long)</span><br><span class="line">2022-10-28 11:04:38.875 DEBUG 1607 --- [           main] c.i.mp.mapper.UserMapper.selectBatchIds  : &lt;==      Total: 4</span><br><span class="line">User(<span class="built_in">id</span>=4, userName=zhaoliu, password=null, name=赵六, age=21, mail=test4@itcast.cn, address=null)</span><br><span class="line">User(<span class="built_in">id</span>=5, userName=sunqi, password=null, name=孙七, age=24, mail=test5@itcast.cn, address=null)</span><br><span class="line">User(<span class="built_in">id</span>=7, userName=caocao, password=null, name=曹操1, age=20, mail=<span class="built_in">test</span>@itcast.cn, address=null)</span><br><span class="line">User(<span class="built_in">id</span>=8, userName=caocao, password=null, name=曹操2, age=20, mail=<span class="built_in">test</span>@itcast.cn, address=null)</span><br></pre></td></tr></table></figure>

<h3 id="3-4-3、selectOne"><a href="#3-4-3、selectOne" class="headerlink" title="3.4.3、selectOne"></a>3.4.3、selectOne</h3><p>方法定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据 entity 条件，查询一条记录</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">T <span class="title function_">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testSelectOne</span><span class="params">()</span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; objectQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        objectQueryWrapper.eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line"><span class="comment">//        根据条件查询一条数据，如果超过一条会报错</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectOne(objectQueryWrapper);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p> 结果;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-10-28 11:11:44.288  INFO 1631 --- [           main] c.i.m.ItcastMpSpringbootApplicationTests : Started ItcastMpSpringbootApplicationTests <span class="keyword">in</span> 3.242 seconds (JVM running <span class="keyword">for</span> 4.637)</span><br><span class="line">2022-10-28 11:11:44.616 DEBUG 1631 --- [           main] c.itcast.mp.mapper.UserMapper.selectOne  : ==&gt;  Preparing: SELECT <span class="built_in">id</span>,user_name,name,age,email AS mail FROM tb_user WHERE name = ? </span><br><span class="line">2022-10-28 11:11:44.646 DEBUG 1631 --- [           main] c.itcast.mp.mapper.UserMapper.selectOne  : ==&gt; Parameters: 赵六(String)</span><br><span class="line">2022-10-28 11:11:44.677 DEBUG 1631 --- [           main] c.itcast.mp.mapper.UserMapper.selectOne  : &lt;==      Total: 1</span><br><span class="line">User(<span class="built_in">id</span>=4, userName=zhaoliu, password=null, name=赵六, age=21, mail=test4@itcast.cn, address=null)</span><br></pre></td></tr></table></figure>

<h3 id="3-4-4、selectCount"><a href="#3-4-4、selectCount" class="headerlink" title="3.4.4、selectCount"></a>3.4.4、selectCount</h3><p>方法定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Integer <span class="title function_">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">testSelectByCount</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    userQueryWrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">23</span>);<span class="comment">//年龄大于23</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectCount(userQueryWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;count=&quot;</span>+ integer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-10-28 11:22:52.858  INFO 1668 --- [           main] c.i.m.ItcastMpSpringbootApplicationTests : Started ItcastMpSpringbootApplicationTests <span class="keyword">in</span> 3.627 seconds (JVM running <span class="keyword">for</span> 5.165)</span><br><span class="line">2022-10-28 11:22:53.203 DEBUG 1668 --- [           main] c.i.mp.mapper.UserMapper.selectCount     : ==&gt;  Preparing: SELECT COUNT( 1 ) FROM tb_user WHERE age &gt; ? </span><br><span class="line">2022-10-28 11:22:53.241 DEBUG 1668 --- [           main] c.i.mp.mapper.UserMapper.selectCount     : ==&gt; Parameters: 23(Integer)</span><br><span class="line">2022-10-28 11:22:53.272 DEBUG 1668 --- [           main] c.i.mp.mapper.UserMapper.selectCount     : &lt;==      Total: 1</span><br><span class="line">count=1</span><br></pre></td></tr></table></figure>

<h3 id="3-4-5、selectList"><a href="#3-4-5、selectList" class="headerlink" title="3.4.5、selectList"></a>3.4.5、selectList</h3><p>方法定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">       QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">       userQueryWrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">       List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectList(userQueryWrapper);</span><br><span class="line">       <span class="keyword">for</span> (User user:users)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;user&quot;</span>+ user);</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">28</span> <span class="number">11</span>:<span class="number">28</span>:<span class="number">40.742</span>  INFO <span class="number">1700</span> --- [           main] c.i.m.ItcastMpSpringbootApplicationTests : Started ItcastMpSpringbootApplicationTests in <span class="number">3.223</span> seconds (JVM running <span class="keyword">for</span> <span class="number">4.632</span>)</span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">28</span> <span class="number">11</span>:<span class="number">28</span>:<span class="number">41.073</span> DEBUG <span class="number">1700</span> --- [           main] c.i.mp.mapper.UserMapper.selectList      : ==&gt;  Preparing: SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE age &gt; ? </span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">28</span> <span class="number">11</span>:<span class="number">28</span>:<span class="number">41.107</span> DEBUG <span class="number">1700</span> --- [           main] c.i.mp.mapper.UserMapper.selectList      : ==&gt; Parameters: <span class="number">20</span>(Integer)</span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">28</span> <span class="number">11</span>:<span class="number">28</span>:<span class="number">41.135</span> DEBUG <span class="number">1700</span> --- [           main] c.i.mp.mapper.UserMapper.selectList      : &lt;==      Total: <span class="number">2</span></span><br><span class="line">userUser(id=<span class="number">4</span>, userName=zhaoliu, password=<span class="literal">null</span>, name=赵六, age=<span class="number">21</span>, mail=test4<span class="meta">@itcast</span>.cn, address=<span class="literal">null</span>)</span><br><span class="line">userUser(id=<span class="number">5</span>, userName=sunqi, password=<span class="literal">null</span>, name=孙七, age=<span class="number">24</span>, mail=test5<span class="meta">@itcast</span>.cn, address=<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-4-6、selectPage"><a href="#3-4-6、selectPage" class="headerlink" title="3.4.6、selectPage"></a>3.4.6、selectPage</h3><p>方法定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> page 分页查询条件（可以为 RowBounds.DEFAULT）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">selectPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置分页插件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.mp.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221028114304530.png" alt="image-20221028114304530"></p>
<p>测试用例;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectPage</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">       userQueryWrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">       Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//根据条件查询数据</span></span><br><span class="line">       IPage&lt;User&gt; userIPage = <span class="built_in">this</span>.userMapper.selectPage(page, userQueryWrapper);</span><br><span class="line">       System.out.println(<span class="string">&quot;数据总条数：&quot;</span>+userIPage.getTotal());</span><br><span class="line">       System.out.println(<span class="string">&quot;总页数：&quot;</span>+userIPage.getPages());</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (User record : userIPage.getRecords()) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;user=&quot;</span>+record);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-10-28 11:41:24.264 DEBUG 1772 --- [           main] c.b.m.e.p.p.o.JsqlParserCountOptimize    : JsqlParserCountOptimize sql=SELECT  <span class="built_in">id</span>,user_name,name,age,email AS mail  FROM tb_user </span><br><span class="line"> </span><br><span class="line"> WHERE age &gt; ?</span><br><span class="line">2022-10-28 11:41:24.291 DEBUG 1772 --- [           main] c.i.mp.mapper.UserMapper.selectPage      : ==&gt;  Preparing: SELECT COUNT(1) FROM tb_user WHERE age &gt; ? </span><br><span class="line">2022-10-28 11:41:24.330 DEBUG 1772 --- [           main] c.i.mp.mapper.UserMapper.selectPage      : ==&gt; Parameters: 20(Integer)</span><br><span class="line">2022-10-28 11:41:24.362 DEBUG 1772 --- [           main] c.i.mp.mapper.UserMapper.selectPage      : ==&gt;  Preparing: SELECT <span class="built_in">id</span>,user_name,name,age,email AS mail FROM tb_user WHERE age &gt; ? LIMIT ?,? </span><br><span class="line">2022-10-28 11:41:24.366 DEBUG 1772 --- [           main] c.i.mp.mapper.UserMapper.selectPage      : ==&gt; Parameters: 20(Integer), 0(Long), 1(Long)</span><br><span class="line">2022-10-28 11:41:24.374 DEBUG 1772 --- [           main] c.i.mp.mapper.UserMapper.selectPage      : &lt;==      Total: 1</span><br><span class="line">数据总条数：2</span><br><span class="line">总页数：2</span><br><span class="line">user=User(<span class="built_in">id</span>=4, userName=zhaoliu, password=null, name=赵六, age=21, mail=test4@itcast.cn, address=null)</span><br></pre></td></tr></table></figure>

<h2 id="3-5、SQL注入的原理"><a href="#3-5、SQL注入的原理" class="headerlink" title="3.5、SQL注入的原理"></a>3.5、SQL注入的原理</h2><p>前面我们已经知道，MP在启动后会将<code>BaseMapper</code>中的一系列的方法注册到<code>meppedStatements</code>中，那么究竟是如 何注入的呢？流程又是怎么样的？下面我们将一起来分析下。 在MP中，<code>ISqlInjector</code>负责<code>SQL</code>的注入工作，它是一个接口，<code>AbstractSqlInjector</code>是它的实现类，实现关系如下：</p>
<p><code>ctrl+h</code>快速打开继承关系</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221028120423973.png" alt="image-20221028120423973"></p>
<p>在<code>AbstractSqlInjector</code>中，主要是由<code>inspectInject()</code>方法进行注入的，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inspectInject</span><span class="params">(MapperBuilderAssistant builderAssistant, Class&lt;?&gt; mapperClass)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; modelClass = <span class="built_in">this</span>.extractModelClass(mapperClass);</span><br><span class="line">        <span class="keyword">if</span> (modelClass != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> mapperClass.toString();</span><br><span class="line">            Set&lt;String&gt; mapperRegistryCache = GlobalConfigUtils.getMapperRegistryCache(builderAssistant.getConfiguration());</span><br><span class="line">            <span class="keyword">if</span> (!mapperRegistryCache.contains(className)) &#123;</span><br><span class="line">                List&lt;AbstractMethod&gt; methodList = <span class="built_in">this</span>.getMethodList();</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(methodList)) &#123;</span><br><span class="line">                    <span class="type">TableInfo</span> <span class="variable">tableInfo</span> <span class="operator">=</span> TableInfoHelper.initTableInfo(builderAssistant, modelClass);</span><br><span class="line">                  <span class="comment">// 循环注入自定义方法</span></span><br><span class="line">                    methodList.forEach((m) -&gt; &#123;</span><br><span class="line">                        m.inject(builderAssistant, mapperClass, modelClass, tableInfo);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    logger.debug(mapperClass.toString() + <span class="string">&quot;, No effective injection method was found.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                mapperRegistryCache.add(className);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在实现方法中， <code>methodList.forEach(m -&gt; m.inject(builderAssistant, mapperClass, modelClass, tableInfo)); </code>是关键，循环遍历方法，进行注入。</p>
<p>最终调用抽象方法<code>injectMappedStatement</code>进行真正的注入：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221028120809868.png" alt="image-20221028120809868"></p>
<p>以<code>SelectById</code>为例查看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectById</span> <span class="keyword">extends</span> <span class="title class_">AbstractMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SelectById</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MappedStatement <span class="title function_">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> &#123;</span><br><span class="line">        <span class="type">SqlMethod</span> <span class="variable">sqlMethod</span> <span class="operator">=</span> SqlMethod.LOGIC_SELECT_BY_ID;</span><br><span class="line">        <span class="type">SqlSource</span> <span class="variable">sqlSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RawSqlSource</span>(<span class="built_in">this</span>.configuration, String.format(sqlMethod.getSql(), <span class="built_in">this</span>.sqlSelectColumns(tableInfo, <span class="literal">false</span>), tableInfo.getTableName(), tableInfo.getKeyColumn(), tableInfo.getKeyProperty(), tableInfo.getLogicDeleteSql(<span class="literal">true</span>, <span class="literal">false</span>)), Object.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.addSelectMappedStatement(mapperClass, sqlMethod.getMethod(), sqlSource, modelClass, tableInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，生成了<code>SqlSource</code>对象，再将<code>SQL</code>通过<code>addSelectMappedStatement</code>方法添加到<code>meppedStatements</code>中。</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221028182012422.png" alt="image-20221028182012422"></p>
<h1 id="4、配置"><a href="#4、配置" class="headerlink" title="4、配置"></a>4、配置</h1><p>在MP中有大量的配置，其中有一部分是Mybatis原生的配置，另一部分是MP的配置，详情：<a href="https://mybatis.plus/c">https://mybatis.plus/c</a> onfig/ 下面我们对常用的配置做讲解。</p>
<h2 id="4-1、基本配置"><a href="#4-1、基本配置" class="headerlink" title="4.1、基本配置"></a>4.1、基本配置</h2><h3 id="4-1-1、configLocation"><a href="#4-1-1、configLocation" class="headerlink" title="4.1.1、configLocation"></a>4.1.1、configLocation</h3><p>MyBatis 配置文件位置，如果您有单独的 MyBatis 配置，请将其路径配置到 configLocation 中。 MyBatis Configuration 的具体内容请参考MyBatis 官方文档</p>
<p>Spring Boot：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mybatis-plus.config-location = classpath:mybatis-config.xml</span><br></pre></td></tr></table></figure>

<p>Spring MVC：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>演示1.在springboot配置文件中引入mybatis-plus配置地址;</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;?xml</span> <span class="string">version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="attr">&lt;!DOCTYPE</span> <span class="string">configuration</span></span><br><span class="line">        <span class="attr">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line">        <span class="attr">&quot;http</span>:<span class="string">//mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span></span><br><span class="line"><span class="attr">&lt;configuration&gt;</span></span><br><span class="line">    <span class="attr">&lt;plugins&gt;</span></span><br><span class="line">        <span class="attr">&lt;plugin</span> <span class="string">interceptor=&quot;com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor&quot;&gt;&lt;/plugin&gt;</span></span><br><span class="line">    <span class="attr">&lt;/plugins&gt;</span></span><br><span class="line"><span class="attr">&lt;/configuration&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221028184136424.png" alt="image-20221028184136424"></p>
<p>在springboot中添加mybatis-plus配置地址信息</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221028184623797.png" alt="image-20221028184623797"></p>
<p>将之前配置的分页插件注释掉</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221028184210257.png" alt="image-20221028184210257"></p>
<p>检测分页功能</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221028184255224.png" alt="image-20221028184255224"></p>
<p>演示2：spring配置文件中引入mybatis-config文件</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221028185218725.png" alt="image-20221028185218725"></p>
<h3 id="4-1-2、mapperLocations"><a href="#4-1-2、mapperLocations" class="headerlink" title="4.1.2、mapperLocations"></a>4.1.2、mapperLocations</h3><p>MyBatis Mapper 所对应的 XML 文件位置，如果您在 Mapper 中有自定义方法（XML 中有自定义实现），需要进行 该配置，告诉 Mapper 所对应的 XML 文件位置。</p>
<p>Spring Boot：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">mybatis-plus.mapper-locations</span> <span class="string">=</span> <span class="string">classpath*:mybatis/*.xml</span></span><br></pre></td></tr></table></figure>

<p>Spring MVC：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;bean</span> <span class="string">id=&quot;sqlSessionFactory&quot;</span></span><br><span class="line"><span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;&gt;</span></span><br><span class="line"><span class="attr">&lt;property</span> <span class="string">name=&quot;mapperLocations&quot; value=&quot;classpath*:mybatis/*.xml&quot;/&gt;</span></span><br><span class="line"><span class="attr">&lt;/bean&gt;</span></span><br></pre></td></tr></table></figure>

<p>Maven 多模块项目的扫描路径需以 <code>classpath*: </code>开头 （即加载多个 jar 包下的 XML 文件）</p>
<p>测试：</p>
<p>UserMapper.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.itcast.mp.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.itcast.mp.pojo.User&quot;</span>&gt;</span></span><br><span class="line">select * from tb_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByXml</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.findById(<span class="number">2L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-10-29 13:42:49.230  INFO 3115 --- [           main] c.i.m.ItcastMpSpringbootApplicationTests : Started ItcastMpSpringbootApplicationTests <span class="keyword">in</span> 3.257 seconds (JVM running <span class="keyword">for</span> 4.729)</span><br><span class="line">2022-10-29 13:42:49.609 DEBUG 3115 --- [           main] cn.itcast.mp.mapper.UserMapper.findById  : ==&gt;  Preparing: select * from tb_user <span class="built_in">where</span> <span class="built_in">id</span> = ? </span><br><span class="line">2022-10-29 13:42:49.648 DEBUG 3115 --- [           main] cn.itcast.mp.mapper.UserMapper.findById  : ==&gt; Parameters: 4(Long)</span><br><span class="line">2022-10-29 13:42:49.672 DEBUG 3115 --- [           main] cn.itcast.mp.mapper.UserMapper.findById  : &lt;==      Total: 1</span><br><span class="line">User(<span class="built_in">id</span>=4, userName=zhaoliu, password=123456, name=赵六, age=21, mail=null, address=null)</span><br><span class="line">2022-10-29 13:42:49.719  INFO 3115 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...</span><br><span class="line">2022-10-29 13:42:49.743  INFO 3115 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</span><br></pre></td></tr></table></figure>

<h3 id="4-1-3、typeAliasesPackage"><a href="#4-1-3、typeAliasesPackage" class="headerlink" title="4.1.3、typeAliasesPackage"></a>4.1.3、typeAliasesPackage</h3><p>MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名，注册后在 Mapper 对应的 XML 文件中可以直接使 用类名，而不用使用全限定的类名（即 XML 中调用的时候不用包含包名）。</p>
<p>Spring Boot：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">mybatis-plus.type-aliases-package</span> <span class="string">=</span> <span class="string">cn.itcast.mp.pojo</span></span><br></pre></td></tr></table></figure>

<p>Spring MVC：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;bean</span> <span class="string">id=&quot;sqlSessionFactory&quot;</span></span><br><span class="line"><span class="string">class=&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;property</span> <span class="string">name=&quot;typeAliasesPackage&quot;</span></span><br><span class="line"><span class="string">value=&quot;com.baomidou.mybatisplus.samples.quickstart.entity&quot;/&gt;</span></span><br><span class="line"><span class="string">&lt;/bean&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221029135138787.png" alt="image-20221029135138787"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-10-29 13:49:13.408  INFO 3144 --- [           main] c.i.m.ItcastMpSpringbootApplicationTests : Started ItcastMpSpringbootApplicationTests <span class="keyword">in</span> 3.007 seconds (JVM running <span class="keyword">for</span> 4.547)</span><br><span class="line">2022-10-29 13:49:13.829 DEBUG 3144 --- [           main] cn.itcast.mp.mapper.UserMapper.findById  : ==&gt;  Preparing: select * from tb_user <span class="built_in">where</span> <span class="built_in">id</span> = ? </span><br><span class="line">2022-10-29 13:49:13.866 DEBUG 3144 --- [           main] cn.itcast.mp.mapper.UserMapper.findById  : ==&gt; Parameters: 4(Long)</span><br><span class="line">2022-10-29 13:49:13.892 DEBUG 3144 --- [           main] cn.itcast.mp.mapper.UserMapper.findById  : &lt;==      Total: 1</span><br><span class="line">User(<span class="built_in">id</span>=4, userName=zhaoliu, password=123456, name=赵六, age=21, mail=null, address=null)</span><br><span class="line">2022-10-29 13:49:13.938  INFO 3144 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...</span><br><span class="line">2022-10-29 13:49:13.958  INFO 3144 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</span><br></pre></td></tr></table></figure>

<h2 id="4-2、进阶配置"><a href="#4-2、进阶配置" class="headerlink" title="4.2、进阶配置"></a>4.2、进阶配置</h2><p>本部分（Configuration）的配置大都为 MyBatis 原生支持的配置，这意味着您可以通过 MyBatis XML 配置文件的形 式进行配置。</p>
<h3 id="4-2-1、mapUnderscoreToCamelCase"><a href="#4-2-1、mapUnderscoreToCamelCase" class="headerlink" title="4.2.1、mapUnderscoreToCamelCase"></a>4.2.1、mapUnderscoreToCamelCase</h3><ul>
<li>类型： boolean </li>
<li>默认值： true</li>
</ul>
<p>是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属 性名 aColumn（驼峰命名） 的类似映射。</p>
<blockquote>
<p>注意： 此属性在 MyBatis 中原默认值为 false，在 MyBatis-Plus 中，此属性也将用于生成最终的 SQL 的 select body 如果您的数据库命名符合规则无需使用 @TableField 注解指定数据库字段名</p>
</blockquote>
<p>示例（SpringBoot）：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭自动驼峰映射，该参数不能和mybatis-plus.config-location同时存在</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.map-underscore-to-camel-case</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221029140044927.png" alt="image-20221029140044927"></p>
<h3 id="4-2-2、cacheEnabled"><a href="#4-2-2、cacheEnabled" class="headerlink" title="4.2.2、cacheEnabled"></a>4.2.2、cacheEnabled</h3><ul>
<li>类型： boolean </li>
<li>默认值： true</li>
</ul>
<p>全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存，默认为 true。</p>
<p>示例：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus.configuration.cache-enabled</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3、DB-策略配置"><a href="#4-3、DB-策略配置" class="headerlink" title="4.3、DB 策略配置"></a>4.3、DB 策略配置</h2><h3 id="4-3-1、idType"><a href="#4-3-1、idType" class="headerlink" title="4.3.1、idType"></a>4.3.1、idType</h3><ul>
<li>类型： com.baomidou.mybatisplus.annotation.IdType </li>
<li>默认值： ID_WORKER</li>
</ul>
<p>全局默认主键类型，设置后，即可省略实体对象中的<code>@TableId(type = IdType.AUTO)</code>配置。</p>
<p>示例： SpringBoot：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus.global-config.db-config.id-type</span>=<span class="string">auto</span></span><br></pre></td></tr></table></figure>

<p>SpringMVC：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="attr">&lt;bean</span> <span class="string">id=&quot;sqlSessionFactory&quot;</span></span><br><span class="line"><span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;&gt;</span></span><br><span class="line">	<span class="attr">&lt;property</span> <span class="string">name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span></span><br><span class="line">	<span class="attr">&lt;property</span> <span class="string">name=&quot;globalConfig&quot;&gt;</span></span><br><span class="line">		<span class="attr">&lt;bean</span> <span class="string">class=&quot;com.baomidou.mybatisplus.core.config.GlobalConfig&quot;&gt;</span></span><br><span class="line">				<span class="attr">&lt;property</span> <span class="string">name=&quot;dbConfig&quot;&gt;</span></span><br><span class="line">						<span class="attr">&lt;bean</span> <span class="string">class=&quot;com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig&quot;&gt;</span></span><br><span class="line">								<span class="attr">&lt;property</span> <span class="string">name=&quot;idType&quot; value=&quot;AUTO&quot;/&gt;</span></span><br><span class="line">						<span class="attr">&lt;/bean&gt;</span></span><br><span class="line">				<span class="attr">&lt;/property&gt;</span></span><br><span class="line">		<span class="attr">&lt;/bean&gt;</span></span><br><span class="line">	<span class="attr">&lt;/property&gt;</span></span><br><span class="line"><span class="attr">&lt;/bean&gt;</span></span><br></pre></td></tr></table></figure>

<p>演示</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221029144142516.png" alt="image-20221029144142516"></p>
<h3 id="4-3-2、tablePrefix"><a href="#4-3-2、tablePrefix" class="headerlink" title="4.3.2、tablePrefix"></a>4.3.2、tablePrefix</h3><ul>
<li>类型： String </li>
<li>默认值： null</li>
</ul>
<p>表名前缀，全局配置后可省略@TableName()配置。</p>
<p>SpringBoot：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus.global-config.db-config.table-prefix</span>=<span class="string">tb_</span></span><br></pre></td></tr></table></figure>

<p>SpringMVC：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="attr">&lt;bean</span> <span class="string">id=&quot;sqlSessionFactory&quot;</span></span><br><span class="line"><span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;&gt;</span></span><br><span class="line">	<span class="attr">&lt;property</span> <span class="string">name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span></span><br><span class="line">	<span class="attr">&lt;property</span> <span class="string">name=&quot;globalConfig&quot;&gt;</span></span><br><span class="line">		<span class="attr">&lt;bean</span> <span class="string">class=&quot;com.baomidou.mybatisplus.core.config.GlobalConfig&quot;&gt;</span></span><br><span class="line">				<span class="attr">&lt;property</span> <span class="string">name=&quot;dbConfig&quot;&gt;</span></span><br><span class="line">						<span class="attr">&lt;bean</span> <span class="string">class=&quot;com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig&quot;&gt;</span></span><br><span class="line">								<span class="attr">&lt;property</span> <span class="string">name=&quot;idType&quot; value=&quot;AUTO&quot;/&gt;</span></span><br><span class="line">								</span><br><span class="line">						<span class="attr">&lt;/bean&gt;</span></span><br><span class="line">				<span class="attr">&lt;/property&gt;</span></span><br><span class="line">		<span class="attr">&lt;/bean&gt;</span></span><br><span class="line">	<span class="attr">&lt;/property&gt;</span></span><br><span class="line"><span class="attr">&lt;/bean&gt;</span></span><br></pre></td></tr></table></figure>
<p>演示：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221029150606459.png" alt="image-20221029150606459"></p>
<h1 id="5、条件构造器"><a href="#5、条件构造器" class="headerlink" title="5、条件构造器"></a>5、条件构造器</h1><p>在MP中，Wrapper接口的实现类关系如下：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031121959035.png" alt="image-20221031121959035"></p>
<p>可以看到，AbstractWrapper和AbstractChainWrapper是重点实现，接下来我们重点学习AbstractWrapper以及其 子类。</p>
<p>说明: QueryWrapper(LambdaQueryWrapper) 和 UpdateWrapper(LambdaUpdateWrapper) 的父类 用于生成 sql 的 where 条件, entity 属性也用于生成 sql 的 where 条件 注意: entity 生成的 where 条件与 使用各个 api 生成 的 where 条件没有任何关联行为</p>
<h2 id="5-1、allEq"><a href="#5-1、allEq" class="headerlink" title="5.1、allEq"></a>5.1、allEq</h2><h3 id="5-1-1、说明"><a href="#5-1-1、说明" class="headerlink" title="5.1.1、说明"></a>5.1.1、说明</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">allEq(Map&lt;R, V&gt; params)</span><br><span class="line">allEq(Map&lt;R, V&gt; params, <span class="type">boolean</span> null2IsNull)</span><br><span class="line">allEq(<span class="type">boolean</span> condition, Map&lt;R, V&gt; params, <span class="type">boolean</span> null2IsNull)</span><br></pre></td></tr></table></figure>

<h4 id="全部eq-或个别isNull"><a href="#全部eq-或个别isNull" class="headerlink" title="全部eq(或个别isNull)"></a>全部eq(或个别isNull)</h4><p>个别参数说明: </p>
<ul>
<li><code>params</code> : key 为数据库字段名, value 为字段值 </li>
<li><code>null2IsNull</code> : 为 true 则在 map 的 value 为 null 时调用<code>isNull</code>方法,为 false 时则<code>忽略 value 为 null </code>的</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例<span class="number">1</span>: allEq(&#123;id:<span class="number">1</span>,name:<span class="string">&quot;老王&quot;</span>,age:<span class="literal">null</span>&#125;) ---&gt; id = <span class="number">1</span> <span class="type">and</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&#x27;老王&#x27;</span> and age is <span class="literal">null</span></span><br><span class="line">例<span class="number">2</span>: allEq(&#123;id:<span class="number">1</span>,name:<span class="string">&quot;老王&quot;</span>,age:<span class="literal">null</span>&#125;, <span class="literal">false</span>) ---&gt; id = <span class="number">1</span> <span class="type">and</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&#x27;老王&#x27;</span></span><br></pre></td></tr></table></figure>

<p>演示：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031124213548.png" alt="image-20221031124213548"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031124317921.png" alt="image-20221031124317921"></p>
<h4 id="个别参数说明-filter"><a href="#个别参数说明-filter" class="headerlink" title="个别参数说明: filter"></a>个别参数说明: filter</h4><p>过滤函数,是否允许字段传入比对条件中 <code>params </code>与 <code>null2IsNull </code>: 同上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例<span class="number">1</span>: allEq((k,v) -&gt; k.indexOf(<span class="string">&quot;a&quot;</span>) &gt; <span class="number">0</span>, &#123;id:<span class="number">1</span>,name:<span class="string">&quot;老王&quot;</span>,age:<span class="literal">null</span>&#125;) ---&gt; name = <span class="string">&#x27;老王&#x27;</span></span><br><span class="line">and age is <span class="literal">null</span></span><br><span class="line">例<span class="number">2</span>: allEq((k,v) -&gt; k.indexOf(<span class="string">&quot;a&quot;</span>) &gt; <span class="number">0</span>, &#123;id:<span class="number">1</span>,name:<span class="string">&quot;老王&quot;</span>,age:<span class="literal">null</span>&#125;, <span class="literal">false</span>) ---&gt; name =</span><br><span class="line"><span class="string">&#x27;老王&#x27;</span></span><br></pre></td></tr></table></figure>

<p>演示：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031130105531.png" alt="image-20221031130105531"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031130220538.png" alt="image-20221031130220538"></p>
<h2 id="5-2、基本比较操作"><a href="#5-2、基本比较操作" class="headerlink" title="5.2、基本比较操作"></a>5.2、基本比较操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eq</span><br><span class="line">	等于 =</span><br><span class="line">ne</span><br><span class="line">	不等于 &lt;&gt;</span><br><span class="line">gt</span><br><span class="line">	大于 &gt;</span><br><span class="line">ge</span><br><span class="line">	大于等于 &gt;=</span><br><span class="line">lt</span><br><span class="line">	小于 &lt;</span><br><span class="line">le</span><br><span class="line">	小于等于 &lt;=</span><br><span class="line">between</span><br><span class="line">	B	ETWEEN 值<span class="number">1</span> AND 值<span class="number">2</span></span><br><span class="line">notBetween</span><br><span class="line">	NOT BETWEEN 值<span class="number">1</span> AND 值<span class="number">2</span></span><br><span class="line">in</span><br><span class="line">	字段 IN (value.get(<span class="number">0</span>), value.get(<span class="number">1</span>), ...)</span><br><span class="line">notIn</span><br><span class="line">	字段 NOT <span class="title function_">IN</span> <span class="params">(v0, v1, ...)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>演示</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031131021026.png" alt="image-20221031131021026"></p>
<h2 id="5-3、模糊查询"><a href="#5-3、模糊查询" class="headerlink" title="5.3、模糊查询"></a>5.3、模糊查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">like</span><br><span class="line">		LIKE <span class="string">&#x27;%值%&#x27;</span></span><br><span class="line">		例: like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王&quot;</span>) ---&gt; name like <span class="string">&#x27;%王%&#x27;</span></span><br><span class="line">notLike</span><br><span class="line">		NOT LIKE <span class="string">&#x27;%值%&#x27;</span></span><br><span class="line">		例: notLike(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王&quot;</span>) ---&gt; name not like <span class="string">&#x27;%王%&#x27;</span></span><br><span class="line">likeLeft</span><br><span class="line">		LIKE <span class="string">&#x27;%值&#x27;</span>s</span><br><span class="line">		例: likeLeft(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王&quot;</span>) ---&gt; name like <span class="string">&#x27;%王&#x27;</span></span><br><span class="line">likeRight</span><br><span class="line">		LIKE <span class="string">&#x27;值%&#x27;</span></span><br><span class="line">		例: likeRight(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王&quot;</span>) ---&gt; name like <span class="string">&#x27;王%&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>演示</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031135149453.png" alt="image-20221031135149453"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031135824338.png" alt="image-20221031135824338"></p>
<h2 id="5-4、排序"><a href="#5-4、排序" class="headerlink" title="5.4、排序"></a>5.4、排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">orderBy</span><br><span class="line">		排序：ORDER BY 字段, ...</span><br><span class="line">		例: orderBy(<span class="literal">true</span>, <span class="literal">true</span>, <span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>) ---&gt; order by id ASC,name ASC</span><br><span class="line">orderByAsc</span><br><span class="line">		排序：ORDER BY 字段, ... ASC</span><br><span class="line">		例: orderByAsc(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>) ---&gt; order by id ASC,name ASC</span><br><span class="line">orderByDesc</span><br><span class="line">		排序：ORDER BY 字段, ... DESC</span><br><span class="line">		例: orderByDesc(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>) ---&gt; order by id DESC,name DESC</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031140819993.png" alt="image-20221031140819993"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031141233451.png" alt="image-20221031141233451"></p>
<h2 id="5-5、逻辑查询"><a href="#5-5、逻辑查询" class="headerlink" title="5.5、逻辑查询"></a>5.5、逻辑查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">or</span><br><span class="line">		拼接 OR</span><br><span class="line">    主动调用 or 表示紧接着下一个方法不是用 and 连接!(不调用 or 则默认为使用 and 连接)</span><br><span class="line">and</span><br><span class="line">		AND 嵌套</span><br><span class="line">		例: and(i -&gt; i.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李白&quot;</span>).ne(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;活着&quot;</span>)) ---&gt; and (name = <span class="string">&#x27;李白&#x27;</span> and status &lt;&gt; <span class="string">&#x27;活着&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>演示：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031141838014.png" alt="image-20221031141838014"></p>
<h2 id="5-6、select"><a href="#5-6、select" class="headerlink" title="5.6、select"></a>5.6、select</h2><p>在MP查询中，默认查询所有的字段，如果有需要也可以通过<code>select</code>方法进行指定字段。</p>
<p>演示</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031153051092.png" alt="image-20221031153051092"></p>
<h1 id="6、-ActiveRecord"><a href="#6、-ActiveRecord" class="headerlink" title="6、 ActiveRecord"></a>6、 ActiveRecord</h1><p>ActiveRecord（简称AR）一直广受动态语言（ PHP 、 Ruby 等）的喜爱，而 Java 作为准静态语言，对于 ActiveRecord 往往只能感叹其优雅，所以我们也在 AR 道路上进行了一定的探索，喜欢大家能够喜欢。</p>
<p>什么是ActiveRecord？ </p>
<p>ActiveRecord也属于ORM（对象关系映射）层，由Rails最早提出，遵循标准的ORM模型：表映射到记录，记 录映射到对象，字段映射到对象属性。配合遵循的命名和配置惯例，能够很大程度的快速实现模型的操作，而 且简洁易懂。</p>
<p><code>ActiveRecord</code>的主要思想是：</p>
<ul>
<li> 每一个数据库表对应创建一个类，类的每一个对象实例对应于数据库中表的一行记录；通常表的每个字段 在类中都有相应的Field； </li>
<li>ActiveRecord同时负责把自己持久化，在ActiveRecord中封装了对数据库的访问，即CURD; </li>
<li>ActiveRecord是一种领域模型(Domain Model)，封装了部分业务逻辑；</li>
</ul>
<h2 id="6-1、开启AR之旅"><a href="#6-1、开启AR之旅" class="headerlink" title="6.1、开启AR之旅"></a>6.1、开启AR之旅</h2><p>在MP中，开启AR非常简单，只需要将实体对象继承<code>Model</code>即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.activerecord.Model;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">//@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Model</span>&lt;User&gt; &#123;</span><br><span class="line"><span class="comment">//    @TableId(type= IdType.AUTO) //指定id类型为自增长</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@TableField(select = false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;email&quot;)</span><span class="comment">//解决字段名不一致</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line">    <span class="meta">@TableField(exist = false )</span></span><br><span class="line">    <span class="keyword">private</span> String address;<span class="comment">//该字段在数据库表中不存在</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-2、根据主键查询"><a href="#6-2、根据主键查询" class="headerlink" title="6.2、根据主键查询"></a>6.2、根据主键查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAR</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">     user.setId(<span class="number">4L</span>);</span><br><span class="line">     <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> user.selectById();</span><br><span class="line">     System.out.println(user1);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031155306066.png" alt="image-20221031155306066"></p>
<h2 id="6-3、新增数据"><a href="#6-3、新增数据" class="headerlink" title="6.3、新增数据"></a>6.3、新增数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testARInster</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setUserName(<span class="string">&quot;刘备&quot;</span>);</span><br><span class="line">       user.setAge(<span class="number">30</span>);</span><br><span class="line">       user.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">       user.setMail(<span class="string">&quot;liubei@qq.com&quot;</span>);</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">insert</span> <span class="operator">=</span> user.insert();</span><br><span class="line">       System.out.println(insert);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031160710800.png" alt="image-20221031160710800"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031160805990.png" alt="image-20221031160805990"></p>
<h2 id="6-5、更新操作"><a href="#6-5、更新操作" class="headerlink" title="6.5、更新操作"></a>6.5、更新操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testARUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">  user.setId(<span class="number">10L</span>);</span><br><span class="line">  user.setName(<span class="string">&quot;999&quot;</span>);</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> user.updateById();</span><br><span class="line">  System.out.println(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031161124086.png" alt="image-20221031161124086"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031161151596.png" alt="image-20221031161151596"></p>
<h2 id="6-6、删除操作"><a href="#6-6、删除操作" class="headerlink" title="6.6、删除操作"></a>6.6、删除操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testARDelete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">10L</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> user.deleteById(user);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031161347813.png" alt="image-20221031161347813"></p>
<h2 id="6-7、根据条件查询"><a href="#6-7、根据条件查询" class="headerlink" title="6.7、根据条件查询"></a>6.7、根据条件查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testARQuery</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">      QueryWrapper&lt;User&gt; objectQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">      objectQueryWrapper.le(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">      List&lt;User&gt; users = user.selectList(objectQueryWrapper);</span><br><span class="line">      users.forEach(user1 -&gt; System.out.println(user1));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031163524827.png" alt="image-20221031163524827"></p>
<h1 id="7、-Oracle-主键Sequence"><a href="#7、-Oracle-主键Sequence" class="headerlink" title="7、 Oracle 主键Sequence"></a>7、 Oracle 主键Sequence</h1><p>在mysql中，主键往往是自增长的，这样使用起来是比较方便的，如果使用的是Oracle数据库，那么就不能使用自增 长了，就得使用Sequence 序列生成id值了。</p>
<h2 id="7-1、部署Oracle环境"><a href="#7-1、部署Oracle环境" class="headerlink" title="7.1、部署Oracle环境"></a>7.1、部署Oracle环境</h2><p>为了简化环境部署，这里使用<code>Docker</code>环境进行部署安装<code>Oracle</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">docker pull sath89/oracle-12c</span><br><span class="line"><span class="comment">#创建容器</span></span><br><span class="line">docker create --name oracle -p 1521:1521 sath89/oracle-12c</span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">docker start oracle &amp;&amp; docker logs -f oracle</span><br><span class="line"><span class="comment">#下面是启动过程</span></span><br><span class="line">Database not initialized. Initializing database.</span><br><span class="line">Starting tnslsnr</span><br><span class="line">Copying database files</span><br><span class="line">1% complete</span><br><span class="line">3% complete</span><br><span class="line">11% complete</span><br><span class="line">18% complete</span><br><span class="line">26% complete</span><br><span class="line">37% complete</span><br><span class="line">Creating and starting Oracle instance</span><br><span class="line">40% complete</span><br><span class="line">45% complete</span><br><span class="line">50% complete</span><br><span class="line">55% complete</span><br><span class="line">56% complete</span><br><span class="line">60% complete</span><br><span class="line">62% complete</span><br><span class="line">Completing Database Creation</span><br><span class="line">66% complete</span><br><span class="line">70% complete</span><br><span class="line">73% complete</span><br><span class="line">85% complete</span><br><span class="line">96% complete</span><br><span class="line">100% complete</span><br><span class="line">Look at the <span class="built_in">log</span> file <span class="string">&quot;/u01/app/oracle/cfgtoollogs/dbca/xe/xe.log&quot;</span> <span class="keyword">for</span> further details.</span><br><span class="line">Configuring Apex console</span><br><span class="line">Database initialized. Please visit http://<span class="comment">#containeer:8080/em</span></span><br><span class="line">http://<span class="comment">#containeer:8080/apex for extra configuration if needed</span></span><br><span class="line">Starting web management console</span><br><span class="line">PL/SQL procedure successfully completed.</span><br><span class="line">Starting import from <span class="string">&#x27;/docker-entrypoint-initdb.d&#x27;</span>:</span><br><span class="line"><span class="built_in">ls</span>: cannot access /docker-entrypoint-initdb.d/*: No such file or directory</span><br><span class="line">Import finished</span><br><span class="line">Database ready to use. Enjoy! ;)</span><br><span class="line"><span class="comment">#通过用户名密码即可登录</span></span><br><span class="line">用户名和密码为： system/oracle</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面使用navicat12进行连接并操作oracle，使用资料中提供的安装包，可以试用14天。</p>
<p>需要注意的是：由于安装的Oracle是64位版本，所以navicat也是需要使用64为版本，否则连接不成功。</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031164832681.png" alt="image-20221031164832681"></p>
<p>连接成功：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031164901839.png" alt="image-20221031164901839"></p>
<h2 id="7-2、创建表以及序列"><a href="#7-2、创建表以及序列" class="headerlink" title="7.2、创建表以及序列"></a>7.2、创建表以及序列</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建表，表名以及字段名都要大写</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;TB_USER&quot; (</span><br><span class="line">&quot;ID&quot; NUMBER(<span class="number">20</span>) VISIBLE <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">&quot;USER_NAME&quot; VARCHAR2(<span class="number">255</span> BYTE) VISIBLE ,</span><br><span class="line">&quot;PASSWORD&quot; VARCHAR2(<span class="number">255</span> BYTE) VISIBLE ,</span><br><span class="line">&quot;NAME&quot; VARCHAR2(<span class="number">255</span> BYTE) VISIBLE ,</span><br><span class="line">&quot;AGE&quot; NUMBER(<span class="number">10</span>) VISIBLE ,</span><br><span class="line">&quot;EMAIL&quot; VARCHAR2(<span class="number">255</span> BYTE) VISIBLE</span><br><span class="line">)</span><br><span class="line"><span class="comment">--创建序列</span></span><br><span class="line"><span class="keyword">CREATE</span> SEQUENCE SEQ_USER <span class="keyword">START</span> <span class="keyword">WITH</span> <span class="number">1</span> INCREMENT <span class="keyword">BY</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="7-3、jdbc驱动包"><a href="#7-3、jdbc驱动包" class="headerlink" title="7.3、jdbc驱动包"></a>7.3、jdbc驱动包</h2><p>由于版权原因，我们不能直接通过maven的中央仓库下载oracle数据库的jdbc驱动包，所以我们需要将驱动包安装到 本地仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ojdbc8.jar文件在资料中可以找到</span></span><br><span class="line">mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc8 -Dversion=12.1.0.1 -</span><br><span class="line">Dpackaging=jar -Dfile=ojdbc8.jar</span><br></pre></td></tr></table></figure>

<p>安装完成后的坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>12.1.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-4、修改application-properties"><a href="#7-4、修改application-properties" class="headerlink" title="7.4、修改application.properties"></a>7.4、修改application.properties</h2><p>对于application.properties的修改，需要修改2个位置，分别是：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据库连接配置</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">oracle.jdbc.OracleDriver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:oracle:thin:@192.168.31.81:1521:xe</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">system</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">oracle</span></span><br><span class="line"><span class="comment">#id生成策略</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.id-type</span>=<span class="string">input</span></span><br></pre></td></tr></table></figure>

<h2 id="7-5、配置序列"><a href="#7-5、配置序列" class="headerlink" title="7.5、配置序列"></a>7.5、配置序列</h2><p>使用Oracle的序列需要做2件事情：</p>
<p>第一，需要配置MP的序列生成器到Spring容器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.incrementer.OracleKeyGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.mp.mapper&quot;)</span> <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 分页插件</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 序列生成器</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> OracleKeyGenerator <span class="title function_">oracleKeyGenerator</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OracleKeyGenerator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二，在实体对象中指定序列的名称：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@KeySequence(value = &quot;SEQ_USER&quot;, clazz = Long.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.7、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">  user.setAge(<span class="number">20</span>);</span><br><span class="line">  user.setEmail(<span class="string">&quot;test@itcast.cn&quot;</span>);</span><br><span class="line">  user.setName(<span class="string">&quot;曹操&quot;</span>);</span><br><span class="line">  user.setUserName(<span class="string">&quot;caocao&quot;</span>);</span><br><span class="line">  user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">  <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.insert(user); <span class="comment">//返回的result是受影响的行数，并不是自增后的id</span></span><br><span class="line">  System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">  System.out.println(user.getId()); <span class="comment">//自增后的id会回填到对象中</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectById(<span class="number">8L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031165648820.png" alt="image-20221031165648820"></p>
<h1 id="8、插件"><a href="#8、插件" class="headerlink" title="8、插件"></a>8、插件</h1><h2 id="3-1、mybatis的插件机制"><a href="#3-1、mybatis的插件机制" class="headerlink" title="3.1、mybatis的插件机制"></a>3.1、mybatis的插件机制</h2><p>MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法 调用包括：</p>
<ol>
<li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed) </li>
<li>ParameterHandler (getParameterObject, setParameters) </li>
<li>ResultSetHandler (handleResultSets, handleOutputParameters)</li>
<li>StatementHandler (prepare, parameterize, batch, update, query)</li>
</ol>
<p>我们看到了可以拦截Executor接口的部分方法，比如update，query，commit，rollback等方法，还有其他接口的 一些方法等。</p>
<p>总体概括为： </p>
<ol>
<li>拦截执行器的方法 </li>
<li>拦截参数的处理 </li>
<li>拦截结果集的处理 </li>
<li>拦截Sql语法构建的处理</li>
</ol>
<p>拦截器示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.plugins;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Intercepts(&#123;@Signature(</span></span><br><span class="line"><span class="meta">        type= Executor.class,</span></span><br><span class="line"><span class="meta">        method = &quot;update&quot;,</span></span><br><span class="line"><span class="meta">        args = &#123;MappedStatement.class,Object.class&#125;)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//拦截方法，具体业务逻辑编写的位置</span></span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">plugin</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="comment">//创建target对象的代理对象,目的是将当前拦截器加入到该对象中</span></span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="comment">//属性设置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注入到Spring容器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 自定义拦截器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MyInterceptor <span class="title function_">myInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyInterceptor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者通过<code>xml</code>配置，<code>mybatis-config.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;cn.itcast.mp.plugins.MyInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>演示</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031194748030.png" alt="image-20221031194748030"></p>
<h2 id="3-2、执行分析插件"><a href="#3-2、执行分析插件" class="headerlink" title="3.2、执行分析插件"></a>3.2、执行分析插件</h2><p>在MP中提供了对SQL执行的分析的插件，可用作阻断全表更新、删除的操作，注意：该插件仅适用于开发环境，不 适用于生产环境。 SpringBoot配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SqlExplainInterceptor <span class="title function_">sqlExplainInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">SqlExplainInterceptor</span> <span class="variable">sqlExplainInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlExplainInterceptor</span>();</span><br><span class="line">  List&lt;ISqlParser&gt; sqlParserList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  <span class="comment">// 攻击 SQL 阻断解析器、加入解析链</span></span><br><span class="line">  sqlParserList.add(<span class="keyword">new</span> <span class="title class_">BlockAttackSqlParser</span>());</span><br><span class="line">  sqlExplainInterceptor.setSqlParserList(sqlParserList);</span><br><span class="line">  <span class="keyword">return</span> sqlExplainInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">20</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.update(user, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031195715922.png" alt="image-20221031195715922"></p>
<h2 id="3-3、性能分析插件"><a href="#3-3、性能分析插件" class="headerlink" title="3.3、性能分析插件"></a>3.3、性能分析插件</h2><p>性能分析拦截器，用于输出每条 SQL 语句及其执行时间，可以设置最大执行时间，超过时间会抛出异常。</p>
<p>该插件只用于开发环境，不建议生产环境使用。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL 执行性能分析，开发环境使用，线上不推荐。 maxTime 指的是 sql 最大执行时长 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxTime&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--SQL是否格式化 默认false--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031204132228.png" alt="image-20221031204132228"></p>
<p>可以看到，执行时间为11ms。如果将maxTime设置为1，那么，该操作会抛出异常。</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031204527580.png" alt="image-20221031204527580"></p>
<h2 id="3-4、乐观锁插件"><a href="#3-4、乐观锁插件" class="headerlink" title="3.4、乐观锁插件"></a>3.4、乐观锁插件</h2><h3 id="3-4-1、主要适用场景"><a href="#3-4-1、主要适用场景" class="headerlink" title="3.4.1、主要适用场景"></a>3.4.1、主要适用场景</h3><p>意图： 当要更新一条记录的时候，希望这条记录没有被别人更新</p>
<p>乐观锁实现方式：</p>
<ul>
<li>取出记录时，获取当前<code>version </code></li>
<li>更新时，带上这个<code>version </code></li>
<li>执行更新时， <code>set version = newVersion where version = oldVersion </code></li>
<li>如果<code>version</code>不对，就更新失败</li>
</ul>
<h3 id="3-4-2、插件配置"><a href="#3-4-2、插件配置" class="headerlink" title="3.4.2、插件配置"></a>3.4.2、插件配置</h3><p>方式1、spring xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式2、spring boot:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title function_">optimisticLockerInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OptimisticLockerInterceptor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-3、注解实体字段"><a href="#3-4-3、注解实体字段" class="headerlink" title="3.4.3、注解实体字段"></a>3.4.3、注解实体字段</h3><p>需要为实体字段添加@Version注解。</p>
<p>第一步，为表添加version字段，并且设置初始值为1：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `tb_user`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `version` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NULL</span> AFTER `email`;</span><br><span class="line"><span class="keyword">UPDATE</span> `tb_user` <span class="keyword">SET</span> `version`<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031205743138.png" alt="image-20221031205743138"></p>
<p>第二步，为User实体对象添加version字段，并且添加@Version注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>

<p>3.4.4、测试</p>
<p>测试用例;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateByVersion2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">7L</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectById(user);</span><br><span class="line">    user1.setName(<span class="string">&quot;威少&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.updateById(user1);</span><br><span class="line">    System.out.println(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221031211518043.png" alt="image-20221031211518043"></p>
<p>可以看到，更新的条件中有<code>version</code>条件，并且更新的<code>version</code>为2。 如果再次执行，更新则不成功。这样就避免了多人同时更新时导致数据的不一致。</p>
<h3 id="3-4-5、特别说明"><a href="#3-4-5、特别说明" class="headerlink" title="3.4.5、特别说明"></a>3.4.5、特别说明</h3><ul>
<li><strong>支持的数据类型只有</strong>:int,Integer,long,Long,Date,Timestamp,LocalDateTime </li>
<li>整数类型下 newVersion = oldVersion + 1 </li>
<li>newVersion 会回写到 entity 中 </li>
<li>仅支持 updateById(id) 与 update(entity, wrapper) 方法 </li>
<li>在 update(entity, wrapper) 方法下, wrapper 不能复用!!!</li>
</ul>
<h1 id="9、Sql-注入器"><a href="#9、Sql-注入器" class="headerlink" title="9、Sql 注入器"></a>9、Sql 注入器</h1><p>我们已经知道，在MP中，通过AbstractSqlInjector将BaseMapper中的方法注入到了Mybatis容器，这样这些方法才 可以正常执行。 那么，如果我们需要扩充BaseMapper中的方法，又该如何实现呢？ 下面我们以扩展findAll方法为例进行学习。</p>
<h2 id="9-1、编写MyBaseMapper"><a href="#9-1、编写MyBaseMapper" class="headerlink" title="9.1、编写MyBaseMapper"></a>9.1、编写MyBaseMapper</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MybaseMapper</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;T&gt; &#123;</span><br><span class="line">    List&lt;T&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其他的Mapper都可以继承该Mapper，这样实现了统一的扩展。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">MybaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="9-2、编写MySqlInjector"><a href="#9-2、编写MySqlInjector" class="headerlink" title="9.2、编写MySqlInjector"></a>9.2、编写MySqlInjector</h2><p>如果直接继承AbstractSqlInjector的话，原有的BaseMapper中的方法将失效，所以我们选择继承DefaultSqlInjector 进行扩展。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.sqlInjector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.AbstractMethod;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.DefaultSqlInjector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySqlInjector</span> <span class="keyword">extends</span> <span class="title class_">DefaultSqlInjector</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title function_">getMethodList</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;AbstractMethod&gt; methodList = <span class="built_in">super</span>.getMethodList();</span><br><span class="line">        methodList.add(<span class="keyword">new</span> <span class="title class_">FindAll</span>());</span><br><span class="line">        <span class="keyword">return</span> methodList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="9-3、编写FindAll"><a href="#9-3、编写FindAll" class="headerlink" title="9.3、编写FindAll"></a>9.3、编写FindAll</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.sqlInjector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.AbstractMethod;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.TableInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.SqlSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindAll</span> <span class="keyword">extends</span> <span class="title class_">AbstractMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MappedStatement <span class="title function_">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlMethod</span> <span class="operator">=</span> <span class="string">&quot;findAll&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from &quot;</span> + tableInfo.getTableName();</span><br><span class="line">        <span class="type">SqlSource</span> <span class="variable">sqlSource</span> <span class="operator">=</span> languageDriver.createSqlSource(configuration, sql, modelClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.addSelectMappedStatement(mapperClass, sqlMethod, sqlSource,modelClass, tableInfo);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="9-4、注册到Spring容器"><a href="#9-4、注册到Spring容器" class="headerlink" title="9.4、注册到Spring容器"></a>9.4、注册到Spring容器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义SQL注入器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MySqlInjector <span class="title function_">mySqlInjector</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MySqlInjector</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-5、测试"><a href="#9-5、测试" class="headerlink" title="9.5、测试"></a>9.5、测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span>&#123;</span><br><span class="line">     List&lt;User&gt; all = <span class="built_in">this</span>.userMapper.findAll();</span><br><span class="line">     all.forEach(user -&gt; System.out.println(user));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221101110931990.png" alt="image-20221101110931990"></p>
<p>至此，我们实现了全局扩展SQL注入器。</p>
<h1 id="10、自动填充功能"><a href="#10、自动填充功能" class="headerlink" title="10、自动填充功能"></a>10、自动填充功能</h1><p>有些时候我们可能会有这样的需求，插入或者更新数据时，希望有些字段可以自动填充数据，比如密码、version 等。在MP中提供了这样的功能，可以实现自动填充。</p>
<h2 id="10-1、添加-TableField注解"><a href="#10-1、添加-TableField注解" class="headerlink" title="10.1、添加@TableField注解"></a>10.1、添加<code>@TableField</code>注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span> <span class="comment">//插入数据时进行填充</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure>

<p>为<code>password</code>添加自动填充功能，在新增数据时有效。 FieldFill提供了多种模式选择：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">FieldFill</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 默认不处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">DEFAULT,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 插入时填充字段</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">INSERT,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 更新时填充字段</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">UPDATE,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 插入和更新时填充字段</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">INSERT_UPDATE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-2、编写MyMetaObjectHandler"><a href="#10-2、编写MyMetaObjectHandler" class="headerlink" title="10.2、编写MyMetaObjectHandler"></a>10.2、编写MyMetaObjectHandler</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入式进行填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">password</span> <span class="operator">=</span> getFieldValByName(<span class="string">&quot;password&quot;</span>, metaObject);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span>==password)&#123;</span><br><span class="line">            setFieldValByName(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>,metaObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="10-3、测试"><a href="#10-3、测试" class="headerlink" title="10.3、测试"></a>10.3、测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;关羽&quot;</span>);</span><br><span class="line">    user.setUserName(<span class="string">&quot;guanyu&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">30</span>);</span><br><span class="line">    user.setMail(<span class="string">&quot;guanyu@itast.cn&quot;</span>);</span><br><span class="line">    user.setVersion(<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;诸葛亮&quot;</span>);</span><br><span class="line">    user.setUserName(<span class="string">&quot;zhugeliang&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    user.setMail(<span class="string">&quot;guanyu@itast.cn&quot;</span>);</span><br><span class="line">    user.setVersion(<span class="number">1</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;88877000&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221101114020878.png" alt="image-20221101114020878"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221101114146430.png" alt="image-20221101114146430"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221101120626037.png" alt="image-20221101120626037"></p>
<h1 id="11、-逻辑删除"><a href="#11、-逻辑删除" class="headerlink" title="11、 逻辑删除"></a>11、 逻辑删除</h1><p>开发系统时，有时候在实现功能时，删除操作需要实现逻辑删除，所谓逻辑删除就是将数据标记为删除，而并非真正 的物理删除（非DELETE操作），查询时需要携带状态条件，确保被标记的数据不被查询到。这样做的目的就是避免 数据被真正的删除。</p>
<h2 id="11-1、修改表结构"><a href="#11-1、修改表结构" class="headerlink" title="11.1、修改表结构"></a>11.1、修改表结构</h2><p>为<code>tb_user</code>表增加<code>deleted</code>字段，用于表示数据是否被删除，1代表删除，0代表未删除。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `tb_user`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `deleted` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;1代表删除，0代表未删除&#x27;</span> AFTER</span><br><span class="line">`version`;</span><br></pre></td></tr></table></figure>

<p>同时，也修改User实体，增加deleted属性并且添加<code>@TableLogic</code>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure>

<h2 id="6-2、配置"><a href="#6-2、配置" class="headerlink" title="6.2、配置"></a>6.2、配置</h2><p>application.properties：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 逻辑未删除值(默认为 0)</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>

<h2 id="6-3、测试"><a href="#6-3、测试" class="headerlink" title="6.3、测试"></a>6.3、测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByIdLogic</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.userMapper.deleteById(<span class="number">4L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行的sql：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-11-01 15:44:46.718 DEBUG 8030 --- [           main] c.i.mp.mapper.UserMapper.deleteById      : ==&gt;  Preparing: UPDATE tb_user SET deleted=1 WHERE id=? AND deleted=0 </span><br><span class="line">2022-11-01 15:44:46.760 DEBUG 8030 --- [           main] c.i.mp.mapper.UserMapper.deleteById      : ==&gt; Parameters: 4(Long)</span><br><span class="line">2022-11-01 15:44:46.767 DEBUG 8030 --- [           main] c.i.mp.mapper.UserMapper.deleteById      : &lt;==    Updates: 1</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221101154618822.png" alt="image-20221101154618822"></p>
<p>测试查询：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-11-01 15:47:12.683 DEBUG 8043 --- [           main] c.i.mp.mapper.UserMapper.selectById      : ==&gt;  Preparing: SELECT <span class="built_in">id</span>,user_name,name,age,email AS mail,version,deleted FROM tb_user WHERE <span class="built_in">id</span>=? AND deleted=0 </span><br><span class="line">2022-11-01 15:47:12.727 DEBUG 8043 --- [           main] c.i.mp.mapper.UserMapper.selectById      : ==&gt; Parameters: 4(Long)</span><br><span class="line">2022-11-01 15:47:12.749 DEBUG 8043 --- [           main] c.i.mp.mapper.UserMapper.selectById      : &lt;==      Total: 0</span><br></pre></td></tr></table></figure>

<p>可见，已经实现了逻辑删除。</p>
<h1 id="12、-通用枚举"><a href="#12、-通用枚举" class="headerlink" title="12、 通用枚举"></a>12、 通用枚举</h1><p>解决了繁琐的配置，让 mybatis 优雅的使用枚举属性！</p>
<h2 id="12-1、修改表结构"><a href="#12-1、修改表结构" class="headerlink" title="12.1、修改表结构"></a>12.1、修改表结构</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `tb_user`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `sex` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> COMMENT <span class="string">&#x27;1-男，2-女&#x27;</span> AFTER `deleted`;</span><br></pre></td></tr></table></figure>

<h2 id="12-2、定义枚举"><a href="#12-2、定义枚举" class="headerlink" title="12.2、定义枚举"></a>12.2、定义枚举</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.enums.IEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SexEnum</span> <span class="keyword">implements</span> <span class="title class_">IEnum</span>&lt;Integer&gt; &#123;</span><br><span class="line">    MAN(<span class="number">1</span>,<span class="string">&quot;男&quot;</span>),</span><br><span class="line">    WOMAN(<span class="number">2</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    SexEnum(<span class="type">int</span> value, String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value=value;</span><br><span class="line">        <span class="built_in">this</span>.desc=desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="12-3、配置"><a href="#12-3、配置" class="headerlink" title="12.3、配置"></a>12.3、配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 枚举包扫描</span><br><span class="line">mybatis-plus.type-enums-<span class="keyword">package</span>=cn.itcast.mp.enums</span><br></pre></td></tr></table></figure>

<h2 id="12-4、修改实体"><a href="#12-4、修改实体" class="headerlink" title="12.4、修改实体"></a>12.4、修改实体</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> SexEnum sex;</span><br></pre></td></tr></table></figure>

<h2 id="12-5、测试"><a href="#12-5、测试" class="headerlink" title="12.5、测试"></a>12.5、测试</h2><p>测试插入数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertEnums</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">      user.setName(<span class="string">&quot;貂蝉&quot;</span>);</span><br><span class="line">      user.setUserName(<span class="string">&quot;diaochan&quot;</span>);</span><br><span class="line">      user.setAge(<span class="number">20</span>);</span><br><span class="line">      user.setMail(<span class="string">&quot;diaochan@itast.cn&quot;</span>);</span><br><span class="line">      user.setVersion(<span class="number">1</span>);</span><br><span class="line">      user.setSex(SexEnum.WOMAN);</span><br><span class="line">      <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.insert(user);</span><br><span class="line">      System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-11-01 16:13:39.695 DEBUG 8599 --- [           main] c.b.m.e.parsers.BlockAttackSqlParser     : parser sql: INSERT INTO tb_user (user_name, password, name, age, email, version, sex) VALUES (?, ?, ?, ?, ?, ?, ?)</span><br><span class="line">2022-11-01 16:13:39.704 DEBUG 8599 --- [           main] cn.itcast.mp.mapper.UserMapper.insert    : ==&gt;  Preparing: INSERT INTO tb_user ( user_name, password, name, age, email, version, sex ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) </span><br><span class="line">2022-11-01 16:13:39.741 DEBUG 8599 --- [           main] cn.itcast.mp.mapper.UserMapper.insert    : ==&gt; Parameters: diaochan(String), 123456(String), 貂蝉(String), 20(Integer), diaochan@itast.cn(String), 1(Integer), 2(Integer)</span><br><span class="line">2022-11-01 16:13:39.747 DEBUG 8599 --- [           main] cn.itcast.mp.mapper.UserMapper.insert    : &lt;==    Updates: 1</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221101162947312.png" alt="image-20221101162947312"></p>
<p>查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByIdEnum</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectById(<span class="number">15L</span>);</span><br><span class="line">     System.out.println(user);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-11-01 16:30:38.311 DEBUG 8922 --- [           main] c.i.mp.mapper.UserMapper.selectById      : ==&gt;  Preparing: SELECT <span class="built_in">id</span>,user_name,name,age,email AS mail,version,deleted,sex FROM tb_user WHERE <span class="built_in">id</span>=? AND deleted=0 </span><br><span class="line">2022-11-01 16:30:38.356 DEBUG 8922 --- [           main] c.i.mp.mapper.UserMapper.selectById      : ==&gt; Parameters: 15(Long)</span><br><span class="line">2022-11-01 16:30:38.383 DEBUG 8922 --- [           main] c.i.mp.mapper.UserMapper.selectById      : &lt;==      Total: 1</span><br><span class="line">User(<span class="built_in">id</span>=15, userName=diaochan, password=null, name=貂蝉, age=20, mail=diaochan@itast.cn, address=null, version=1, deleted=0, sex=女)</span><br></pre></td></tr></table></figure>

<p>从测试可以看出，可以很方便的使用枚举了。 查询条件时也是有效的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testSelectBySex</span><span class="params">()</span>&#123;</span><br><span class="line">     QueryWrapper&lt;User&gt; objectQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">     objectQueryWrapper.eq(<span class="string">&quot;sex&quot;</span>,SexEnum.MAN);</span><br><span class="line">     List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectList(objectQueryWrapper);</span><br><span class="line">     users.forEach(user -&gt; System.out.println(user));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-11-01 16:34:13.534 DEBUG 8938 --- [           main] c.i.mp.mapper.UserMapper.selectList      : ==&gt;  Preparing: SELECT <span class="built_in">id</span>,user_name,name,age,email AS mail,version,deleted,sex FROM tb_user WHERE deleted=0 AND sex = ? </span><br><span class="line">2022-11-01 16:34:13.572 DEBUG 8938 --- [           main] c.i.mp.mapper.UserMapper.selectList      : ==&gt; Parameters: 1(Integer)</span><br><span class="line">2022-11-01 16:34:13.601 DEBUG 8938 --- [           main] c.i.mp.mapper.UserMapper.selectList      : &lt;==      Total: 8</span><br><span class="line">User(<span class="built_in">id</span>=5, userName=sunqi, password=null, name=威少, age=24, mail=test5@itcast.cn, address=null, version=2, deleted=0, sex=男)</span><br><span class="line">User(<span class="built_in">id</span>=7, userName=caocao, password=null, name=威少, age=20, mail=<span class="built_in">test</span>@itcast.cn, address=null, version=2, deleted=0, sex=男)</span><br><span class="line">User(<span class="built_in">id</span>=8, userName=caocao, password=null, name=曹操2, age=20, mail=<span class="built_in">test</span>@itcast.cn, address=null, version=1, deleted=0, sex=男)</span><br><span class="line">User(<span class="built_in">id</span>=9, userName=caocao, password=null, name=曹操2, age=20, mail=<span class="built_in">test</span>@itcast.cn, address=null, version=1, deleted=0, sex=男)</span><br><span class="line">User(<span class="built_in">id</span>=11, userName=caocao, password=null, name=曹操2, age=20, mail=<span class="built_in">test</span>@itcast.cn, address=null, version=1, deleted=0, sex=男)</span><br><span class="line">User(<span class="built_in">id</span>=12, userName=caocao, password=null, name=曹操2, age=20, mail=<span class="built_in">test</span>@itcast.cn, address=null, version=1, deleted=0, sex=男)</span><br><span class="line">User(<span class="built_in">id</span>=13, userName=guanyu, password=null, name=关羽, age=30, mail=guanyu@itast.cn, address=null, version=1, deleted=0, sex=男)</span><br><span class="line">User(<span class="built_in">id</span>=14, userName=zhugeliang, password=null, name=诸葛亮, age=21, mail=guanyu@itast.cn, address=null, version=1, deleted=0, sex=男)</span><br></pre></td></tr></table></figure>

<h1 id="13、代码生成器"><a href="#13、代码生成器" class="headerlink" title="13、代码生成器"></a>13、代码生成器</h1><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p>
<h2 id="13-1、创建工程"><a href="#13-1、创建工程" class="headerlink" title="13.1、创建工程"></a>13.1、创建工程</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-sample-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus的springboot支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="13-2、代码"><a href="#13-2、代码" class="headerlink" title="13.2、代码"></a>13.2、代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.generator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * mysql 代码生成器演示例子</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * mysql 代码生成器演示例子</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MysqlGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">scanner</span><span class="params">(String tip)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">help</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        help.append(<span class="string">&quot;请输入&quot;</span> + tip + <span class="string">&quot;：&quot;</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">ipt</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusException</span>(<span class="string">&quot;请输入正确的&quot;</span> + tip + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RUN THIS</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 代码生成器</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"><span class="comment">// 全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="literal">false</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"><span class="comment">// 数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mp? useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;</span>);</span><br><span class="line"><span class="comment">// dsc.setSchemaName(&quot;public&quot;);</span></span><br><span class="line">                dsc.setDriverName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;Xuwei19941214~&quot;</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"><span class="comment">// 包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setModuleName(scanner(<span class="string">&quot;模块名&quot;</span>));</span><br><span class="line">        pc.setParent(<span class="string">&quot;org.example.generator&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        <span class="type">InjectionConfig</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InjectionConfig</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        focList.add(<span class="keyword">new</span> <span class="title class_">FileOutConfig</span>(<span class="string">&quot;/templates/mapper.xml.ftl&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">outputFile</span><span class="params">(TableInfo tableInfo)</span> &#123;</span><br><span class="line">        <span class="comment">// 自定义输入文件名称</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">&quot;/src/main/resources/mapper/&quot;</span> + pc.getModuleName()+ <span class="string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="string">&quot;Mapper&quot;</span> +</span><br><span class="line">                        StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line">        mpg.setTemplate(<span class="keyword">new</span> <span class="title class_">TemplateConfig</span>().setXml(<span class="literal">null</span>));</span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        strategy.setSuperEntityClass(<span class="string">&quot;com.baomidou.mybatisplus.samples.generator.common.BaseEntity&quot;</span>);</span><br><span class="line">                strategy.setEntityLombokModel(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        strategy.setSuperControllerClass(<span class="string">&quot;com.baomidou.mybatisplus.samples.generator.common.BaseController&quot;</span>);</span><br><span class="line">                strategy.setInclude(scanner(<span class="string">&quot;表名&quot;</span>));</span><br><span class="line">        strategy.setSuperEntityColumns(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        <span class="comment">// 选择 freemarker 引擎需要指定如下加，注意 pom 依赖必须有！</span></span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="13-3、测试"><a href="#13-3、测试" class="headerlink" title="13.3、测试"></a>13.3、测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">17:43:00.088 [main] DEBUG com.baomidou.mybatisplus.generator.engine.AbstractTemplateEngine - 模板:/templates/mapper.xml.ftl;  文件:/Users/xuwei/Desktop/项目/mybatis-plus-sample-generator/src/main/resources/mapper/usr/TbUserMapper.xml</span><br><span class="line">17:43:00.199 [main] DEBUG com.baomidou.mybatisplus.generator.engine.AbstractTemplateEngine - 模板:/templates/entity.java.ftl;  文件:/Users/xuwei/Desktop/项目/mybatis-plus-sample-generator/src/main/java/org/example/generator/usr/entity/TbUser.java</span><br><span class="line">17:43:00.207 [main] DEBUG com.baomidou.mybatisplus.generator.engine.AbstractTemplateEngine - 模板:/templates/mapper.java.ftl;  文件:/Users/xuwei/Desktop/项目/mybatis-plus-sample-generator/src/main/java/org/example/generator/usr/mapper/TbUserMapper.java</span><br><span class="line">17:43:00.209 [main] DEBUG com.baomidou.mybatisplus.generator.engine.AbstractTemplateEngine - 模板:/templates/service.java.ftl;  文件:/Users/xuwei/Desktop/项目/mybatis-plus-sample-generator/src/main/java/org/example/generator/usr/service/ITbUserService.java</span><br><span class="line">17:43:00.211 [main] DEBUG com.baomidou.mybatisplus.generator.engine.AbstractTemplateEngine - 模板:/templates/serviceImpl.java.ftl;  文件:/Users/xuwei/Desktop/项目/mybatis-plus-sample-generator/src/main/java/org/example/generator/usr/service/impl/TbUserServiceImpl.java</span><br><span class="line">17:43:00.213 [main] DEBUG com.baomidou.mybatisplus.generator.engine.AbstractTemplateEngine - 模板:/templates/controller.java.ftl;  文件:/Users/xuwei/Desktop/项目/mybatis-plus-sample-generator/src/main/java/org/example/generator/usr/controller/TbUserController.java</span><br><span class="line">17:43:00.213 [main] DEBUG com.baomidou.mybatisplus.generator.AutoGenerator - ==========================文件生成完成！！！==========================</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221101174415257.png" alt="image-20221101174415257"></p>
<h1 id="14、MybatisX-快速开发插件"><a href="#14、MybatisX-快速开发插件" class="headerlink" title="14、MybatisX 快速开发插件"></a>14、MybatisX 快速开发插件</h1><p>MybatisX 是一款基于 IDEA 的快速开发插件，为效率而生。 安装方法：打开 IDEA，进入 File -&gt; Settings -&gt; Plugins -&gt; Browse Repositories，输入 mybatisx 搜索并安装。 功能： Java 与 XML 调回跳转 Mapper 方法自动生成 XML</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221101174917817.png" alt="image-20221101174917817"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Mybatis-Plus/image-20221101175019871.png" alt="image-20221101175019871"></p>
]]></content>
      <categories>
        <category>Java框架</category>
        <category>MyBatis-Plus</category>
      </categories>
      <tags>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马程序员-SpringBoot2</title>
    <url>/2022/08/26/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/</url>
    <content><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a><strong>开发环境</strong></h2><p>学习要求</p>
<p>熟悉Spring基础<br>熟悉Maven使用<br>环境要求</p>
<p>Java8及以上<br>Maven 3.5及以上：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started-system-requirements">https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started-system-requirements</a><br>学习资料</p>
<p>Spring Boot官网：<a href="https://spring.io/projects/spring-boot">https://spring.io/projects/spring-boot</a></p>
<p>Spring Boot 官方文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/">https://docs.spring.io/spring-boot/docs/current/reference/html/</a></p>
<p>Spring Boot 中文文档：<a href="http://felord.cn/_doc/_springboot/2.1.5.RELEASE/_book/">http://felord.cn/_doc/_springboot/2.1.5.RELEASE/_book/</a></p>
<p>视频地址：<a href="https://www.bilibili.com/video/BV15b4y1a7yG?p=24&amp;share_source=copy_web">https://www.bilibili.com/video/BV15b4y1a7yG?p=24&amp;share_source=copy_web</a></p>
<p>源码地址：GitHub Gitee</p>
<h2 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a><strong>内容介绍</strong></h2><p>Java基础语法<br><strong>Spring与SpringMVC</strong><br>    知道Spring是用来管理bean，能够基于Restful实现页面请求交互功能<br><strong>Mybatis与Mybatis-Plus</strong><br>    基于Mybatis和MybatisPlus能够开发出包含基础CRUD功能的标准Dao模块<br><strong>数据库MySQL</strong><br>    能够读懂基础CRUD功能的SQL语句<br><strong>服务器</strong><br>    知道服务器与web工程的关系，熟悉web服务器的基础配置<br><strong>maven</strong><br>    知道maven的依赖关系，知道什么是依赖范围，依赖传递，排除依赖，可选依赖，继承<br><strong>web技术（含vue，ElementUI)</strong><br>    知道vue如何发送ajax请求，如何获取响应数据，如何进行数据模型双向绑定</p>
<h2 id="SpringBoot框架搭建"><a href="#SpringBoot框架搭建" class="headerlink" title="SpringBoot框架搭建"></a><strong>SpringBoot框架搭建</strong></h2><h3 id="SpringBoot入门案例（Idea联网版）"><a href="#SpringBoot入门案例（Idea联网版）" class="headerlink" title="SpringBoot入门案例（Idea联网版）"></a>SpringBoot入门案例（Idea联网版）</h3><ul>
<li>SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程</li>
</ul>
<p>①：创建新模块，选择Spring Initializr，并配置模块相关基础信息</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20230114222739079.png" alt="image-20230114222739079"></p>
<p>②：选择当前模块需要使用的技术集</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16615262798512.png" alt="img"></p>
<p>③：开发控制器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Rest 模式</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;springboot is running...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springboot is running...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>④：运行自动生成的Application类</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16615263437584.png" alt="img"></p>
<p>⑤：打开浏览器访问url地址为：<a href="http://localhost:8080/books">http://localhost:8080/books</a></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16615263693396.png" alt="img"></p>
<p>最简SpringBoot程序所包含的基础文件 (pom.xml文件 和 Application类 )</p>
<ul>
<li>pom.xml文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-01-quickstart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>Application类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot0101QuickstartApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot0101QuickstartApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Spring程序与SpringBoot程序对比</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16615265960678.png" alt="img"></p>
<p><strong>注意: 基于idea开发SpringBoot程序需要确保联网且能够加载到程序框架结构</strong></p>
<p>小结:</p>
<ol>
<li>开发SpringBoot程序可以根据向导进行联网快速制作</li>
<li>SpringBoot程序需要基于JDK8进行制作</li>
<li>SpringBoot程序中需要使用何种功能通过勾选选择技术</li>
<li>运行SpringBoot程序通过运行Application程序入口进行</li>
</ol>
<h3 id="SpringBoot入门案例（官网创建版）"><a href="#SpringBoot入门案例（官网创建版）" class="headerlink" title="SpringBoot入门案例（官网创建版）"></a>SpringBoot入门案例（官网创建版）</h3><p>基于SpringBoot官网创建项目，地址：<a href="https://start.spring.io/">https://start.spring.io/</a></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166152670467010.png" alt="img"></p>
<p>小结:</p>
<ol>
<li>打开SpringBoot官网，选择Quickstart Your Project</li>
<li>创建工程，并保存项目</li>
<li>解压项目，通过IDE导入项目</li>
</ol>
<h3 id="SpringBoot入门案例（阿里云版）"><a href="#SpringBoot入门案例（阿里云版）" class="headerlink" title="SpringBoot入门案例（阿里云版）"></a>SpringBoot入门案例（阿里云版）</h3><p>基于阿里云创建项目，地址：<a href="https://start.aliyun.com/">https://start.aliyun.com</a></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166152678068812.png" alt="img"></p>
<p>注意事项:</p>
<ul>
<li>阿里云提供的坐标版本较低，如果需要使用高版本，进入工程后手工切换SpringBoot版本</li>
<li>阿里云提供的工程模板与Spring官网提供的工程模板略有不同</li>
</ul>
<p>小结:</p>
<ol>
<li>选择start来源为自定义URL</li>
<li>输入阿里云start地址</li>
<li>创建项目</li>
</ol>
<h3 id="SpringBoot入门案例（手工制作版）"><a href="#SpringBoot入门案例（手工制作版）" class="headerlink" title="SpringBoot入门案例（手工制作版）"></a>SpringBoot入门案例（手工制作版）</h3><p>手工创建项目（手工导入坐标）</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166152684169214.png" alt="img"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_01_04_quickstart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>手工创建项目（手工制作引导类）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>创建普通Maven工程</li>
<li>继承spring-boot-starter-parent</li>
<li>添加依赖spring-boot-starter-web</li>
<li>制作引导类Application</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>创建SpringBoot工程的四种方式</strong><br><strong>基于Idea创建SpringBoot工程</strong><br><strong>基于官网创建SpringBoot工程</strong><br><strong>基于阿里云创建SpringBoot工程</strong><br><strong>手工创建Maven工程修改为SpringBoot工程</strong></p>
<h2 id="隐藏文件或文件夹"><a href="#隐藏文件或文件夹" class="headerlink" title="隐藏文件或文件夹"></a><strong>隐藏文件或文件夹</strong></h2><p>.mvn;.gitignore;HELP.md;mvnw;mvnw.cmd;*.iml;</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166152716936616.png" alt="img"></p>
<p>2018版的做法:</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166152718849418.png" alt="img"></p>
<p>较新版本的做法 :</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166152720975220.png" alt="img"></p>
<p>小结:</p>
<p>Idea中隐藏指定文件或指定类型文件<br>Setting → File Types → Ignored Files and Folders<br>输入要隐藏的文件名，支持*<strong>号通配符</strong><br>回车确认添加</p>
<h2 id="入门案例解析"><a href="#入门案例解析" class="headerlink" title="入门案例解析"></a><strong>入门案例解析</strong></h2><h3 id="parent"><a href="#parent" class="headerlink" title="parent"></a><strong>parent</strong></h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166152899995522.png" alt="img"></p>
<ul>
<li>parent</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-01-quickstart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>按住Ctrl点击pom.xml中的spring-boot-starter-parent，跳转到了spring-boot-starter-parent的pom.xml，xml配置如下（只摘抄了部分重点配置）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>按住Ctrl点击pom.xml中的spring-boot-starter-dependencies，跳转到了spring-boot-starter-dependencies的pom.xml，xml配置如下（只摘抄了部分重点配置）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.15.3<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">antlr2.version</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">appengine-sdk.version</span>&gt;</span>1.9.63<span class="tag">&lt;/<span class="name">appengine-sdk.version</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">artemis.version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">artemis.version</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">assertj.version</span>&gt;</span>3.9.1<span class="tag">&lt;/<span class="name">assertj.version</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">atomikos.version</span>&gt;</span>4.0.6<span class="tag">&lt;/<span class="name">atomikos.version</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">bitronix.version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">bitronix.version</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">build-helper-maven-plugin.version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">build-helper-maven-plugin.version</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">byte-buddy.version</span>&gt;</span>1.7.11<span class="tag">&lt;/<span class="name">byte-buddy.version</span>&gt;</span></span><br><span class="line">  	... ... ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      	... ... ...</span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jetbrains.kotlin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kotlin-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;kotlin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jooq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jooq-codegen-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jooq.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">          	... ... ...</span><br><span class="line">    	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从上面的spring-boot-starter-dependencies的pom.xml中我们可以发现，一部分坐标的版本、依赖管理、插件管理已经定义好，所以我们的SpringBoot工程继承spring-boot-starter-parent后已经具备版本锁定等配置了。所以起步依赖的作用就是进行依赖的传递。</p>
<p>小结:</p>
<ul>
<li>开发SpringBoot程序要继承spring-boot-starter-parent</li>
<li>spring-boot-starter-parent中定义了若干个依赖管理</li>
<li>继承parent模块可以避免多个依赖使用相同技术时出现依赖版本冲突</li>
<li>继承parent的形式也可以采用引入依赖的形式实现效果</li>
</ul>
<h3 id="starter"><a href="#starter" class="headerlink" title="starter"></a><strong>starter</strong></h3><ul>
<li>spring-boot-starter-web.pom<br>按住Ctrl点击pom.xml中的<strong>spring-boot-starter-web</strong>，跳转到了spring-boot-starter-web的pom.xml，xml配置如下（只摘抄了部分重点配置）：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starters<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Boot Web Starter<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.9.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从上面的spring-boot-starter-web的pom.xml中我们可以发现，spring-boot-starter-web就是将web开发要使用的spring-web、spring-webmvc等坐标进行了“打包”，这样我们的工程只要引入spring-boot-starter-web起步依赖的坐标就可以进行web开发了，同样体现了依赖传递的作用。<br><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166152990382124.png" alt="img"></p>
<p><strong>starter</strong><br>SpringBoot中常见项目名称，定义了当前项目使用的所有依赖坐标，以达到减少依赖配置的目的<br><strong>parent</strong><br>所有SpringBoot项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的<br>spring-boot-starter-parent各版本间存在着诸多坐标版本不同<br><strong>实际开发</strong><br>使用任意坐标时，仅书写GAV(groupId, artifactId, version)中的G和A，V由SpringBoot提供，除非SpringBoot未提供对应版本V<br>如发生坐标错误，再指定Version（要小心版本冲突）</p>
<p>小结:</p>
<ol>
<li>开发SpringBoot程序需要导入坐标时通常导入对应的starter</li>
<li>每个不同的starter根据功能不同，通常包含多个依赖坐标</li>
<li>使用starter可以实现快速配置的效果，达到简化配置的目的</li>
</ol>
<h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3><ul>
<li>启动方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot0101QuickstartApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> SpringApplication.run(Springboot0101QuickstartApplication.class, args);</span><br><span class="line">        <span class="comment">//获取bean对象</span></span><br><span class="line">        <span class="type">BookController</span> <span class="variable">bean</span> <span class="operator">=</span> ctx.getBean(BookController.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;bean======&gt;&quot;</span> + bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>SpringBoot的引导类是Boot工程的执行入口，运行main方法就可以启动项目</li>
<li>SpringBoot工程运行后初始化Spring容器，扫描引导类所在包加载bean</li>
</ul>
<p>小结:</p>
<ol>
<li>SpringBoot工程提供引导类用来启动程序</li>
<li>SpringBoot工程启动后创建并初始化Spring容器</li>
</ol>
<h3 id="辅助功能"><a href="#辅助功能" class="headerlink" title="辅助功能"></a>辅助功能</h3><p>辅助功能 内嵌tomcat</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p>
<ul>
<li>使用maven依赖管理变更起步依赖项</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web 起步依赖环境中，排除 Tomcat 起步依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加 Jetty 起步依赖，版本由 SpringBoot 的 starter 控制 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>Jetty比Tomcat更轻量级，可扩展性更强（相较于Tomcat），谷歌应用引擎（GAE）已经全面切换为Jetty</li>
<li>内置服务器<ul>
<li>tomcat(默认) apache出品，粉丝多，应用面广，负载了若干较重的组件</li>
<li>jetty 更轻量级，负载性能远不及tomcat</li>
<li>undertow undertow，负载性能勉强跑赢tomcat</li>
</ul>
</li>
</ul>
<p>小结:</p>
<ol>
<li>内嵌Tomcat服务器是SpringBoot辅助功能之一</li>
<li>内嵌Tomcat工作原理是将Tomcat服务器作为对象运行，并将该对象交给Spring容器管理</li>
<li>变更内嵌服务器思想是去除现有服务器，添加全新的服务器</li>
</ol>
<p>总结:</p>
<ol>
<li>入门案例（4种方式）</li>
<li>SpringBoot概述<br>parent<br>starter<br>引导类<br>辅助功能（内嵌tomcat）</li>
</ol>
<h2 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a><strong>REST风格</strong></h2><h3 id="REST风格简介"><a href="#REST风格简介" class="headerlink" title="REST风格简介"></a>REST风格简介</h3><p><strong>什么是 rest ：</strong></p>
<p>REST（Representational State Transfer）表现形式状态转换</p>
<p>传统风格资源描述形式<br><a href="http://localhost/user/getById?id=1">http://localhost/user/getById?id=1</a> (得到id为1的用户)<br><a href="http://localhost/user/saveUser">http://localhost/user/saveUser</a> (保存用户)</p>
<p>REST风格描述形式<br><a href="http://localhost/user/1">http://localhost/user/1</a> (得到id为1的用户)<br><a href="http://localhost/user">http://localhost/user</a> (保存用户)</p>
<p><strong>优点:</strong></p>
<ul>
<li>隐藏资源的访问行为， 无法通过地址得知对资源是何种操作</li>
<li>书写简化</li>
</ul>
<p>按照REST风格访问资源时使用<strong>行为动作</strong>区分对资源进行了何种操作</p>
<p><strong>GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">http://localhost/users 查询全部用户信息 GET (查询)</span><br><span class="line">http://localhost/users/1 查询指定用户信息 GET (查询)</span><br><span class="line">http://localhost/users 添加用户信息 POST (新增/保存)</span><br><span class="line">http://localhost/users 修改用户信息 PUT (修改/更新)</span><br><span class="line">http://localhost/users/1 删除用户信息 DELETE (删除)</span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<p>上述行为是约定方式，约定不是规范，可以打破，所以称REST风格，而不是REST规范<br>描述模块的名称通常使用复数，也就是加s的格式描述，表示此类资源,而非单个资源，例如: users、 books、 accounts…</p>
<p>根据REST风格对资源进行访问称为<strong>RESTful</strong></p>
<p>小结：</p>
<ol>
<li>REST</li>
<li>动作4个</li>
<li>RESTful</li>
</ol>
<h3 id="RESTful入门案例"><a href="#RESTful入门案例" class="headerlink" title="RESTful入门案例"></a><strong>RESTful入门案例</strong></h3><p>步骤:</p>
<p>①:设定http请求动作(动词)</p>
<p>使用 @RequestMapping 注解的 method 属性声明请求的方式</p>
<p>使用 @RequestBody 注解 获取请求体内容。直接使用得到是 key=value&amp;key=value…结构的数据。get 请求方式不适用。</p>
<p>使用@ResponseBody 注解实现将 controller 方法返回对象转换为 json 响应给客户端。</p>
<p>@RequestMapping(value=”/users”,method=RequestMethod.POST)</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/8fc4afea23a513d605b885db910e2ac8.png" alt="image-20220111162324969"></p>
<p>②:设定请求参数(路径变量)</p>
<p>使用<code>@PathVariable</code> 用于绑定 url 中的占位符。例如：请求 url 中 /delete/<code>&#123;id&#125;</code>，这个<code>&#123;id&#125;</code>就是 url 占位符。</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/d35b1e484bae94e8f5b5c5804610afbe.png" alt="image-20220111163317065"></p>
<ul>
<li>@RequestMapping</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/1b6cff3e21c9f8f39d03609ca5549dc5.png" alt="image-20220111163720579"></p>
<ul>
<li>@PathVariable</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/70f82ea4f1c61a34eb68fda48cc9ada3.png" alt="image-20220111163858308"></p>
<ul>
<li>@RequestBody @RequestParam @PathVariable</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/9b9324456b495d978751d23ce868c101.png" alt="image-20220111164352046"></p>
<h3 id="RESTful快速开发"><a href="#RESTful快速开发" class="headerlink" title="RESTful快速开发"></a><strong>RESTful快速开发</strong></h3><ul>
<li>使用 <strong>@RestController</strong> 注解开发 RESTful 风格</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220828011434213.png" alt="image-20220828011434213"></p>
<ul>
<li>使用 <strong>@GetMapping @PostMapping @PutMapping @DeleteMapping</strong> 简化 <strong>@RequestMapping</strong> 注解开发</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220828011609581.png" alt="image-20220828011609581"></p>
<h2 id="复制模块"><a href="#复制模块" class="headerlink" title="复制模块"></a><strong>复制模块</strong></h2><p>原则<br>保留工程基础结构<br>抹掉原始工程痕迹</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/b0eba06b936d4243b47b6faaf3842e95.png" alt="在这里插入图片描述"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/5f36f2235926f2a2a7aa521a850a7109.png" alt="img"></p>
<p>在IDEA 中点击模块管理添加模块</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220828223123256.png" alt="image-20220828223123256"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220828223205172.png" alt="image-20220828223205172"></p>
<p>小结:</p>
<ol>
<li>在工作空间中复制对应工程，并修改工程名称</li>
<li>删除与Idea相关配置文件，仅保留src目录与pom.xml文件</li>
<li>修改pom.xml文件中的artifactId与新工程/模块名相同</li>
<li>删除name标签（可选）</li>
<li>保留备份工程供后期使用</li>
</ol>
<h2 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h2><h3 id="属性配置方式"><a href="#属性配置方式" class="headerlink" title="属性配置方式"></a>属性配置方式</h3><ul>
<li>修改服务器端口</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p>
<ul>
<li>SpringBoot默认配置文件application.properties，通过键值对配置对应属性</li>
<li>修改配置<br>修改服务器端口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 服务器端口配制</span><br><span class="line">server.port=<span class="number">80</span></span><br></pre></td></tr></table></figure>

<ul>
<li>小结:</li>
</ul>
<ol>
<li>SpringBoot默认配置文件application.properties</li>
</ol>
<h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器端口配置</span></span><br><span class="line"><span class="string">server.port=80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改banner</span></span><br><span class="line"><span class="comment"># spring.main.banner-mode=off</span></span><br><span class="line"><span class="comment"># spring.banner.image.location=logo.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line"><span class="string">logging.level.root=info</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>SpringBoot内置属性查询<br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties</a></p>
<p>小结:</p>
<ol>
<li>SpringBoot中导入对应starter后，提供对应配置属性</li>
<li>书写SpringBoot配置采用关键字+提示形式书写</li>
</ol>
<h3 id="3种配置文件类型"><a href="#3种配置文件类型" class="headerlink" title="3种配置文件类型"></a>3种配置文件类型</h3><p>配置文件格式</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16640083022702.png" alt="img"></p>
<ul>
<li>SpringBoot提供了多种属性配置方式</li>
</ul>
<p><strong>application.properties</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">server.port=80</span></span><br></pre></td></tr></table></figure>

<p><strong>application.yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>

<p><strong>application.yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16640084165144.png" alt="img"></p>
<p>小结:</p>
<ol>
<li>SpringBoot提供了3种配置文件的格式<br>properties（传统格式/默认格式）<br><strong>yml（主流格式）</strong><br>yaml</li>
</ol>
<h3 id="配置文件加载优先级"><a href="#配置文件加载优先级" class="headerlink" title="配置文件加载优先级"></a>配置文件加载优先级</h3><ul>
<li><code>SpringBoot</code>配置文件加载顺序<br><strong>application.properties &gt; application.yml &gt; application.yaml</strong></li>
<li>常用配置文件种类<br><strong>application.yml</strong></li>
</ul>
<p>小结:</p>
<ol>
<li>配置文件间的加载优先级<br>properties（最高）<br>yml<br>yaml（最低）</li>
<li>不同配置文件中相同配置按照加载优先级相互覆盖 (<strong>高优先级配置内容会覆盖低优先级配置内容</strong>)，不同配置文件中不同配置全部保留</li>
</ol>
<h3 id="属性提示消失解决方案"><a href="#属性提示消失解决方案" class="headerlink" title="属性提示消失解决方案"></a>属性提示消失解决方案</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16640085314896.png" alt="img"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16640085434028.png" alt="img"></p>
<p>小结:</p>
<p>指定<code>SpringBoot</code>配置文件<br><strong>Setting → Project Structure → Facets</strong><br>选中对应项目/工程<br><strong>Customize Spring Boot</strong><br>选择配置文件</p>
<h3 id="yaml数据格式"><a href="#yaml数据格式" class="headerlink" title="yaml数据格式"></a>yaml数据格式</h3><h4 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h4><ul>
<li><strong>YAML（YAML Ain’t Markup Language）</strong>，一种数据序列化格式</li>
</ul>
<ol>
<li>优点：<ul>
<li>容易阅读</li>
<li>容易与脚本语言交互</li>
<li>以数据为核心，重数据轻格式</li>
</ul>
</li>
<li><code>YAML</code>文件扩展名<ul>
<li><code>.yml</code>（<strong>主流</strong>）</li>
<li><code>.yaml</code></li>
</ul>
</li>
</ol>
<h4 id="yaml语法规则"><a href="#yaml语法规则" class="headerlink" title="yaml语法规则"></a>yaml语法规则</h4><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><p><code>key: value</code> -&gt; value 前面一定要有空格<br>大小写<strong>敏感</strong><br>属性层级关系使用多行描述，每行结尾使用冒号结束<br>使用<strong>缩进</strong>表示层级关系，同层级<strong>左侧对齐</strong>，只允许使用<strong>空格</strong>（不允许使用Tab键）<br>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）<br>‘’#’’ 表示注释<br>核心规则：<strong>数据前面要加空格与冒号隔开</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/hello</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure>

<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul>
<li>字面值表示方式</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字面值表示方式</span></span><br><span class="line"></span><br><span class="line"><span class="attr">boolean:</span> <span class="literal">TRUE</span>       <span class="comment">#TRUE,true,True,FALSE,false ， False 均可</span></span><br><span class="line"><span class="attr">float:</span> <span class="number">3.14</span>         <span class="comment">#6.8523015e+5 # 支持科学计数法</span></span><br><span class="line"><span class="attr">int:</span> <span class="number">123</span>            <span class="comment">#0b1010_0111_0100_1010_1110 # 支持二进制、八进制、十六进制</span></span><br><span class="line"><span class="attr">null:</span> <span class="string">~</span>             <span class="comment"># 使用 ~ 表示 null</span></span><br><span class="line"><span class="attr">string:</span> <span class="string">HelloWorld</span>  <span class="comment"># 字符串可以直接书写</span></span><br><span class="line"><span class="attr">string2:</span> <span class="string">&quot;Hello World&quot;</span>  <span class="comment"># 可以使用双引号包裹特殊字符</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-02-17</span>        <span class="comment"># 日期必须使用 yyyy-MM-dd 格式</span></span><br><span class="line"><span class="attr">datetime:</span> <span class="number">2018-02-17T15:02:31+08:00</span>   <span class="comment"># 时间和日期之间使用 T 连接，最后使用 + 代表时区</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>数组表示方式：在属性名书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166400913624710.png" alt="img"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">subject:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="attr">subject2:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"><span class="attr">likes:</span> [<span class="string">王者荣耀</span>,<span class="string">刺激战场</span>] <span class="comment"># 数组书写缩略格式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">users:</span> <span class="comment"># 对象数组格式</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Jerry</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">users2:</span> <span class="comment"># 对象数组格式二</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">4</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Jerry</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象数组缩略格式</span></span><br><span class="line"><span class="attr">users3:</span> [ &#123; <span class="string">name:Tom</span> , <span class="string">age:4</span> &#125; , &#123; <span class="string">name:Jerry</span> , <span class="string">age:5</span> &#125; ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">.</span> <span class="string">yaml语法规则</span></span><br><span class="line">	<span class="string">大小写敏感</span></span><br><span class="line">	<span class="string">属性层级关系使用多行描述，每行结尾使用冒号结束</span></span><br><span class="line">	<span class="string">使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</span></span><br><span class="line">	<span class="string">属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</span></span><br><span class="line">	<span class="comment"># 表示注释</span></span><br><span class="line"><span class="number">2</span><span class="string">.</span> <span class="string">注意属性名冒号后面与数据之间有一个空格</span></span><br><span class="line"><span class="number">3</span><span class="string">.</span> <span class="string">字面值、对象数据格式、数组数据格式（略）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="读取yaml单一属性数据"><a href="#读取yaml单一属性数据" class="headerlink" title="读取yaml单一属性数据"></a>读取yaml单一属性数据</h4><p>使用<code>@Value</code>读取单个数据，属性名引用方式：${一级属性名.二级属性名……}</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166402451230112.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;country&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String country1;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;user.age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String age1;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;likes[1]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String likes1;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;users[1].name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;springboot is running2...&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;country1=&gt;&quot;</span> + country1);</span><br><span class="line">    System.out.println(<span class="string">&quot;age1=&gt;&quot;</span> + age1);</span><br><span class="line">    System.out.println(<span class="string">&quot;likes1=&gt;&quot;</span> + likes1);</span><br><span class="line">    System.out.println(<span class="string">&quot;name1=&gt;&quot;</span> + name1);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;springboot is running2...&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>使用<code>@Valu</code>e配合<code>$&#123;&#125;</code>读取单个数据</li>
<li>如果数据存在多层级，依次书写层级名称即可</li>
</ol>
<h4 id="yaml文件中的变量引用"><a href="#yaml文件中的变量引用" class="headerlink" title="yaml文件中的变量引用"></a>yaml文件中的变量引用</h4><p>在配置文件中可以使用属性名引用方式引用属性</p>
<p><img src="https://img-blog.csdnimg.cn/9136f8f352b54c4184ac069a34f49611.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16640921881312.png" alt="img"></p>
<p>属性值中如果出现转移字符，需要使用双引号包裹</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/4a17254ad96a454987f0c64223af554a.png" alt="img"></p>
<p>小结:</p>
<ol>
<li>在配置文件中可以使用<code>$&#123;属性名&#125;</code>方式引用属性值</li>
<li>如果属性中出现特殊字符，可以使用双引号包裹起来作为字符解析</li>
</ol>
<h4 id="读取yaml全部属性数据"><a href="#读取yaml全部属性数据" class="headerlink" title="读取yaml全部属性数据"></a>读取yaml全部属性数据</h4><ul>
<li>封装全部数据到<code>Environment</code>对象</li>
<li>注意 要导这个包</li>
<li><strong>import org.springframework.core.env.Environment;</strong></li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16640928080055.png" alt="img"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16640928205767.png" alt="img"></p>
<p>小结:</p>
<ol>
<li>使用<code>Environment</code>对象封装全部配置信息</li>
<li>使用<code>@Autowired</code>自动装配数据到<code>Environment</code>对象中</li>
</ol>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16640932556299.png" alt="img"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166409326487811.png" alt="img"></p>
<p>小结:</p>
<ol>
<li>使用<code>Environment</code>对象封装全部配置信息</li>
<li>使用<code>@Autowired</code>自动装配数据到<code>Environment</code>对象中</li>
</ol>
<h4 id="读取yaml引用类型属性数据"><a href="#读取yaml引用类型属性数据" class="headerlink" title="读取yaml引用类型属性数据"></a>读取yaml引用类型属性数据</h4><ul>
<li>自定义对象封装指定数据</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166409724541113.png" alt="img"></p>
<ul>
<li>自定义对象封装指定数据的作用</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166409727755015.png" alt="img"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建类，用于封装下面的数据</span></span><br><span class="line"><span class="comment"># 由spring帮我们去加载数据到对象中，一定要告诉spring加载这组信息</span></span><br><span class="line"><span class="comment"># 使用时候从spring中直接获取信息使用</span></span><br><span class="line"></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driver:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost/springboot_db</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root666123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.定义数据模型封装yaml文件中对应的数据</span></span><br><span class="line"><span class="comment">//2.定义为spring管控的bean</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//3.指定加载的数据</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDataSource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//省略get/set/tostring 方法</span></span><br><span class="line">&#125;    </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用自动装配封装指定数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MyDataSource myDataSource;</span><br></pre></td></tr></table></figure>

<p>输出查看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(myDataSource);</span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>使用<code>@ConfigurationProperties</code>注解绑定配置信息到封装类中</li>
<li>封装类需要定义为<code>Spring</code>管理的<code>bean</code>，否则无法进行属性注入</li>
</ol>
<h2 id="SpringBoot整合JUnit"><a href="#SpringBoot整合JUnit" class="headerlink" title="SpringBoot整合JUnit"></a>SpringBoot整合JUnit</h2><ul>
<li>添加Junit的起步依赖 Spring Initializr 创建时自带</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试的起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SpringBoot整合JUnit</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot07JunitApplicationTests</span> &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> BookService bookService;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">		bookService.save();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@SpringBootTest<br>名称：@SpringBootTest<br>类型：测试类注解<br>位置：测试类定义上方<br>作用：设置<code>JUnit</code>加载的<code>SpringBoot启动类</code><br>范例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot05JUnitApplicationTests</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>导入测试对应的<code>starter</code></li>
<li>测试类使用<code>@SpringBootTest</code>修饰</li>
<li>使用自动装配的形式添加要测试的对象</li>
</ol>
<h3 id="整合JUnit——classes属性"><a href="#整合JUnit——classes属性" class="headerlink" title="整合JUnit——classes属性"></a>整合JUnit——classes属性</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166410870344418.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = Springboot04JunitApplication.class)</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(classes = Springboot04JunitApplication.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot04JunitApplicationTests</span> &#123;</span><br><span class="line">    <span class="comment">//1.注入你要测试的对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//2.执行要测试的对象对应的方法</span></span><br><span class="line">        bookDao.save();</span><br><span class="line">        System.out.println(<span class="string">&quot;two...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意:</p>
<ul>
<li>如果测试类在<code>SpringBoot启动类</code>的包或子包中，可以省略启动类的设置，也就是省略<code>classes</code>的设定</li>
</ul>
<p>小结:</p>
<ol>
<li>测试类如果存在于引导类所在包或子包中无需指定引导类</li>
<li>测试类如果不存在于引导类所在的包或子包中需要通过 <code>classes</code> 属性指定引导类</li>
</ol>
<h2 id="SpringBoot整合MyBatis"><a href="#SpringBoot整合MyBatis" class="headerlink" title="SpringBoot整合MyBatis"></a>SpringBoot整合MyBatis</h2><h3 id="SpringBoot整合MyBatis流程"><a href="#SpringBoot整合MyBatis流程" class="headerlink" title="SpringBoot整合MyBatis流程"></a>SpringBoot整合MyBatis流程</h3><ul>
<li>创建新模块，选择<code>Spring</code>初始化，并配置模块相关基础信息</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166410904058020.png" alt="img"></p>
<ul>
<li>选择当前模块需要使用的技术集（MyBatis、MySQL）</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166410905794422.png" alt="img"></p>
<ul>
<li>设置数据源参数</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#DB Configuration:</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot_db</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建user表</li>
</ul>
<p>在 <code>springboot_db</code> 数据库中创建 <code>user</code> 表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `user`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>创建实体Bean</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">// 主键</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//此处省略getter,setter,toString方法 .. ..</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>定义数据层接口与映射配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类中注入dao接口，测试功能</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot05MybatisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; userList = userDao.getAll();</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[User&#123;id=<span class="number">1</span>, username=<span class="string">&#x27;zhangsan&#x27;</span>, password=<span class="string">&#x27;123&#x27;</span>, name=<span class="string">&#x27;张三&#x27;</span>&#125;, User&#123;id=<span class="number">2</span>, username=<span class="string">&#x27;lisi&#x27;</span>, password=<span class="string">&#x27;123&#x27;</span>, name=<span class="string">&#x27;李四&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure>

<p>总结:</p>
<ol>
<li>勾选<code>MyBatis</code>技术，也就是导入<code>MyBatis</code>对应的<code>starter</code></li>
<li>数据库连接相关信息转换成配置</li>
<li>数据库<code>SQL</code>映射需要添加<code>@Mapper</code>被容器识别到</li>
</ol>
<h3 id="SpringBoot整合MyBatis常见问题处理"><a href="#SpringBoot整合MyBatis常见问题处理" class="headerlink" title="SpringBoot整合MyBatis常见问题处理"></a>SpringBoot整合MyBatis常见问题处理</h3><p>SpringBoot版本低于2.4.3(不含)，Mysql驱动版本大于8.0时，需要在url连接串中配置时区</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">jdbc:mysql://localhost:3306/springboot_db?serverTimezone=UTC</span></span><br></pre></td></tr></table></figure>

<p>或在MySQL数据库端配置时区解决此问题</p>
<p>1.<code>MySQL 8.X</code>驱动强制要求设置时区</p>
<ul>
<li>修改<code>url</code>，添加<code>serverTimezone</code>设定</li>
<li>修改<code>MySQL</code>数据库配置（略）</li>
</ul>
<p>2.驱动类过时，提醒更换为<code>com.mysql.cj.jdbc.Driver</code></p>
<h2 id="SpringBoot整合Druid"><a href="#SpringBoot整合Druid" class="headerlink" title="SpringBoot整合Druid"></a>SpringBoot整合Druid</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p>
<p>①: 导入<code>Druid</code>对应的<code>starter</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>②: 指定数据源类型 (这种方式只需导入一个 <code>Druid</code> 的坐标)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#DB Configuration:</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure>

<p><strong>或者 变更Druid的配置方式(推荐) 这种方式需要导入 Druid对应的starter</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot_db?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<p>1.整合<code>Druid</code>需要导入<code>Druid</code>对应的<code>starter</code><br>2.根据<code>Druid</code>提供的配置方式进行配置<br>3.整合第三方技术通用方式</p>
<ul>
<li>导入对应的<code>starter</code></li>
<li>根据提供的配置格式，配置非默认值对应的配置项</li>
</ul>
<h2 id="SSMP整合案例制作分析"><a href="#SSMP整合案例制作分析" class="headerlink" title="SSMP整合案例制作分析"></a>SSMP整合案例制作分析</h2><h3 id="案例效果演示"><a href="#案例效果演示" class="headerlink" title="案例效果演示"></a>案例效果演示</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16641892206722.png" alt="img"></p>
<h3 id="案例实现方案分析与流程解析"><a href="#案例实现方案分析与流程解析" class="headerlink" title="案例实现方案分析与流程解析"></a>案例实现方案分析与流程解析</h3><ol>
<li>案例实现方案分析<br> 实体类开发————使用<code>Lombok</code>快速制作实体类<br> <code>Dao开发</code>————整合<code>MyBatisPlus</code>，制作数据层测试类<br> <code>Service开发</code>————基于<code>MyBatisPlus</code>进行增量开发，制作业务层测试类<br> <code>Controller开发</code>————基于<code>Restful</code>开发，使用<code>PostMan</code>测试接口功能<br> <code>Controller开发</code>————前后端开发协议制作<br> 页面开发————基于<code>VUE+ElementUI</code>制作，前后端联调，页面数据处理，页面消息处理<pre><code> 列表、新增、修改、删除、分页、查询
</code></pre>
 项目异常处理<br> 按条件查询————页面功能调整、<code>Controller</code>修正功能、<code>Service</code>修正功能</li>
<li><code>SSMP</code>案例制作流程解析<br> 先开发基础<code>CRUD</code>功能，做一层测一层<br> 调通页面，确认异步提交成功后，制作所有功能<br> 添加分页功能与查询功能</li>
</ol>
<h3 id="模块创建"><a href="#模块创建" class="headerlink" title="模块创建"></a>模块创建</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16641893444344.png" alt="img"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_10,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><p><strong>tbl_book.sql</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tbl_book`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tbl_book` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">13</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of tbl_book</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;计算机理论&#x27;</span>, <span class="string">&#x27;Spring实战第5版&#x27;</span>, <span class="string">&#x27;Spring入门经典教程,深入理解Spring原理技术内幕&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;计算机理论&#x27;</span>, <span class="string">&#x27;Spring 5核心原理与30个类手写实战&#x27;</span>, <span class="string">&#x27;十年沉淀之作，写Spring精华思想&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;计算机理论&#x27;</span>, <span class="string">&#x27;Spring 5设计模式&#x27;</span>, <span class="string">&#x27;深入Spring源码剖析Spring源码中蕴含的10大设计模式&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book` <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;计算机理论&#x27;</span>, <span class="string">&#x27;Spring MVC+ MyBatis开发从入门到项目实战&#x27;</span>, <span class="string">&#x27;全方位解析面向Web应用的轻量级框架,带你成为Spring MVC开发高手&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book` <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;计算机理论&#x27;</span>, <span class="string">&#x27;轻量级Java Web企业应用实战&#x27;</span>, <span class="string">&#x27;源码级剖析Spring框架,适合已掌握Java基础的读者&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book` <span class="keyword">VALUES</span> (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;计算机理论&#x27;</span>, <span class="string">&#x27;Java核心技术卷|基础知识(原书第11版)&#x27;</span>, <span class="string">&#x27;Core Java第11版，Jolt大奖获奖作品，针对Java SE9、10、 11全面更新&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book` <span class="keyword">VALUES</span> (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;计算机理论&#x27;</span>, <span class="string">&#x27;深入理解Java虚拟机&#x27;</span>, <span class="string">&#x27;5个维度全面剖析JVM,面试知识点全覆盖&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book` <span class="keyword">VALUES</span> (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;计算机理论&#x27;</span>, <span class="string">&#x27;Java编程思想(第4版)&#x27;</span>, <span class="string">&#x27;Java学习必读经典殿堂级著作!赢得了全球程序员的广泛赞誉&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book` <span class="keyword">VALUES</span> (<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;计算机理论&#x27;</span>, <span class="string">&#x27;零基础学Java (全彩版)&#x27;</span>, <span class="string">&#x27;零基础自学编程的入门]图书，由浅入深，详解Java语言的编程思想和核心技术&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book` <span class="keyword">VALUES</span> (<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;市场营销&#x27;</span>, <span class="string">&#x27;直播就该这么做:主播高效沟通实战指南&#x27;</span>, <span class="string">&#x27;李子柒、李佳琦、薇娅成长为网红的秘密都在书中&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book` <span class="keyword">VALUES</span> (<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;市场营销&#x27;</span>, <span class="string">&#x27;直播销讲实战一本通&#x27;</span>, <span class="string">&#x27;和秋叶一起学系列网络营销书籍&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book` <span class="keyword">VALUES</span> (<span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;市场营销&#x27;</span>, <span class="string">&#x27;直播带货:淘宝、天猫直播从新手到高手&#x27;</span>, <span class="string">&#x27;一本教你如何玩转直播的书， 10堂课轻松实现带货月入3W+&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>勾选<code>SpringMVC</code>与<code>MySQL</code>坐标</li>
<li>修改配置文件为<code>yml</code>格式</li>
<li>设置端口为<code>80</code>方便访问</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h3 id="实体类快速开发（lombok）"><a href="#实体类快速开发（lombok）" class="headerlink" title="实体类快速开发（lombok）"></a>实体类快速开发（lombok）</h3><ul>
<li><code>Lombok</code>，一个<code>Java</code>类库，提供了一组注解，简化<code>POJO</code>实体类开发</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&lt;/dependency</span><br></pre></td></tr></table></figure>

<ul>
<li>lombok版本由SpringBoot提供，无需指定版本</li>
<li>常用注解：<code>@Data</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>为当前实体类在编译期设置对应的<code>get/set</code>方法，<code>toString</code>方法，<code>hashCode</code>方法，<code>equals</code>方法等</li>
</ul>
<p>小结:</p>
<ol>
<li>实体类制作</li>
<li>使用<code>lombok</code>简化开发<br> 导入<code>lombok</code>无需指定版本，由<code>SpringBoot</code>提供版本<br> <code>@Data</code>注解</li>
</ol>
<h3 id="数据层标准开发（基础CRUD）"><a href="#数据层标准开发（基础CRUD）" class="headerlink" title="数据层标准开发（基础CRUD）"></a>数据层标准开发（基础CRUD）</h3><ul>
<li>导入<code>MyBatisPlus</code>与<code>Druid</code>对应的<code>starter</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>配置数据源与<code>MyBatisPlus</code>对应的基础配置（<code>id</code>生成策略使用数据库自增策略）</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># druid 数据源配制</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot_db?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis-plus</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment"># 主键策略</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>继承<code>BaseMapper</code>并指定泛型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Book&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一个</span></span><br><span class="line"><span class="comment">     * 这是 Mybatis 开发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>制作测试类测试结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoTestCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(bookDao.getById(<span class="number">1</span>));</span><br><span class="line">        System.out.println(bookDao.selectById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setType(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        bookDao.insert(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setId(<span class="number">13</span>);</span><br><span class="line">        book.setType(<span class="string">&quot;测试数据asfd&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        bookDao.updateById(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        bookDao.deleteById(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(bookDao.selectList(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetPage</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetBy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>手工导入<code>starter</code>坐标（2个）</li>
<li>配置数据源与<code>MyBatisPlus</code>对应的配置</li>
<li>开发<code>Dao</code>接口（继承<code>BaseMapper</code>）</li>
<li>制作测试类测试<code>Dao</code>功能是否有效</li>
</ol>
<h3 id="开启MP运行日志"><a href="#开启MP运行日志" class="headerlink" title="开启MP运行日志"></a>开启MP运行日志</h3><ul>
<li>为方便调试可以开启<code>MyBatisPlus</code>的日志</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mybatis-plus</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment"># 主键策略</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 开启MyBatisPlus的日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>使用配置方式开启日志，设置日志输出方式为标准输出</li>
</ol>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220926221515178.png" alt="image-20220926221515178"></p>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><ul>
<li>分页操作需要设定分页对象<code>IPage</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetPage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">    bookDao.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>IPage</code>对象中封装了分页操作中的所有数据<br>数据<br>当前页码值<br>每页数据总量<br>最大页码值<br>数据总量</p>
</li>
<li><p>分页操作是在<code>MyBatisPlus</code>的常规操作基础上增强得到，内部是动态的拼写<code>SQL</code>语句，因此需要增强对应的功能，<br>使用<code>MyBatisPlus</code>拦截器实现</p>
</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220927103427248.png" alt="image-20220927103427248"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 定义 Mp 拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2. 添加具体的拦截器 分页拦截器</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetPage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">    bookDao.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(page.getCurrent());</span><br><span class="line">    System.out.println(page.getSize());</span><br><span class="line">    System.out.println(page.getPages());</span><br><span class="line">    System.out.println(page.getTotal());</span><br><span class="line">    System.out.println(page.getRecords());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220927103607647.png" alt="image-20220927103607647"></p>
<p>小结:</p>
<ol>
<li>使用<code>IPage</code>封装分页数据</li>
<li>分页操作依赖<code>MyBatisPlus</code>分页拦截器实现功能</li>
<li>借助<code>MyBatisPlus</code>日志查阅执行<code>SQL</code>语句</li>
</ol>
<h3 id="业务层标准开发（基础CRUD）"><a href="#业务层标准开发（基础CRUD）" class="headerlink" title="业务层标准开发（基础CRUD）"></a>业务层标准开发（基础CRUD）</h3><p><code>Service</code>层接口定义与数据层接口定义具有较大区别，不要混用<br><code>selectByUserNameAndPassword(String username,String password)</code>; 数据层接口<br><code>login(String username,String password);</code> <code>Service</code>层接口</p>
<ul>
<li>接口定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage,<span class="type">int</span> pageSize)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>实现类定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.insert(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.updateById(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectList(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(currentPage, pageSize);</span><br><span class="line">        bookDao.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试类定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTestCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(bookService.getById(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setType(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setId(<span class="number">14</span>);</span><br><span class="line">        book.setType(<span class="string">&quot;测试数据asfd&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        bookService.update(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        bookService.delete(<span class="number">14</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(bookService.getAll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetPage</span><span class="params">()</span> &#123;</span><br><span class="line">        IPage&lt;Book&gt; page = bookService.getPage(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(page.getCurrent());</span><br><span class="line">        System.out.println(page.getSize());</span><br><span class="line">        System.out.println(page.getPages());</span><br><span class="line">        System.out.println(page.getTotal());</span><br><span class="line">        System.out.println(page.getRecords());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li><code>Service</code>接口名称定义成业务名称，并与<code>Dao</code>接口名称进行区分</li>
<li>制作测试类测试<code>Service</code>功能是否有效</li>
</ol>
<h3 id="业务层快速开发（基于MyBatisPlus构建）"><a href="#业务层快速开发（基于MyBatisPlus构建）" class="headerlink" title="业务层快速开发（基于MyBatisPlus构建）"></a>业务层快速开发（基于MyBatisPlus构建）</h3><p>快速开发方案<br>使用<code>MyBatisPlus</code>提供有业务层通用接口<code>（ISerivce）</code>与业务层通用实现类<code>（ServiceImpl&lt;M,T&gt;）</code><br>在通用类基础上做功能重载或功能追加<br>注意重载时不要覆盖原始操作，避免原始提供的功能丢失</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220928201044625.png" alt="image-20220928201044625"></p>
<ul>
<li>接口定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Book&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口追加功能</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Book&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 追加的操作与原始操作通过名称区分，功能类似</span></span><br><span class="line">    Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">insert</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">modify</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    Book <span class="title function_">get</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16643671163914.png" alt="img"></p>
<ul>
<li>实现类定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao, Book&gt; <span class="keyword">implements</span> <span class="title class_">IBookService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>实现类追加功能</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao, Book&gt; <span class="keyword">implements</span> <span class="title class_">IBookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">insert</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.insert(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">modify</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.updateById(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">get</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试类定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(bookService.getById(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setType(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setId(<span class="number">14</span>);</span><br><span class="line">        book.setType(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        bookService.updateById(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        bookService.removeById(<span class="number">14</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(bookService.list());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetPage</span><span class="params">()</span> &#123;</span><br><span class="line">        IPage&lt;Book&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        bookService.page(page);</span><br><span class="line">        System.out.println(page.getCurrent());</span><br><span class="line">        System.out.println(page.getSize());</span><br><span class="line">        System.out.println(page.getPages());</span><br><span class="line">        System.out.println(page.getTotal());</span><br><span class="line">        System.out.println(page.getRecords());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ol>
<li>使用通用接口<code>（ISerivce）</code>快速开发<code>Service</code></li>
<li>使用通用实现类<code>（ServiceImpl&lt;M,T&gt;）</code>快速开发<code>ServiceImpl</code></li>
<li>可以在通用接口基础上做功能重载或功能追加</li>
<li>注意重载时不要覆盖原始操作，避免原始提供的功能丢失</li>
</ol>
<h3 id="表现层标准开发"><a href="#表现层标准开发" class="headerlink" title="表现层标准开发"></a>表现层标准开发</h3><ul>
<li>基于<code>Restful</code>进行表现层接口开发</li>
<li>使用<code>Postman</code>测试表现层接口功能</li>
</ul>
<p>表现层开发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.modify(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> Integer currentPage, <span class="meta">@PathVariable</span> <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getPage(currentPage, pageSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>添加 分页的业务层方法</p>
<p><strong>IBookService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage,<span class="type">int</span> pageSize)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>IBookServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(currentPage, pageSize);</span><br><span class="line">    bookDao.selectPage(page, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>功能测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"> <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220928205724584.png" alt="image-20220928205724584"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220928210148614.png" alt="image-20220928210148614"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220928211631401.png" alt="image-20220928211631401"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220928211753300.png" alt="image-20220928211753300"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220928213831055.png" alt="image-20220928213831055"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> Integer currentPage, <span class="meta">@PathVariable</span> <span class="type">int</span> pageSize)</span> </span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220928214236656.png" alt="image-20220928214236656"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220928214323708.png" alt="image-20220928214323708"></p>
<p>小结:</p>
<ol>
<li>基于<code>Restful</code>制作表现层接口<br>新增：<code>POST</code><br>删除：<code>DELETE</code><br>修改：<code>PUT</code><br>查询：<code>GET</code></li>
<li>接收参数<br>实体数据：<code>@RequestBody</code><br>路径变量：<code>@PathVariable</code></li>
</ol>
<h3 id="表现层数据一致性处理（R对象）"><a href="#表现层数据一致性处理（R对象）" class="headerlink" title="表现层数据一致性处理（R对象）"></a>表现层数据一致性处理（R对象）</h3><ul>
<li><strong>之前的格式</strong></li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16643726949026.png" alt="img"></p>
<ul>
<li><strong>增加一个 data 属性，把数据全部封装到 data 里</strong></li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16643727221228.png" alt="img"></p>
<ul>
<li><p><strong>当数据为 <code>null</code> 可能出现的问题</strong></p>
<ul>
<li><p>查询<code>id</code>不存在的数据，返回 <code>null</code></p>
</li>
<li><p>查询过程中抛出异常，<code>catch</code> 中返回 <code>null</code></p>
</li>
</ul>
</li>
<li><p><strong>增加 一个状态属性</strong></p>
</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-166437277978410.png" alt="img"></p>
<ul>
<li><strong>设计表现层返回结果的模型类，用于后端与前端进行数据格式统一，也称为前后端数据协议</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不返回数据的构造方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> flag</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回数据的构造方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> flag</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>表现层接口统一返回值类型结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>, bookService.list());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(bookService.save(book));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(bookService.modify(book));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(bookService.delete(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>, bookService.getById(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> Integer currentPage, <span class="meta">@PathVariable</span> <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>, bookService.getPage(currentPage, pageSize));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220929111157171.png" alt="image-20220929111157171"></p>
<p>小结：</p>
<ol>
<li>设计统一的返回值结果类型便于前端开发读取数据</li>
<li>返回值结果类型可以根据需求自行设定，没有固定格式</li>
<li>返回值结果模型类用于后端与前端进行数据格式统一，也称为前后端数据协议</li>
</ol>
<h3 id="前后端调用（axios发送异步请求）"><a href="#前后端调用（axios发送异步请求）" class="headerlink" title="前后端调用（axios发送异步请求）"></a>前后端调用（axios发送异步请求）</h3><p>使用VUE的方法时提示报错：<br>Method definition shorthands are not supported by current JavaScript version</p>
<p>表示：该方法定义的缺陷是不支持当前的<code>JavaScript</code>版本，虽然可以程序可以正常运行，但是这个方法会出现红色的波浪线，很不爽<br>解决：<br><strong>打开 File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; Javascript<br>把JavaScript版本为ECMAScript 6就可以了</strong></p>
<ul>
<li>前后端分离结构设计中页面归属前端服务器</li>
<li>单体工程中页面放置在<code>resources</code>目录下的<code>static</code>目录中（建议执行<code>clean</code>）</li>
<li>前端发送异步请求，调用后端接口</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20220929115154400.png" alt="image-20220929115154400"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//钩子函数，VUE对象初始化完成后自动执行</span></span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//调用查询全部数据的操作</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列表</span></span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//发送异步请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16644235934362.png" alt="img"></p>
<p>小结：</p>
<ol>
<li>单体项目中页面放置在<code>resources/static</code>目录下</li>
<li><code>created钩子函数</code>用于初始化页面时发起调用</li>
<li>页面使用<code>axios</code>发送异步请求获取数据后确认前后端是否联通</li>
</ol>
<h3 id="列表功能"><a href="#列表功能" class="headerlink" title="列表功能"></a>列表功能</h3><ul>
<li>列表页</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列表</span></span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//发送异步请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//console.log(res.data);</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pqX5oGL6Iqx6aaZ,size_20,color_FFFFFF,t_70,g_se,x_16-16644250882684.png" alt="img"></p>
<p>小结：</p>
<ol>
<li>将查询数据返回到页面，利用前端数据双向绑定进行数据展示</li>
</ol>
<h3 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h3><ul>
<li>弹出添加窗口</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 弹出添加窗口</span></span><br><span class="line"><span class="title function_">handleCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>清除数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重置表单</span></span><br><span class="line"><span class="title function_">resetForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">formData</span> = &#123;&#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>在弹出添加窗口时 清除数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹出添加窗口</span></span><br><span class="line"><span class="title function_">handleCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">resetForm</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>发送添加请求</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line"><span class="title function_">handleAdd</span>(<span class="params"></span>) &#123;</span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&quot;/books&quot;</span>, <span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//判断当前操作是否成功</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">flag</span>) &#123;</span><br><span class="line">            <span class="comment">//1.关闭弹层</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//2.重新加载数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>取消添加</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取消</span></span><br><span class="line"><span class="title function_">cancel</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//1.关闭弹层</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//2.提示用户</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">info</span>(<span class="string">&quot;当前操作取消&quot;</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>请求方式使用<code>POST</code>调用后台对应操作</li>
<li>添加操作结束后动态刷新页面加载数据</li>
<li>根据操作结果不同，显示对应的提示信息</li>
<li>弹出添加<code>Div</code>时清除表单数据</li>
</ol>
<h3 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h3><ul>
<li>删除</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    axios.<span class="title function_">delete</span>(<span class="string">&quot;/books/&quot;</span> + row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">flag</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>加入确认删除对话框</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="comment">//1. 弹出提示框</span></span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&quot;些操作永久删除当前信息,是否继续?&quot;</span>, <span class="string">&quot;提示&quot;</span>, &#123;<span class="attr">type</span>: <span class="string">&quot;info&quot;</span>&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//2. 做删除业务</span></span><br><span class="line">        axios.<span class="title function_">delete</span>(<span class="string">&quot;/books/&quot;</span> + row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//判断当前操作是否成功</span></span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">flag</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//2.重新加载数据</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//3. 取消删除</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">info</span>(<span class="string">&quot;取消操作&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>请求方式使用<code>Delete</code>调用后台对应操作</li>
<li>删除操作需要传递当前行数据对应的<code>id</code>值到后台</li>
<li>删除操作结束后动态刷新页面加载数据</li>
<li>根据操作结果不同，显示对应的提示信息</li>
<li>删除操作前弹出提示框避免误操作</li>
</ol>
<h3 id="修改功能（加载数据）"><a href="#修改功能（加载数据）" class="headerlink" title="修改功能（加载数据）"></a>修改功能（加载数据）</h3><ul>
<li>弹出修改窗口</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹出编辑窗口</span></span><br><span class="line"><span class="title function_">handleUpdate</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span> + row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">flag</span> &amp;&amp; res.<span class="property">data</span>.<span class="property">data</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 展示弹层，加载数据</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">formData</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;数据同步失败，自动刷新&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//重新加载数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>删除消息维护</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="comment">//1. 弹出提示框</span></span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&quot;些操作永久删除当前信息,是否继续?&quot;</span>, <span class="string">&quot;提示&quot;</span>, &#123;<span class="attr">type</span>: <span class="string">&quot;info&quot;</span>&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//2. 做删除业务</span></span><br><span class="line">        axios.<span class="title function_">delete</span>(<span class="string">&quot;/books/&quot;</span> + row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//判断当前操作是否成功</span></span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">flag</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;数据同步失败，自动刷新&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//2.重新加载数据</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//3. 取消删除</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">info</span>(<span class="string">&quot;取消操作&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>加载要修改数据通过传递当前行数据对应的<code>id</code>值到后台查询数据</li>
<li>利用前端数据双向绑定将查询到的数据进行回显</li>
</ol>
<h3 id="修改功能"><a href="#修改功能" class="headerlink" title="修改功能"></a>修改功能</h3><ul>
<li>修改</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="title function_">handleEdit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    axios.<span class="title function_">put</span>(<span class="string">&quot;/books&quot;</span>, <span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//判断当前操作是否成功</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">flag</span>) &#123;</span><br><span class="line">            <span class="comment">//1.关闭弹层</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//2.重新加载数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>取消添加和修改</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取消</span></span><br><span class="line"><span class="title function_">cancel</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//1.关闭弹层</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//2.提示用户</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">info</span>(<span class="string">&quot;当前操作取消&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>请求方式使用<code>PUT</code>调用后台对应操作</li>
<li>修改操作结束后动态刷新页面加载数据（同新增）</li>
<li>根据操作结果不同，显示对应的提示信息（同新增）</li>
</ol>
<h3 id="异常消息处理"><a href="#异常消息处理" class="headerlink" title="异常消息处理"></a>异常消息处理</h3><ul>
<li>业务操作成功或失败返回数据格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;flag&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;flag&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>后台代码BUG导致数据格式不统一性</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span>: <span class="string">&quot;2021-11-07T12:44:29.343+00:00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">&quot;error&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/books&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对异常进行统一处理，出现异常后，返回指定信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截所有的异常信息</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">doException</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">        <span class="comment">// 记录日志</span></span><br><span class="line">        <span class="comment">// 发送消息给运维</span></span><br><span class="line">        <span class="comment">// 发送邮件给开发人员 ,ex 对象发送给开发人员</span></span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">false</span>, <span class="literal">null</span>, <span class="string">&quot;系统错误，请稍后再试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改表现层返回结果的模型类，封装出现异常后对应的信息<br><strong>flag：false</strong><br><strong>Data: null</strong><br><strong>消息(msg): 要显示信息</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Boolean flag;</span><br><span class="line">	<span class="keyword">private</span> Object data;</span><br><span class="line">	<span class="keyword">private</span> String msg;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag,Object data,String msg)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.flag = flag;</span><br><span class="line">		<span class="built_in">this</span>.data = data;</span><br><span class="line">		<span class="built_in">this</span>.msg = msg;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>页面消息处理，没有传递消息加载默认消息，传递消息后加载指定消息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line">handleAdd() &#123;</span><br><span class="line">    axios.post(<span class="string">&quot;/books&quot;</span>, <span class="built_in">this</span>.formData).then((res) =&gt; &#123;</span><br><span class="line">        <span class="comment">//判断当前操作是否成功</span></span><br><span class="line">        <span class="keyword">if</span> (res.data.flag) &#123;</span><br><span class="line">            <span class="comment">//1.关闭弹层</span></span><br><span class="line">            <span class="built_in">this</span>.dialogFormVisible = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.$message.success(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$message.error(res.data.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="keyword">finally</span>(() =&gt; &#123;</span><br><span class="line">        <span class="comment">//2.重新加载数据</span></span><br><span class="line">        <span class="built_in">this</span>.getAll();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>可以在表现层Controller中进行消息统一处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@PostMapping</span></span><br><span class="line">  <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//if (book.getName().equals(&quot;123&quot;)) throw new IOException();</span></span><br><span class="line">      <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.save(book);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(flag, flag ? <span class="string">&quot;添加成功^_^&quot;</span> : <span class="string">&quot;添加失败-_-!&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>页面消息处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line">handleAdd() &#123;</span><br><span class="line">    axios.post(<span class="string">&quot;/books&quot;</span>, <span class="built_in">this</span>.formData).then((res) =&gt; &#123;</span><br><span class="line">        <span class="comment">//判断当前操作是否成功</span></span><br><span class="line">        <span class="keyword">if</span> (res.data.flag) &#123;</span><br><span class="line">            <span class="comment">//1.关闭弹层</span></span><br><span class="line">            <span class="built_in">this</span>.dialogFormVisible = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.$message.success(res.data.msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$message.error(res.data.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="keyword">finally</span>(() =&gt; &#123;</span><br><span class="line">        <span class="comment">//2.重新加载数据</span></span><br><span class="line">        <span class="built_in">this</span>.getAll();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>使用注解<code>@RestControllerAdvice</code>定义<code>SpringMVC</code>异常处理器用来处理异常的</li>
<li>异常处理器必须被扫描加载，否则无法生效</li>
<li>表现层返回结果的模型类中添加消息属性用来传递消息到页面</li>
</ol>
<h3 id="分页-1"><a href="#分页-1" class="headerlink" title="分页"></a>分页</h3><ul>
<li>页面使用 el 分页组件添加分页功能</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--分页组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagination-container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;pagiantion&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">:current-page</span>=<span class="string">&quot;pagination.currentPage&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">:page-size</span>=<span class="string">&quot;pagination.pageSize&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;total, prev, pager, next, jumper&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">:total</span>=<span class="string">&quot;pagination.total&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>定义分页组件需要使用的数据并将数据绑定到分页组件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">pagination</span>: &#123; <span class="comment">// 分页相关模型数据</span></span><br><span class="line">        <span class="attr">currentPage</span>: <span class="number">1</span>, <span class="comment">// 当前页码</span></span><br><span class="line">        <span class="attr">pageSize</span>: <span class="number">10</span>,	<span class="comment">// 每页显示的记录数</span></span><br><span class="line">        <span class="attr">total</span>: <span class="number">0</span>,		<span class="comment">// 总记录数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>替换查询全部功能为分页功能</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> + <span class="string">&quot;/&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>分页查询<br>使用路径参数传递分页数据或封装对象传递数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> Integer currentPage, <span class="meta">@PathVariable</span> <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>, bookService.getPage(currentPage, pageSize));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>加载分页数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//发送异步请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> + <span class="string">&quot;/&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//console.log(res.data);</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">current</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">size</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">records</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>分页页码值切换</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//切换页码</span></span><br><span class="line"><span class="title function_">handleCurrentChange</span>(<span class="params">currentPage</span>) &#123;</span><br><span class="line">    <span class="comment">//修改页码值为当前选中的页码值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> = currentPage;</span><br><span class="line">    <span class="comment">//执行查询</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>使用<code>el分页组件</code></li>
<li>定义分页组件绑定的数据模型</li>
<li>异步调用获取分页数据</li>
<li>分页数据页面回显</li>
</ol>
<h3 id="分页功能维护（删除BUG）"><a href="#分页功能维护（删除BUG）" class="headerlink" title="分页功能维护（删除BUG）"></a>分页功能维护（删除BUG）</h3><ul>
<li>对查询结果进行校验，如果当前页码值大于最大页码值，使用最大页码值作为当前页码值重新查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> Integer currentPage, <span class="meta">@PathVariable</span> <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">    IPage&lt;Book&gt; page = bookService.getPage(currentPage, pageSize);</span><br><span class="line">    <span class="comment">// 如果当前页码值大于了总页码值，那么重新执行查询操作，使用最大页码值作为当前页码值</span></span><br><span class="line">    <span class="keyword">if</span> (currentPage &gt; page.getPages()) &#123;</span><br><span class="line">        page = bookService.getPage((<span class="type">int</span>) page.getPages(), pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>, page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>基于业务需求维护删除功能</li>
</ol>
<h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><ul>
<li>查询条件数据封装<br>单独封装<br>与分页操作混合封装</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">pagination<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="comment">//分页相关模型数据</span></span><br><span class="line">    currentPage<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//当前页码</span></span><br><span class="line">    pageSize<span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span><span class="comment">//每页显示的记录数</span></span><br><span class="line">    total<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//总记录数</span></span><br><span class="line">    type<span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    name<span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    description<span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>页面数据模型绑定</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;filter-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;图书类别&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pagination.type&quot;</span> <span class="attr">class</span>=<span class="string">&quot;filter-item&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;图书名称&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pagination.name&quot;</span> <span class="attr">class</span>=<span class="string">&quot;filter-item&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;图书描述&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pagination.description&quot;</span> <span class="attr">class</span>=<span class="string">&quot;filter-item&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;getAll()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dalfBut&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">class</span>=<span class="string">&quot;butT&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleCreate()&quot;</span>&gt;</span>新建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>组织数据成为get请求发送的数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">type</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  /books/1/10?type=???&amp;name=???&amp;decription=?? ;</span></span><br><span class="line">    <span class="comment">//1. 获取查询条件 , 拼接查询条件</span></span><br><span class="line">    param = <span class="string">&quot;?name=&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">name</span>;</span><br><span class="line">    param += <span class="string">&quot;&amp;type=&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">type</span>;</span><br><span class="line">    param += <span class="string">&quot;&amp;description=&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">description</span>;</span><br><span class="line">    <span class="comment">//console.log(&quot;-----------------&quot; + param);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送异步请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> + <span class="string">&quot;/&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span> + param).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//console.log(res.data);</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">current</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">size</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">records</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>条件参数组织可以通过条件判定书写的更简洁</li>
<li><code>Controller</code>接收参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getAll</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> currentPage,<span class="meta">@PathVariable</span> <span class="type">int</span> pageSize,Book book)</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;参数=====&gt;&quot;</span>+book);</span><br><span class="line">	IPage&lt;Book&gt; pageBook = bookService.getPage(currentPage,pageSize);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">null</span> != pageBook ,pageBook);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>业务层接口功能开发</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页的条件查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> currentPage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(Integer currentPage, <span class="type">int</span> pageSize, Book book)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>业务层接口实现类功能开发</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(Integer currentPage, <span class="type">int</span> pageSize, Book book)</span> &#123;</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;Book&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    lambdaQueryWrapper.like(Strings.isNotEmpty(book.getType()), Book::getType, book.getType());</span><br><span class="line">    lambdaQueryWrapper.like(Strings.isNotEmpty(book.getName()), Book::getName, book.getName());</span><br><span class="line">    lambdaQueryWrapper.like(Strings.isNotEmpty(book.getDescription()), Book::getDescription, book.getDescription());</span><br><span class="line"></span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(currentPage, pageSize);</span><br><span class="line">    bookDao.selectPage(page, lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Controller</code>调用业务层分页条件查询接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> Integer currentPage, <span class="meta">@PathVariable</span> <span class="type">int</span> pageSize, Book book)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// System.out.println(&quot;book=&gt;&quot; + book);</span></span><br><span class="line"></span><br><span class="line">    IPage&lt;Book&gt; page = bookService.getPage(currentPage, pageSize, book);</span><br><span class="line">    <span class="comment">// 如果当前页码值大于了总页码值，那么重新执行查询操作，使用最大页码值作为当前页码值</span></span><br><span class="line">    <span class="keyword">if</span> (currentPage &gt; page.getPages()) &#123;</span><br><span class="line">        page = bookService.getPage((<span class="type">int</span>) page.getPages(), pageSize, book);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>, page);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>页面回显数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">type</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  /books/1/10?type=???&amp;name=???&amp;decription=?? ;</span></span><br><span class="line">    <span class="comment">//1. 获取查询条件 , 拼接查询条件</span></span><br><span class="line">    param = <span class="string">&quot;?name=&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">name</span>;</span><br><span class="line">    param += <span class="string">&quot;&amp;type=&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">type</span>;</span><br><span class="line">    param += <span class="string">&quot;&amp;description=&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">description</span>;</span><br><span class="line">    <span class="comment">//console.log(&quot;-----------------&quot; + param);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送异步请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> + <span class="string">&quot;/&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span> + param).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//console.log(res.data);</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">current</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">size</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">records</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>定义查询条件数据模型（当前封装到分页数据模型中）</li>
<li>异步调用分页功能并通过请求参数传递数据到后台</li>
</ol>
<h2 id="基础篇完结"><a href="#基础篇完结" class="headerlink" title="基础篇完结"></a>基础篇完结</h2><p>基于<code>SpringBoot</code>的<code>SSMP</code>整合案例</p>
<ol>
<li><strong>pom.xml</strong><br>配置起步依赖</li>
<li><strong>application.yml</strong><br>设置数据源、端口、框架技术相关配置等</li>
<li><strong>dao</strong><br>继承<code>BaseMapper</code>、设置<code>@Mapper</code></li>
<li><strong>dao测试类</strong></li>
<li><strong>service</strong><br>调用数据层接口或<code>MyBatis-Plus</code>提供的接口快速开发</li>
<li><strong>service测试类</strong></li>
<li><strong>controller</strong><br>基于<code>Restful</code>开发，使用<code>Postman</code>测试跑通功能</li>
<li>页面<br>放置在<code>resources</code>目录下的<code>static</code>目录中</li>
</ol>
<h1 id="实用篇"><a href="#实用篇" class="headerlink" title="实用篇"></a>实用篇</h1><ul>
<li><p>运维实用篇 Spring Boot 2 运维实用篇学习笔记</p>
<ul>
<li>能够掌握SpringBoot程序多环境开发</li>
<li>能够基于Linux系统发布SpringBoot工程</li>
<li>能够解决线上灵活配置SpringBoot工程的需求</li>
</ul>
</li>
<li><p>开发实用篇</p>
<ul>
<li>能够基于SpringBoot整合任意第三方技术</li>
</ul>
</li>
</ul>
<h2 id="运维实用篇"><a href="#运维实用篇" class="headerlink" title="运维实用篇"></a>运维实用篇</h2><h3 id="运维篇内容介绍与课程目标"><a href="#运维篇内容介绍与课程目标" class="headerlink" title="运维篇内容介绍与课程目标"></a>运维篇内容介绍与课程目标</h3><p>内容介绍</p>
<ul>
<li>打包与运行</li>
<li>配置高级</li>
<li>多环境开发</li>
<li>日志</li>
</ul>
<p>课程目标：</p>
<ul>
<li>能够掌握SpringBoot程序多环境开发</li>
<li>能够基于Linux系统发布SpringBoot工程</li>
<li>能够解决线上灵活配置SpringBoot工程的需求</li>
</ul>
<h3 id="工程打包与运行"><a href="#工程打包与运行" class="headerlink" title="工程打包与运行"></a>工程打包与运行</h3><p><strong>程序为什么要打包</strong></p>
<p>将程序部署在独立的服务器上</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/ab8d2df714d42356c71b0f13f92d20e9.png" alt="img"></p>
<h3 id="SpringBoot项目快速启动（Windows版）"><a href="#SpringBoot项目快速启动（Windows版）" class="headerlink" title="SpringBoot项目快速启动（Windows版）"></a>SpringBoot项目快速启动（Windows版）</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a><strong>步骤</strong></h4><p>①：对<code>SpringBoot</code>项目打包（执行<code>Maven</code>构建指令<code>package</code>）执行 <code>package </code>打包命令之前 先执行 <code>mvn clean</code> 删除 <code>target</code> 目录及内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/f806bb3c8544f33ec010bab7d25b02bb.png" alt="img"></p>
<p>打包完成 生成对应的 <code>jar 文件</code></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/aadc7af46bb5f273b03bbf1f05856e1b.png" alt="img"></p>
<p><strong>可能出现的问题: <code>IDEA</code>下 执行 <code>Maven</code> 命令控制台中文乱码</strong></p>
<p><code>Ctr+Alt+S</code> 打开设置，在<code>Build</code>，<code>Execution</code> ，<code>Deployment</code>找到<code>Build Tools</code>下<code>Maven</code>项下的<code>Runner</code> ，在<code>VM Options</code> 添加<br><code>-Dfile.encoding=GB2312</code> ，点击<code>OK</code>。</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/b5b5318fb3ab2881dd3390c7427ced55.png" alt="img"></p>
<p>②：运行项目（执行启动指令） <code>java -jar &lt;打包文件名&gt;</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java –jar springboot.jar</span><br></pre></td></tr></table></figure>

<p>注意事项：<br><code>jar</code>支持命令行启动需要依赖<code>maven</code>插件支持，请确认打包时是否具有<code>SpringBoot</code>对应的<code>maven</code>插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/40ad8c77bd7bd529b61c5bc01242ffd4.png" alt="img"></p>
<p>地址栏输入 <code>cmd</code> 回车</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/0016c8a2a1d291e54fd50ce3a87b77ad.png" alt="img"></p>
<p>执行 <code>java -jar springboot_08_ssmp-0.0.1-SNAPSHOT.jar</code></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/a4ca10991375676ce6c0290662852adf.png" alt="img"></p>
<p>③：浏览器访问: <a href="http://localhost/pages/books.html">http://localhost/pages/books.html</a></p>
<h4 id="打包优化：跳过-test-生命周期"><a href="#打包优化：跳过-test-生命周期" class="headerlink" title="打包优化：跳过 test 生命周期"></a><strong>打包优化：跳过 test 生命周期</strong></h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/01533f23027c4bb8579eee0e726ba369.png" alt="img"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/fd7a1ee45ea66c2aa98208a0899a39f6.png" alt="img"></p>
<p>小结:</p>
<ol>
<li><code>SpringBoot</code>工程可以基于<code>java</code>环境下独立运行<code>jar</code>文件启动服务</li>
<li><code>SpringBoot</code>工程执行<code>mvn</code>命令<code>package</code>进行打包</li>
<li>执行<code>jar</code>命令：<code>java –jar 工程名.jar</code></li>
</ol>
<h4 id="打包插件"><a href="#打包插件" class="headerlink" title="打包插件"></a><strong>打包插件</strong></h4><p>如果没有配制<code>spring boot</code> 打包插件可能遇到下面的问题:</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/70d95f157126511ccc2ffc6e19f899d4.png" alt="img"></p>
<ul>
<li>使用<code>SpringBoot</code>提供的<code>maven</code>插件可以将工程打包成可执行<code>jar包</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>可执行jar包目录结构</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/35f27fe78e4ca242139ac84ce1391af7.png" alt="img"></p>
<h4 id="jar包描述文件（MANIFEST-MF）"><a href="#jar包描述文件（MANIFEST-MF）" class="headerlink" title="jar包描述文件（MANIFEST.MF）"></a><strong>jar包描述文件（MANIFEST.MF）</strong></h4><ul>
<li>普通工程</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Implementation-Title: springboot_08_ssmp</span><br><span class="line">Implementation-Version: 0.0.1-SNAPSHOT</span><br><span class="line">Build-Jdk-Spec: 1.8</span><br><span class="line">Created-By: Maven Jar Plugin 3.2.0</span><br></pre></td></tr></table></figure>

<ul>
<li>基于<code>spring-boot-maven-plugin</code>打包的工程</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Spring-Boot-Classpath-Index: BOOT-INF/classpath.idx</span><br><span class="line">Implementation-Title: springboot_08_ssmp</span><br><span class="line">Implementation-Version: 0.0.1-SNAPSHOT</span><br><span class="line">Spring-Boot-Layers-Index: BOOT-INF/layers.idx</span><br><span class="line">Start-Class: com.example.SSMPApplication 启动类</span><br><span class="line">Spring-Boot-Classes: BOOT-INF/classes/</span><br><span class="line">Spring-Boot-Lib: BOOT-INF/lib/</span><br><span class="line">Build-Jdk-Spec: 1.8</span><br><span class="line">Spring-Boot-Version: 2.5.6</span><br><span class="line">Created-By: Maven Jar Plugin 3.2.0</span><br><span class="line">Main-Class: org.springframework.boot.loader.JarLauncher  jar启动器</span><br></pre></td></tr></table></figure>

<h4 id="命令行启动常见问题及解决方案"><a href="#命令行启动常见问题及解决方案" class="headerlink" title="命令行启动常见问题及解决方案"></a>命令行启动常见问题及解决方案</h4><ul>
<li>Windonws端口被占用</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询端口</span></span><br><span class="line">netstat <span class="literal">-ano</span></span><br><span class="line"><span class="comment"># 查询指定端口</span></span><br><span class="line">netstat <span class="literal">-ano</span> |findstr <span class="string">&quot;端口号&quot;</span></span><br><span class="line"><span class="comment"># 根据进程PID查询进程名称</span></span><br><span class="line">tasklist |findstr <span class="string">&quot;进程PID号&quot;</span></span><br><span class="line"><span class="comment"># 根据PID杀死任务</span></span><br><span class="line">taskkill /F /PID <span class="string">&quot;进程PID号&quot;</span></span><br><span class="line"><span class="comment"># 根据进程名称杀死任务</span></span><br><span class="line">taskkill <span class="operator">-f</span> <span class="literal">-t</span> <span class="literal">-im</span> <span class="string">&quot;进程名称&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">D:\code\Java\IdeaProjects\springboot<span class="literal">-study</span>\springboot_08_ssmp\target&gt;netstat <span class="literal">-ano</span></span><br><span class="line"></span><br><span class="line">活动连接</span><br><span class="line"></span><br><span class="line">  协议  	 本地地址          		  外部地址       		 状态            PID</span><br><span class="line">  TCP    <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>             <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span>              LISTENING       <span class="number">30988</span></span><br><span class="line">  TCP    <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">135</span>            <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span>              LISTENING       <span class="number">1792</span></span><br><span class="line">  TCP    <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">443</span>            <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span>              LISTENING       <span class="number">9400</span></span><br><span class="line">  TCP    <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">445</span>            <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span>              LISTENING       <span class="number">4</span></span><br><span class="line">  TCP    <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">902</span>            <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span>              LISTENING       <span class="number">6188</span></span><br><span class="line">  TCP    <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">912</span>            <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span>              LISTENING       <span class="number">6188</span></span><br><span class="line"> </span><br><span class="line">D:\code\Java\IdeaProjects\springboot<span class="literal">-study</span>\springboot_08_ssmp\target&gt;netstat <span class="literal">-ano</span> |findstr <span class="string">&quot;80&quot;</span></span><br><span class="line">  TCP    <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>             <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span>              LISTENING       <span class="number">30988</span></span><br><span class="line">  TCP    <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">7680</span>           <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span>              LISTENING       <span class="number">4864</span></span><br><span class="line">  TCP    <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8680</span>           <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span>              LISTENING       <span class="number">7976</span></span><br><span class="line">  TCP    <span class="number">192.168</span>.<span class="number">1.102</span>:<span class="number">9808</span>     <span class="number">119.96</span>.<span class="number">138.240</span>:<span class="number">443</span>     ESTABLISHED     <span class="number">20604</span></span><br><span class="line">  TCP    [::]:<span class="number">80</span>                [::]:<span class="number">0</span>                 LISTENING       <span class="number">30988</span></span><br><span class="line">  TCP    [::]:<span class="number">7680</span>              [::]:<span class="number">0</span>                 LISTENING       <span class="number">4864</span></span><br><span class="line">  UDP    <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">65312</span>        *:*                                    <span class="number">5680</span></span><br><span class="line">  UDP    [<span class="type">fe80</span>::<span class="number">2952</span>:<span class="number">170</span><span class="type">d</span>:<span class="type">f2f2</span>:<span class="number">1464</span>%<span class="number">16</span>]:<span class="number">1900</span>  *:*                                    <span class="number">2872</span></span><br><span class="line">  UDP    [<span class="type">fe80</span>::<span class="number">2952</span>:<span class="number">170</span><span class="type">d</span>:<span class="type">f2f2</span>:<span class="number">1464</span>%<span class="number">16</span>]:<span class="number">60720</span>  *:*                                    <span class="number">2872</span></span><br><span class="line">  UDP    [<span class="type">fe80</span>::<span class="number">4</span><span class="type">c2b</span>:<span class="number">9</span><span class="type">d2f</span>:<span class="type">a625</span>:<span class="number">8</span><span class="type">b1c</span>%<span class="number">6</span>]:<span class="number">1900</span>  *:*                                    <span class="number">2872</span></span><br><span class="line">  UDP    [<span class="type">fe80</span>::<span class="number">4</span><span class="type">c2b</span>:<span class="number">9</span><span class="type">d2f</span>:<span class="type">a625</span>:<span class="number">8</span><span class="type">b1c</span>%<span class="number">6</span>]:<span class="number">60719</span>  *:*                                    <span class="number">2872</span></span><br><span class="line">  UDP    [<span class="type">fe80</span>::<span class="type">e1e0</span>:<span class="type">a2c9</span>:<span class="number">200</span>:<span class="number">2</span><span class="type">f34</span>%<span class="number">19</span>]:<span class="number">1900</span>  *:*                                    <span class="number">2872</span></span><br><span class="line">  UDP    [<span class="type">fe80</span>::<span class="type">e1e0</span>:<span class="type">a2c9</span>:<span class="number">200</span>:<span class="number">2</span><span class="type">f34</span>%<span class="number">19</span>]:<span class="number">60721</span>  *:*                                    <span class="number">2872</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">D:\code\Java\IdeaProjects\springboot<span class="literal">-study</span>\springboot_08_ssmp\target&gt;tasklist |findstr <span class="string">&quot;30988&quot;</span></span><br><span class="line">java.exe                     <span class="number">30988</span> Console                    <span class="number">3</span>    <span class="number">273</span>,<span class="number">388</span> K</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:\code\Java\IdeaProjects\springboot<span class="literal">-study</span>\springboot_08_ssmp\target&gt;tasklist</span><br><span class="line"></span><br><span class="line">映像名称                       PID 会话名              会话<span class="comment">#       内存使用</span></span><br><span class="line">========================= ======== ================ =========== ============</span><br><span class="line">System Idle <span class="keyword">Process</span>              <span class="number">0</span> Services                   <span class="number">0</span>          <span class="number">8</span> K</span><br><span class="line">System                           <span class="number">4</span> Services                   <span class="number">0</span>      <span class="number">1</span>,<span class="number">500</span> K</span><br><span class="line">Registry                       <span class="number">172</span> Services                   <span class="number">0</span>     <span class="number">94</span>,<span class="number">584</span> K</span><br><span class="line">smss.exe                       <span class="number">648</span> Services                   <span class="number">0</span>      <span class="number">1</span>,<span class="number">084</span> K</span><br><span class="line">csrss.exe                     <span class="number">1080</span> Services                   <span class="number">0</span>      <span class="number">5</span>,<span class="number">888</span> K</span><br><span class="line">wininit.exe                   <span class="number">1320</span> Services                   <span class="number">0</span>      <span class="number">6</span>,<span class="number">868</span> K</span><br><span class="line">services.exe                  <span class="number">1436</span> Services                   <span class="number">0</span>      <span class="number">9</span>,<span class="number">264</span> K</span><br><span class="line">lsass.exe                     <span class="number">1488</span> Services                   <span class="number">0</span>     <span class="number">11</span>,<span class="number">932</span> K</span><br><span class="line">svchost.exe                   <span class="number">1612</span> Services                   <span class="number">0</span>     <span class="number">17</span>,<span class="number">804</span> K</span><br><span class="line">fontdrvhost.exe               <span class="number">1648</span> Services                   <span class="number">0</span>        <span class="number">488</span> K</span><br><span class="line">WUDFHost.exe                  <span class="number">1688</span> Services                   <span class="number">0</span>      <span class="number">2</span>,<span class="number">660</span> K</span><br><span class="line">svchost.exe                   <span class="number">1792</span> Services                   <span class="number">0</span>     <span class="number">13</span>,<span class="number">428</span> K</span><br><span class="line">WUDFHost.exe                  <span class="number">1840</span> Services                   <span class="number">0</span>      <span class="number">2</span>,<span class="number">628</span> K</span><br><span class="line">svchost.exe                   <span class="number">1868</span> Services                   <span class="number">0</span>      <span class="number">3</span>,<span class="number">460</span> K</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:\code\Java\IdeaProjects\springboot<span class="literal">-study</span>\springboot_08_ssmp\target&gt;taskkill /F /PID <span class="string">&quot;30988&quot;</span></span><br><span class="line">成功: 已终止 PID 为 <span class="number">30988</span> 的进程。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>小结:</strong></p>
<ol>
<li><code>spring-boot-maven-plugin</code>插件作用</li>
<li><code>Windonws</code>端口被占用</li>
</ol>
<h3 id="SpringBoot工程快速启动（Linux版）"><a href="#SpringBoot工程快速启动（Linux版）" class="headerlink" title="SpringBoot工程快速启动（Linux版）"></a>SpringBoot工程快速启动（Linux版）</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/80846308dc04e36693e023795d8a06b1.png" alt="img"></p>
<ul>
<li>基于Linux（CenterOS7）</li>
<li>安装JDK，且版本不低于打包时使用的JDK版本<ul>
<li>可以使用 yum 安装</li>
</ul>
</li>
<li>安装 MySQL<ul>
<li>可以参考: <a href="https://blog.csdn.net/qq_42324086/article/details/120579197">https://blog.csdn.net/qq_42324086/article/details/120579197</a></li>
</ul>
</li>
<li>安装包保存在/usr/local/自定义目录中或$HOME下</li>
<li>其他操作参照Windows版进行</li>
</ul>
<p><strong>启动成功无法访问</strong></p>
<p><strong>添加 80 端口</strong></p>
<ul>
<li>添加 端口</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --permanent --add-port=80/tcp</span><br></pre></td></tr></table></figure>

<ul>
<li>重启</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure>

<p><strong>后台启动命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -jar springboot_08_ssmp-0.0.1-SNAPSHOT.jar &gt; server.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p><strong>停止服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep “java -jar”</span><br><span class="line">kill -9 PID</span><br><span class="line">cat server.log (查看日志)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@cjbCentos01 app]# ps -ef | grep &quot;java -jar&quot;</span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root       6848   6021  7 14:45 pts/2    00:00:19 java -jar springboot_08_ssmp-0.0.1-SNAPSHOT.jar</span><br><span class="line">root       6919   6021  0 14:49 pts/2    00:00:00 grep --color=auto java -jar</span><br><span class="line">[root@cjbCentos01 app]# kill -9 6848</span><br><span class="line">[root@cjbCentos01 app]# ps -ef | grep &quot;java -jar&quot;</span><br><span class="line">root       7016   6021  0 14:52 pts/2    00:00:00 grep --color=auto java -jar</span><br><span class="line">[1]+  已杀死               nohup java -jar springboot_08_ssmp-0.0.1-SNAPSHOT.jar &gt; server.log 2&gt;&amp;1</span><br><span class="line">[root@cjbCentos01 app]# </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>小结:</strong></p>
<ol>
<li>上传安装包</li>
<li>执行jar命令：<code>java –jar 工程名.jar</code></li>
</ol>
<p>总结:</p>
<ol>
<li>Boot程序打包依赖<code>SpringBoot</code>对应的<code>Maven</code>插件即可打包出可执行的jar包</li>
<li>运行jar包使用jar命令进行</li>
<li>Windows与Linux下执行Boot打包程序流程相同，仅需确保运行环境有效即可</li>
</ol>
<h3 id="配置高级"><a href="#配置高级" class="headerlink" title="配置高级"></a>配置高级</h3><h4 id="临时属性"><a href="#临时属性" class="headerlink" title="临时属性"></a>临时属性</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/00250c08fd078a09e38cfc777f2a6e30.png" alt="img"></p>
<ul>
<li>带属性数启动SpringBoot</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar springboot_08_ssmp-0.0.1-SNAPSHOT.jar --server.port=8080</span><br></pre></td></tr></table></figure>

<ul>
<li>携带多个属性启动SpringBoot，属性间使用空格分隔</li>
</ul>
<p><strong>属性加载优先顺序</strong></p>
<ol>
<li>参看 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</a></li>
</ol>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/c0465f0f841336a9f3e6c8a43558c41d.png" alt="img"></p>
<p>小结:</p>
<ol>
<li>使用<code>jar</code>命令启动<code>SpringBoot</code>工程时可以使用临时属性替换配置文件中的属性</li>
<li>临时属性添加方式：<code>java –jar 工程名.jar --属性名=值</code></li>
<li>多个临时属性之间使用空格分隔</li>
<li>临时属性必须是当前<code>boot</code>工程支持的属性，否则设置无效</li>
</ol>
<h4 id="临时属性（开发环境）"><a href="#临时属性（开发环境）" class="headerlink" title="临时属性（开发环境）"></a>临时属性（开发环境）</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/cbd760661547dc8a32c78fe5275ebd46.png" alt="img"></p>
<ul>
<li>带属性启动SpringBoot程序，为程序添加运行属性</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221003222123201.png" alt="image-20221003222123201"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221003222217069.png" alt="image-20221003222217069"></p>
<p>在启动类中 <code>main</code> 可以通过 <code>System.out.println(Arrays.toString(args));</code> 查看配制的属性</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221003222401577.png" alt="image-20221003222401577"></p>
<ul>
<li>通过编程形式带参数启动<code>SpringBoot</code>程序，为程序添加运行参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	String[] arg = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">1</span>];</span><br><span class="line">	arg[<span class="number">0</span>] = <span class="string">&quot;--server.port=8080&quot;</span>;</span><br><span class="line">	SpringApplication.run(SSMPApplication.class, arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>不携带参数启动<code>SpringBoot</code>程序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//可以在启动boot程序时断开读取外部临时配置对应的入口，也就是去掉读取外部参数的形参</span></span><br><span class="line">	SpringApplication.run(SSMPApplication.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小结:</p>
<ol>
<li>启动<code>SpringBoot</code>程序时，可以选择是否使用命令行属性为<code>SpringBoot</code>程序传递启动属性</li>
</ol>
<h4 id="配置文件4级分类"><a href="#配置文件4级分类" class="headerlink" title="配置文件4级分类"></a>配置文件4级分类</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/28fb89c70d79a60d4255054072cba77f.png" alt="img"></p>
<p><strong>配置文件分类</strong></p>
<p>SpringBoot中4级配置文件</p>
<ul>
<li>1级：file ：config/application.yml 【最高】</li>
<li>2级：file ：application.yml</li>
<li>3级：classpath：config/application.yml</li>
<li>4级：classpath：application.yml 【最低】</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221004214651851.png" alt="image-20221004214651851"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221004214750838.png" alt="image-20221004214750838"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221004215041805.png" alt="image-20221004215041805"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221004215101849.png" alt="image-20221004215101849"></p>
<ol>
<li>作用：<ol>
<li>1级与2级留做系统打包后设置通用属性，1级常用于运维经理进行线上整体项目部署方案调控</li>
<li>3级与4级用于系统开发阶段设置通用属性，3级常用于项目经理进行整体项目属性调控</li>
</ol>
</li>
</ol>
<p>思 考:<br>如果<code>yml</code>与<code>properties</code>在不同层级中共存会是什么效果？<br>例：类路径<code>application.properties</code>属性是否覆盖文件系统<code>config</code>目录中<code>application.yml</code>属性<br><code>properties</code>文件的优先级大于<code>yml</code>文件 (<code>properties</code>文件会覆盖<code>yml</code>文件的配制)</p>
<p>小结:</p>
<ul>
<li><p>配置文件分为4种<br>项目类路径配置文件：服务于开发人员本机开发与测试<br>项目类路径<code>config</code>目录中配置文件：服务于项目经理整体调控<br>工程路径配置文件：服务于运维人员配置涉密线上环境<br>工程路径<code>config</code>目录中配置文件：服务于运维经理整体调控</p>
</li>
<li><p>多层级配置文件间的属性采用叠加并覆盖的形式作用于程序</p>
</li>
</ul>
<h4 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/17f4bdc7002679ed1800a32887b32f7c.png" alt="img"></p>
<ul>
<li>通过启动参数加载配置文件（无需书写配置文件扩展名) <code>--spring.config.name=ebank</code></li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221004223704434.png" alt="image-20221004223704434"></p>
<p>properties与yml文件格式均支持</p>
<ul>
<li>通过启动参数加载指定文件路径下的配置文件 <code>--spring.config.location=classpath:/ebank.yml</code></li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221004224204682.png" alt="image-20221004224204682"></p>
<p><code>properties</code>与<code>yml</code>文件格式均支持</p>
<ul>
<li>通过启动参数加载指定文件路径下的配置文件时可以加载多个配置,后面的会覆盖前面的</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--spring.config.location=classpath:/ebank.yml,classpath:/ebank-server.yml</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221005221659179.png" alt="image-20221005221659179"></p>
<p>注意事项:<br>多配置文件常用于将配置进行分类，进行独立管理，或将可选配置单独制作便于上线更新维护</p>
<p><strong>自定义配置文件——重要说明</strong></p>
<ul>
<li>单服务器项目：使用自定义配置文件需求较低</li>
<li>多服务器项目：使用自定义配置文件需求较高，将所有配置放置在一个目录中，统一管理</li>
<li>基于<code>SpringCloud</code>技术，所有的服务器将不再设置配置文件，而是通过配置中心进行设定，动态加载配置信息</li>
</ul>
<p>小结:</p>
<ul>
<li>配置文件可以修改名称，通过启动参数设定</li>
<li>配置文件可以修改路径，通过启动参数设定</li>
<li>微服务开发中配置文件通过配置中心进行设置</li>
</ul>
<p>总结:</p>
<ul>
<li><p><code>SpringBoot</code>在开发和运行环境均支持使用临时参数修改工程配置</p>
</li>
<li><p><code>SpringBoot</code>支持4级配置文件，应用于开发与线上环境进行配置的灵活设置</p>
</li>
<li><p><code>SpringBoot</code>支持使用自定义配置文件的形式修改配置文件存储位置</p>
</li>
<li><p>基于微服务开发时配置文件将使用配置中心进行管理</p>
</li>
</ul>
<h3 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h3><h4 id="多环境开发（yaml版）"><a href="#多环境开发（yaml版）" class="headerlink" title="多环境开发（yaml版）"></a><strong>多环境开发（yaml版）</strong></h4><p><strong>多环境</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/8fd600d1f34d1c80cb86671b4e99a638.png" alt="img"></p>
<p><strong>多环境开发（YAML版）</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/cf40efa2028ab24ad72481558a56b7ac.png" alt="img"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/644c8d460616b3fda1b7c8bdb9c5a1e7.png" alt="img"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#应用环境</span></span><br><span class="line"><span class="comment">#公共配制</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置环境</span></span><br><span class="line"><span class="comment">#开发环境</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生产环境</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试环境</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221006153746438.png" alt="image-20221006153746438"></p>
<p>小结:</p>
<ol>
<li>多环境开发需要设置若干种常用环境，例如开发、生产、测试环境</li>
<li><code>yaml</code>格式中设置多环境使用—区分环境设置边界</li>
<li>每种环境的区别在于加载的配置属性不同</li>
<li>启用某种环境时需要指定启动时使用该环境</li>
</ol>
<h4 id="多环境开发多文件版（yaml版）"><a href="#多环境开发多文件版（yaml版）" class="headerlink" title="多环境开发多文件版（yaml版）"></a><strong>多环境开发多文件版（yaml版）</strong></h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/1aa65d7c3cc15d3cae4394a50fa158ea.png" alt="img"></p>
<h4 id="多环境开发（yaml版）多配置文件格式"><a href="#多环境开发（yaml版）多配置文件格式" class="headerlink" title="多环境开发（yaml版）多配置文件格式"></a><strong>多环境开发（yaml版）多配置文件格式</strong></h4><ol>
<li>主启动配置文件<code>application.yml</code></li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#应用环境</span></span><br><span class="line"><span class="comment">#公共配制</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>环境分类配置文件<code>application-pro.yml</code></li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>环境分类配置文件<code>application-dev.yml</code></li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>环境分类配置文件<code>application-test.yml</code></li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221006155122818.png" alt="image-20221006155122818"></p>
<h5 id="多环境开发配置文件书写技巧（一）"><a href="#多环境开发配置文件书写技巧（一）" class="headerlink" title="多环境开发配置文件书写技巧（一）"></a>多环境开发配置文件书写技巧（一）</h5><ul>
<li>主配置文件中设置公共配置（全局）</li>
<li>环境分类配置文件中常用于设置冲突属性（局部）</li>
</ul>
<p>小结:</p>
<ol>
<li>可以使用独立配置文件定义环境属性</li>
<li>独立配置文件便于线上系统维护更新并保障系统安全性</li>
</ol>
<h4 id="多环境开发多文件版（properties版）"><a href="#多环境开发多文件版（properties版）" class="headerlink" title="多环境开发多文件版（properties版）"></a><strong>多环境开发多文件版（properties版）</strong></h4><ul>
<li>主启动配置文件<code>application.properties</code></li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure>

<ul>
<li>环境分类配置文件<code>application-pro.properties</code></li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">9081</span></span><br></pre></td></tr></table></figure>

<ul>
<li>环境分类配置文件<code>application-dev.properties</code></li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">9082</span></span><br></pre></td></tr></table></figure>

<ul>
<li>环境分类配置文件<code>application-test.properties</code></li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">9083</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221006160308973.png" alt="image-20221006160308973"></p>
<p>小结:</p>
<ol>
<li><code>properties</code>文件多环境配置仅支持多文件格式</li>
</ol>
<h4 id="多环境分组管理"><a href="#多环境分组管理" class="headerlink" title="多环境分组管理"></a><strong>多环境分组管理</strong></h4><h5 id="多环境开发独立配置文件书写技巧（二）"><a href="#多环境开发独立配置文件书写技巧（二）" class="headerlink" title="多环境开发独立配置文件书写技巧（二）"></a><strong>多环境开发独立配置文件书写技巧（二）</strong></h5><p>根据功能对配置文件中的信息进行拆分，并制作成独立的配置文件，命名规则如下</p>
<ul>
<li><p>application-devDB.yml</p>
</li>
<li><p>application-devRedis.yml</p>
</li>
<li><p>application-devMVC.yml</p>
</li>
<li><p>使用<code>include</code>属性在激活指定环境的情况下，同时对多个环境进行加载使其生效，多个环境间使用逗号分隔</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">    <span class="attr">include:</span> <span class="string">devDB,devMVC</span></span><br></pre></td></tr></table></figure>

<p>注意事项:<br><strong>当主环境dev与其他环境有相同属性时，主环境属性生效；其他环境中有相同属性时，最后加载的环境属性生效</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">The following profiles are active:</span> <span class="string">devDB,devMVC,dev</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从<code>Spring2.4</code>版开始使用<code>group</code>属性替代include属性，降低了配置书写量</li>
<li>使用group属性定义多种主环境与子环境的包含关系</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">profiles</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">active</span>: <span class="string">dev</span></span><br><span class="line">    <span class="attr">group</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">&quot;dev&quot;</span>: <span class="string">devDB,devMVC</span></span><br><span class="line">      <span class="attr">&quot;pro&quot;</span>: <span class="string">proDB,proMVC</span></span><br><span class="line">      <span class="attr">&quot;test&quot;</span>: <span class="string">testDB,testRedis,testMVC</span></span><br></pre></td></tr></table></figure>

<p>注意事项:<br><strong>使用group属性，会覆盖 主环境dev (active) 的内容，最后加载的环境属性生效</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The following profiles are active: dev,devDB,devMVC</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ol>
<li>多环境开发使用<code>group</code>属性设置配置文件分组，便于线上维护管理</li>
</ol>
<h4 id="多环境开发控制"><a href="#多环境开发控制" class="headerlink" title="多环境开发控制"></a><strong>多环境开发控制</strong></h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/35dfd3ba820eeda9b5108fa134c0b9b7.png" alt="img"></p>
<p><code>Maven</code>与<code>SpringBoot</code>多环境兼容</p>
<p>①：<code>Maven</code>中设置多环境属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Maven中设置多环境属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev_env<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro_env<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test_env<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>test<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>②：<code>SpringBoot</code>中引用<code>Maven</code>属性</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">@profile.active@</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">&quot;dev&quot;:</span> <span class="string">devDB,devMVC</span></span><br><span class="line">      <span class="attr">&quot;pro&quot;:</span> <span class="string">proDB,proMVC</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/16c8a5b48611896ab3f94a6915322893.png" alt="img"></p>
<p>③：执行<code>Maven</code>打包指令，并在生成的<code>boot</code>打包文件<code>.jar</code>文件中查看对应信息<br>问题：<strong>修改pom.xml 文件后，启动没有生效 手动 compile 即可</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/5b35e9530a6c9b84d1a590b08392716a.png" alt="img"></p>
<p>或者 设置 IDEA进行自动编译</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/c3b20b8b674f4c4339c22daded35bbd1.png" alt="img"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221006172516194.png" alt="image-20221006172516194"></p>
<p>小结：</p>
<ul>
<li><p>当<code>Maven</code>与<code>SpringBoot</code>同时对多环境进行控制时，以<code>Maven</code>为主，<code>SpringBoot</code>使用<code>@…@</code>占位符读取<code>Maven</code>对应的配置属性值</p>
</li>
<li><p>基于<code>SpringBoot</code>读取<code>Maven</code>配置属性的前提下，如果在<code>Idea</code>下测试工程时<code>pom.xml</code>每次更新需要手动<code>compile</code>方可生效</p>
</li>
</ul>
<p>总结：</p>
<ul>
<li>多环境开发（<code>YAML版</code>）</li>
<li>多环境开发（<code>Properties版</code>）</li>
<li><code>Maven</code>与<code>SpringBoot</code>多环境冲突现象解决方案</li>
</ul>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="日志基础操作"><a href="#日志基础操作" class="headerlink" title="日志基础操作"></a><strong>日志基础操作</strong></h4><p>日志（log）作用</p>
<ol>
<li>编程期调试代码</li>
<li>运营期记录信息<ul>
<li>记录日常运营重要信息（峰值流量、平均响应时长……）</li>
<li>记录应用报错信息（错误堆栈）</li>
<li>记录运维过程数据（扩容、宕机、报警……）</li>
</ul>
</li>
</ol>
<p>代码中使用日志工具记录日志</p>
<ul>
<li>先引入 <code>Lombok</code> 工具类</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>①：添加日志记录操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(BookController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;springboot is running...&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;debug ...&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;info ...&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;warn ...&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;error ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springboot is running...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>日志级别</p>
</li>
<li><p>TRACE：运行堆栈信息，使用率低</p>
</li>
<li><p>DEBUG：程序员调试代码使用</p>
</li>
<li><p>INFO：记录运维过程数据</p>
</li>
<li><p>WARN：记录运维过程报警数据</p>
</li>
<li><p>ERROR：记录错误堆栈信息</p>
</li>
<li><p>FATAL：灾难信息，合并计入ERROR</p>
</li>
</ul>
<p>②：设置日志输出级别</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启 debug 模式，输出调试信息，常用于检查系统运行状况</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置日志级别， root 表示根节点，即整体应用日志级别</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

<p>③：设置日志组，控制指定包对应的日志输出级别，也可以直接控制指定包对应的日志输出级别</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="comment"># 设置分组</span></span><br><span class="line">  <span class="attr">group:</span></span><br><span class="line">    <span class="comment"># 自定义组名，设置当前组中所包含的包</span></span><br><span class="line">    <span class="attr">ebank:</span> <span class="string">com.example.controller,com.example.service,com.example.dao</span></span><br><span class="line">    <span class="attr">iservice:</span> <span class="string">com.alibaba</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">    <span class="comment"># 设置某个包的日志级别</span></span><br><span class="line"><span class="comment">#    com.example.controller: debug</span></span><br><span class="line">    <span class="comment"># 为对应组设置日志级别</span></span><br><span class="line">    <span class="attr">ebank:</span> <span class="string">warn</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ol>
<li>日志用于记录开发调试与运维过程消息</li>
<li>日志的级别共6种，通常使用4种即可，分别是<code>DEBUG，INFO,WARN,ERROR</code></li>
<li>可以通过日志组或代码包的形式进行日志显示级别的控制</li>
</ol>
<h4 id="教你一招：快速创建日志对象"><a href="#教你一招：快速创建日志对象" class="headerlink" title="教你一招：快速创建日志对象"></a><strong>教你一招：快速创建日志对象</strong></h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/ef19395db7ae199acec096600b0ecbff.png" alt="img"></p>
<ul>
<li>使用<code>lombok</code>提供的注解<code>@Slf4j</code>简化开发，减少日志对象的声明操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">//Rest模式</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;springboot is running...2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;debug...&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;info...&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;warn...&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;error...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springboot is running...2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ol>
<li>基于<code>lombok</code>提供的<code>@Slf4j</code>注解为类快速添加日志对象</li>
</ol>
<h4 id="日志输出格式控制"><a href="#日志输出格式控制" class="headerlink" title="日志输出格式控制"></a><strong>日志输出格式控制</strong></h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/31052c620b4cfd40b68c4318289bd353.png" alt="img"></p>
<ul>
<li>PID：进程ID，用于表明当前操作所处的进程，当多服务同时记录日志时，该值可用于协助程序员调试程序</li>
<li>所属类/接口名：当前显示信息为SpringBoot重写后的信息，名称过长时，简化包名书写为首字母，甚至直接删除</li>
<li>设置日志输出格式</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&quot;%d - %m%n&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>%d：日期</li>
<li>%m：消息</li>
<li>%n：换行</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/6dcf8a6c3596115d805a6806fccc9da3.png" alt="img"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line"><span class="comment">#    console: &quot;%d - %m%n&quot;</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&quot;%d %clr(%5p) --- [%16t] %clr(%-40.40c)&#123;cyan&#125; : %m %n&quot;</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ol>
<li>日志输出格式设置规则</li>
</ol>
<h4 id="文件记录日志（运维实用篇完结）"><a href="#文件记录日志（运维实用篇完结）" class="headerlink" title="文件记录日志（运维实用篇完结）"></a><strong>文件记录日志（运维实用篇完结）</strong></h4><ul>
<li>设置日志文件</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">server.log</span></span><br></pre></td></tr></table></figure>

<ul>
<li>日志文件详细配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">server.log</span></span><br><span class="line">  <span class="attr">logback:</span></span><br><span class="line">    <span class="attr">rolling policy:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">4KB</span></span><br><span class="line">      <span class="attr">file-name-pattern:</span> <span class="string">server.%d&#123;yyyy-MM-dd&#125;.%i.log</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SpringBoot2/image-20221007172452525.png" alt="image-20221007172452525"></p>
<p>小结：</p>
<ol>
<li>日志记录到文件</li>
<li>日志文件格式设置</li>
</ol>
<p>总结：</p>
<ol>
<li>日志基础使用规则</li>
<li>编辑日志输出格式</li>
<li>日志文件设置</li>
</ol>
]]></content>
      <categories>
        <category>Java框架</category>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>黑马程序员-RabbitMQ</title>
    <url>/2022/11/21/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/</url>
    <content><![CDATA[<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121105538734.png" alt="image-20221121105538734"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121105600068.png" alt="image-20221121105600068"></p>
<h1 id="MQ的基本概念"><a href="#MQ的基本概念" class="headerlink" title="MQ的基本概念"></a>MQ的基本概念</h1><h2 id="MQ概述"><a href="#MQ概述" class="headerlink" title="MQ概述"></a>MQ概述</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121105832289.png" alt="image-20221121105832289"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121105915985.png" alt="image-20221121105915985"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121105942854.png" alt="image-20221121105942854"></p>
<h2 id="MQ的优势和劣势"><a href="#MQ的优势和劣势" class="headerlink" title="MQ的优势和劣势"></a>MQ的优势和劣势</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121110024682.png" alt="image-20221121110024682"></p>
<h2 id="MQ的优势"><a href="#MQ的优势" class="headerlink" title="MQ的优势"></a>MQ的优势</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121110110470.png" alt="image-20221121110110470"></p>
<h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121110244343.png" alt="image-20221121110244343"></p>
<h3 id="异步提速"><a href="#异步提速" class="headerlink" title="异步提速"></a>异步提速</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121110426268.png" alt="image-20221121110426268"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121110547394.png" alt="image-20221121110547394"></p>
<h3 id="削峰填谷"><a href="#削峰填谷" class="headerlink" title="削峰填谷"></a>削峰填谷</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121110654988.png" alt="image-20221121110654988"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121110801838.png" alt="image-20221121110801838"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121110822179.png" alt="image-20221121110822179"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121110836607.png" alt="image-20221121110836607"></p>
<h2 id="MQ的劣势"><a href="#MQ的劣势" class="headerlink" title="MQ的劣势"></a>MQ的劣势</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121110954361.png" alt="image-20221121110954361"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121111128954.png" alt="image-20221121111128954"></p>
<h2 id="常见的MQ产品"><a href="#常见的MQ产品" class="headerlink" title="常见的MQ产品"></a>常见的MQ产品</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121111308058.png" alt="image-20221121111308058"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121111500127.png" alt="image-20221121111500127"></p>
<h2 id="RabbitMQ简介"><a href="#RabbitMQ简介" class="headerlink" title="RabbitMQ简介"></a>RabbitMQ简介</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121111633880.png" alt="image-20221121111633880"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121111913537.png" alt="image-20221121111913537"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121112054942.png" alt="image-20221121112054942"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121112142075.png" alt="image-20221121112142075"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121112205134.png" alt="image-20221121112205134"></p>
<h2 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121112336951.png" alt="image-20221121112336951"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121112403408.png" alt="image-20221121112403408"></p>
<h1 id="RabbitMQ的安装和配置"><a href="#RabbitMQ的安装和配置" class="headerlink" title="RabbitMQ的安装和配置"></a>RabbitMQ的安装和配置</h1><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121112533222.png" alt="image-20221121112533222"></p>
<p><strong>以下操作均基于centos7.9</strong></p>
<h2 id="1-安装依赖环境"><a href="#1-安装依赖环境" class="headerlink" title="1. 安装依赖环境"></a>1. 安装依赖环境</h2><p>在线安装依赖环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install build-essential openssl openssl-devel unixODBC unixODBC-devel make gcc gcc-c++ kernel-devel m4 ncurses-devel tk tc xz</span><br></pre></td></tr></table></figure>

<h2 id="2-安装Erlang"><a href="#2-安装Erlang" class="headerlink" title="2. 安装Erlang"></a>2. 安装Erlang</h2><p>上传文件</p>
<p>erlang-18.3-1.el7.centos.x86_64.rpm<br>socat-1.7.3.2-5.el7.lux.x86_64.rpm<br>rabbitmq-server-3.6.5-1.noarch.rpm</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121205254932.png" alt="image-20221121205254932"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121205507059.png" alt="image-20221121205507059"></p>
<h2 id="3-安装RabbitMQ"><a href="#3-安装RabbitMQ" class="headerlink" title="3. 安装RabbitMQ"></a>3. 安装RabbitMQ</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>安装socat报如下错误</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121205656732.png" alt="image-20221121205656732"></p>
<p>执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh socat-1.7.3.2-1.1.el7.x86_64.rpm --force --nodeps</span><br></pre></td></tr></table></figure>

<p>继续安装rabbitmq</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121210025465.png" alt="image-20221121210025465"></p>
<h2 id="4-开启管理界面及配置"><a href="#4-开启管理界面及配置" class="headerlink" title="4. 开启管理界面及配置"></a>4. 开启管理界面及配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启管理界面</span></span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"><span class="comment"># 修改默认配置信息</span></span><br><span class="line">vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app </span><br><span class="line"><span class="comment"># 比如修改密码、配置等等，例如：loopback_users 中的 &lt;&lt;&quot;guest&quot;&gt;&gt;,只保留guest</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121212652079.png" alt="image-20221121212652079"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121212939036.png" alt="image-20221121212939036"></p>
<h2 id="5-启动"><a href="#5-启动" class="headerlink" title="5. 启动"></a>5. 启动</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service rabbitmq-server start <span class="comment"># 启动服务</span></span><br><span class="line">service rabbitmq-server stop <span class="comment"># 停止服务</span></span><br><span class="line">service rabbitmq-server restart <span class="comment"># 重启服务</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121213759365.png" alt="image-20221121213759365"></p>
<ul>
<li>设置配置文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/share/doc/rabbitmq-server-3.6.5/</span><br><span class="line">cp rabbitmq.config.example /etc/rabbitmq/rabbitmq.config</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121214928717.png" alt="image-20221121214928717"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121215131342.png" alt="image-20221121215131342"></p>
<p>重启使配置文件生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service rabbitmq-server restart # 重启服务</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121220435374.png" alt="image-20221121220435374"></p>
<h2 id="6-配置虚拟主机及用户"><a href="#6-配置虚拟主机及用户" class="headerlink" title="6. 配置虚拟主机及用户"></a>6. 配置虚拟主机及用户</h2><h3 id="6-1-用户角色"><a href="#6-1-用户角色" class="headerlink" title="6.1. 用户角色"></a>6.1. 用户角色</h3><p>RabbitMQ在安装好后，可以访问<code>http://ip地址:15672</code> ；其自带了guest/guest的用户名和密码；如果需要创建自定义用户；那么也可以登录管理界面后，如下操作：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121213949492.png" alt="image-20221121213949492"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121214027340.png" alt="image-20221121214027340"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/1565098315375.png" alt="1565098315375"></p>
<p><strong>角色说明</strong>：</p>
<p>1、 超级管理员(administrator)</p>
<p>可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p>
<p>2、 监控者(monitoring)</p>
<p>可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p>
<p>3、 策略制定者(policymaker)</p>
<p>可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</p>
<p>4、 普通管理者(management)</p>
<p>仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。</p>
<p>5、 其他</p>
<p>无法登陆管理控制台，通常就是普通的生产者和消费者。</p>
<h3 id="6-2-Virtual-Hosts配置"><a href="#6-2-Virtual-Hosts配置" class="headerlink" title="6.2. Virtual Hosts配置"></a>6.2. Virtual Hosts配置</h3><p>像mysql拥有数据库的概念并且可以指定用户对库和表等操作的权限。RabbitMQ也有类似的权限管理；在RabbitMQ中可以虚拟消息服务器Virtual Host，每个Virtual Hosts相当于一个相对独立的RabbitMQ服务器，每个VirtualHost之间是相互隔离的。exchange、queue、message不能互通。 相当于mysql的db。Virtual Name一般以/开头。</p>
<h4 id="6-2-1-创建Virtual-Hosts"><a href="#6-2-1-创建Virtual-Hosts" class="headerlink" title="6.2.1. 创建Virtual Hosts"></a>6.2.1. 创建Virtual Hosts</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/1565098496482.png" alt="1565098496482"></p>
<h4 id="6-2-2-设置Virtual-Hosts权限"><a href="#6-2-2-设置Virtual-Hosts权限" class="headerlink" title="6.2.2. 设置Virtual Hosts权限"></a>6.2.2. 设置Virtual Hosts权限</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/1565098585317.png" alt="1565098585317"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/1565098719054.png" alt="1565098719054"></p>
<h1 id="RabbitMQ快速入门"><a href="#RabbitMQ快速入门" class="headerlink" title="RabbitMQ快速入门"></a>RabbitMQ快速入门</h1><h2 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221121220821760.png" alt="image-20221121220821760"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221122140515633.png" alt="image-20221122140515633"></p>
<p>装备两个maven模块，并导入依赖</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221122140631360.png" alt="image-20221122140631360"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221122141021201.png" alt="image-20221122141021201"></p>
<h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221204193633316.png" alt="image-20221204193633316"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer_HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;123.60.45.18&quot;</span>);<span class="comment">//ip 默认值localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima&quot;</span>);<span class="comment">//虚拟机名 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;heima&quot;</span>);<span class="comment">//用户名 默认值guest</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;heima&quot;</span>);<span class="comment">//密码 默认值guest</span></span><br><span class="line">        <span class="comment">//3.创建连接connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//5.创建队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1.queue:队列名称</span></span><br><span class="line"><span class="comment">            2.durable：是否持久化，当mq重启之后，还在</span></span><br><span class="line"><span class="comment">            3.exclusive：</span></span><br><span class="line"><span class="comment">                *是否独占</span></span><br><span class="line"><span class="comment">                *当connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">            4.autoDelete：是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">            5.argument：参数。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果没有一个名字叫hello——world的队列，则会创建该队列，如果有则不会创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello_world&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicPublish(String exchange, String routingKey, AMQP.BasicProperties props, byte[] body)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">        1.exchange：交换机名称。简单模式下交换机使用默认的&quot;&quot;</span></span><br><span class="line"><span class="comment">        2.routingKey：路由名称</span></span><br><span class="line"><span class="comment">        3.props：配置信息</span></span><br><span class="line"><span class="comment">        4.body：发送消息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String body=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        <span class="comment">//6.发送消息</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello_world&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line">        <span class="comment">//7.释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>观察执行前队列情况</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221204193724061.png" alt="image-20221204193724061"></p>
<p>执行后</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221204194438282.png" alt="image-20221204194438282"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221204194510687.png" alt="image-20221204194510687"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221204194554245.png" alt="image-20221204194554245"></p>
<p>取消关闭通道</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        channel.close();</span></span><br><span class="line"><span class="comment">//        connection.close();</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221204194848060.png" alt="image-20221204194848060"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221204194909691.png" alt="image-20221204194909691"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221204194935117.png" alt="image-20221204194935117"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221204195047424.png" alt="image-20221204195047424"></p>
<h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221204202427217.png" alt="image-20221204202427217"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer_HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;123.60.45.18&quot;</span>);<span class="comment">//ip 默认值localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima&quot;</span>);<span class="comment">//虚拟机名 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;heima&quot;</span>);<span class="comment">//用户名 默认值guest</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;heima&quot;</span>);<span class="comment">//密码 默认值guest</span></span><br><span class="line">        <span class="comment">//3.创建连接connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//5.创建队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1.queue:队列名称</span></span><br><span class="line"><span class="comment">            2.durable：是否持久化，当mq重启之后，还在</span></span><br><span class="line"><span class="comment">            3.exclusive：</span></span><br><span class="line"><span class="comment">                *是否独占</span></span><br><span class="line"><span class="comment">                *当connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">            4.autoDelete：是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">            5.argument：参数。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果没有一个名字叫hello——world的队列，则会创建该队列，如果有则不会创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello_world&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicConsume(String queue, DeliverCallback deliverCallback, CancelCallback cancelCallback)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1.queue:队列名称</span></span><br><span class="line"><span class="comment">            2.autoAck:是否自动确认</span></span><br><span class="line"><span class="comment">            3.callback:回调对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">defaultConsumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            回调方法，当收到消息后，自动执行该方法</span></span><br><span class="line"><span class="comment">            1.consumerTag：标识</span></span><br><span class="line"><span class="comment">            2.envelope:获取一些信息，交换机，路由key</span></span><br><span class="line"><span class="comment">            3.properties：配置信息</span></span><br><span class="line"><span class="comment">            4.body：数据</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;consumerTag:&quot;</span>+consumerTag);</span><br><span class="line">                System.out.println(<span class="string">&quot;Exchange:&quot;</span>+envelope.getExchange());</span><br><span class="line">                System.out.println(<span class="string">&quot;RoutingKey:&quot;</span>+envelope.getRoutingKey());</span><br><span class="line">                System.out.println(<span class="string">&quot;properties:&quot;</span>+properties);</span><br><span class="line">                System.out.println(<span class="string">&quot;body:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;hello_world&quot;</span>,<span class="literal">true</span>,defaultConsumer);</span><br><span class="line"><span class="comment">//      不需要关闭资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221204202526853.png" alt="image-20221204202526853"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221204202640354.png" alt="image-20221204202640354"></p>
<p>小结</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221204202755561.png" alt="image-20221204202755561"></p>
<h1 id="RabbitMQ的工作模式"><a href="#RabbitMQ的工作模式" class="headerlink" title="RabbitMQ的工作模式"></a>RabbitMQ的工作模式</h1><h2 id="Work-queues工作队列模式"><a href="#Work-queues工作队列模式" class="headerlink" title="Work queues工作队列模式"></a>Work queues工作队列模式</h2><h3 id="模式说明"><a href="#模式说明" class="headerlink" title="模式说明"></a>模式说明</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221205141937759.png" alt="image-20221205141937759"></p>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221205145440203.png" alt="image-20221205145440203"></p>
<p><strong>生产者</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221205144418837.png" alt="image-20221205144418837"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer_WorkQueues</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;123.60.45.18&quot;</span>);<span class="comment">//ip 默认值localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima&quot;</span>);<span class="comment">//虚拟机名 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;heima&quot;</span>);<span class="comment">//用户名 默认值guest</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;heima&quot;</span>);<span class="comment">//密码 默认值guest</span></span><br><span class="line">        <span class="comment">//3.创建连接connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//5.创建队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1.queue:队列名称</span></span><br><span class="line"><span class="comment">            2.durable：是否持久化，当mq重启之后，还在</span></span><br><span class="line"><span class="comment">            3.exclusive：</span></span><br><span class="line"><span class="comment">                *是否独占</span></span><br><span class="line"><span class="comment">                *当connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">            4.autoDelete：是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">            5.argument：参数。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果没有一个名字叫hello_world的队列，则会创建该队列，如果有则不会创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;work_queues&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicPublish(String exchange, String routingKey, AMQP.BasicProperties props, byte[] body)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">        1.exchange：交换机名称。简单模式下交换机使用默认的&quot;&quot;</span></span><br><span class="line"><span class="comment">        2.routingKey：路由名称</span></span><br><span class="line"><span class="comment">        3.props：配置信息</span></span><br><span class="line"><span class="comment">        4.body：发送消息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            String body=i+<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">            <span class="comment">//6.发送消息</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;work_queues&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7.释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>消费者</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221205144622631.png" alt="image-20221205144622631"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer_WorkQueues1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;123.60.45.18&quot;</span>);<span class="comment">//ip 默认值localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima&quot;</span>);<span class="comment">//虚拟机名 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;heima&quot;</span>);<span class="comment">//用户名 默认值guest</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;heima&quot;</span>);<span class="comment">//密码 默认值guest</span></span><br><span class="line">        <span class="comment">//3.创建连接connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//5.创建队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1.queue:队列名称</span></span><br><span class="line"><span class="comment">            2.durable：是否持久化，当mq重启之后，还在</span></span><br><span class="line"><span class="comment">            3.exclusive：</span></span><br><span class="line"><span class="comment">                *是否独占</span></span><br><span class="line"><span class="comment">                *当connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">            4.autoDelete：是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">            5.argument：参数。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果没有一个名字叫hello——world的队列，则会创建该队列，如果有则不会创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;work_queues&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicConsume(String queue, DeliverCallback deliverCallback, CancelCallback cancelCallback)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1.queue:队列名称</span></span><br><span class="line"><span class="comment">            2.autoAck:是否自动确认</span></span><br><span class="line"><span class="comment">            3.callback:回调对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">defaultConsumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            回调方法，当收到消息后，自动执行该方法</span></span><br><span class="line"><span class="comment">            1.consumerTag：标识</span></span><br><span class="line"><span class="comment">            2.envelope:获取一些信息，交换机，路由key</span></span><br><span class="line"><span class="comment">            3.properties：配置信息</span></span><br><span class="line"><span class="comment">            4.body：数据</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;consumerTag:&quot;+consumerTag);</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;Exchange:&quot;+envelope.getExchange());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;RoutingKey:&quot;+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;properties:&quot;+properties);</span></span><br><span class="line">                System.out.println(<span class="string">&quot;body:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work_queues&quot;</span>,<span class="literal">true</span>,defaultConsumer);</span><br><span class="line"><span class="comment">//      不需要关闭资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>开启两个消费者</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221205145007003.png" alt="image-20221205145007003"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221205145039210.png" alt="image-20221205145039210"></p>
<p>生产者生产消息</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221205145218170.png" alt="image-20221205145218170"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221205145228797.png" alt="image-20221205145228797"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221205145240239.png" alt="image-20221205145240239"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221205145502724.png" alt="image-20221205145502724"></p>
<h2 id="Pub-Sub-订阅模式"><a href="#Pub-Sub-订阅模式" class="headerlink" title="Pub/Sub 订阅模式"></a><strong>Pub/Sub</strong> <strong>订阅模式</strong></h2><h3 id="模式说明-1"><a href="#模式说明-1" class="headerlink" title="模式说明"></a>模式说明</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221205145626622.png" alt="image-20221205145626622"></p>
<h3 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>生产者</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221205152434977.png" alt="image-20221205152434977"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer_PubSub</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;123.60.45.18&quot;</span>);<span class="comment">//ip 默认值localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima&quot;</span>);<span class="comment">//虚拟机名 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;heima&quot;</span>);<span class="comment">//用户名 默认值guest</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;heima&quot;</span>);<span class="comment">//密码 默认值guest</span></span><br><span class="line">        <span class="comment">//3.创建连接connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        exchangeDeclare(String exchange, BuiltinExchangeType type, boolean durable, boolean autoDelete, boolean internal, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         1.exchange:交换机名称</span></span><br><span class="line"><span class="comment">         2.type:交换机类型</span></span><br><span class="line"><span class="comment">            DIRECT(&quot;direct&quot;),定向</span></span><br><span class="line"><span class="comment">            FANOUT(&quot;fanout&quot;),扇形（广播），发送到每一个队列</span></span><br><span class="line"><span class="comment">            TOPIC(&quot;topic&quot;),通配符的方式</span></span><br><span class="line"><span class="comment">    H       EADERS(&quot;headers&quot;);参数匹配</span></span><br><span class="line"><span class="comment">         3.durable：是否持久化</span></span><br><span class="line"><span class="comment">         4.autoDelete：自动删除</span></span><br><span class="line"><span class="comment">         5.internal：内部使用。一般为false</span></span><br><span class="line"><span class="comment">         6.arguments：参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String exchangeName=<span class="string">&quot;test_fanout&quot;</span>;</span><br><span class="line">        <span class="comment">//5.创建交换机</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.FANOUT,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//6.创建队列</span></span><br><span class="line">        String queue1Name=<span class="string">&quot;test_fanout_queue1&quot;</span>;</span><br><span class="line">        String queue2Name=<span class="string">&quot;test_fanout_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//7.绑定队列和交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueBind(String queue, String exchange, String routingKey)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1.queue:队列名称</span></span><br><span class="line"><span class="comment">            2.exchange:交换机名称</span></span><br><span class="line"><span class="comment">            3.routingKey:路由键，绑定规则</span></span><br><span class="line"><span class="comment">                如果交换机的类型为fanout，routingKey设置为&quot;&quot;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//8.发送消息</span></span><br><span class="line">        String body=<span class="string">&quot;日志信息：张三调用了findAll方法...日志级别:info...&quot;</span>;</span><br><span class="line">        channel.basicPublish(exchangeName,<span class="string">&quot;&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line">        <span class="comment">//9.释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221205152548465.png" alt="image-20221205152548465"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221205152618521.png" alt="image-20221205152618521"></p>
<p><strong>消费者1</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer_PubSub1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;123.60.45.18&quot;</span>);<span class="comment">//ip 默认值localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima&quot;</span>);<span class="comment">//虚拟机名 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;heima&quot;</span>);<span class="comment">//用户名 默认值guest</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;heima&quot;</span>);<span class="comment">//密码 默认值guest</span></span><br><span class="line">        <span class="comment">//3.创建连接connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String queue1Name=<span class="string">&quot;test_fanout_queue1&quot;</span>;</span><br><span class="line">        String queue2Name=<span class="string">&quot;test_fanout_queue2&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">defaultConsumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            回调方法，当收到消息后，自动执行该方法</span></span><br><span class="line"><span class="comment">            1.consumerTag：标识</span></span><br><span class="line"><span class="comment">            2.envelope:获取一些信息，交换机，路由key</span></span><br><span class="line"><span class="comment">            3.properties：配置信息</span></span><br><span class="line"><span class="comment">            4.body：数据</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;consumerTag:&quot;+consumerTag);</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;Exchange:&quot;+envelope.getExchange());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;RoutingKey:&quot;+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;properties:&quot;+properties);</span></span><br><span class="line">                System.out.println(<span class="string">&quot;body:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">                System.out.println(<span class="string">&quot;将日志信息打印控制台&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue1Name,<span class="literal">true</span>,defaultConsumer);</span><br><span class="line"><span class="comment">//      不需要关闭资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221206114307998.png" alt="image-20221206114307998"></p>
<p><strong>消费者2</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer_PubSub2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;123.60.45.18&quot;</span>);<span class="comment">//ip 默认值localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima&quot;</span>);<span class="comment">//虚拟机名 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;heima&quot;</span>);<span class="comment">//用户名 默认值guest</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;heima&quot;</span>);<span class="comment">//密码 默认值guest</span></span><br><span class="line">        <span class="comment">//3.创建连接connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String queue1Name=<span class="string">&quot;test_fanout_queue1&quot;</span>;</span><br><span class="line">        String queue2Name=<span class="string">&quot;test_fanout_queue2&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">defaultConsumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            回调方法，当收到消息后，自动执行该方法</span></span><br><span class="line"><span class="comment">            1.consumerTag：标识</span></span><br><span class="line"><span class="comment">            2.envelope:获取一些信息，交换机，路由key</span></span><br><span class="line"><span class="comment">            3.properties：配置信息</span></span><br><span class="line"><span class="comment">            4.body：数据</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;consumerTag:&quot;+consumerTag);</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;Exchange:&quot;+envelope.getExchange());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;RoutingKey:&quot;+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;properties:&quot;+properties);</span></span><br><span class="line">                System.out.println(<span class="string">&quot;body:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">                System.out.println(<span class="string">&quot;将日志信息存至数据库&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue2Name,<span class="literal">true</span>,defaultConsumer);</span><br><span class="line"><span class="comment">//      不需要关闭资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221206114831633.png" alt="image-20221206114831633"></p>
<h2 id="Routing路由模式"><a href="#Routing路由模式" class="headerlink" title="Routing路由模式"></a>Routing路由模式</h2><h3 id="模式说明-2"><a href="#模式说明-2" class="headerlink" title="模式说明"></a>模式说明</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221206114958949.png" alt="image-20221206114958949"></p>
<h3 id="代码编写-2"><a href="#代码编写-2" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>生产者</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221206203527592.png" alt="image-20221206203527592"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer_Routing</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;123.60.45.18&quot;</span>);<span class="comment">//ip 默认值localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima&quot;</span>);<span class="comment">//虚拟机名 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;heima&quot;</span>);<span class="comment">//用户名 默认值guest</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;heima&quot;</span>);<span class="comment">//密码 默认值guest</span></span><br><span class="line">        <span class="comment">//3.创建连接connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        exchangeDeclare(String exchange, BuiltinExchangeType type, boolean durable, boolean autoDelete, boolean internal, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         1.exchange:交换机名称</span></span><br><span class="line"><span class="comment">         2.type:交换机类型</span></span><br><span class="line"><span class="comment">            DIRECT(&quot;direct&quot;),定向</span></span><br><span class="line"><span class="comment">            FANOUT(&quot;fanout&quot;),扇形（广播），发送到每一个队列</span></span><br><span class="line"><span class="comment">            TOPIC(&quot;topic&quot;),通配符的方式</span></span><br><span class="line"><span class="comment">    H       EADERS(&quot;headers&quot;);参数匹配</span></span><br><span class="line"><span class="comment">         3.durable：是否持久化</span></span><br><span class="line"><span class="comment">         4.autoDelete：自动删除</span></span><br><span class="line"><span class="comment">         5.internal：内部使用。一般为false</span></span><br><span class="line"><span class="comment">         6.arguments：参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String exchangeName=<span class="string">&quot;test_direct&quot;</span>;</span><br><span class="line">        <span class="comment">//5.创建交换机</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.DIRECT,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//6.创建队列</span></span><br><span class="line">        String queue1Name=<span class="string">&quot;test_direct_queue1&quot;</span>;</span><br><span class="line">        String queue2Name=<span class="string">&quot;test_direct_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//7.绑定队列和交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueBind(String queue, String exchange, String routingKey)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1.queue:队列名称</span></span><br><span class="line"><span class="comment">            2.exchange:交换机名称</span></span><br><span class="line"><span class="comment">            3.routingKey:路由键，绑定规则</span></span><br><span class="line"><span class="comment">                如果交换机的类型为fanout，routingKey设置为&quot;&quot;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列1绑定error</span></span><br><span class="line">        channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="comment">//队列2绑定 info，error，warning</span></span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;warning&quot;</span>);</span><br><span class="line">        <span class="comment">//8.发送消息</span></span><br><span class="line">        String body=<span class="string">&quot;日志信息：张三调用了findAll方法...日志级别:info...&quot;</span>;</span><br><span class="line">        channel.basicPublish(exchangeName,<span class="string">&quot;info&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line">        <span class="comment">//9.释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行后观察队列</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221206203658772.png" alt="image-20221206203658772"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221206203934543.png" alt="image-20221206203934543"></p>
<p>消费者1 控制台打印info级别信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer_Routing2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;123.60.45.18&quot;</span>);<span class="comment">//ip 默认值localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima&quot;</span>);<span class="comment">//虚拟机名 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;heima&quot;</span>);<span class="comment">//用户名 默认值guest</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;heima&quot;</span>);<span class="comment">//密码 默认值guest</span></span><br><span class="line">        <span class="comment">//3.创建连接connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String queue1Name=<span class="string">&quot;test_direct_queue1&quot;</span>;</span><br><span class="line">        String queue2Name=<span class="string">&quot;test_direct_queue2&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">defaultConsumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            回调方法，当收到消息后，自动执行该方法</span></span><br><span class="line"><span class="comment">            1.consumerTag：标识</span></span><br><span class="line"><span class="comment">            2.envelope:获取一些信息，交换机，路由key</span></span><br><span class="line"><span class="comment">            3.properties：配置信息</span></span><br><span class="line"><span class="comment">            4.body：数据</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;consumerTag:&quot;+consumerTag);</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;Exchange:&quot;+envelope.getExchange());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;RoutingKey:&quot;+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;properties:&quot;+properties);</span></span><br><span class="line">                System.out.println(<span class="string">&quot;body:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">                System.out.println(<span class="string">&quot;将日志信息打印控制台&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue2Name,<span class="literal">true</span>,defaultConsumer);</span><br><span class="line"><span class="comment">//      不需要关闭资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221206205248833.png" alt="image-20221206205248833"></p>
<p>消费者2 数据库保存error级别信息</p>
<p>队列无信息消费</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221206205346657.png" alt="image-20221206205346657"></p>
<p>生产者 生产一个error级别信息</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221206205540267.png" alt="image-20221206205540267"></p>
<p>观察消费者</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221206205601884.png" alt="image-20221206205601884"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221206205624051.png" alt="image-20221206205624051"></p>
<h2 id="Topics通配符模式"><a href="#Topics通配符模式" class="headerlink" title="Topics通配符模式"></a>Topics通配符模式</h2><h3 id="模式说明-3"><a href="#模式说明-3" class="headerlink" title="模式说明"></a>模式说明</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208164240030.png" alt="image-20221208164240030"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208165019397.png" alt="image-20221208165019397"></p>
<h3 id="代码编写-3"><a href="#代码编写-3" class="headerlink" title="代码编写"></a><strong>代码编写</strong></h3><p><strong>生产者</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208170353450.png" alt="image-20221208170353450"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer_Topics</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;123.60.45.18&quot;</span>);<span class="comment">//ip 默认值localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima&quot;</span>);<span class="comment">//虚拟机名 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;heima&quot;</span>);<span class="comment">//用户名 默认值guest</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;heima&quot;</span>);<span class="comment">//密码 默认值guest</span></span><br><span class="line">        <span class="comment">//3.创建连接connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        exchangeDeclare(String exchange, BuiltinExchangeType type, boolean durable, boolean autoDelete, boolean internal, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         1.exchange:交换机名称</span></span><br><span class="line"><span class="comment">         2.type:交换机类型</span></span><br><span class="line"><span class="comment">            DIRECT(&quot;direct&quot;),定向</span></span><br><span class="line"><span class="comment">            FANOUT(&quot;fanout&quot;),扇形（广播），发送到每一个队列</span></span><br><span class="line"><span class="comment">            TOPIC(&quot;topic&quot;),通配符的方式</span></span><br><span class="line"><span class="comment">    H       EADERS(&quot;headers&quot;);参数匹配</span></span><br><span class="line"><span class="comment">         3.durable：是否持久化</span></span><br><span class="line"><span class="comment">         4.autoDelete：自动删除</span></span><br><span class="line"><span class="comment">         5.internal：内部使用。一般为false</span></span><br><span class="line"><span class="comment">         6.arguments：参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String exchangeName=<span class="string">&quot;test_topic&quot;</span>;</span><br><span class="line">        <span class="comment">//5.创建交换机</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.TOPIC,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//6.创建队列</span></span><br><span class="line">        String queue1Name=<span class="string">&quot;test_topic_queue1&quot;</span>;</span><br><span class="line">        String queue2Name=<span class="string">&quot;test_topic_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//7.绑定队列和交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueBind(String queue, String exchange, String routingKey)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1.queue:队列名称</span></span><br><span class="line"><span class="comment">            2.exchange:交换机名称</span></span><br><span class="line"><span class="comment">            3.routingKey:路由键，绑定规则</span></span><br><span class="line"><span class="comment">                如果交换机的类型为fanout，routingKey设置为&quot;&quot;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//routing key 系统的名称.日志的级别</span></span><br><span class="line">        <span class="comment">//需求：所有error级别的日志存入数据库，所有order系统的日志存入数据库</span></span><br><span class="line">        channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;#.error&quot;</span>);</span><br><span class="line">        channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;order.*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;*.*&quot;</span>);</span><br><span class="line">        <span class="comment">//8.发送消息</span></span><br><span class="line">        String body=<span class="string">&quot;日志信息：张三调用了findAll方法...日志级别:info...&quot;</span>;</span><br><span class="line">        channel.basicPublish(exchangeName,<span class="string">&quot;order.info&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line">        <span class="comment">//9.释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208170515998.png" alt="image-20221208170515998"></p>
<p>queue1</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208170622337.png" alt="image-20221208170622337"></p>
<p>queue2</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208170645324.png" alt="image-20221208170645324"></p>
<p>消费者</p>
<p>消费者1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer_Topics1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;123.60.45.18&quot;</span>);<span class="comment">//ip 默认值localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima&quot;</span>);<span class="comment">//虚拟机名 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;heima&quot;</span>);<span class="comment">//用户名 默认值guest</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;heima&quot;</span>);<span class="comment">//密码 默认值guest</span></span><br><span class="line">        <span class="comment">//3.创建连接connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String queue1Name=<span class="string">&quot;test_topic_queue1&quot;</span>;</span><br><span class="line">        String queue2Name=<span class="string">&quot;test_topic_queue2&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">defaultConsumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            回调方法，当收到消息后，自动执行该方法</span></span><br><span class="line"><span class="comment">            1.consumerTag：标识</span></span><br><span class="line"><span class="comment">            2.envelope:获取一些信息，交换机，路由key</span></span><br><span class="line"><span class="comment">            3.properties：配置信息</span></span><br><span class="line"><span class="comment">            4.body：数据</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;consumerTag:&quot;+consumerTag);</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;Exchange:&quot;+envelope.getExchange());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;RoutingKey:&quot;+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;properties:&quot;+properties);</span></span><br><span class="line">                System.out.println(<span class="string">&quot;body:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">                System.out.println(<span class="string">&quot;将日志信息保存数据库&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue1Name,<span class="literal">true</span>,defaultConsumer);</span><br><span class="line"><span class="comment">//      不需要关闭资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>消费者2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer_Topics2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;123.60.45.18&quot;</span>);<span class="comment">//ip 默认值localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/itheima&quot;</span>);<span class="comment">//虚拟机名 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;heima&quot;</span>);<span class="comment">//用户名 默认值guest</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;heima&quot;</span>);<span class="comment">//密码 默认值guest</span></span><br><span class="line">        <span class="comment">//3.创建连接connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String queue1Name=<span class="string">&quot;test_topic_queue1&quot;</span>;</span><br><span class="line">        String queue2Name=<span class="string">&quot;test_topic_queue2&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">defaultConsumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            回调方法，当收到消息后，自动执行该方法</span></span><br><span class="line"><span class="comment">            1.consumerTag：标识</span></span><br><span class="line"><span class="comment">            2.envelope:获取一些信息，交换机，路由key</span></span><br><span class="line"><span class="comment">            3.properties：配置信息</span></span><br><span class="line"><span class="comment">            4.body：数据</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;consumerTag:&quot;+consumerTag);</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;Exchange:&quot;+envelope.getExchange());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;RoutingKey:&quot;+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;properties:&quot;+properties);</span></span><br><span class="line">                System.out.println(<span class="string">&quot;body:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">                System.out.println(<span class="string">&quot;将日志信息打印控制台&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue2Name,<span class="literal">true</span>,defaultConsumer);</span><br><span class="line"><span class="comment">//      不需要关闭资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分别执行</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208171038109.png" alt="image-20221208171038109"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208171048134.png" alt="image-20221208171048134"></p>
<p>生产者修改routingkey，并发送消息</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208171156831.png" alt="image-20221208171156831"></p>
<p>观察消费者1无法收到消息，消费者2成功收到消息</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208171302629.png" alt="image-20221208171302629"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208171311532.png" alt="image-20221208171311532"></p>
<p>生产者再次修改routingkey，并发送消息</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208171354682.png" alt="image-20221208171354682"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208171418993.png" alt="image-20221208171418993"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208171443366.png" alt="image-20221208171443366"></p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208171650285.png" alt="image-20221208171650285"></p>
<h2 id="工作模式总结"><a href="#工作模式总结" class="headerlink" title="工作模式总结"></a>工作模式总结</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221208171719456.png" alt="image-20221208171719456"></p>
<h1 id="Spring整合RabbitMQ"><a href="#Spring整合RabbitMQ" class="headerlink" title="Spring整合RabbitMQ"></a>Spring整合RabbitMQ</h1><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221209134437892.png" alt="image-20221209134437892"></p>
<h2 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221213145954907.png" alt="image-20221213145954907"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写配置文件</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221213153936650.png" alt="image-20221213153936650"></p>
<p>rabbitmq.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">rabbitmq.host</span>=<span class="string">123.60.45.18</span></span><br><span class="line"><span class="attr">rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="attr">rabbitmq.username</span>=<span class="string">heima</span></span><br><span class="line"><span class="attr">rabbitmq.password</span>=<span class="string">heima</span></span><br><span class="line"><span class="attr">rabbitmq.virtual-host</span>=<span class="string">/itheima</span></span><br></pre></td></tr></table></figure>

<p>spring-rabbitmq-producer.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">&quot;http://www.springframework.org/schema/rabbit&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:/rabbitmq.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义rabbitmq connectionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">host</span>=<span class="string">&quot;$&#123;rabbitmq.host&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">port</span>=<span class="string">&quot;$&#123;rabbitmq.port&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">username</span>=<span class="string">&quot;$&#123;rabbitmq.username&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">&quot;$&#123;rabbitmq.password&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">virtual-host</span>=<span class="string">&quot;$&#123;rabbitmq.virtual-host&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义管理交换机、队列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义持久化队列，不存在则自动创建；不绑定到交换机则绑定到默认交换机</span></span><br><span class="line"><span class="comment">    默认交换机类型为direct，名字为：&quot;&quot;，路由键为队列的名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    id:bean的名称</span></span><br><span class="line"><span class="comment">    name:queue的名称</span></span><br><span class="line"><span class="comment">    auto-declare:自动创建</span></span><br><span class="line"><span class="comment">    auto-delete：自动删除，最后一个消费者和该队列断开后，自动删除队列</span></span><br><span class="line"><span class="comment">    exclusive:是否独占</span></span><br><span class="line"><span class="comment">    durable:是否持久化</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;spring_queue&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_queue&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~广播；所有队列都能收到消息~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;spring_fanout_queue_1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_fanout_queue_1&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;spring_fanout_queue_2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_fanout_queue_2&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义广播类型交换机；并绑定上述两个队列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:fanout-exchange</span> <span class="attr">id</span>=<span class="string">&quot;spring_fanout_exchange&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_fanout_exchange&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">&quot;spring_fanout_queue_1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">&quot;spring_fanout_queue_2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:fanout-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~通配符；*匹配一个单词，#匹配多个单词 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;spring_topic_queue_star&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_topic_queue_star&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;spring_topic_queue_well&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_topic_queue_well&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;spring_topic_queue_well2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_topic_queue_well2&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:topic-exchange</span> <span class="attr">id</span>=<span class="string">&quot;spring_topic_exchange&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_topic_exchange&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">&quot;heima.*&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;spring_topic_queue_star&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">&quot;heima.#&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;spring_topic_queue_well&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">&quot;itcast.#&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;spring_topic_queue_well2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:topic-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义rabbitTemplate对象操作可以在代码中方便发送消息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">&quot;rabbitTemplate&quot;</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试方法</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221213154113505.png" alt="image-20221213154113505"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.RabbitAccessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:spring-rabbitmq-producer.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testHelloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//2.发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;spring_queue&quot;</span>,<span class="string">&quot;hello world spring&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    发送fanout消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">testFanout</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;spring_fanout_exchange&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;spring fanout...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    发送topic消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopic</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//发型消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;spring_topic_exchange&quot;</span>,<span class="string">&quot;heima.hehe.haha&quot;</span>,<span class="string">&quot;spring topic ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>观察消息情况</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221213154821609.png" alt="image-20221213154821609"></p>
<h2 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h2><p><strong>编写配置文件</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221213170440035.png" alt="image-20221213170440035"></p>
<p><strong>rabbitmq.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">rabbitmq.host</span>=<span class="string">123.60.45.18</span></span><br><span class="line"><span class="attr">rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="attr">rabbitmq.username</span>=<span class="string">heima</span></span><br><span class="line"><span class="attr">rabbitmq.password</span>=<span class="string">heima</span></span><br><span class="line"><span class="attr">rabbitmq.virtual-host</span>=<span class="string">/itheima</span></span><br></pre></td></tr></table></figure>

<p><strong>spring-rabbitmq-consumer.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:rabbit</span>=<span class="string">&quot;http://www.springframework.org/schema/rabbit&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:/rabbitmq.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  定义rabbitmq connectionFactory  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">&quot;connectionFactory&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">host</span>=<span class="string">&quot;$&#123;rabbitmq.host&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">port</span>=<span class="string">&quot;$&#123;rabbitmq.port&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">username</span>=<span class="string">&quot;$&#123;rabbitmq.username&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">&quot;$&#123;rabbitmq.password&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">virtual-host</span>=<span class="string">&quot;$&#123;rabbitmq.virtual-host&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;springQueueListener&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.rabbitmq.listener.SpringQueueListener&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;fanoutListener1&quot; class=&quot;com.itheima.rabbitmq.listener.FanoutListener1&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;fanoutListener2&quot; class=&quot;com.itheima.rabbitmq.listener.FanoutListener2&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;topicListenerStar&quot; class=&quot;com.itheima.rabbitmq.listener.TopicListenerStar&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;topicListenerWell&quot; class=&quot;com.itheima.rabbitmq.listener.TopicListenerWell&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;topicListenerWell2&quot; class=&quot;com.itheima.rabbitmq.listener.TopicListenerWell2&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">&quot;springQueueListener&quot;</span> <span class="attr">queue-names</span>=<span class="string">&quot;spring_queue&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;rabbit:listener ref=&quot;fanoutListener1&quot; queue-names=&quot;spring_fanout_queue_1&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;rabbit:listener ref=&quot;fanoutListener2&quot; queue-names=&quot;spring_fanout_queue_2&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;rabbit:listener ref=&quot;topicListenerStar&quot; queue-names=&quot;spring_topic_queue_star&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;rabbit:listener ref=&quot;topicListenerWell&quot; queue-names=&quot;spring_topic_queue_well&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;rabbit:listener ref=&quot;topicListenerWell2&quot; queue-names=&quot;spring_topic_queue_well2&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>编写监听器</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221213170610232.png" alt="image-20221213170610232"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringQueueListener</span> <span class="keyword">implements</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编写测试方法启动服务监听</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221213170715933.png" alt="image-20221213170715933"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221213170742021.png" alt="image-20221213170742021"></p>
<h1 id="SpringBoot整合RabbitMQ"><a href="#SpringBoot整合RabbitMQ" class="headerlink" title="SpringBoot整合RabbitMQ"></a>SpringBoot整合RabbitMQ</h1><h2 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221213171855416.png" alt="image-20221213171855416"></p>
<p> 创建springboot工程并引入依赖</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221213225437359.png" alt="image-20221213225437359"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.7-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>producer-springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>producer-springboot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>producer-springboot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>配置文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">123.60</span><span class="number">.45</span><span class="number">.18</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br></pre></td></tr></table></figure>

<p><strong>编写配置类</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221213232056981.png" alt="image-20221213232056981"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.producerspringboot.rabbitmq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Exchanger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME=<span class="string">&quot;boot_topic_exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">&quot;boot_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;bootExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">bootExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.Queue队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;bootQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">bootQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.队列和交换就绑定关系 Binding</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.知道哪个队列</span></span><br><span class="line"><span class="comment">    2.知道哪个交换机</span></span><br><span class="line"><span class="comment">    3.routing key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueueExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;bootQueue&quot;)</span>Queue queue,<span class="meta">@Qualifier(&quot;bootExchange&quot;)</span>Exchange exchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;boot.#&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>编写测试方法</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221213232916257.png" alt="image-20221213232916257"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.producerspringboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.producerspringboot.rabbitmq.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProducerSpringbootApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSend</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.EXCHANGE_NAME,<span class="string">&quot;boot.haha&quot;</span>,<span class="string">&quot;boot mq hello~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221213233304290.png" alt="image-20221213233304290"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221213233339003.png" alt="image-20221213233339003"></p>
<h2 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214000326670.png" alt="image-20221214000326670"></p>
<p><strong>编写监听类</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214000148768.png" alt="image-20221214000148768"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumerspringboot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;boot_queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ListenerQueue</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动消费者springboot</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214000248870.png" alt="image-20221214000248870"></p>
<h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214000349806.png" alt="image-20221214000349806"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214223708162.png" alt="image-20221214223708162"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214223727050.png" alt="image-20221214223727050"></p>
<h1 id="RabbitMQ高级特性"><a href="#RabbitMQ高级特性" class="headerlink" title="RabbitMQ高级特性"></a>RabbitMQ高级特性</h1><h2 id="消息的可靠投递"><a href="#消息的可靠投递" class="headerlink" title="消息的可靠投递"></a>消息的可靠投递</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214224010876.png" alt="image-20221214224010876"></p>
<h3 id="confirm模式"><a href="#confirm模式" class="headerlink" title="confirm模式"></a>confirm模式</h3><h4 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a><strong>生产者</strong></h4><p>创建一个基于spring的工程</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214230022054.png" alt="image-20221214230022054"></p>
<p><strong>编写配置文件</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214230118161.png" alt="image-20221214230118161"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">&quot;http://www.springframework.org/schema/rabbit&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:rabbitmq.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义rabbitmq connectionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">host</span>=<span class="string">&quot;$&#123;rabbitmq.host&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">port</span>=<span class="string">&quot;$&#123;rabbitmq.port&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">username</span>=<span class="string">&quot;$&#123;rabbitmq.username&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">&quot;$&#123;rabbitmq.password&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">virtual-host</span>=<span class="string">&quot;$&#123;rabbitmq.virtual-host&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">publisher-confirms</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义管理交换机、队列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义rabbitTemplate对象操作可以在代码中方便发送消息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">&quot;rabbitTemplate&quot;</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--消息可靠性投递（生产端）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;test_queue_confirm&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test_queue_confirm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">name</span>=<span class="string">&quot;test_exchange_confirm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">&quot;test_queue_confirm&quot;</span> <span class="attr">key</span>=<span class="string">&quot;confirm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:binding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:direct-exchange</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>编写测试类及测试方法</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214230241121.png" alt="image-20221214230241121"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.AmqpException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessagePostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:spring-rabbitmq-producer.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确认模式：</span></span><br><span class="line"><span class="comment">     * 步骤：</span></span><br><span class="line"><span class="comment">     * 1. 确认模式开启：ConnectionFactory中开启publisher-confirms=&quot;true&quot;</span></span><br><span class="line"><span class="comment">     * 2. 在rabbitTemplate定义ConfirmCallBack回调函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConfirm</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 定义回调</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> correlationData 相关配置信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> ack   exchange交换机 是否成功收到了消息。true 成功，false代表失败</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cause 失败原因</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;confirm方法被执行了....&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">                    <span class="comment">//接收成功</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;接收成功消息&quot;</span> + cause);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//接收失败</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;接收失败消息&quot;</span> + cause);</span><br><span class="line">                    <span class="comment">//做一些处理，让消息再次发送。</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_confirm&quot;</span>, <span class="string">&quot;confirm&quot;</span>, <span class="string">&quot;message confirm....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行测试方法</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214230627267.png" alt="image-20221214230627267"></p>
<p>模拟交换机名称错误，并发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3. 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_confirm111&quot;</span>, <span class="string">&quot;confirm&quot;</span>, <span class="string">&quot;message confirm....&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214230956049.png" alt="image-20221214230956049"></p>
<h3 id="return模式"><a href="#return模式" class="headerlink" title="return模式"></a>return模式</h3><p>开启return模式</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214231411695.png" alt="image-20221214231411695"></p>
<p>编写return模式测试方法并开启处理失败消息的模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回退模式： 当消息发送给Exchange后，Exchange路由到Queue失败时 才会执行 ReturnCallBack</span></span><br><span class="line"><span class="comment"> * 步骤：</span></span><br><span class="line"><span class="comment"> * 1. 开启回退模式:publisher-returns=&quot;true&quot;</span></span><br><span class="line"><span class="comment"> * 2. 设置ReturnCallBack</span></span><br><span class="line"><span class="comment"> * 3. 设置Exchange处理消息的模式：</span></span><br><span class="line"><span class="comment"> * 1. 如果消息没有路由到Queue，则丢弃消息（默认）</span></span><br><span class="line"><span class="comment"> * 2. 如果消息没有路由到Queue，返回给消息发送方ReturnCallBack</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReturn</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置交换机处理失败消息的模式</span></span><br><span class="line">    rabbitTemplate.setMandatory(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.设置ReturnCallBack</span></span><br><span class="line">    rabbitTemplate.setReturnCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnCallback() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> message   消息对象</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> replyCode 错误码</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> replyText 错误信息</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> exchange  交换机</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> routingKey 路由键</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(Message message, <span class="type">int</span> replyCode, String replyText, String exchange, String routingKey)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;return 执行了....&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(message);</span><br><span class="line">            System.out.println(replyCode);</span><br><span class="line">            System.out.println(replyText);</span><br><span class="line">            System.out.println(exchange);</span><br><span class="line">            System.out.println(routingKey);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_confirm&quot;</span>, <span class="string">&quot;confirm111&quot;</span>, <span class="string">&quot;message confirm....&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>routingkey错误并执行测试方法</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214232406002.png" alt="image-20221214232406002"></p>
<h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214232554219.png" alt="image-20221214232554219"></p>
<h2 id="Consumer-Ack"><a href="#Consumer-Ack" class="headerlink" title="Consumer Ack"></a><strong>Consumer Ack</strong></h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214234847034.png" alt="image-20221214234847034"></p>
<p>创建一个spring工程</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214235256581.png" alt="image-20221214235256581"></p>
<p>定义监听器</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221214235414010.png" alt="image-20221214235414010"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.api.ChannelAwareMessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Consumer ACK机制：</span></span><br><span class="line"><span class="comment"> *  1. 设置手动签收。acknowledge=&quot;manual&quot;</span></span><br><span class="line"><span class="comment"> *  2. 让监听器类实现ChannelAwareMessageListener接口</span></span><br><span class="line"><span class="comment"> *  3. 如果消息成功处理，则调用channel的 basicAck()签收</span></span><br><span class="line"><span class="comment"> *  4. 如果消息处理失败，则调用channel的basicNack()拒绝签收，broker重新发送给consumer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AckListener</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     		</span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> message.getMessageProperties().getDeliveryTag();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.接收转换消息</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 处理业务逻辑</span></span><br><span class="line">            System.out.println(<span class="string">&quot;处理业务逻辑...&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>/<span class="number">0</span>;<span class="comment">//出现错误</span></span><br><span class="line">            <span class="comment">//3. 手动签收</span></span><br><span class="line">            channel.basicAck(deliveryTag,<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//e.printStackTrace();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.拒绝签收</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            第三个参数：requeue：重回队列。如果设置为true，则消息重新回到queue，broker会重新发送该消息给消费端</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicNack(deliveryTag,<span class="literal">true</span>,<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//channel.basicReject(deliveryTag,true);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修改spring配置文件，并开启手动签收</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">&quot;http://www.springframework.org/schema/rabbit&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:rabbitmq.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义rabbitmq connectionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">host</span>=<span class="string">&quot;$&#123;rabbitmq.host&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">port</span>=<span class="string">&quot;$&#123;rabbitmq.port&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">username</span>=<span class="string">&quot;$&#123;rabbitmq.username&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">&quot;$&#123;rabbitmq.password&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">virtual-host</span>=<span class="string">&quot;$&#123;rabbitmq.virtual-host&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.listener&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义监听器容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">acknowledge</span>=<span class="string">&quot;manual&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">&quot;ackListener&quot;</span> <span class="attr">queue-names</span>=<span class="string">&quot;test_queue_confirm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试方法并启动</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221215000549806.png" alt="image-20221215000549806"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:spring-rabbitmq-consumer.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>生产者发送消息</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221215000623857.png" alt="image-20221215000623857"></p>
<p>观察消费者监听情况</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221215000645219.png" alt="image-20221215000645219"></p>
<p>模拟出错的情况</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221215000952980.png" alt="image-20221215000952980"></p>
<p>消费者监听情况–不断的重发</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221215001103990.png" alt="image-20221215001103990"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221215001205631.png" alt="image-20221215001205631"></p>
<h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221215001237460.png" alt="image-20221215001237460"></p>
<h2 id="消息可靠性总结"><a href="#消息可靠性总结" class="headerlink" title="消息可靠性总结"></a>消息可靠性总结</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221215001404566.png" alt="image-20221215001404566"></p>
<h2 id="消费端限流"><a href="#消费端限流" class="headerlink" title="消费端限流"></a>消费端限流</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221221184722213.png" alt="image-20221221184722213"></p>
<p>编写监听器</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221221185752225.png" alt="image-20221221185752225"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.api.ChannelAwareMessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Consumer 限流机制</span></span><br><span class="line"><span class="comment"> *  1. 确保ack机制为手动确认。</span></span><br><span class="line"><span class="comment"> *  2. listener-container配置属性</span></span><br><span class="line"><span class="comment"> *      perfetch = 1,表示消费端每次从mq拉去一条消息来消费，直到手动确认消费完毕后，才会继续拉去下一条消息。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QosListener</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//1.获取消息</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 处理业务逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 签收</span></span><br><span class="line">        channel.basicAck(message.getMessageProperties().getDeliveryTag(),<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>改写spring配置</p>
<p><strong>spring-rabbitmq-consumer.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--定义监听器容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">acknowledge</span>=<span class="string">&quot;manual&quot;</span>  <span class="attr">prefetch</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;rabbit:listener ref=&quot;ackListener&quot; queue-names=&quot;test_queue_confirm&quot;&gt;&lt;/rabbit:listener&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">&quot;qosListener&quot;</span> <span class="attr">queue-names</span>=<span class="string">&quot;test_queue_confirm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;定义监听器，监听正常队列&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;&lt;rabbit:listener ref=&quot;dlxListener&quot; queue-names=&quot;test_queue_dlx&quot;&gt;&lt;/rabbit:listener&gt;&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;延迟队列效果实现：  一定要监听的是 死信队列！！！&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;rabbit:listener ref=&quot;orderListener&quot; queue-names=&quot;order_queue_dlx&quot;&gt;&lt;/rabbit:listener&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实验1：模拟监听器不加prefetch-以及消费端不签收"><a href="#实验1：模拟监听器不加prefetch-以及消费端不签收" class="headerlink" title="实验1：模拟监听器不加prefetch 以及消费端不签收"></a>实验1：模拟监听器不加prefetch 以及消费端不签收</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221221190113607.png" alt="image-20221221190113607"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221221190142660.png" alt="image-20221221190142660"></p>
<p>生产者发送十条数据，并观察消费者，可见一次性获取了所有的十条消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSend</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_confirm&quot;</span>, <span class="string">&quot;confirm&quot;</span>, <span class="string">&quot;message confirm....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221221190420413.png" alt="image-20221221190420413"></p>
<h3 id="实验2：模拟监听器加上prefetch-以及消费端不签收"><a href="#实验2：模拟监听器加上prefetch-以及消费端不签收" class="headerlink" title="实验2：模拟监听器加上prefetch 以及消费端不签收"></a>实验2：模拟监听器加上prefetch 以及消费端不签收</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221221190621623.png" alt="image-20221221190621623"></p>
<p>生产者重新发送10条数据，可见消费者仅接收到一条消息</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221221190729366.png" alt="image-20221221190729366"></p>
<h3 id="实验3：打开消费端签收，可以观察到消费端依次消费每次打印一行。"><a href="#实验3：打开消费端签收，可以观察到消费端依次消费每次打印一行。" class="headerlink" title="实验3：打开消费端签收，可以观察到消费端依次消费每次打印一行。"></a>实验3：打开消费端签收，可以观察到消费端依次消费每次打印一行。</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221221213842724.png" alt="image-20221221213842724"></p>
<h2 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227211250411.png" alt="image-20221227211250411"></p>
<h3 id="设置整个队列的过期时间"><a href="#设置整个队列的过期时间" class="headerlink" title="设置整个队列的过期时间"></a>设置整个队列的过期时间</h3><p>编写spring配置</p>
<p><strong>spring-rabbitmq-producer.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--ttl--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">&quot;test_queue_ttl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test_queue_ttl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置queue的参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--x-message-ttl指队列的过期时间--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-message-ttl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:topic-exchange</span> <span class="attr">name</span>=<span class="string">&quot;test_exchange_ttl&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">&quot;ttl.#&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;test_queue_ttl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:binding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:topic-exchange</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试方法</p>
<p><strong>ProducerTest.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TTL:过期时间</span></span><br><span class="line"><span class="comment"> *  1. 队列统一过期</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  2. 消息单独过期</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果设置了消息的过期时间，也设置了队列的过期时间，它以时间短的为准。</span></span><br><span class="line"><span class="comment"> * 队列过期后，会将队列所有消息全部移除。</span></span><br><span class="line"><span class="comment"> * 消息过期后，只有消息在队列顶端，才会判断其是否过期(移除掉)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTtl</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_ttl&quot;</span>, <span class="string">&quot;ttl.hehe&quot;</span>, <span class="string">&quot;message ttl....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试运行观察</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227212253072.png" alt="image-20221227212253072"></p>
<p>10s后消失</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227212314583.png" alt="image-20221227212314583"></p>
<h3 id="设置单个消息的过期时间"><a href="#设置单个消息的过期时间" class="headerlink" title="设置单个消息的过期时间"></a>设置单个消息的过期时间</h3><p>编写测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TTL:过期时间</span></span><br><span class="line"><span class="comment">     *  1. 队列统一过期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  2. 消息单独过期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果设置了消息的过期时间，也设置了队列的过期时间，它以时间短的为准。</span></span><br><span class="line"><span class="comment">     * 队列过期后，会将队列所有消息全部移除。</span></span><br><span class="line"><span class="comment">     * 消息过期后，只有消息在队列顶端，才会判断其是否过期(移除掉)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">		<span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTtl</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 消息后处理对象，设置一些消息的参数信息</span></span><br><span class="line">        <span class="type">MessagePostProcessor</span> <span class="variable">messagePostProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">                <span class="comment">//1.设置message的信息</span></span><br><span class="line">                message.getMessageProperties().setExpiration(<span class="string">&quot;5000&quot;</span>);<span class="comment">//消息的过期时间</span></span><br><span class="line">                <span class="comment">//2.返回该消息</span></span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//消息单独过期</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_ttl&quot;</span>, <span class="string">&quot;ttl.hehe&quot;</span>, <span class="string">&quot;message ttl....&quot;</span>,messagePostProcessor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试运行并观察</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227212550785.png" alt="image-20221227212550785"></p>
<p>5s后消失</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227212606453.png" alt="image-20221227212606453"></p>
<h3 id="测试单个消息非队列顶部设置超时时间"><a href="#测试单个消息非队列顶部设置超时时间" class="headerlink" title="测试单个消息非队列顶部设置超时时间"></a>测试单个消息非队列顶部设置超时时间</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TTL:过期时间</span></span><br><span class="line"><span class="comment"> *  1. 队列统一过期</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  2. 消息单独过期</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果设置了消息的过期时间，也设置了队列的过期时间，它以时间短的为准。</span></span><br><span class="line"><span class="comment"> * 队列过期后，会将队列所有消息全部移除。</span></span><br><span class="line"><span class="comment"> * 消息过期后，只有消息在队列顶端，才会判断其是否过期(移除掉)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTtl</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 消息后处理对象，设置一些消息的参数信息</span></span><br><span class="line">    <span class="type">MessagePostProcessor</span> <span class="variable">messagePostProcessor</span> <span class="operator">=</span> message -&gt; &#123;</span><br><span class="line">        <span class="comment">//1.设置message的信息</span></span><br><span class="line">        message.getMessageProperties().setExpiration(<span class="string">&quot;5000&quot;</span>);<span class="comment">//消息的过期时间</span></span><br><span class="line">        <span class="comment">//2.返回该消息</span></span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="comment">//消息单独过期</span></span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_ttl&quot;</span>, <span class="string">&quot;ttl.hehe&quot;</span>, <span class="string">&quot;message ttl....&quot;</span>,messagePostProcessor);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//不过期的消息</span></span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_ttl&quot;</span>, <span class="string">&quot;ttl.hehe&quot;</span>, <span class="string">&quot;message ttl....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>观察设置单个超时时间的消息不会消失</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227212936701.png" alt="image-20221227212936701"></p>
<h2 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227213304807.png" alt="image-20221227213304807"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227213532687.png" alt="image-20221227213532687"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227213608862.png" alt="image-20221227213608862"></p>
<p>编写spring配置</p>
<p><strong>spring-rabbitmq-producer.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     死信队列：</span></span><br><span class="line"><span class="comment">         1. 声明正常的队列(test_queue_dlx)和交换机(test_exchange_dlx)</span></span><br><span class="line"><span class="comment">         2. 声明死信队列(queue_dlx)和死信交换机(exchange_dlx)</span></span><br><span class="line"><span class="comment">         3. 正常队列绑定死信交换机</span></span><br><span class="line"><span class="comment">             设置两个参数：</span></span><br><span class="line"><span class="comment">                 * x-dead-letter-exchange：死信交换机名称</span></span><br><span class="line"><span class="comment">                 * x-dead-letter-routing-key：发送给死信交换机的routingkey</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     1. 声明正常的队列(test_queue_dlx)和交换机(test_exchange_dlx)</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">&quot;test_queue_dlx&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test_queue_dlx&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--3. 正常队列绑定死信交换机--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--3.1 x-dead-letter-exchange：死信交换机名称--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-dead-letter-exchange&quot;</span> <span class="attr">value</span>=<span class="string">&quot;exchange_dlx&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!--3.2 x-dead-letter-routing-key：发送给死信交换机的routingkey--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-dead-letter-routing-key&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dlx.hehe&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!--4.1 设置队列的过期时间 ttl--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-message-ttl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.Integer&quot;</span> /&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--4.2 设置队列的长度限制 max-length --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-max-length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.Integer&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">rabbit:topic-exchange</span> <span class="attr">name</span>=<span class="string">&quot;test_exchange_dlx&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">&quot;test.dlx.#&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;test_queue_dlx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:binding</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">rabbit:topic-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    2. 声明死信队列(queue_dlx)和死信交换机(exchange_dlx)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">&quot;queue_dlx&quot;</span> <span class="attr">id</span>=<span class="string">&quot;queue_dlx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">rabbit:topic-exchange</span> <span class="attr">name</span>=<span class="string">&quot;exchange_dlx&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">&quot;dlx.#&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;queue_dlx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:binding</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">rabbit:topic-exchange</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试过期时间"><a href="#测试过期时间" class="headerlink" title="测试过期时间"></a>测试过期时间</h3><p>编写测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送测试死信消息：</span></span><br><span class="line"><span class="comment"> *  1. 过期时间</span></span><br><span class="line"><span class="comment"> *  2. 长度限制</span></span><br><span class="line"><span class="comment"> *  3. 消息拒收</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDlx</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. 测试过期时间，死信消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_dlx&quot;</span>,<span class="string">&quot;test.dlx.haha&quot;</span>,<span class="string">&quot;我是一条消息，我会死吗？&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行并观察</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227214849761.png" alt="image-20221227214849761"></p>
<p>10s后消息进入死信队列</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227214917514.png" alt="image-20221227214917514"></p>
<h3 id="测试长度限制"><a href="#测试长度限制" class="headerlink" title="测试长度限制"></a>测试长度限制</h3><p>编写测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送测试死信消息：</span></span><br><span class="line"><span class="comment"> *  1. 过期时间</span></span><br><span class="line"><span class="comment"> *  2. 长度限制</span></span><br><span class="line"><span class="comment"> *  3. 消息拒收</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDlx</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//2. 测试长度限制后，消息死信</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_dlx&quot;</span>,<span class="string">&quot;test.dlx.haha&quot;</span>,<span class="string">&quot;我是一条消息，我会死吗？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行并观察，10条消息进入了普通队列 超过10条限制的消息直接进入了死信队列</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227215247232.png" alt="image-20221227215247232"></p>
<p>10s，普通队列的消息超时也进入了死信队列</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227215325227.png" alt="image-20221227215325227"></p>
<h3 id="测试消息拒收"><a href="#测试消息拒收" class="headerlink" title="测试消息拒收"></a>测试消息拒收</h3><p>编写监听器</p>
<p> <img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227215842256.png" alt="image-20221227215842256"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.api.ChannelAwareMessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DlxListener</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> message.getMessageProperties().getDeliveryTag();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.接收转换消息</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 处理业务逻辑</span></span><br><span class="line">            System.out.println(<span class="string">&quot;处理业务逻辑...&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>/<span class="number">0</span>;<span class="comment">//出现错误</span></span><br><span class="line">            <span class="comment">//3. 手动签收</span></span><br><span class="line">            channel.basicAck(deliveryTag,<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//e.printStackTrace();</span></span><br><span class="line">            System.out.println(<span class="string">&quot;出现异常，拒绝接受&quot;</span>);</span><br><span class="line">            <span class="comment">//4.拒绝签收，不重回队列 requeue=false</span></span><br><span class="line">            channel.basicNack(deliveryTag,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义监听器容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">acknowledge</span>=<span class="string">&quot;manual&quot;</span>  <span class="attr">prefetch</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义监听器，监听正常队列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">&quot;dlxListener&quot;</span> <span class="attr">queue-names</span>=<span class="string">&quot;test_queue_dlx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写生产者测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送测试死信消息：</span></span><br><span class="line"><span class="comment">     *  1. 过期时间</span></span><br><span class="line"><span class="comment">     *  2. 长度限制</span></span><br><span class="line"><span class="comment">     *  3. 消息拒收</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDlx</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //3. 测试消息拒收</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_dlx&quot;</span>,<span class="string">&quot;test.dlx.haha&quot;</span>,<span class="string">&quot;我是一条消息，我会死吗？&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>执行并观察</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227220206106.png" alt="image-20221227220206106"></p>
<p>消息直接进入了死信队列</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221227220224963.png" alt="image-20221227220224963"></p>
<h2 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228145947307.png" alt="image-20221228145947307"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228150319866.png" alt="image-20221228150319866"></p>
<p>代码编写</p>
<p>编写生产者spring配置，定义普通队列和死信队列并绑定</p>
<p><strong>spring-rabbitmq-producer.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    延迟队列：</span></span><br><span class="line"><span class="comment">        1. 定义正常交换机（order_exchange）和队列(order_queue)</span></span><br><span class="line"><span class="comment">        2. 定义死信交换机（order_exchange_dlx）和队列(order_queue_dlx)</span></span><br><span class="line"><span class="comment">        3. 绑定，设置正常队列过期时间为30分钟</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 定义正常交换机（order_exchange）和队列(order_queue)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;order_queue&quot;</span> <span class="attr">name</span>=<span class="string">&quot;order_queue&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3. 绑定，设置正常队列过期时间为30分钟--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-dead-letter-exchange&quot;</span> <span class="attr">value</span>=<span class="string">&quot;order_exchange_dlx&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-dead-letter-routing-key&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dlx.order.cancel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-message-ttl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.Integer&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:topic-exchange</span> <span class="attr">name</span>=<span class="string">&quot;order_exchange&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">&quot;order.#&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;order_queue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:binding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:topic-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  2. 定义死信交换机（order_exchange_dlx）和队列(order_queue_dlx)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;order_queue_dlx&quot;</span> <span class="attr">name</span>=<span class="string">&quot;order_queue_dlx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:topic-exchange</span> <span class="attr">name</span>=<span class="string">&quot;order_exchange_dlx&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">&quot;dlx.order.#&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;order_queue_dlx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:binding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:topic-exchange</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写消费者监听器</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228151601690.png" alt="image-20221228151601690"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.api.ChannelAwareMessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderListener</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> message.getMessageProperties().getDeliveryTag();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.接收转换消息</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 处理业务逻辑</span></span><br><span class="line">            System.out.println(<span class="string">&quot;处理业务逻辑...&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;根据订单id查询其状态...&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;判断状态是否为支付成功&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;取消订单，回滚库存....&quot;</span>);</span><br><span class="line">            <span class="comment">//3. 手动签收</span></span><br><span class="line">            channel.basicAck(deliveryTag,<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//e.printStackTrace();</span></span><br><span class="line">            System.out.println(<span class="string">&quot;出现异常，拒绝接受&quot;</span>);</span><br><span class="line">            <span class="comment">//4.拒绝签收，不重回队列 requeue=false</span></span><br><span class="line">            channel.basicNack(deliveryTag,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写消费者spring配置绑定监听死信队列</p>
<p><strong>spring-rabbitmq-consumer.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--定义监听器容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">acknowledge</span>=<span class="string">&quot;manual&quot;</span>  <span class="attr">prefetch</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;延迟队列效果实现：  一定要监听的是 死信队列！！！&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">&quot;orderListener&quot;</span> <span class="attr">queue-names</span>=<span class="string">&quot;order_queue_dlx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行消费者</p>
<p>定义生产者测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testDelay</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//1.发送订单消息。 将来是在订单系统中，下单成功后，发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;order_exchange&quot;</span>,<span class="string">&quot;order.msg&quot;</span>,<span class="string">&quot;订单信息：id=1,time=2019年8月17日16:41:47&quot;</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//       2.打印倒计时10秒</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>; i &gt; <span class="number">0</span> ; i--) &#123;</span><br><span class="line">            System.out.println(i+<span class="string">&quot;...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>执行测试方法，并观察延迟队列效果</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228152155313.png" alt="image-20221228152155313"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228152136393.png" alt="image-20221228152136393"></p>
<p>10s后，消息进入死信队列并被消费者消费</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228152244940.png" alt="image-20221228152244940"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228152304713.png" alt="image-20221228152304713"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228152358765.png" alt="image-20221228152358765"></p>
<h2 id="日志监控"><a href="#日志监控" class="headerlink" title="日志监控"></a>日志监控</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228152738323.png" alt="image-20221228152738323"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228152755022.png" alt="image-20221228152755022"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228152842875.png" alt="image-20221228152842875"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228152918217.png" alt="image-20221228152918217"></p>
<h2 id="消息追踪"><a href="#消息追踪" class="headerlink" title="消息追踪"></a>消息追踪</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228190823227.png" alt="image-20221228190823227"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228153322289.png" alt="image-20221228153322289"></p>
<p>添加队列</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228191726685.png" alt="image-20221228191726685"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228191741077.png" alt="image-20221228191741077"></p>
<p>在默认的交换机<code>amq.rabbitmq.trace</code>中绑定创建好的队列</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228191855367.png" alt="image-20221228191855367"></p>
<p>不开启追踪往队列test_trace中发送消息</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228192053698.png" alt="image-20221228192053698"></p>
<p>观察队列中的消息情况</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228192131023.png" alt="image-20221228192131023"></p>
<p>开启追踪功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 ~]<span class="comment"># rabbitmqctl trace_on</span></span><br><span class="line">Starting tracing <span class="keyword">for</span> vhost <span class="string">&quot;/&quot;</span> ...</span><br><span class="line">[root@hecs-33111 ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>观察队列消息情况，<code>amq.rabbitmq.trace</code>交换机也发送了消息并带有详细日志信息</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228192530912.png" alt="image-20221228192530912"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228190716899.png" alt="image-20221228190716899"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228192732118.png" alt="image-20221228192732118"></p>
<p>启用该插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 ~]<span class="comment"># rabbitmq-plugins enable rabbitmq_tracing</span></span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  rabbitmq_tracing</span><br><span class="line"></span><br><span class="line">Applying plugin configuration to rabbit@hecs-33111... started 1 plugin.</span><br><span class="line">[root@hecs-33111 ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>观察控制台多了一个选项</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228192929754.png" alt="image-20221228192929754"></p>
<p>定义一个trace</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228193051332.png" alt="image-20221228193051332"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228193121486.png" alt="image-20221228193121486"></p>
<p>往队列里发送一个消息</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228193205099.png" alt="image-20221228193205099"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228193217634.png" alt="image-20221228193217634"></p>
<h1 id="RabbitMQ应用问题"><a href="#RabbitMQ应用问题" class="headerlink" title="RabbitMQ应用问题"></a>RabbitMQ应用问题</h1><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228193435235.png" alt="image-20221228193435235"></p>
<h2 id="消息可靠性保障"><a href="#消息可靠性保障" class="headerlink" title="消息可靠性保障"></a>消息可靠性保障</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228193508128.png" alt="image-20221228193508128"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228193539855.png" alt="image-20221228193539855"></p>
<h2 id="消息幂等性保障"><a href="#消息幂等性保障" class="headerlink" title="消息幂等性保障"></a><strong>消息幂等性保障</strong></h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228194239318.png" alt="image-20221228194239318"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/image-20221228194314520.png" alt="image-20221228194314520"></p>
<h1 id="RabbitMQ集群搭建"><a href="#RabbitMQ集群搭建" class="headerlink" title="RabbitMQ集群搭建"></a>RabbitMQ集群搭建</h1><p>摘要：实际生产应用中都会采用消息队列的集群方案，如果选择RabbitMQ那么有必要了解下它的集群方案原理</p>
<p>一般来说，如果只是为了学习RabbitMQ或者验证业务工程的正确性那么在本地环境或者测试环境上使用其单实例部署就可以了，但是出于MQ中间件本身的可靠性、并发性、吞吐量和消息堆积能力等问题的考虑，在生产环境上一般都会考虑使用RabbitMQ的集群方案。</p>
<h3 id="集群方案的原理"><a href="#集群方案的原理" class="headerlink" title="集群方案的原理"></a>集群方案的原理</h3><p>RabbitMQ这款消息队列中间件产品本身是基于Erlang编写，Erlang语言天生具备分布式特性（通过同步Erlang集群各节点的magic cookie来实现）。因此，RabbitMQ天然支持Clustering。这使得RabbitMQ本身不需要像ActiveMQ、Kafka那样通过ZooKeeper分别来实现HA方案和保存集群的元数据。集群是保证可靠性的一种方式，同时可以通过水平扩展以达到增加消息吞吐量能力的目的。</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/1566073768274.png" alt="1565245219265"></p>
<h3 id="单机多实例部署"><a href="#单机多实例部署" class="headerlink" title="单机多实例部署"></a>单机多实例部署</h3><p>由于某些因素的限制，有时候你不得不在一台机器上去搭建一个rabbitmq集群，这个有点类似zookeeper的单机版。真实生成环境还是要配成多机集群的。有关怎么配置多机集群的可以参考其他的资料，这里主要论述如何在单机中配置多个rabbitmq实例。</p>
<p>主要参考官方文档：<a href="https://www.rabbitmq.com/clustering.html">https://www.rabbitmq.com/clustering.html</a></p>
<p>首先确保RabbitMQ运行没有问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@super ~]# rabbitmqctl status</span><br><span class="line">Status of node rabbit@super ...</span><br><span class="line">[&#123;pid,10232&#125;,</span><br><span class="line"> &#123;running_applications,</span><br><span class="line">     [&#123;rabbitmq_management,&quot;RabbitMQ Management Console&quot;,&quot;3.6.5&quot;&#125;,</span><br><span class="line">      &#123;rabbitmq_web_dispatch,&quot;RabbitMQ Web Dispatcher&quot;,&quot;3.6.5&quot;&#125;,</span><br><span class="line">      &#123;webmachine,&quot;webmachine&quot;,&quot;1.10.3&quot;&#125;,</span><br><span class="line">      &#123;mochiweb,&quot;MochiMedia Web Server&quot;,&quot;2.13.1&quot;&#125;,</span><br><span class="line">      &#123;rabbitmq_management_agent,&quot;RabbitMQ Management Agent&quot;,&quot;3.6.5&quot;&#125;,</span><br><span class="line">      &#123;rabbit,&quot;RabbitMQ&quot;,&quot;3.6.5&quot;&#125;,</span><br><span class="line">      &#123;os_mon,&quot;CPO  CXC 138 46&quot;,&quot;2.4&quot;&#125;,</span><br><span class="line">      &#123;syntax_tools,&quot;Syntax tools&quot;,&quot;1.7&quot;&#125;,</span><br><span class="line">      &#123;inets,&quot;INETS  CXC 138 49&quot;,&quot;6.2&quot;&#125;,</span><br><span class="line">      &#123;amqp_client,&quot;RabbitMQ AMQP Client&quot;,&quot;3.6.5&quot;&#125;,</span><br><span class="line">      &#123;rabbit_common,[],&quot;3.6.5&quot;&#125;,</span><br><span class="line">      &#123;ssl,&quot;Erlang/OTP SSL application&quot;,&quot;7.3&quot;&#125;,</span><br><span class="line">      &#123;public_key,&quot;Public key infrastructure&quot;,&quot;1.1.1&quot;&#125;,</span><br><span class="line">      &#123;asn1,&quot;The Erlang ASN1 compiler version 4.0.2&quot;,&quot;4.0.2&quot;&#125;,</span><br><span class="line">      &#123;ranch,&quot;Socket acceptor pool for TCP protocols.&quot;,&quot;1.2.1&quot;&#125;,</span><br><span class="line">      &#123;mnesia,&quot;MNESIA  CXC 138 12&quot;,&quot;4.13.3&quot;&#125;,</span><br><span class="line">      &#123;compiler,&quot;ERTS  CXC 138 10&quot;,&quot;6.0.3&quot;&#125;,</span><br><span class="line">      &#123;crypto,&quot;CRYPTO&quot;,&quot;3.6.3&quot;&#125;,</span><br><span class="line">      &#123;xmerl,&quot;XML parser&quot;,&quot;1.3.10&quot;&#125;,</span><br><span class="line">      &#123;sasl,&quot;SASL  CXC 138 11&quot;,&quot;2.7&quot;&#125;,</span><br><span class="line">      &#123;stdlib,&quot;ERTS  CXC 138 10&quot;,&quot;2.8&quot;&#125;,</span><br><span class="line">      &#123;kernel,&quot;ERTS  CXC 138 10&quot;,&quot;4.2&quot;&#125;]&#125;,</span><br><span class="line"> &#123;os,&#123;unix,linux&#125;&#125;,</span><br><span class="line"> &#123;erlang_version,</span><br><span class="line">     &quot;Erlang/OTP 18 [erts-7.3] [source] [64-bit] [async-threads:64] [hipe] [kernel-poll:true]\n&quot;&#125;,</span><br><span class="line"> &#123;memory,</span><br><span class="line">     [&#123;total,56066752&#125;,</span><br><span class="line">      &#123;connection_readers,0&#125;,</span><br><span class="line">      &#123;connection_writers,0&#125;,</span><br><span class="line">      &#123;connection_channels,0&#125;,</span><br><span class="line">      &#123;connection_other,2680&#125;,</span><br><span class="line">      &#123;queue_procs,268248&#125;,</span><br><span class="line">      &#123;queue_slave_procs,0&#125;,</span><br><span class="line">      &#123;plugins,1131936&#125;,</span><br><span class="line">      &#123;other_proc,18144280&#125;,</span><br><span class="line">      &#123;mnesia,125304&#125;,</span><br><span class="line">      &#123;mgmt_db,921312&#125;,</span><br><span class="line">      &#123;msg_index,69440&#125;,</span><br><span class="line">      &#123;other_ets,1413664&#125;,</span><br><span class="line">      &#123;binary,755736&#125;,</span><br><span class="line">      &#123;code,27824046&#125;,</span><br><span class="line">      &#123;atom,1000601&#125;,</span><br><span class="line">      &#123;other_system,4409505&#125;]&#125;,</span><br><span class="line"> &#123;alarms,[]&#125;,</span><br><span class="line"> &#123;listeners,[&#123;clustering,25672,&quot;::&quot;&#125;,&#123;amqp,5672,&quot;::&quot;&#125;]&#125;,</span><br><span class="line"> &#123;vm_memory_high_watermark,0.4&#125;,</span><br><span class="line"> &#123;vm_memory_limit,411294105&#125;,</span><br><span class="line"> &#123;disk_free_limit,50000000&#125;,</span><br><span class="line"> &#123;disk_free,13270233088&#125;,</span><br><span class="line"> &#123;file_descriptors,</span><br><span class="line">     [&#123;total_limit,924&#125;,&#123;total_used,6&#125;,&#123;sockets_limit,829&#125;,&#123;sockets_used,0&#125;]&#125;,</span><br><span class="line"> &#123;processes,[&#123;limit,1048576&#125;,&#123;used,262&#125;]&#125;,</span><br><span class="line"> &#123;run_queue,0&#125;,</span><br><span class="line"> &#123;uptime,43651&#125;,</span><br><span class="line"> &#123;kernel,&#123;net_ticktime,60&#125;&#125;]</span><br></pre></td></tr></table></figure>

<p>停止rabbitmq服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@super sbin]# service rabbitmq-server stop</span><br><span class="line">Stopping rabbitmq-server: rabbitmq-server.</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>启动第一个节点：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@super sbin]# RABBITMQ_NODE_PORT=5673 RABBITMQ_NODENAME=rabbit1 rabbitmq-server start</span><br><span class="line"></span><br><span class="line">              RabbitMQ 3.6.5. Copyright (C) 2007-2016 Pivotal Software, Inc.</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">#  ##      Licensed under the MPL.  See http://www.rabbitmq.com/</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">#  ##</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">#########  Logs: /var/log/rabbitmq/rabbit1.log</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">#####  ##        /var/log/rabbitmq/rabbit1-sasl.log</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">#########</span></span></span><br><span class="line">              Starting broker...</span><br><span class="line"> completed with 6 plugins.</span><br></pre></td></tr></table></figure>

<p>启动第二个节点：</p>
<blockquote>
<p>web管理插件端口占用,所以还要指定其web插件占用的端口号。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@super ~]# RABBITMQ_NODE_PORT=5674 RABBITMQ_SERVER_START_ARGS=&quot;-rabbitmq_management listener [&#123;port,15674&#125;]&quot; RABBITMQ_NODENAME=rabbit2 rabbitmq-server start</span><br><span class="line"></span><br><span class="line">              RabbitMQ 3.6.5. Copyright (C) 2007-2016 Pivotal Software, Inc.</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">#  ##      Licensed under the MPL.  See http://www.rabbitmq.com/</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">#  ##</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">#########  Logs: /var/log/rabbitmq/rabbit2.log</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">#####  ##        /var/log/rabbitmq/rabbit2-sasl.log</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">#########</span></span></span><br><span class="line">              Starting broker...</span><br><span class="line"> completed with 6 plugins.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结束命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl -n rabbit1 stop</span><br><span class="line">rabbitmqctl -n rabbit2 stop</span><br></pre></td></tr></table></figure>



<p>rabbit1操作作为主节点：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@super ~]# rabbitmqctl -n rabbit1 stop_app  </span><br><span class="line">Stopping node rabbit1@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit1 reset	 </span><br><span class="line">Resetting node rabbit1@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit1 start_app</span><br><span class="line">Starting node rabbit1@super ...</span><br><span class="line">[root@super ~]# </span><br></pre></td></tr></table></figure>

<p>rabbit2操作为从节点：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@super ~]# rabbitmqctl -n rabbit2 stop_app</span><br><span class="line">Stopping node rabbit2@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit2 reset</span><br><span class="line">Resetting node rabbit2@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit2 join_cluster rabbit1@&#x27;super&#x27; ###&#x27;&#x27;内是主机名换成自己的</span><br><span class="line">Clustering node rabbit2@super with rabbit1@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit2 start_app</span><br><span class="line">Starting node rabbit2@super ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看集群状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@super ~]# rabbitmqctl cluster_status -n rabbit1</span><br><span class="line">Cluster status of node rabbit1@super ...</span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit1@super,rabbit2@super]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit2@super,rabbit1@super]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;&quot;rabbit1@super&quot;&gt;&gt;&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit2@super,[]&#125;,&#123;rabbit1@super,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure>

<p>web监控：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/1566065096459.png" alt="1566065096459"></p>
<h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3><p><strong>rabbitmqctl join_cluster {cluster_node} [–ram]</strong><br>将节点加入指定集群中。在这个命令执行前需要停止RabbitMQ应用并重置节点。</p>
<p><strong>rabbitmqctl cluster_status</strong><br>显示集群的状态。</p>
<p><strong>rabbitmqctl change_cluster_node_type {disc|ram}</strong><br>修改集群节点的类型。在这个命令执行前需要停止RabbitMQ应用。</p>
<p><strong>rabbitmqctl forget_cluster_node [–offline]</strong><br>将节点从集群中删除，允许离线执行。</p>
<p><strong>rabbitmqctl update_cluster_nodes {clusternode}</strong></p>
<p>在集群中的节点应用启动前咨询clusternode节点的最新信息，并更新相应的集群信息。这个和join_cluster不同，它不加入集群。考虑这样一种情况，节点A和节点B都在集群中，当节点A离线了，节点C又和节点B组成了一个集群，然后节点B又离开了集群，当A醒来的时候，它会尝试联系节点B，但是这样会失败，因为节点B已经不在集群中了。</p>
<p><strong>rabbitmqctl cancel_sync_queue [-p vhost] {queue}</strong><br>取消队列queue同步镜像的操作。</p>
<p><strong>rabbitmqctl set_cluster_name {name}</strong><br>设置集群名称。集群名称在客户端连接时会通报给客户端。Federation和Shovel插件也会有用到集群名称的地方。集群名称默认是集群中第一个节点的名称，通过这个命令可以重新设置。</p>
<h3 id="RabbitMQ镜像集群配置"><a href="#RabbitMQ镜像集群配置" class="headerlink" title="RabbitMQ镜像集群配置"></a>RabbitMQ镜像集群配置</h3><blockquote>
<p>上面已经完成RabbitMQ默认集群模式，但并不保证队列的高可用性，尽管交换机、绑定这些可以复制到集群里的任何一个节点，但是队列内容不会复制。虽然该模式解决一项目组节点压力，但队列节点宕机直接导致该队列无法应用，只能等待重启，所以要想在队列节点宕机或故障也能正常应用，就要复制队列内容到集群里的每个节点，必须要创建镜像队列。</p>
<p>镜像队列是基于普通的集群模式的，然后再添加一些策略，所以你还是得先配置普通集群，然后才能设置镜像队列，我们就以上面的集群接着做。</p>
</blockquote>
<p><strong>设置的镜像队列可以通过开启的网页的管理端Admin-&gt;Policies，也可以通过命令。</strong></p>
<blockquote>
<p>rabbitmqctl set_policy my_ha “^” ‘{“ha-mode”:”all”}’</p>
</blockquote>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-RabbitMQ/1566072300852.png" alt="1566072300852"></p>
<blockquote>
<ul>
<li>Name:策略名称</li>
<li>Pattern：匹配的规则，如果是匹配所有的队列，是^.</li>
<li>Definition:使用ha-mode模式中的all，也就是同步所有匹配的队列。问号链接帮助文档。</li>
</ul>
</blockquote>
<h3 id="负载均衡-HAProxy"><a href="#负载均衡-HAProxy" class="headerlink" title="负载均衡-HAProxy"></a>负载均衡-HAProxy</h3><p>HAProxy提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案,包括Twitter，Reddit，StackOverflow，GitHub在内的多家知名互联网公司在使用。HAProxy实现了一种事件驱动、单一进程模型，此模型支持非常大的并发连接数。</p>
<h5 id="安装HAProxy"><a href="#安装HAProxy" class="headerlink" title="安装HAProxy"></a>安装HAProxy</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//下载依赖包</span><br><span class="line">yum install gcc vim wget</span><br><span class="line">//上传haproxy源码包</span><br><span class="line">//解压</span><br><span class="line">tar -zxvf haproxy-1.6.5.tar.gz -C /usr/local</span><br><span class="line">//进入目录、进行编译、安装</span><br><span class="line">cd /usr/local/haproxy-1.6.5</span><br><span class="line">make TARGET=linux31 PREFIX=/usr/local/haproxy</span><br><span class="line">make install PREFIX=/usr/local/haproxy</span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line">//赋权</span><br><span class="line">groupadd -r -g 149 haproxy</span><br><span class="line">useradd -g haproxy -r -s /sbin/nologin -u 149 haproxy</span><br><span class="line">//创建haproxy配置文件</span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line">vim /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>




<h5 id="配置HAProxy"><a href="#配置HAProxy" class="headerlink" title="配置HAProxy"></a>配置HAProxy</h5><p>配置文件路径：/etc/haproxy/haproxy.cfg</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">logging options</span></span><br><span class="line">global</span><br><span class="line">	log 127.0.0.1 local0 info</span><br><span class="line">	maxconn 5120</span><br><span class="line">	chroot /usr/local/haproxy</span><br><span class="line">	uid 99</span><br><span class="line">	gid 99</span><br><span class="line">	daemon</span><br><span class="line">	quiet</span><br><span class="line">	nbproc 20</span><br><span class="line">	pidfile /var/run/haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">	log global</span><br><span class="line">	</span><br><span class="line">	mode tcp</span><br><span class="line"></span><br><span class="line">	option tcplog</span><br><span class="line">	option dontlognull</span><br><span class="line">	retries 3</span><br><span class="line">	option redispatch</span><br><span class="line">	maxconn 2000</span><br><span class="line">	contimeout 5s</span><br><span class="line">   </span><br><span class="line">     clitimeout 60s</span><br><span class="line"></span><br><span class="line">     srvtimeout 15s	</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">front-end IP <span class="keyword">for</span> consumers and producters</span></span><br><span class="line"></span><br><span class="line">listen rabbitmq_cluster</span><br><span class="line">	bind 0.0.0.0:5672</span><br><span class="line">	</span><br><span class="line">	mode tcp</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">balance url_param userid</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">balance url_param session_id check_post 64</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">balance hdr(User-Agent)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">balance hdr(host)</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">balance hdr(Host) use_domain_only</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">balance rdp-cookie</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">balance leastconn</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">balance <span class="built_in">source</span> //ip</span></span><br><span class="line">	</span><br><span class="line">	balance roundrobin</span><br><span class="line">	</span><br><span class="line">        server node1 127.0.0.1:5673 check inter 5000 rise 2 fall 2</span><br><span class="line">        server node2 127.0.0.1:5674 check inter 5000 rise 2 fall 2</span><br><span class="line"></span><br><span class="line">listen stats</span><br><span class="line">	bind 172.16.98.133:8100</span><br><span class="line">	mode http</span><br><span class="line">	option httplog</span><br><span class="line">	stats enable</span><br><span class="line">	stats uri /rabbitmq-stats</span><br><span class="line">	stats refresh 5s</span><br></pre></td></tr></table></figure>

<p>启动HAproxy负载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</span><br><span class="line">//查看haproxy进程状态</span><br><span class="line">ps -ef | grep haproxy</span><br><span class="line"></span><br><span class="line">访问如下地址对mq节点进行监控</span><br><span class="line">http://172.16.98.133:8100/rabbitmq-stats</span><br></pre></td></tr></table></figure>

<p>代码中访问mq集群地址，则变为访问haproxy地址:5672</p>
]]></content>
      <categories>
        <category>消息中间件</category>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>黑马程序员</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马程序员-瑞吉外卖</title>
    <url>/2022/11/01/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/</url>
    <content><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><h2 id="软件开发整体介绍"><a href="#软件开发整体介绍" class="headerlink" title="软件开发整体介绍"></a>软件开发整体介绍</h2><h3 id="软件开发流程"><a href="#软件开发流程" class="headerlink" title="软件开发流程"></a>软件开发流程</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221101215252928.png" alt="image-20221101215252928"></p>
<h3 id="角色分工"><a href="#角色分工" class="headerlink" title="角色分工"></a>角色分工</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221101215522519.png" alt="image-20221101215522519"></p>
<h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221101215648587.png" alt="image-20221101215648587"></p>
<h2 id="瑞吉外卖项目介绍"><a href="#瑞吉外卖项目介绍" class="headerlink" title="瑞吉外卖项目介绍"></a>瑞吉外卖项目介绍</h2><h3 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221101215938996.png" alt="image-20221101215938996"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221101220015602.png" alt="image-20221101220015602"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221101220026945.png" alt="image-20221101220026945"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221101220045837.png" alt="image-20221101220045837"></p>
<h3 id="产品原型展示"><a href="#产品原型展示" class="headerlink" title="产品原型展示"></a>产品原型展示</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221101220205580.png" alt="image-20221101220205580"></p>
<h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221101220659178.png" alt="image-20221101220659178"></p>
<h3 id="功能架构"><a href="#功能架构" class="headerlink" title="功能架构"></a>功能架构</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221101221042664.png" alt="image-20221101221042664"></p>
<h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p> <img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102111505518.png" alt="image-20221102111505518"></p>
<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><h3 id="数据库环境搭建"><a href="#数据库环境搭建" class="headerlink" title="数据库环境搭建"></a>数据库环境搭建</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102111654252.png" alt="image-20221102111654252"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102111841746.png" alt="image-20221102111841746"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102112238507.png" alt="image-20221102112238507"></p>
<p> <img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102112545353.png" alt="image-20221102112545353"></p>
<h3 id="maven项目搭建"><a href="#maven项目搭建" class="headerlink" title="maven项目搭建"></a>maven项目搭建</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102113158106.png" alt="image-20221102113158106"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102113400348.png" alt="image-20221102113400348"></p>
<h4 id="配置pom文件"><a href="#配置pom文件" class="headerlink" title="配置pom文件"></a>配置pom文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reggie_take_out<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置springboot配置文件"><a href="#配置springboot配置文件" class="headerlink" title="配置springboot配置文件"></a>配置springboot配置文件</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">8080</span></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">druid</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">driver-class-name</span>: <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">      <span class="attr">password</span>: <span class="string">Xuwei19941214~</span></span><br><span class="line"><span class="attr">mybatis-plus</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">configuration</span>:<span class="string"></span></span><br><span class="line"><span class="comment">    #在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case</span>: <span class="string">true</span></span><br><span class="line">    <span class="attr">log-impl</span>: <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">db-config</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">id-type</span>: <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure>

<h4 id="编写springboot启动类"><a href="#编写springboot启动类" class="headerlink" title="编写springboot启动类"></a>编写springboot启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class,args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102115402524.png" alt="image-20221102115402524"></p>
<h4 id="导入前端页面的静态资源"><a href="#导入前端页面的静态资源" class="headerlink" title="导入前端页面的静态资源"></a>导入前端页面的静态资源</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102115954946.png" alt="image-20221102115954946"></p>
<p>由于MVC无法识别非static下的静态资源，需通过配置修改</p>
<h4 id="修改mvc配置"><a href="#修改mvc配置" class="headerlink" title="修改mvc配置"></a>修改mvc配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行静态资源映射...&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102124855698.png" alt="image-20221102124855698"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102125237449.png" alt="image-20221102125237449"></p>
<p>成功访问。</p>
<h2 id="后台开发登录功能"><a href="#后台开发登录功能" class="headerlink" title="后台开发登录功能"></a>后台开发登录功能</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102125402985.png" alt="image-20221102125402985"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102130411085.png" alt="image-20221102130411085"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102133155426.png" alt="image-20221102133155426"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102133224942.png" alt="image-20221102133224942"></p>
<h3 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h3><h4 id="1-创建实体类Employee，和employee表进行映射"><a href="#1-创建实体类Employee，和employee表进行映射" class="headerlink" title="1)创建实体类Employee，和employee表进行映射"></a>1)创建实体类Employee，和employee表进行映射</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102133739054.png" alt="image-20221102133739054"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-创建contrller、service、mapper"><a href="#2-创建contrller、service、mapper" class="headerlink" title="2)创建contrller、service、mapper"></a>2)创建contrller、service、mapper</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102134134327.png" alt="image-20221102134134327"></p>
<h4 id="3-导入返回结果类R"><a href="#3-导入返回结果类R" class="headerlink" title="3)导入返回结果类R"></a>3)导入返回结果类R</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102135118235.png" alt="image-20221102135118235"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-在Controller中创建登录方法"><a href="#4-在Controller中创建登录方法" class="headerlink" title="4)在Controller中创建登录方法"></a>4)在Controller中创建登录方法</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102140144318.png" alt="image-20221102140144318"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 员工登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1.将页面提交的密码password进行md5加密处理</span></span><br><span class="line">        String password=employee.getPassword();</span><br><span class="line">        DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2.根据页面提交的用户名username查询数据库</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Employee::getUpdateTime,employee.getUsername());</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3.如果没有查询到则返回登录失败结果</span></span><br><span class="line">        <span class="keyword">if</span>(emp==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        4.密码比对，如果不一致则返回登录失败</span></span><br><span class="line">        <span class="keyword">if</span>(!emp.getPassword().equals(password))&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        5.查看员工状态，如果为已禁用状态，则返回员工已禁用结果</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;账号已禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        6.登录成功，将员工id存入Session并返回登陆成功结果</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>,emp.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>修改前端超时时间方便调试，并清除浏览器缓存</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102144021812.png" alt="image-20221102144021812"></p>
<p>登录测试</p>
<p>登录成功</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102145713338.png" alt="image-20221102145713338"></p>
<p>账号密码错误</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102145905661.png" alt="image-20221102145905661"></p>
<p>账号禁用</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102150012340.png" alt="image-20221102150012340"></p>
<h2 id="后台退出功能"><a href="#后台退出功能" class="headerlink" title="后台退出功能"></a>后台退出功能</h2><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102151147651.png" alt="image-20221102151147651"></p>
<h3 id="代码开发-1"><a href="#代码开发-1" class="headerlink" title="代码开发"></a>代码开发</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>验证：</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102162928587.png" alt="image-20221102162928587"></p>
<h1 id="2-员工管理业务开发"><a href="#2-员工管理业务开发" class="headerlink" title="2.员工管理业务开发"></a>2.员工管理业务开发</h1><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a><strong>效果展示</strong></h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102164027916.png" alt="image-20221102164027916"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102164105514.png" alt="image-20221102164105514"></p>
<h2 id="完善登录功能"><a href="#完善登录功能" class="headerlink" title="完善登录功能"></a>完善登录功能</h2><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102164324523.png" alt="image-20221102164324523"></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102164459486.png" alt="image-20221102164459486"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102164946971.png" alt="image-20221102164946971"></p>
<p>创建过滤器</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102173922296.png" alt="image-20221102173922296"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.common.R;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.LogRecord;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;,urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">//路径匹配器，支持通配符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> AntPathMatcher PATH_MATCHER=<span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        HttpServletRequest request=(HttpServletRequest)servletRequest;</span><br><span class="line">        HttpServletResponse response=(HttpServletResponse)servletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、获取本次请求的URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;拦截到请求:&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line">        <span class="comment">//定义不需要处理的请求路径</span></span><br><span class="line">        String[] urls=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.判断本次请求是否需要处理</span></span><br><span class="line">      <span class="type">boolean</span> check= check(urls,requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.如果不需要处理，则直接方形</span></span><br><span class="line">        <span class="keyword">if</span> (check)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;本次请求不需要处理&quot;</span>,requestURI);</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.判断登录状态，如果已经登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，用户id为:&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        <span class="comment">//5.如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据</span></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls, String requestURI)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String url:urls)&#123;</span><br><span class="line">            <span class="keyword">if</span> (PATH_MATCHER.match(url,requestURI))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动类添加注解<code>@ServletComponentScan</code></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102174034585.png" alt="image-20221102174034585"></p>
<p>演示效果</p>
<p>未登录状态下直接请求<code>[瑞吉外卖管理端](http://localhost:8080/backend/index.html)</code></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221102174205079.png" alt="image-20221102174205079"></p>
<h2 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h2><h3 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221103204327722.png" alt="image-20221103204327722"></p>
<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p> <img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221103204610527.png" alt="image-20221103204610527"></p>
<p> <img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221103204907141.png" alt="image-20221103204907141"></p>
<h3 id="代码开发-2"><a href="#代码开发-2" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221103204932886.png" alt="image-20221103204932886"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增员工</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request,Employee employee)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;新增员工，员工信息：&#123;&#125;&quot;</span>,employee.toString());</span><br><span class="line">    <span class="comment">//设置初始密码123456，需要进行md5加密处理</span></span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line"></span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取当前登录用户的id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long)request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    employee.setCreateUser(empId);</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line"></span><br><span class="line">    employeeService.save(employee);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增员工成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221103215656433.png" alt="image-20221103215656433"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221103215758520.png" alt="image-20221103215758520"></p>
<p>定义异常类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.common;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.PUBLIC_MEMBER;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLIntegrityConstraintViolationException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line">        <span class="keyword">if</span> (ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>]+<span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;失败了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104122116103.png" alt="image-20221104122116103"></p>
<p>效果</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104122154880.png" alt="image-20221104122154880"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104122521515.png" alt="image-20221104122521515"></p>
<h2 id="员工信息分页查询"><a href="#员工信息分页查询" class="headerlink" title="员工信息分页查询"></a>员工信息分页查询</h2><h3 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h3><p>  <img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104142652236.png" alt="image-20221104142652236"></p>
<h3 id="代码开发-3"><a href="#代码开发-3" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104142847268.png" alt="image-20221104142847268"></p>
<p>配置MP的分页插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置MP的分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104150140458.png" alt="image-20221104150140458"></p>
<p>编写分页接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">    <span class="comment">//构造分页构造器</span></span><br><span class="line">    Page&lt;Employee&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    <span class="comment">//构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加过滤条件</span></span><br><span class="line">    queryWrapper.like(StringUtils.isNotBlank(name),Employee::getName,name);</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    employeeService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104152321531.png" alt="image-20221104152321531"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104152337263.png" alt="image-20221104152337263"></p>
<h2 id="启用-禁用员工账号"><a href="#启用-禁用员工账号" class="headerlink" title="启用/禁用员工账号"></a>启用/禁用员工账号</h2><h3 id="需求分析-4"><a href="#需求分析-4" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104153501608.png" alt="image-20221104153501608"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104153540185.png" alt="image-20221104153540185"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104153638758.png" alt="image-20221104153638758"></p>
<h3 id="代码开发-4"><a href="#代码开发-4" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104153709080.png" alt="image-20221104153709080"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104154042965.png" alt="image-20221104154042965"></p>
<p>  <img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104154128808.png" alt="image-20221104154128808"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104154630285.png" alt="image-20221104154630285"></p>
<p>编写更新接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span>(Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104164039545.png" alt="image-20221104164039545"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104164213608.png" alt="image-20221104164213608"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104164236300.png" alt="image-20221104164236300"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104164457087.png" alt="image-20221104164457087"></p>
<p>拷贝消息转换器</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104164710276.png" alt="image-20221104164710276"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104164915310.png" alt="image-20221104164915310"></p>
<p>配置扩展mvc框架的消息转换器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展mvc框架的消息转换器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">    <span class="comment">//创建消息转换器</span></span><br><span class="line">    <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">    <span class="comment">//设置对象转换器，底层使用jackson将Java对象转换为json</span></span><br><span class="line">    messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">    <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">    converters.add(<span class="number">0</span>,messageConverter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104170101932.png" alt="image-20221104170101932"></p>
<p>效果</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104170519064.png" alt="image-20221104170519064"></p>
<h2 id="编辑员工信息"><a href="#编辑员工信息" class="headerlink" title="编辑员工信息"></a>编辑员工信息</h2><h3 id="需求分析-5"><a href="#需求分析-5" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104170728020.png" alt="image-20221104170728020"></p>
<h3 id="代码开发-5"><a href="#代码开发-5" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104170746991.png" alt="image-20221104170746991"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104180340877.png" alt="image-20221104180340877"></p>
<p>编写查询详情接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;根据id查询员工信息...&quot;</span>);</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (employee!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(employee);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到对应的员工信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-分类管理业务"><a href="#3-分类管理业务" class="headerlink" title="3.分类管理业务"></a>3.分类管理业务</h1><h2 id="效果展示-1"><a href="#效果展示-1" class="headerlink" title="效果展示"></a><strong>效果展示</strong></h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104201612375.png" alt="image-20221104201612375"></p>
<h2 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h2><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104201938676.png" alt="image-20221104201938676"></p>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104202215456.png" alt="image-20221104202215456"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104202742328.png" alt="image-20221104202742328"></p>
<p>添加<code>@TableField</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Long updateUser;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104202806866.png" alt="image-20221104202806866"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104205304230.png" alt="image-20221104205304230"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104205416007.png" alt="image-20221104205416007"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104205946570.png" alt="image-20221104205946570"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104210307481.png" alt="image-20221104210307481"></p>
<p>编写baseContext工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.common;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  ThreadLocal&lt;Long&gt; threadLocal= <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在拦截器中设置threadlocal变量</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104212002309.png" alt="image-20221104212002309"></p>
<p>完善自动填充</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入操作，自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充【insert】....&quot;</span>);</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;creatTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;creatUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改操作，自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充【update】....&quot;</span>);</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>取消手动填充</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104212207534.png" alt="image-20221104212207534"></p>
<p>演示</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104213926639.png" alt="image-20221104213926639"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221104214108671.png" alt="image-20221104214108671"></p>
<h2 id="新增分类"><a href="#新增分类" class="headerlink" title="新增分类"></a>新增分类</h2><h3 id="需求分析-6"><a href="#需求分析-6" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221105162932019.png" alt="image-20221105162932019"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221105163102177.png" alt="image-20221105163102177"> </p>
<h3 id="数据模型-1"><a href="#数据模型-1" class="headerlink" title="数据模型"></a>数据模型</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221105163245262.png" alt="image-20221105163245262"></p>
<h3 id="代码开发-6"><a href="#代码开发-6" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221105163421685.png" alt="image-20221105163421685"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221105165654880.png" alt="image-20221105165654880"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221105165709164.png" alt="image-20221105165709164"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增分类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;category:&#123;&#125;&quot;</span>,category);</span><br><span class="line">    categoryService.save(category);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增分类成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分类信息的分页查询"><a href="#分类信息的分页查询" class="headerlink" title="分类信息的分页查询"></a>分类信息的分页查询</h2><h3 id="需求分析-7"><a href="#需求分析-7" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221105170716656.png" alt="image-20221105170716656"></p>
<h3 id="代码开发-7"><a href="#代码开发-7" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221105170740877.png" alt="image-20221105170740877"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">    <span class="comment">//分页构造器</span></span><br><span class="line">    Page&lt;Category&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加排序条件，根据sort进行排序</span></span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort);</span><br><span class="line">    <span class="comment">//进行分页查询</span></span><br><span class="line">    categoryService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h2><h3 id="需求分析-8"><a href="#需求分析-8" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221105172302655.png" alt="image-20221105172302655"></p>
<h3 id="代码开发-8"><a href="#代码开发-8" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221105172347617.png" alt="image-20221105172347617"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id删除分类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;删除分类，id为：&#123;&#125;&quot;</span>,id);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;分类信息删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="功能完善"><a href="#功能完善" class="headerlink" title="功能完善"></a>功能完善</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221105172615362.png" alt="image-20221105172615362"></p>
<p>定义业务异常类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.common;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义业务异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">CustomException</span> <span class="params">(String message)</span>&#123;</span><br><span class="line">       <span class="built_in">super</span>(message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221106155650159.png" alt="image-20221106155650159"></p>
<p>处理业务异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 异常处理方法</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line"> <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span>&#123;</span><br><span class="line">     log.error(ex.getMessage());</span><br><span class="line">     <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221106155708529.png" alt="image-20221106155708529"></p>
<p>定义删除方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.service;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Category;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.common.CustomException;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Category;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Setmeal;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.CategoryMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.DishService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.SetmealService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除分类，删除之前需要进行判断</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//查询当前分类是否关联了菜品，如果已经关联，抛出一个异常</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加查询条件，根据分类id进行查询</span></span><br><span class="line">        dishLambdaQueryWrapper.eq(Dish::getCategoryId,id);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (count1&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//已经关联菜品，抛出一个业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了菜品，不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查询当前分是否关联了套餐，如果已经关联，抛出一个异常</span></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加查询条件，根据分类id进行查询</span></span><br><span class="line">        setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId,id);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> setmealService.count(setmealLambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (count2&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//已经关联套餐，抛出一个业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了套餐，不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//正常删除分类</span></span><br><span class="line">        <span class="built_in">super</span>.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>调用删除方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据id删除分类</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@DeleteMapping</span></span><br><span class="line">  <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">      log.info(<span class="string">&quot;删除分类，id为：&#123;&#125;&quot;</span>,id);</span><br><span class="line">      categoryService.remove(id);</span><br><span class="line">      <span class="keyword">return</span> R.success(<span class="string">&quot;分类信息删除成功&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改分类"><a href="#修改分类" class="headerlink" title="修改分类"></a>修改分类</h2><h3 id="需求分析-9"><a href="#需求分析-9" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221106160040285.png" alt="image-20221106160040285"></p>
<h3 id="代码开发-9"><a href="#代码开发-9" class="headerlink" title="代码开发"></a>代码开发</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据id修改分类信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@PutMapping</span></span><br><span class="line"> <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">     log.info(<span class="string">&quot;修改分类信息：&#123;&#125;&quot;</span>,category);</span><br><span class="line">     categoryService.updateById(category);</span><br><span class="line">     <span class="keyword">return</span> R.success(<span class="string">&quot;修改分类信息成功&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-菜品管理业务开发"><a href="#4-菜品管理业务开发" class="headerlink" title="4.菜品管理业务开发"></a>4.菜品管理业务开发</h1><p>  <img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221106162407984.png" alt="image-20221106162407984"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221106181217021.png" alt="image-20221106181217021"></p>
<h2 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h2><h3 id="文件上传介绍"><a href="#文件上传介绍" class="headerlink" title="文件上传介绍"></a>文件上传介绍</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221106204412870.png" alt="image-20221106204412870"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221106204518698.png" alt="image-20221106204518698"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221106204553132.png" alt="image-20221106204553132"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String basePath;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">        <span class="comment">//file文件是一个临时文件，需要转存在指定位置，否则本次请求完成后临时文件会删除</span></span><br><span class="line">        log.info(file.toString());</span><br><span class="line">        <span class="comment">//原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFileName</span> <span class="operator">=</span>file.getOriginalFilename();<span class="comment">//abc.jpg</span></span><br><span class="line">        String suffix=originalFileName.substring(originalFileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用UUID重新生成文件名，防止文件名称重复造成文件覆盖</span></span><br><span class="line">        String fileName= UUID.randomUUID().toString()+suffix;<span class="comment">//dfdsfds.jpg</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个目录对象</span></span><br><span class="line">        File dir=<span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists())&#123;</span><br><span class="line">            <span class="comment">//目录不存在，需要创建</span></span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将临时文件转存到指定位置</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath+fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="文件下载介绍"><a href="#文件下载介绍" class="headerlink" title="文件下载介绍"></a>文件下载介绍</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221106204733897.png" alt="image-20221106204733897"></p>
<h3 id="文件上传代码实现"><a href="#文件上传代码实现" class="headerlink" title="文件上传代码实现"></a>文件上传代码实现</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221106204903990.png" alt="image-20221106204903990"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221106205122339.png" alt="image-20221106205122339"></p>
<h2 id="文件下载代码实现"><a href="#文件下载代码实现" class="headerlink" title="文件下载代码实现"></a>文件下载代码实现</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221107103725180.png" alt="image-20221107103725180"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//输入流，通过输入流读取文件内容</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + name));</span><br><span class="line">            <span class="comment">//输出流，通过输出流将文件写回浏览器在浏览器展示图片</span></span><br><span class="line">            <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">            response.setContentType(<span class="string">&quot;image/jpge&quot;</span>);</span><br><span class="line">            <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>((len=fileInputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            outputStream.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h2><h3 id="需求分析-10"><a href="#需求分析-10" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221107110235693.png" alt="image-20221107110235693"></p>
<h3 id="数据模型-2"><a href="#数据模型-2" class="headerlink" title="数据模型"></a>数据模型</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221107110304274.png" alt="image-20221107110304274"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221107110353525.png" alt="image-20221107110353525"></p>
<h3 id="代码开发-10"><a href="#代码开发-10" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221107110624649.png" alt="image-20221107110624649"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221107111050099.png" alt="image-20221107111050099"></p>
<p>编写菜品分类查询列表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据条件查询分类数据2</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> R&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span>&#123;</span><br><span class="line">     <span class="comment">//条件构造器</span></span><br><span class="line">     LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">     <span class="comment">//添加条件</span></span><br><span class="line">     queryWrapper.eq(category.getType()!=<span class="literal">null</span>,Category::getType,category.getType());</span><br><span class="line">     <span class="comment">//添加排序条件</span></span><br><span class="line">     queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line"></span><br><span class="line">     List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line">     <span class="keyword">return</span> R.success(list);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p> <img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221107115053805.png" alt="image-20221107115053805"></p>
<p>编写菜品以及其口味保存方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.dto.DishDto;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.DishFlavor;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.DishMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.DishFlavorService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.DishService;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 菜品管理 服务实现类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 威少</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-11-05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper, Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span>  DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增菜品的同时保存对应的口味数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">//保存菜品的基本信息到菜品表</span></span><br><span class="line">        <span class="built_in">this</span>.save(dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();<span class="comment">//菜品</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//菜品口味</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        flavors = flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">            item.setDishId(dishId);</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存菜品口味数据到菜品口味表dish_flavors</span></span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>springboot开启事务支持</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221107140352624.png" alt="image-20221107140352624"></p>
<p>controller层调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">    log.info(dishDto.toString());</span><br><span class="line">    dishService.saveWithFlavor(dishDto);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="菜品分页查询"><a href="#菜品分页查询" class="headerlink" title="菜品分页查询"></a>菜品分页查询</h2><h3 id="需求分析-11"><a href="#需求分析-11" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221107140536800.png" alt="image-20221107140536800"></p>
<h3 id="代码开发-11"><a href="#代码开发-11" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221107140622474.png" alt="image-20221107140622474"></p>
<p> 编写分页查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询菜品信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span>&#123;</span><br><span class="line">    <span class="comment">//构造分页构造器对象</span></span><br><span class="line">    Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    Page&lt;DishDto&gt; dishDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加过滤条件</span></span><br><span class="line">    queryWrapper.like(name!=<span class="literal">null</span>,Dish::getName,name);</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line">    <span class="comment">//执行分页查询</span></span><br><span class="line">    dishService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="comment">//对象拷贝</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo,dishDtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line">    List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line">    List&lt;DishDto&gt; collect = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item, dishDto);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();<span class="comment">//分类id</span></span><br><span class="line">        <span class="comment">//根据分类id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    dishDtoPage.setRecords(collect);</span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改菜品"><a href="#修改菜品" class="headerlink" title="修改菜品"></a>修改菜品</h2><h3 id="需求分析-12"><a href="#需求分析-12" class="headerlink" title="需求分析"></a>需求分析</h3><p>  <img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221107161751308.png" alt="image-20221107161751308"></p>
<h3 id="代码开发-12"><a href="#代码开发-12" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221107162023429.png" alt="image-20221107162023429"></p>
<p>编写菜品信息回显代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line"></span><br><span class="line">     DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询菜品信息对应的口味信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//查询菜品基本信息，从dish表查询</span></span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">    BeanUtils.copyProperties(dish,dishDto);</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(DishFlavor::getDishId,dish.getId());</span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishFlavorService.list(queryWrapper);</span><br><span class="line">    dishDto.setFlavors(flavors);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dishDto;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller层调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询菜品信息和对应的口味信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;DishDto&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">byIdWithFlavor</span> <span class="operator">=</span> dishService.getByIdWithFlavor(id);</span><br><span class="line">    <span class="keyword">return</span> R.success(byIdWithFlavor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>演示</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221107164923137.png" alt="image-20221107164923137"></p>
<p>正常回显</p>
<p>编写更新方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">//更新dish表信息</span></span><br><span class="line">        <span class="built_in">this</span>.updateById(dishDto);</span><br><span class="line">        <span class="comment">//清理当前菜品对应口味数据--dish_flavor标的delete操作</span></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId,dishDto.getId());</span><br><span class="line"></span><br><span class="line">        dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加当前提交过来的口味数据--dish_flavor表的inster操作</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        List&lt;DishFlavor&gt; collect = flavors.stream().map(flavor -&gt; &#123;</span><br><span class="line">            flavor.setDishId(dishDto.getId());</span><br><span class="line">            <span class="keyword">return</span> flavor;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        dishFlavorService.saveBatch(collect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>controller层调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 修改菜品</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@PutMapping</span></span><br><span class="line"> <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">     log.info(dishDto.toString());</span><br><span class="line"></span><br><span class="line">     dishService.updateWithFlavor(dishDto);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除菜品"><a href="#删除菜品" class="headerlink" title="删除菜品"></a>删除菜品</h2><p>DishController.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 删除菜品</span><br><span class="line"> * @param ids</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@DeleteMapping</span><br><span class="line">public R&lt;String&gt; delete(String ids)&#123;</span><br><span class="line">    dishService.deleteWithFlavor(ids);</span><br><span class="line">    return R.success(&quot;删除成功&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>DishService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteWithFlavor</span><span class="params">(String ids)</span>;</span><br></pre></td></tr></table></figure>

<p>DishServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteWithFlavor</span><span class="params">(String ids)</span> &#123;</span><br><span class="line">    List&lt;String&gt; stringList= Arrays.asList(ids.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">    stringList.forEach(item-&gt;&#123;</span><br><span class="line">        Long id=Long.parseLong(item);</span><br><span class="line">        <span class="comment">//删除菜品</span></span><br><span class="line">        <span class="built_in">this</span>.removeById(id);</span><br><span class="line">        <span class="comment">//删除口味</span></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId,id);</span><br><span class="line">        dishFlavorService.remove(queryWrapper);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-套餐管理业务开发"><a href="#5-套餐管理业务开发" class="headerlink" title="5.套餐管理业务开发"></a>5.套餐管理业务开发</h1><h2 id="效果展示-2"><a href="#效果展示-2" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221108160229477.png" alt="image-20221108160229477"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221108160138452.png" alt="image-20221108160138452"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221108160204854.png" alt="image-20221108160204854"></p>
<h2 id="新增套餐"><a href="#新增套餐" class="headerlink" title="新增套餐"></a>新增套餐</h2><h3 id="需求分析-13"><a href="#需求分析-13" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221108160411804.png" alt="image-20221108160411804"></p>
<h3 id="数据模型-3"><a href="#数据模型-3" class="headerlink" title="数据模型"></a>数据模型</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221108160445169.png" alt="image-20221108160445169"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221108160516755.png" alt="image-20221108160516755"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221108160613679.png" alt="image-20221108160613679"></p>
<h3 id="开发工作"><a href="#开发工作" class="headerlink" title="开发工作"></a>开发工作</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221108160628295.png" alt="image-20221108160628295"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221108171529341.png" alt="image-20221108171529341"></p>
<p>完成根据菜品分类获取对应菜品数据的接口</p>
<p><strong>DishController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件查询对应的菜品数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dish</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Dish&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line">    <span class="comment">//构造查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId()!=<span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">    <span class="comment">//添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完成套餐表单提交接口</p>
<p>编写保存方法</p>
<p><strong>setmealService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">       <span class="comment">//保存套餐的基本信息，操作setmeal，执行insert操作</span></span><br><span class="line">       <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line"></span><br><span class="line">       List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">       setmealDishes.stream().map(setmealDish -&gt; &#123;</span><br><span class="line">           setmealDish.setSetmealId(setmealDto.getId());</span><br><span class="line">           <span class="keyword">return</span> setmealDish;</span><br><span class="line">       &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">       <span class="comment">//保存套餐和菜品的关联信息，操作setmeal_dish,执行insert操作</span></span><br><span class="line">       setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 新增套餐</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@PostMapping()</span></span><br><span class="line"> <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span> <span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">     log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>,setmealDto);</span><br><span class="line">     setmealService.saveWithDish(setmealDto);</span><br><span class="line">     <span class="keyword">return</span> R.success(<span class="string">&quot;新增套餐成功&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="套餐信息分页查询"><a href="#套餐信息分页查询" class="headerlink" title="套餐信息分页查询"></a>套餐信息分页查询</h2><h3 id="需求分析-14"><a href="#需求分析-14" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221108175546635.png" alt="image-20221108175546635"></p>
<h3 id="代码开发-13"><a href="#代码开发-13" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221108175656941.png" alt="image-20221108175656941"></p>
<p>编写分页接口</p>
<p><strong>SetmealController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 套餐分页查询</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//分页构造器</span></span><br><span class="line">       Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">       Page&lt;SetmealDto&gt; dtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;SetmealDto&gt;();</span><br><span class="line">       LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//添加查询条件，根据name进行like模糊查询</span></span><br><span class="line">       queryWrapper.like(name!=<span class="literal">null</span>,Setmeal::getName,name);</span><br><span class="line">       <span class="comment">//添加查询条件，根据更新时间降序排列</span></span><br><span class="line">       queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line">       setmealService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//对象的拷贝</span></span><br><span class="line">       BeanUtils.copyProperties(pageInfo,dtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line">       List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line">       List&lt;SetmealDto&gt; collect = records.stream().map(item -&gt; &#123;</span><br><span class="line">           <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">           <span class="comment">//对象拷贝</span></span><br><span class="line">           BeanUtils.copyProperties(item, setmealDto);</span><br><span class="line">           <span class="comment">//分类id</span></span><br><span class="line">           <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">           <span class="comment">//根据分类id查询分类对象</span></span><br><span class="line">           <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">           <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="comment">//分类名称</span></span><br><span class="line">               <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">               setmealDto.setCategoryName(categoryName);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> setmealDto;</span><br><span class="line">       &#125;).collect(Collectors.toList());</span><br><span class="line">       dtoPage.setRecords(collect);</span><br><span class="line">       <span class="keyword">return</span> R.success(dtoPage);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除套餐"><a href="#删除套餐" class="headerlink" title="删除套餐"></a>删除套餐</h2><h3 id="需求分析-15"><a href="#需求分析-15" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221108213145244.png" alt="image-20221108213145244"></p>
<h3 id="代码开发-14"><a href="#代码开发-14" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221108213213278.png" alt="image-20221108213213278"></p>
<p><strong>SetmealService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line"></span><br><span class="line">       LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.in(Setmeal::getId,ids);</span><br><span class="line">       queryWrapper.eq(Setmeal::getStatus,<span class="number">1</span>);</span><br><span class="line">       <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.count(queryWrapper);</span><br><span class="line">       <span class="keyword">if</span> (count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;套餐正在售卖中，不能删除&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//如果可以删，先删除套餐表中的数据---setmeal</span></span><br><span class="line">       <span class="built_in">this</span>.removeByIds(ids);</span><br><span class="line"></span><br><span class="line">       LambdaQueryWrapper&lt;SetmealDish&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       lambdaQueryWrapper.in(SetmealDish::getSetmealId,ids);</span><br><span class="line">       <span class="comment">//删除关系表中的数据----setmeak——dish</span></span><br><span class="line">       setmealDishService.remove(lambdaQueryWrapper);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;ids:&#123;&#125;&quot;</span>,ids);</span><br><span class="line">        setmealService.removeWithDish(ids);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;套餐数据删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="更新套餐"><a href="#更新套餐" class="headerlink" title="更新套餐"></a>更新套餐</h2><p><strong>编写获取详情接口</strong></p>
<p><strong>SetmealController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;SetmealDto&gt; <span class="title function_">getDetail</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span>&#123;</span><br><span class="line">    log.info(id);</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">byId</span> <span class="operator">=</span> setmealService.getById(id);</span><br><span class="line">    <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">    BeanUtils.copyProperties(byId,setmealDto);</span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(SetmealDish::getSetmealId,id);</span><br><span class="line">    List&lt;SetmealDish&gt; list = setmealDishService.list(queryWrapper);</span><br><span class="line">    setmealDto.setSetmealDishes(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(setmealDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编写更新接口</strong></p>
<p><strong>SetmealService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateWithDish</span><span class="params">(SetmealDto setmealDto)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">    <span class="comment">//保存套餐的基本信息，操作setmeal，执行update操作</span></span><br><span class="line">    <span class="built_in">this</span>.updateById(setmealDto);</span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    setmealDishes.stream().map(setmealDish -&gt; &#123;</span><br><span class="line">        setmealDish.setSetmealId(setmealDto.getId());</span><br><span class="line">        <span class="keyword">return</span> setmealDish;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除旧的关联系信息</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(SetmealDish::getSetmealId,setmealDto.getId());</span><br><span class="line">    setmealDishService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存套餐和菜品的关联信息，操作setmeal_dish,执行insert操作</span></span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping()</span></span><br><span class="line"> <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">     log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>,setmealDto);</span><br><span class="line">     setmealService.updateWithDish(setmealDto);</span><br><span class="line">     <span class="keyword">return</span> R.success(<span class="string">&quot;更新套餐成功&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="更新套餐状态"><a href="#更新套餐状态" class="headerlink" title="更新套餐状态"></a>更新套餐状态</h2><p>编写更新状态接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable</span> Integer status,<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">     List&lt;Setmeal&gt; collect = ids.stream().map(item -&gt; &#123;</span><br><span class="line">         <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Setmeal</span>();</span><br><span class="line">         setmeal.setStatus(status);</span><br><span class="line">         setmeal.setId(item);</span><br><span class="line">         <span class="keyword">return</span> setmeal;</span><br><span class="line">     &#125;).collect(Collectors.toList());</span><br><span class="line">     setmealService.updateBatchById(collect);</span><br><span class="line">     <span class="keyword">return</span> R.success(<span class="string">&quot;状态更新成功&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-手机验证码登录"><a href="#6-手机验证码登录" class="headerlink" title="6.手机验证码登录"></a>6.手机验证码登录</h1><h2 id="效果展示-3"><a href="#效果展示-3" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109162126441.png" alt="image-20221109162126441"></p>
<h2 id="短信服务介绍"><a href="#短信服务介绍" class="headerlink" title="短信服务介绍"></a>短信服务介绍</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109162237927.png" alt="image-20221109162237927"></p>
<h2 id="阿里云短信服务"><a href="#阿里云短信服务" class="headerlink" title="阿里云短信服务"></a>阿里云短信服务</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109163025134.png" alt="image-20221109163025134"></p>
<h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109163237187.png" alt="image-20221109163237187"></p>
<h3 id="设置短信签名"><a href="#设置短信签名" class="headerlink" title="设置短信签名"></a>设置短信签名</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109163629269.png" alt="image-20221109163629269"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109164842912.png" alt="image-20221109164842912"></p>
<p>完成申请后，等待审核</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109165203932.png" alt="image-20221109165203932"></p>
<p><strong>审核无法通过 可以采用测试api</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111130617488.png" alt="image-20221111130617488"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111130732697.png" alt="image-20221111130732697"></p>
<p>赠送了一个模板</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109165250598.png" alt="image-20221109165250598"></p>
<h3 id="设置AccessKey"><a href="#设置AccessKey" class="headerlink" title="设置AccessKey"></a>设置AccessKey</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109164059519.png" alt="image-20221109164059519"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109165333823.png" alt="image-20221109165333823"></p>
<p><strong>注意：accesskeyid 和secret需要及时保存，secret只会出现一次，也可以重新创建accesskey</strong></p>
<p><strong>编辑accesskey对应的权限</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109164543334.png" alt="image-20221109164543334"></p>
<h3 id="代码开发-15"><a href="#代码开发-15" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109213053688.png" alt="image-20221109213053688"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109213107072.png" alt="image-20221109213107072"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109213129606.png" alt="image-20221109213129606"></p>
<h2 id="需求分析-16"><a href="#需求分析-16" class="headerlink" title="需求分析"></a>需求分析</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109213532440.png" alt="image-20221109213532440"></p>
<h2 id="数据模型-4"><a href="#数据模型-4" class="headerlink" title="数据模型"></a>数据模型</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109213721665.png" alt="image-20221109213721665"></p>
<h2 id="代码开发-16"><a href="#代码开发-16" class="headerlink" title="代码开发"></a>代码开发</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109213837227.png" alt="image-20221109213837227"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109214006572.png" alt="image-20221109214006572"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221109215240468.png" alt="image-20221109215240468"></p>
<p><strong>编写短信发送接口</strong></p>
<p><strong>UserController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession httpSession)</span>&#123;</span><br><span class="line">     <span class="comment">//获取手机号</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">     <span class="keyword">if</span> (StringUtils.isNotBlank(phone))&#123;</span><br><span class="line">         <span class="comment">//生成随机的4位验证码</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> ValidateCodeUtils.generateValidateCode(<span class="number">4</span>).toString();</span><br><span class="line">         log.info(<span class="string">&quot;code=&#123;&#125;&quot;</span>,code);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//调用阿里云提供的短信服务测试API完成发送短信</span></span><br><span class="line">         SMSUtils.sendMessage(<span class="string">&quot;阿里云短信测试&quot;</span>,<span class="string">&quot;SMS_154950909&quot;</span>,phone,code);</span><br><span class="line">         <span class="comment">//需要将生成的验证码保存到Session中</span></span><br><span class="line">         httpSession.setAttribute(phone,code);</span><br><span class="line">         <span class="keyword">return</span> R.success(<span class="string">&quot;手机验证码短信发送成功&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> R.error(<span class="string">&quot;短信发送失败&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111131320292.png" alt="image-20221111131320292"></p>
<p><strong>编写登录接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 移动端用户登录</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> httpSession</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;Object&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession httpSession)</span>&#123;</span><br><span class="line">     log.info(map.toString());</span><br><span class="line">       <span class="comment">//获取手机</span></span><br><span class="line">       String phone=map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">       <span class="comment">//获取验证码</span></span><br><span class="line">       String code=map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">       <span class="comment">//从session中获取保存的验证码</span></span><br><span class="line">       <span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> httpSession.getAttribute(phone);</span><br><span class="line">       <span class="comment">//进行验证码的比对（页面提交的验证码和session中保存的验证码比对）</span></span><br><span class="line">       <span class="keyword">if</span> (codeInSession!=<span class="literal">null</span>&amp;&amp;codeInSession.equals(code))&#123;</span><br><span class="line">           <span class="comment">//如果能够比对成功，说明登陆成功</span></span><br><span class="line">           LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">           queryWrapper.eq(User::getPhone,phone);</span><br><span class="line">           <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">           <span class="comment">//判断当前手机号对应的用户是否为新用户，如果是新用户就自动完成注册</span></span><br><span class="line">           <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;</span><br><span class="line">               user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">               user.setPhone(phone);</span><br><span class="line">               user.setStatus(<span class="number">1</span>);</span><br><span class="line">               userService.save(user);</span><br><span class="line">           &#125;</span><br><span class="line">           httpSession.setAttribute(<span class="string">&quot;user&quot;</span>,user.getId());</span><br><span class="line">           <span class="keyword">return</span> R.success(user);</span><br><span class="line">       &#125;</span><br><span class="line">     <span class="keyword">return</span> R.error(<span class="string">&quot;登陆成功失败&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-菜品展示、购物车、下单"><a href="#7-菜品展示、购物车、下单" class="headerlink" title="7.菜品展示、购物车、下单"></a>7.菜品展示、购物车、下单</h1><h2 id="效果展示-4"><a href="#效果展示-4" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111145007769.png" alt="image-20221111145007769"></p>
<h2 id="导入用户地址簿相关功能代码"><a href="#导入用户地址簿相关功能代码" class="headerlink" title="导入用户地址簿相关功能代码"></a>导入用户地址簿相关功能代码</h2><h3 id="需求分析-17"><a href="#需求分析-17" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111145244062.png" alt="image-20221111145244062"></p>
<h3 id="数据模型-5"><a href="#数据模型-5" class="headerlink" title="数据模型"></a>数据模型</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111145300709.png" alt="image-20221111145300709"></p>
<h3 id="导入功能代码"><a href="#导入功能代码" class="headerlink" title="导入功能代码"></a>导入功能代码</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111145829438.png" alt="image-20221111145829438"></p>
<p>controller层直接导入</p>
<p>测试效果</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111161623862.png" alt="image-20221111161623862"></p>
<h2 id="菜品展示"><a href="#菜品展示" class="headerlink" title="菜品展示"></a>菜品展示</h2><h3 id="需求分析-18"><a href="#需求分析-18" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111160255868.png" alt="image-20221111160255868"></p>
<h3 id="代码开发-梳理交互过程"><a href="#代码开发-梳理交互过程" class="headerlink" title="代码开发-梳理交互过程"></a>代码开发-梳理交互过程</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111160415240.png" alt="image-20221111160415240"></p>
<h3 id="代码开发-17"><a href="#代码开发-17" class="headerlink" title="代码开发"></a>代码开发</h3><p>修改<code>DishController.java</code>下的<code>/list</code>的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line">        <span class="comment">//构造查询条件</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(dish.getCategoryId()!=<span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">        <span class="comment">//添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">        queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//添加排序条件</span></span><br><span class="line">        queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;DishDto&gt; collect = list.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            BeanUtils.copyProperties(item, dishDto);</span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();<span class="comment">//分类id</span></span><br><span class="line">            <span class="comment">//根据分类id查询分类对象</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                dishDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前菜品的id</span></span><br><span class="line">            Long dishId=item.getId();</span><br><span class="line">            LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            queryWrapper1.eq(DishFlavor::getDishId,dishId);</span><br><span class="line">            List&lt;DishFlavor&gt; list1 = dishFlavorService.list(queryWrapper1);</span><br><span class="line">            dishDto.setFlavors(list1);</span><br><span class="line">            <span class="keyword">return</span> dishDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> R.success(collect);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111162703131.png" alt="image-20221111162703131"></p>
<p>编写根据套餐获取菜品信息接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件查询套餐数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmeal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId()!=<span class="literal">null</span>,Setmeal::getCategoryId,setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus()!=<span class="literal">null</span>,Setmeal::getStatus,setmeal.getStatus());</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111163730915.png" alt="image-20221111163730915"></p>
<h2 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h2><h3 id="需求分析-19"><a href="#需求分析-19" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111163844080.png" alt="image-20221111163844080"></p>
<h3 id="数据模型-6"><a href="#数据模型-6" class="headerlink" title="数据模型"></a>数据模型</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111164001731.png" alt="image-20221111164001731"></p>
<h3 id="代码开发-梳理交互过程-1"><a href="#代码开发-梳理交互过程-1" class="headerlink" title="代码开发-梳理交互过程"></a>代码开发-梳理交互过程</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111164155684.png" alt="image-20221111164155684"></p>
<h3 id="代码开发-准备工作"><a href="#代码开发-准备工作" class="headerlink" title="代码开发-准备工作"></a>代码开发-准备工作</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111164549451.png" alt="image-20221111164549451"></p>
<p><strong>接口1：购物车新增</strong></p>
<p><strong>ShoppingCartController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;购物车数据：&#123;&#125;&quot;</span>,shoppingCart);</span><br><span class="line">        <span class="comment">//设置用户id，指定当前是哪个用户的购物车数据</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        shoppingCart.setUserId(currentId);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(ShoppingCart::getUserId,currentId);</span><br><span class="line">        <span class="keyword">if</span> (dishId!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//添加到购物车的是菜品</span></span><br><span class="line">            queryWrapper.eq(ShoppingCart::getDishId,dishId);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//添加到购物车的是套餐</span></span><br><span class="line">            queryWrapper.eq(ShoppingCart::getSetmealId,shoppingCart.getSetmealId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查询当前菜品或者套餐是否在购物车中</span></span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">cartServiceOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cartServiceOne!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果已经存在，就在原来数量基础上加一</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> cartServiceOne.getNumber();</span><br><span class="line">            cartServiceOne.setNumber(number+<span class="number">1</span>);</span><br><span class="line">            shoppingCartService.updateById(cartServiceOne);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果不存在，则添加到购物车数量默认就是一</span></span><br><span class="line">            shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">            shoppingCartService.save(shoppingCart);</span><br><span class="line">            cartServiceOne=shoppingCart;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(cartServiceOne);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>接口2：获取购物车列表</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">       log.info(<span class="string">&quot;查看购物车...&quot;</span>);</span><br><span class="line">       LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());</span><br><span class="line">       queryWrapper.orderByAsc(ShoppingCart::getCreateTime);</span><br><span class="line">       List&lt;ShoppingCart&gt; list = shoppingCartService.list(queryWrapper);</span><br><span class="line">       <span class="keyword">return</span> R.success(list);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>接口3：清空购物车</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 清空购物车</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">clean</span><span class="params">()</span>&#123;</span><br><span class="line">       LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());</span><br><span class="line">       shoppingCartService.remove(queryWrapper);</span><br><span class="line">       <span class="keyword">return</span> R.success(<span class="string">&quot;清空成功！&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>接口4：购物车商品减数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车减数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/sub&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sub</span><span class="params">(<span class="meta">@RequestBody</span> Map map)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (map.get(<span class="string">&quot;dishId&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">        queryWrapper.eq(ShoppingCart::getDishId,map.get(<span class="string">&quot;dishId&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        queryWrapper.eq(ShoppingCart::getDishId,map.get(<span class="string">&quot;setmealId&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());</span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">cartServiceOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span> (cartServiceOne.getNumber()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        cartServiceOne.setNumber(cartServiceOne.getNumber()-<span class="number">1</span>);</span><br><span class="line">        shoppingCartService.updateById(cartServiceOne);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        shoppingCartService.removeById(cartServiceOne);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;减数成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="用户下单"><a href="#用户下单" class="headerlink" title="用户下单"></a>用户下单</h2><h3 id="需求分析-20"><a href="#需求分析-20" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111203151150.png" alt="image-20221111203151150"></p>
<h3 id="数据模型-7"><a href="#数据模型-7" class="headerlink" title="数据模型"></a>数据模型</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111203420431.png" alt="image-20221111203420431"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111203456363.png" alt="image-20221111203456363"></p>
<p> <img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111205745436.png" alt="image-20221111205745436"></p>
<h3 id="代码开发-梳理交互过程-2"><a href="#代码开发-梳理交互过程-2" class="headerlink" title="代码开发-梳理交互过程"></a>代码开发-梳理交互过程</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111205825918.png" alt="image-20221111205825918"></p>
<h3 id="代码开发-准备工作-1"><a href="#代码开发-准备工作-1" class="headerlink" title="代码开发-准备工作"></a>代码开发-准备工作</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221111210238470.png" alt="image-20221111210238470"></p>
<p><strong>接口1：下单接口</strong></p>
<p><strong>OrdersService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 订单表 服务类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 威少</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-11-11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrdersService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Orders&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>OrdersServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 订单表 服务实现类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 威少</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-11-11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrdersServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrdersMapper, Orders&gt; <span class="keyword">implements</span> <span class="title class_">OrdersService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressBookService addressBookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDetailService orderDetailService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span> &#123;</span><br><span class="line">        <span class="comment">//获得当前用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询当前用户的购物车数据</span></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(ShoppingCart::getUserId,userId);</span><br><span class="line">        List&lt;ShoppingCart&gt; shoppingCarts = shoppingCartService.list(wrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(shoppingCarts == <span class="literal">null</span> || shoppingCarts.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;购物车为空，不能下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询用户数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询地址数据</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">addressBookId</span> <span class="operator">=</span> orders.getAddressBookId();</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(addressBookId);</span><br><span class="line">        <span class="keyword">if</span>(addressBook == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;用户地址信息有误，不能下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> IdWorker.getId();<span class="comment">//订单号</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;OrderDetail&gt; orderDetails = shoppingCarts.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="type">OrderDetail</span> <span class="variable">orderDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetail</span>();</span><br><span class="line">            orderDetail.setOrderId(orderId);</span><br><span class="line">            orderDetail.setNumber(item.getNumber());</span><br><span class="line">            orderDetail.setDishFlavor(item.getDishFlavor());</span><br><span class="line">            orderDetail.setDishId(item.getDishId());</span><br><span class="line">            orderDetail.setSetmealId(item.getSetmealId());</span><br><span class="line">            orderDetail.setName(item.getName());</span><br><span class="line">            orderDetail.setImage(item.getImage());</span><br><span class="line">            orderDetail.setAmount(item.getAmount());</span><br><span class="line">            amount.addAndGet(item.getAmount().multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(item.getNumber())).intValue());</span><br><span class="line">            <span class="keyword">return</span> orderDetail;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        orders.setId(orderId);</span><br><span class="line">        orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">        orders.setCheckoutTime(LocalDateTime.now());</span><br><span class="line">        orders.setStatus(<span class="number">2</span>);</span><br><span class="line">        orders.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(amount.get()));<span class="comment">//总金额</span></span><br><span class="line">        orders.setUserId(userId);</span><br><span class="line">        orders.setNumber(String.valueOf(orderId));</span><br><span class="line">        orders.setUserName(user.getName());</span><br><span class="line">        orders.setConsignee(addressBook.getConsignee());</span><br><span class="line">        orders.setPhone(addressBook.getPhone());</span><br><span class="line">        orders.setAddress((addressBook.getProvinceName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getProvinceName())</span><br><span class="line">                + (addressBook.getCityName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getCityName())</span><br><span class="line">                + (addressBook.getDistrictName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDistrictName())</span><br><span class="line">                + (addressBook.getDetail() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDetail()));</span><br><span class="line">        <span class="comment">//向订单表插入数据，一条数据</span></span><br><span class="line">        <span class="built_in">this</span>.save(orders);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向订单明细表插入数据，多条数据</span></span><br><span class="line">        orderDetailService.saveBatch(orderDetails);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空购物车数据</span></span><br><span class="line">        shoppingCartService.remove(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>OrdersController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 订单表 前端控制器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 威少</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-11-11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrdersController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrdersService ordersService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">submit</span><span class="params">(<span class="meta">@RequestBody</span> Orders orders)</span>&#123;</span><br><span class="line">      log.info(<span class="string">&quot;订单数据：&#123;&#125;&quot;</span>,orders);</span><br><span class="line">      ordersService.submit(orders);</span><br><span class="line">      <span class="keyword">return</span> R.success(<span class="string">&quot;下单成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分页查询历史订单"><a href="#分页查询历史订单" class="headerlink" title="分页查询历史订单"></a>分页查询历史订单</h2><p><strong>OrdersController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/userPage&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> R&lt;Page&lt;OrderDto&gt;&gt; <span class="title function_">userPage</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line"></span><br><span class="line">     Page&lt;Orders&gt; ordersPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line"></span><br><span class="line">     LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     queryWrapper.eq(Orders::getUserId, BaseContext.getCurrentId());</span><br><span class="line"></span><br><span class="line">     Page&lt;Orders&gt; ordersPage1 = ordersService.page(ordersPage, queryWrapper);</span><br><span class="line">     List &lt;Orders&gt; ordersList=ordersPage1.getRecords();</span><br><span class="line">     Page&lt;OrderDto&gt; objectPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">     BeanUtils.copyProperties(ordersPage1,objectPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">     List&lt;OrderDto&gt; collect = ordersList.stream().map(item -&gt; &#123;</span><br><span class="line">         <span class="type">OrderDto</span> <span class="variable">orderDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDto</span>();</span><br><span class="line">         BeanUtils.copyProperties(item, orderDto);</span><br><span class="line">         LambdaQueryWrapper&lt;OrderDetail&gt; orderDetailLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">         orderDetailLambdaQueryWrapper.eq(OrderDetail::getOrderId, item.getId());</span><br><span class="line">         List&lt;OrderDetail&gt; list = orderDetailService.list(orderDetailLambdaQueryWrapper);</span><br><span class="line">         orderDto.setOrderDetails(list);</span><br><span class="line">         orderDto.setSumNum(list.size());</span><br><span class="line">         <span class="keyword">return</span> orderDto;</span><br><span class="line">     &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">     objectPage.setRecords(collect);</span><br><span class="line">     <span class="keyword">return</span> R.success(objectPage);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-订单明细模块"><a href="#8-订单明细模块" class="headerlink" title="8.订单明细模块"></a>8.订单明细模块</h1><p><strong>接口1.分页查询订单</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, Long number, String beginTime, String endTime)</span>&#123;</span><br><span class="line">    Page&lt;Orders&gt; ordersPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(number!=<span class="literal">null</span>,Orders::getNumber,number);</span><br><span class="line">    queryWrapper.between(beginTime!=<span class="literal">null</span>&amp;&amp;endTime!=<span class="literal">null</span>,Orders::getOrderTime,beginTime,endTime);</span><br><span class="line">    queryWrapper.orderByDesc(Orders::getOrderTime);</span><br><span class="line">    Page&lt;Orders&gt; page1 = ordersService.page(ordersPage, queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(page1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>接口2.更新订单信息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"> <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">put</span><span class="params">(<span class="meta">@RequestBody</span> Orders orders)</span>&#123;</span><br><span class="line">     <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> ordersService.updateById(orders);</span><br><span class="line">     <span class="keyword">return</span> R.success(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-缓存优化"><a href="#9-缓存优化" class="headerlink" title="9.缓存优化"></a>9.缓存优化</h1><h2 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112161034671.png" alt="image-20221112161034671"></p>
<h2 id="使用git管理项目"><a href="#使用git管理项目" class="headerlink" title="使用git管理项目"></a>使用git管理项目</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112161455301.png" alt="image-20221112161455301"></p>
<h3 id="将项目纳入到仓库管理"><a href="#将项目纳入到仓库管理" class="headerlink" title="将项目纳入到仓库管理"></a>将项目纳入到仓库管理</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112161739606.png" alt="image-20221112161739606"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112221206876.png" alt="image-20221112221206876"></p>
<h3 id="添加gitignore文件"><a href="#添加gitignore文件" class="headerlink" title="添加gitignore文件"></a>添加gitignore文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">.git</span></span><br><span class="line"><span class="attr">logs</span></span><br><span class="line"><span class="attr">rebel.xml</span></span><br><span class="line"><span class="attr">target/</span></span><br><span class="line"><span class="comment">!.mvn/wrapper/maven-wrapper.jar</span></span><br><span class="line"><span class="attr">log.path_IS_UNDEFINED</span></span><br><span class="line"><span class="attr">.DS_Store</span></span><br><span class="line"><span class="attr">offine_user.md</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### STS ###</span></span><br><span class="line"></span><br><span class="line"><span class="attr">.apt_generated</span></span><br><span class="line"><span class="attr">.classpath</span></span><br><span class="line"><span class="attr">.factorypath</span></span><br><span class="line"><span class="attr">.project</span></span><br><span class="line"><span class="attr">.settings</span></span><br><span class="line"><span class="attr">.springBeans</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### IntelliJ IDEA ###</span></span><br><span class="line"><span class="attr">.idea</span></span><br><span class="line"><span class="attr">*.iws</span></span><br><span class="line"><span class="attr">*.iml</span></span><br><span class="line"><span class="attr">*.ipr</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### NetBeans ###</span></span><br><span class="line"><span class="attr">nbproject/private/</span></span><br><span class="line"><span class="attr">build/</span></span><br><span class="line"><span class="attr">nbbuild/</span></span><br><span class="line"><span class="attr">dist/</span></span><br><span class="line"><span class="attr">nbdist/</span></span><br><span class="line"><span class="attr">.nb-gradle/</span></span><br><span class="line"><span class="attr">generatorConfig.xml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Add-项目"><a href="#Add-项目" class="headerlink" title="Add 项目"></a>Add 项目</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112213631389.png" alt="image-20221112213631389"></p>
<h3 id="commit项目"><a href="#commit项目" class="headerlink" title="commit项目"></a>commit项目</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112213928241.png" alt="image-20221112213928241"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112221527479.png" alt="image-20221112221527479"></p>
<h3 id="定义远程仓库"><a href="#定义远程仓库" class="headerlink" title="定义远程仓库"></a>定义远程仓库</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112214245134.png" alt="image-20221112214245134"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112214343762.png" alt="image-20221112214343762"></p>
<h3 id="推送项目至远程仓库"><a href="#推送项目至远程仓库" class="headerlink" title="推送项目至远程仓库"></a>推送项目至远程仓库</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112214427523.png" alt="image-20221112214427523"></p>
<p>如果.idea文件再ignore中添加了依旧备推送至仓库中，则打开控制台输入以下指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除.idea文件夹的git缓存  </span></span><br><span class="line">git <span class="built_in">rm</span> -r --cached .idea</span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git commit -m <span class="string">&#x27;delete .ides&#x27;</span></span><br><span class="line"><span class="comment"># 推送</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>刷新仓库会返现.idea文件夹消失了。</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112220534405.png" alt="image-20221112220534405"></p>
<h3 id="创建新的分支v1-0"><a href="#创建新的分支v1-0" class="headerlink" title="创建新的分支v1.0"></a>创建新的分支v1.0</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112215333162.png" alt="image-20221112215333162"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112215218228.png" alt="image-20221112215218228"></p>
<h3 id="推送分支v1-0"><a href="#推送分支v1-0" class="headerlink" title="推送分支v1.0"></a>推送分支v1.0</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112215518875.png" alt="image-20221112215518875"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221112220555785.png" alt="image-20221112220555785"></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="maven坐标"><a href="#maven坐标" class="headerlink" title="maven坐标"></a>maven坐标</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="填写redis配置文件"><a href="#填写redis配置文件" class="headerlink" title="填写redis配置文件"></a>填写redis配置文件</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113112341721.png" alt="image-20221113112341721"></p>
<h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//默认的key序列化器为：JdkSerializationRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span>  redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113113149743.png" alt="image-20221113113149743"></p>
<h2 id="缓存短信验证码"><a href="#缓存短信验证码" class="headerlink" title="缓存短信验证码"></a>缓存短信验证码</h2><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113113706047.png" alt="image-20221113113706047"></p>
<h3 id="代码改造"><a href="#代码改造" class="headerlink" title="代码改造"></a>代码改造</h3><h4 id="注入RedisTemplate"><a href="#注入RedisTemplate" class="headerlink" title="注入RedisTemplate"></a>注入RedisTemplate</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure>

<h4 id="修改短信发送接口"><a href="#修改短信发送接口" class="headerlink" title="修改短信发送接口"></a>修改短信发送接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession httpSession)</span>&#123;</span><br><span class="line">        <span class="comment">//获取手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(phone))&#123;</span><br><span class="line">            <span class="comment">//生成随机的4位验证码</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> ValidateCodeUtils.generateValidateCode(<span class="number">4</span>).toString();</span><br><span class="line">            log.info(<span class="string">&quot;code=&#123;&#125;&quot;</span>,code);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用阿里云提供的短信服务API完成发送短信</span></span><br><span class="line">            SMSUtils.sendMessage(<span class="string">&quot;阿里云短信测试&quot;</span>,<span class="string">&quot;SMS_154950909&quot;</span>,phone,code);</span><br><span class="line">            <span class="comment">//需要将生成的验证码保存到Session中</span></span><br><span class="line"><span class="comment">//            httpSession.setAttribute(phone,code);</span></span><br><span class="line">            <span class="comment">//将生成的验证码缓存到redis中,并且设置有效期为5分钟</span></span><br><span class="line">            redisTemplate.opsForValue().set(phone,code,<span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> R.success(<span class="string">&quot;手机验证码短信发送成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;短信发送失败&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改登录接口"><a href="#修改登录接口" class="headerlink" title="修改登录接口"></a>修改登录接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移动端用户登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpSession</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Object&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession httpSession)</span>&#123;</span><br><span class="line">      log.info(map.toString());</span><br><span class="line">        <span class="comment">//获取手机</span></span><br><span class="line">        String phone=map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">        <span class="comment">//获取验证码</span></span><br><span class="line">        String code=map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">        <span class="comment">//从session中获取保存的验证码</span></span><br><span class="line"><span class="comment">//        Object codeInSession = httpSession.getAttribute(phone);</span></span><br><span class="line">        <span class="comment">//从redis中获取缓存的验证码</span></span><br><span class="line">        Object codeInSession=redisTemplate.opsForValue().get(phone);</span><br><span class="line">        <span class="comment">//进行验证码的比对（页面提交的验证码和session中保存的验证码比对）</span></span><br><span class="line">        <span class="keyword">if</span> (codeInSession!=<span class="literal">null</span>&amp;&amp;codeInSession.equals(code))&#123;</span><br><span class="line">            <span class="comment">//如果能够比对成功，说明登陆成功</span></span><br><span class="line">            LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            queryWrapper.eq(User::getPhone,phone);</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">            <span class="comment">//判断当前手机号对应的用户是否为新用户，如果是新用户就自动完成注册</span></span><br><span class="line">            <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;</span><br><span class="line">                user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                user.setPhone(phone);</span><br><span class="line">                user.setStatus(<span class="number">1</span>);</span><br><span class="line">                userService.save(user);</span><br><span class="line">            &#125;</span><br><span class="line">            httpSession.setAttribute(<span class="string">&quot;user&quot;</span>,user.getId());</span><br><span class="line">            <span class="comment">//如果用户登录成功，删除Redis中缓存的验证码</span></span><br><span class="line">            redisTemplate.delete(phone);</span><br><span class="line">            <span class="keyword">return</span> R.success(user);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">return</span> R.error(<span class="string">&quot;登陆成功失败&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>演示</strong></p>
<p>发送短信观察redis服务器</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113120952143.png" alt="image-20221113120952143"></p>
<p>输入验证码登录后观察redis服务器</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113121102293.png" alt="image-20221113121102293"></p>
<h2 id="缓存菜品数据"><a href="#缓存菜品数据" class="headerlink" title="缓存菜品数据"></a>缓存菜品数据</h2><h3 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113142513825.png" alt="image-20221113142513825"></p>
<h3 id="代码改造-1"><a href="#代码改造-1" class="headerlink" title="代码改造"></a>代码改造</h3><h4 id="改造查询方法"><a href="#改造查询方法" class="headerlink" title="改造查询方法"></a>改造查询方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line">       List&lt;DishDto&gt; dishDtoList=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//动态构造key</span></span><br><span class="line">       String key=<span class="string">&quot;dish_&quot;</span>+dish.getCategoryId()+<span class="string">&quot;_&quot;</span>+dish.getStatus();</span><br><span class="line">       <span class="comment">//先从redis中获取缓存数据</span></span><br><span class="line">       dishDtoList  = (List&lt;DishDto&gt;)redisTemplate.opsForValue().get(key);</span><br><span class="line">       <span class="keyword">if</span> (dishDtoList!=<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="comment">//如果存在，直接返回，无需查询数据库</span></span><br><span class="line">           <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//构造查询条件</span></span><br><span class="line">       LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.eq(dish.getCategoryId()!=<span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">       <span class="comment">//添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">       queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line">       <span class="comment">//添加排序条件</span></span><br><span class="line">       queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">       List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">       List&lt;DishDto&gt; collect = list.stream().map((item) -&gt; &#123;</span><br><span class="line">           <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">           BeanUtils.copyProperties(item, dishDto);</span><br><span class="line">           <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();<span class="comment">//分类id</span></span><br><span class="line">           <span class="comment">//根据分类id查询分类对象</span></span><br><span class="line">           <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">           <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">               dishDto.setCategoryName(categoryName);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//当前菜品的id</span></span><br><span class="line">           Long dishId=item.getId();</span><br><span class="line">           LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">           queryWrapper1.eq(DishFlavor::getDishId,dishId);</span><br><span class="line">           List&lt;DishFlavor&gt; list1 = dishFlavorService.list(queryWrapper1);</span><br><span class="line">           dishDto.setFlavors(list1);</span><br><span class="line">           <span class="keyword">return</span> dishDto;</span><br><span class="line">       &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">       <span class="comment">//如果不存在，需要查询数据库，将查询到的菜品数据缓存到Redis中</span></span><br><span class="line">       redisTemplate.opsForValue().set(key,collect,<span class="number">60</span>, TimeUnit.MINUTES);</span><br><span class="line">       <span class="keyword">return</span> R.success(collect);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="改造保存更新方法"><a href="#改造保存更新方法" class="headerlink" title="改造保存更新方法"></a>改造保存更新方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">    log.info(dishDto.toString());</span><br><span class="line"></span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//清理所有菜品的缓存数据</span></span><br><span class="line">    <span class="comment">//Set keys = redisTemplate.keys(&quot;dish_*&quot;);</span></span><br><span class="line">    <span class="comment">//redisTemplate.delete(keys);</span></span><br><span class="line">    <span class="comment">//清理某个分类下面的菜品缓存数据</span></span><br><span class="line">    String keys=<span class="string">&quot;dish_&quot;</span>+dishDto.getCategoryId()+<span class="string">&quot;_1&quot;</span>;</span><br><span class="line">    redisTemplate.delete(keys);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">    log.info(dishDto.toString());</span><br><span class="line">    dishService.saveWithFlavor(dishDto);</span><br><span class="line">    <span class="comment">//清理所有菜品的缓存数据</span></span><br><span class="line">    <span class="comment">//Set keys = redisTemplate.keys(&quot;dish_*&quot;);</span></span><br><span class="line">    <span class="comment">//redisTemplate.delete(keys);</span></span><br><span class="line">    <span class="comment">//清理某个分类下面的菜品缓存数据</span></span><br><span class="line">    String keys=<span class="string">&quot;dish_&quot;</span>+dishDto.getCategoryId()+<span class="string">&quot;_1&quot;</span>;</span><br><span class="line">    redisTemplate.delete(keys);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="改造删除和更新状态方法"><a href="#改造删除和更新状态方法" class="headerlink" title="改造删除和更新状态方法"></a>改造删除和更新状态方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(String ids)</span>&#123;</span><br><span class="line">        String[] split = ids.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        List&lt;Long&gt; collect = Arrays.stream(split).map(item -&gt; &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> Long.parseLong(item);</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.in(Dish::getId,collect);</span><br><span class="line">        queryWrapper.select(Dish::getCategoryId).groupBy(Dish::getCategoryId);</span><br><span class="line">        List&lt;Dish&gt; dishList=dishService.list(queryWrapper);</span><br><span class="line">        dishList.forEach(dish-&gt;&#123;</span><br><span class="line">            <span class="comment">//清理某个分类下面的菜品缓存数据</span></span><br><span class="line">            String keys=<span class="string">&quot;dish_&quot;</span>+dish.getCategoryId()+<span class="string">&quot;_1&quot;</span>;</span><br><span class="line">            redisTemplate.delete(keys);</span><br><span class="line">        &#125;);</span><br><span class="line">        dishService.deleteWithFlavor(ids);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停用菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable</span> Integer status, String ids)</span>&#123;</span><br><span class="line">        String[] split = ids.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        List&lt;Long&gt; collect = Arrays.stream(split).map(item -&gt; &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> Long.parseLong(item);</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.in(Dish::getId,collect);</span><br><span class="line">        queryWrapper.select(Dish::getCategoryId).groupBy(Dish::getCategoryId);</span><br><span class="line">        List&lt;Dish&gt; dishList=dishService.list(queryWrapper);</span><br><span class="line">        dishList.forEach(dish-&gt;&#123;</span><br><span class="line">            <span class="comment">//清理某个分类下面的菜品缓存数据</span></span><br><span class="line">            String keys=<span class="string">&quot;dish_&quot;</span>+dish.getCategoryId()+<span class="string">&quot;_1&quot;</span>;</span><br><span class="line">            redisTemplate.delete(keys);</span><br><span class="line">        &#125;);</span><br><span class="line">        dishService.changeStatus(status,ids);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;更新状态成功&quot;</span>);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h2><h3 id="Spring-Cache-介绍"><a href="#Spring-Cache-介绍" class="headerlink" title="Spring Cache 介绍"></a>Spring Cache 介绍</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113183929464.png" alt="image-20221113183929464"></p>
<h3 id="Spring-Cache-常用注解"><a href="#Spring-Cache-常用注解" class="headerlink" title="Spring Cache 常用注解"></a>Spring Cache 常用注解</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113184049865.png" alt="image-20221113184049865"></p>
<h3 id="Spring-Cache使用"><a href="#Spring-Cache使用" class="headerlink" title="Spring Cache使用"></a>Spring Cache使用</h3><h4 id="开启缓存注解功能"><a href="#开启缓存注解功能" class="headerlink" title="开启缓存注解功能"></a>开启缓存注解功能</h4><h4 id="注入CacheManger"><a href="#注入CacheManger" class="headerlink" title="注入CacheManger"></a>注入CacheManger</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113191514851.png" alt="image-20221113191514851"></p>
<h4 id="添加缓存和删除缓存-CachePut、-CacheEvict"><a href="#添加缓存和删除缓存-CachePut、-CacheEvict" class="headerlink" title="添加缓存和删除缓存-@CachePut、@CacheEvict"></a>添加缓存和删除缓存-@CachePut、@CacheEvict</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113191119763.png" alt="image-20221113191119763"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113191344814.png" alt="image-20221113191344814"></p>
<h4 id="查询缓存-Cacheable"><a href="#查询缓存-Cacheable" class="headerlink" title="查询缓存-@Cacheable"></a>查询缓存-@Cacheable</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113192206936.png" alt="image-20221113192206936"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113192547514.png" alt="image-20221113192547514"></p>
<p>修改</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113193953428.png" alt="image-20221113193953428"></p>
<p>多参数作为key进行缓存</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113193125939.png" alt="image-20221113193125939"></p>
<h4 id="使用redis作为缓存产品"><a href="#使用redis作为缓存产品" class="headerlink" title="使用redis作为缓存产品"></a>使用redis作为缓存产品</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113193406176.png" alt="image-20221113193406176"></p>
<h2 id="缓存套餐数据"><a href="#缓存套餐数据" class="headerlink" title="缓存套餐数据"></a>缓存套餐数据</h2><h3 id="实现思路-2"><a href="#实现思路-2" class="headerlink" title="实现思路"></a>实现思路</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113194231081.png" alt="image-20221113194231081"></p>
<h3 id="代码改造-2"><a href="#代码改造-2" class="headerlink" title="代码改造"></a>代码改造</h3><h4 id="导入maven坐标"><a href="#导入maven坐标" class="headerlink" title="导入maven坐标"></a>导入maven坐标</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置过期时间"><a href="#配置过期时间" class="headerlink" title="配置过期时间"></a>配置过期时间</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113201258749.png" alt="image-20221113201258749"></p>
<h4 id="开启缓存"><a href="#开启缓存" class="headerlink" title="开启缓存"></a>开启缓存</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113201416839.png" alt="image-20221113201416839"></p>
<h4 id="加入-Cacheable注解"><a href="#加入-Cacheable注解" class="headerlink" title="加入@Cacheable注解"></a>加入@Cacheable注解</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113201558417.png" alt="image-20221113201558417"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;setmealCache&quot;,key = &quot;#setmeal.categoryId+&#x27;_&#x27;+#setmeal.status&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId()!=<span class="literal">null</span>,Setmeal::getCategoryId,setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus()!=<span class="literal">null</span>,Setmeal::getStatus,setmeal.getStatus());</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回类R实现序列化接口</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221113202110097.png" alt="image-20221113202110097"></p>
<h4 id="加入-CacheEvict注解"><a href="#加入-CacheEvict注解" class="headerlink" title="加入@CacheEvict注解"></a>加入@CacheEvict注解</h4><p>删除指定分类下所有的缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;,allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;ids:&#123;&#125;&quot;</span>,ids);</span><br><span class="line">    setmealService.removeWithDish(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;套餐数据删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 新增套餐</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping()</span></span><br><span class="line">   <span class="meta">@CacheEvict(value = &quot;setmealCache&quot;,allEntries = true)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span> <span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">       log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>,setmealDto);</span><br><span class="line">       setmealService.saveWithDish(setmealDto);</span><br><span class="line">       <span class="keyword">return</span> R.success(<span class="string">&quot;新增套餐成功&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="10-读写分离"><a href="#10-读写分离" class="headerlink" title="10.读写分离"></a>10.读写分离</h1><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221114111917815.png" alt="image-20221114111917815"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221114112001033.png" alt="image-20221114112001033"></p>
<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221114112414733.png" alt="image-20221114112414733"></p>
<h3 id="配置-前置条件"><a href="#配置-前置条件" class="headerlink" title="配置-前置条件"></a>配置-前置条件</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221114115436205.png" alt="image-20221114115436205"></p>
<h3 id="配置-主库Master"><a href="#配置-主库Master" class="headerlink" title="配置-主库Master"></a>配置-主库Master</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221114115638374.png" alt="image-20221114115638374"></p>
<p>Ubuntu-Mysql8.0 修改配置文件路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>

<p>查看主服务器配置文件：<code>sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</code>，看第83行：确认log_bin和server-id已经取消注释，设置无错误。</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115135826754.png" alt="image-20221115135826754"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221114152438014.png" alt="image-20221114152438014"></p>
<p><strong>Mysql8.0 重启命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">weishao@ubuntuno2:/etc/mysql/mysql.conf.d$ service mysql restart</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===</span><br><span class="line">Authentication is required to restart <span class="string">&#x27;mysql.service&#x27;</span>.</span><br><span class="line">Authenticating as: weishao</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221114152505733.png" alt="image-20221114152505733"></p>
<p>mysql 8.0 配置方法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;10.211.55.4&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;10.211.55.4&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> flush privileges;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221114152703758.png" alt="image-20221114152703758"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> master status;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> File          <span class="operator">|</span> Position <span class="operator">|</span> Binlog_Do_DB <span class="operator">|</span> Binlog_Ignore_DB <span class="operator">|</span> Executed_Gtid_Set <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> binlog<span class="number">.000004</span> <span class="operator">|</span>     <span class="number">1784</span> <span class="operator">|</span>              <span class="operator">|</span>                  <span class="operator">|</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="配置-从库Slave"><a href="#配置-从库Slave" class="headerlink" title="配置-从库Slave"></a>配置-从库Slave</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221114152834288.png" alt="image-20221114152834288"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221114152923785.png" alt="image-20221114152923785">   <img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221114153242911.png" alt="image-20221114153242911"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;10.211.55.5&#x27;</span>,master_user<span class="operator">=</span><span class="string">&#x27;slave&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>,master_log_file<span class="operator">=</span><span class="string">&#x27;mysql-bin.000001&#x27;</span>,master_log_pos<span class="operator">=</span><span class="number">157</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">8</span> warnings (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> slave;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> warning (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221114153301982.png" alt="image-20221114153301982"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> slave status\G;</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115140535620.png" alt="image-20221115140535620"></p>
<h2 id="读写分离案例"><a href="#读写分离案例" class="headerlink" title="读写分离案例"></a>读写分离案例</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115140803486.png" alt="image-20221115140803486"></p>
<h3 id="Sharding-JDBC介绍"><a href="#Sharding-JDBC介绍" class="headerlink" title="Sharding-JDBC介绍"></a>Sharding-JDBC介绍</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115141501035.png" alt="image-20221115141501035"></p>
<h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115141721098.png" alt="image-20221115141721098"></p>
<h4 id="导入maven坐标-1"><a href="#导入maven坐标-1" class="headerlink" title="导入maven坐标"></a>导入maven坐标</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115142105300.png" alt="image-20221115142105300"></p>
<h4 id="配置读写分离规则"><a href="#配置读写分离规则" class="headerlink" title="配置读写分离规则"></a>配置读写分离规则</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115142335285.png" alt="image-20221115142335285"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115142526450.png" alt="image-20221115142526450"></p>
<h4 id="配置允许bean定义并覆盖"><a href="#配置允许bean定义并覆盖" class="headerlink" title="配置允许bean定义并覆盖"></a>配置允许bean定义并覆盖</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115143430406.png" alt="image-20221115143430406"></p>
<h2 id="项目实现读写分离"><a href="#项目实现读写分离" class="headerlink" title="项目实现读写分离"></a>项目实现读写分离</h2><h3 id="数据库环境准备-主从复制"><a href="#数据库环境准备-主从复制" class="headerlink" title="数据库环境准备(主从复制)"></a>数据库环境准备(主从复制)</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115151816631.png" alt="image-20221115151816631"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115152134249.png" alt="image-20221115152134249"></p>
<h3 id="代码改造-3"><a href="#代码改造-3" class="headerlink" title="代码改造"></a>代码改造</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115152155880.png" alt="image-20221115152155880"></p>
<h4 id="导入maven坐标-2"><a href="#导入maven坐标-2" class="headerlink" title="导入maven坐标"></a>导入maven坐标</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="applicartion配置读写分离"><a href="#applicartion配置读写分离" class="headerlink" title="applicartion配置读写分离"></a>applicartion配置读写分离</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">shardingsphere:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">names:</span></span><br><span class="line">      <span class="string">master,slave</span></span><br><span class="line">    <span class="comment"># 主数据源</span></span><br><span class="line">    <span class="attr">master:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.138.100:3306/rw?characterEncoding=utf-8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment"># 从数据源</span></span><br><span class="line">    <span class="attr">slave:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.138.101:3306/rw?characterEncoding=utf-8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">masterslave:</span></span><br><span class="line">    <span class="comment"># 读写分离配置</span></span><br><span class="line">    <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span></span><br><span class="line">    <span class="comment"># 最终的数据源名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">    <span class="comment"># 主库数据源名称</span></span><br><span class="line">    <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">    <span class="comment"># 从库数据源名称列表，多个逗号分隔</span></span><br><span class="line">    <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">  <span class="attr">props:</span></span><br><span class="line">    <span class="attr">sql:</span></span><br><span class="line">      <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false</span></span><br></pre></td></tr></table></figure>

<h4 id="spring下添加配置允许覆盖"><a href="#spring下添加配置允许覆盖" class="headerlink" title="spring下添加配置允许覆盖"></a>spring下添加配置允许覆盖</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Idea2022.2配置会爆红但不影响运行</strong></p>
<p>测试</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115154759325.png" alt="image-20221115154759325"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115155231835.png" alt="image-20221115155231835"></p>
<h1 id="11-Nginx"><a href="#11-Nginx" class="headerlink" title="11.Nginx"></a>11.Nginx</h1><h2 id="Nginx概述"><a href="#Nginx概述" class="headerlink" title="Nginx概述"></a>Nginx概述</h2><h3 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115164739649.png" alt="image-20221115164739649"></p>
<h3 id="Nginx下载和安装"><a href="#Nginx下载和安装" class="headerlink" title="Nginx下载和安装"></a>Nginx下载和安装</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115165022693.png" alt="image-20221115165022693"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115165123543.png" alt="image-20221115165123543"></p>
<p>ubuntu安装nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换至root用户</span></span><br><span class="line">sudo su root</span><br><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115195415961.png" alt="image-20221115195415961"></p>
<p>查看nginx是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@weishao1:/home/weishao<span class="comment"># nginx -v</span></span><br><span class="line">nginx version: nginx/1.18.0 (Ubuntu)</span><br></pre></td></tr></table></figure>

<p>启动nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure>

<p>在网页重输入ip地址，即可看到nginx的欢迎页面</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115195611516.png" alt="image-20221115195611516"></p>
<h3 id="Nginx目录结构"><a href="#Nginx目录结构" class="headerlink" title="Nginx目录结构"></a>Nginx目录结构</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115195705015.png" alt="image-20221115195705015"></p>
<p>ubuntu安装nginx目录结构</p>
<p>nginx文件安装完成之后的文件位置：</p>
<ul>
<li>/usr/sbin/nginx：主程序</li>
<li>/etc/nginx：存放配置文件</li>
<li>/usr/share/nginx：存放静态文件</li>
<li>/var/log/nginx：存放日志</li>
</ul>
<h2 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h2><h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115200426681.png" alt="image-20221115200426681"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@weishao1:/usr/sbin<span class="comment"># ./nginx -v</span></span><br><span class="line">nginx version: nginx/1.18.0 (Ubuntu)</span><br></pre></td></tr></table></figure>

<h4 id="检查配置文件正确性"><a href="#检查配置文件正确性" class="headerlink" title="检查配置文件正确性"></a>检查配置文件正确性</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115200622943.png" alt="image-20221115200622943"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@weishao1:/usr/sbin<span class="comment"># ./nginx -t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure>

<h4 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115200932853.png" alt="image-20221115200932853"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@weishao1:/usr/sbin<span class="comment"># ./nginx </span></span><br><span class="line">root@weishao1:/usr/sbin<span class="comment"># </span></span><br><span class="line">root@weishao1:/usr/sbin<span class="comment"># ps -ef | grep nginx</span></span><br><span class="line">root        6521       1  0 12:10 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">www-data    6522    6521  0 12:10 ?        00:00:00 nginx: worker process</span><br><span class="line">www-data    6523    6521  0 12:10 ?        00:00:00 nginx: worker process</span><br><span class="line">root        6525    5802  0 12:10 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>

<h4 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115201648879.png" alt="image-20221115201648879"></p>
<p>centos修改环境变量</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115202730888.png" alt="image-20221115202730888"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115202817574.png" alt="image-20221115202817574"></p>
<p>ubuntu添加环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@weishao1:/etc/nginx<span class="comment"># vim /etc/profile</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115203102870.png" alt="image-20221115203102870"></p>
<h2 id="Nginx配置文件结构"><a href="#Nginx配置文件结构" class="headerlink" title="Nginx配置文件结构"></a>Nginx配置文件结构</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115203509278.png" alt="image-20221115203509278"></p>
<h2 id="Nginx具体应用"><a href="#Nginx具体应用" class="headerlink" title="Nginx具体应用"></a>Nginx具体应用</h2><h3 id="部署静态资源"><a href="#部署静态资源" class="headerlink" title="部署静态资源"></a>部署静态资源</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115203954643.png" alt="image-20221115203954643"></p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115211235765.png" alt="image-20221115211235765"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115211424173.png" alt="image-20221115211424173"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115211718201.png" alt="image-20221115211718201"></p>
<p>演示</p>
<p>现准备两个ubuntu系统的虚拟机服务器</p>
<ul>
<li>10.211.55.4</li>
<li>10.211.55.5</li>
</ul>
<p>首先在10.211.55.4上运行springboot程序</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115213944953.png" alt="image-20221115213944953"></p>
<p>直接访问可以成功</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115214048134.png" alt="image-20221115214048134"></p>
<p>接下来在10.211.55.5上做nginx配置</p>
<p>Ubuntu nginx1.8 修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115220935926.png" alt="image-20221115220935926"></p>
<p>其余关于80端口的配置需要删干净</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221115221019227.png" alt="image-20221115221019227"></p>
<p>访问成功</p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116110324456.png" alt="image-20221116110324456"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116110621871.png" alt="image-20221116110621871"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116111121784.png" alt="image-20221116111121784"></p>
<p>根据权重发送</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116111013425.png" alt="image-20221116111013425"></p>
<p>演示</p>
<p>修改配置文件</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116122358468.png" alt="image-20221116122358468"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116122414756.png" alt="image-20221116122414756"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116122431257.png" alt="image-20221116122431257"></p>
<h1 id="12-前后端分离开发"><a href="#12-前后端分离开发" class="headerlink" title="12.前后端分离开发"></a>12.前后端分离开发</h1><h2 id="问题说明-1"><a href="#问题说明-1" class="headerlink" title="问题说明"></a>问题说明</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116122705057.png" alt="image-20221116122705057"></p>
<h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116145227741.png" alt="image-20221116145227741"></p>
<h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116145734033.png" alt="image-20221116145734033"></p>
<h2 id="前段技术栈"><a href="#前段技术栈" class="headerlink" title="前段技术栈"></a>前段技术栈</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116145820783.png" alt="image-20221116145820783"></p>
<h1 id="13-YApi"><a href="#13-YApi" class="headerlink" title="13.YApi"></a>13.YApi</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116150048930.png" alt="image-20221116150048930"></p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116150220890.png" alt="image-20221116150220890"></p>
<h1 id="14-Swagger"><a href="#14-Swagger" class="headerlink" title="14.Swagger"></a>14.Swagger</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116151312919.png" alt="image-20221116151312919"></p>
<h2 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116151503422.png" alt="image-20221116151503422"></p>
<h3 id="导入Maven坐标"><a href="#导入Maven坐标" class="headerlink" title="导入Maven坐标"></a>导入Maven坐标</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116151623147.png" alt="image-20221116151623147"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="导入Knife4j相关配置"><a href="#导入Knife4j相关配置" class="headerlink" title="导入Knife4j相关配置"></a>导入Knife4j相关配置</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116151707995.png" alt="image-20221116151707995"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展mvc框架的消息转换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="comment">//创建消息转换器</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//设置对象转换器，底层使用jackson将Java对象转换为json</span></span><br><span class="line">        messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">        converters.add(<span class="number">0</span>,messageConverter);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.itheima.reggie.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;瑞吉外卖&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;瑞吉外卖接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设置静态资源映射"><a href="#设置静态资源映射" class="headerlink" title="设置静态资源映射"></a>设置静态资源映射</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116151917423.png" alt="image-20221116151917423"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置资源映射</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;开始进行静态资源映射...&quot;</span>);</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    <span class="built_in">super</span>.addResourceHandlers(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在LoginCheckFilter中设置不需要处理的请求路径"><a href="#在LoginCheckFilter中设置不需要处理的请求路径" class="headerlink" title="在LoginCheckFilter中设置不需要处理的请求路径"></a>在LoginCheckFilter中设置不需要处理的请求路径</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116152648949.png" alt="image-20221116152648949"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log.info(<span class="string">&quot;拦截到请求:&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line">       <span class="comment">//定义不需要处理的请求路径</span></span><br><span class="line">       String[] urls=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">               <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">               <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">               <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">               <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">               <span class="string">&quot;/common/**&quot;</span>,</span><br><span class="line">               <span class="string">&quot;/user/sendMsg&quot;</span>,<span class="comment">//移动端发送短信</span></span><br><span class="line">               <span class="string">&quot;/user/login&quot;</span>,<span class="comment">//移动端登录</span></span><br><span class="line">               <span class="string">&quot;/doc.html&quot;</span>,</span><br><span class="line">               <span class="string">&quot;/webjars/**&quot;</span>,</span><br><span class="line">               <span class="string">&quot;/swagger-resources&quot;</span>,</span><br><span class="line">               <span class="string">&quot;/v2/api-docs&quot;</span></span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure>

<p>访问成功</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116160129794.png" alt="image-20221116160129794"></p>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116160208519.png" alt="image-20221116160208519"></p>
<h1 id="15-项目部署"><a href="#15-项目部署" class="headerlink" title="15.项目部署"></a>15.项目部署</h1><h2 id="部署架构"><a href="#部署架构" class="headerlink" title="部署架构"></a>部署架构</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116161405110.png" alt="image-20221116161405110"></p>
<h2 id="部署环境说明"><a href="#部署环境说明" class="headerlink" title="部署环境说明"></a>部署环境说明</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116161700702.png" alt="image-20221116161700702"></p>
<h2 id="部署前端项目"><a href="#部署前端项目" class="headerlink" title="部署前端项目"></a>部署前端项目</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116161952344.png" alt="image-20221116161952344"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116162214263.png" alt="image-20221116162214263"></p>
<p> <img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116162837487.png" alt="image-20221116162837487"></p>
<h2 id="后端项目的部署"><a href="#后端项目的部署" class="headerlink" title="后端项目的部署"></a>后端项目的部署</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116163035598.png" alt="image-20221116163035598"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116163214581.png" alt="image-20221116163214581"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20221116163358445.png" alt="image-20221116163358445"></p>
<p>完结撒花🙃</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>黑马程序员</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马程序员-Redis</title>
    <url>/2022/10/08/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/</url>
    <content><![CDATA[<h1 id="Redis-入门"><a href="#Redis-入门" class="headerlink" title="Redis 入门"></a>Redis 入门</h1><h2 id="问题的抛出"><a href="#问题的抛出" class="headerlink" title="问题的抛出"></a>问题的抛出</h2><p><strong>出现的问题：</strong></p>
<ul>
<li>海量用户</li>
<li>高并发</li>
</ul>
<p><strong>罪魁祸首——关系型数据库：</strong></p>
<ul>
<li>性能瓶颈：磁盘IO性能低下</li>
<li>扩展瓶颈：数据关系复杂，扩展性差，不便于大规模集群</li>
</ul>
<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a><strong>解决思路</strong></h2><ul>
<li>降低磁盘IO次数，越低越好 —— 内存存储</li>
<li>去除数据间的关系，越简单越好 —— 不存储关系，仅存储数据</li>
</ul>
<h2 id="Nosql简介"><a href="#Nosql简介" class="headerlink" title="Nosql简介"></a>Nosql简介</h2><p>NoSQL：<br>即<code>Not-OnlySQL</code>（泛指非关系型的数据库），作为关系型数据库的补充。</p>
<p>作用：<br>应用对于海量用户和海量数据前提吓得数据处理问题。</p>
<p>特征：</p>
<ul>
<li>可扩容，可伸缩</li>
<li>大数据量下得高性能</li>
<li>灵活得数据模型</li>
<li>高可用</li>
</ul>
<p>常见<code>Nosql</code>数据库：</p>
<ul>
<li>Redis</li>
<li>memcache</li>
<li>HBase</li>
<li>MongoDB</li>
</ul>
<h2 id="解决方案（电商场景）"><a href="#解决方案（电商场景）" class="headerlink" title="解决方案（电商场景）"></a>解决方案（电商场景）</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221008185402254.png" alt="image-20221008185402254"></p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>概念：<br><code>Redis(REmote DIctinary Server)</code>是用C语言开发的一个开源的高性能键值对<code>(key-value)</code>数据库<br>特征：</p>
<ul>
<li><p>数据间没有必然的关联关系</p>
</li>
<li><p>内部采用单线程机制进行工作</p>
</li>
<li><p>高性能。官方提供测试数据，50个并发执行100000个请求，读的速度是110000次/s，写的速度是81000次/s。</p>
</li>
<li><p>多数据类型支持：<code>string（字符串类型）</code>、<code>list（列表类型）</code>、<code>hash（散列类型）</code>、<code>set（集合类型）</code>、<code>sorted_set（有序集合类型）</code></p>
</li>
<li><p>持久化支持。可以进行数据灾难恢复</p>
</li>
</ul>
<h2 id="Redis的应用"><a href="#Redis的应用" class="headerlink" title="Redis的应用"></a>Redis的应用</h2><ul>
<li>为热点数据加速查询（主要场景）、如热点商品、热点新闻、热点资讯、推广类等提高访问量信息等。</li>
<li>任务队列、如秒杀、抢购、购票等</li>
<li>即时信息查询，如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息（聊天室、网站）、设备信号等</li>
<li>时效性信息控制，如验证码控制，投票控制等</li>
<li>分布式数据共享，如分布式集群构架中的<code>session</code>分离</li>
<li>消息队列</li>
<li>分布式锁</li>
</ul>
<h2 id="Redis的基本操作"><a href="#Redis的基本操作" class="headerlink" title="Redis的基本操作"></a>Redis的基本操作</h2><p>命令行模式工具使用思考</p>
<ul>
<li>功能性命令</li>
<li>清除屏幕信息</li>
<li>帮助信息查阅</li>
<li>退出指令</li>
</ul>
<h3 id="信息添加"><a href="#信息添加" class="headerlink" title="信息添加"></a>信息添加</h3><ul>
<li>功能：设置key,value数据</li>
<li>命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set key value</span><br></pre></td></tr></table></figure>

<ul>
<li>范例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set name itheima</span><br></pre></td></tr></table></figure>

<h3 id="信息查询"><a href="#信息查询" class="headerlink" title="信息查询"></a>信息查询</h3><ul>
<li>功能：根据key查询对应的value,如果不存在，返回空（null)</li>
<li>命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure>

<ul>
<li>范例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get name</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221008185941452.png" alt="image-20221008185941452"></p>
<h3 id="清除屏幕信息"><a href="#清除屏幕信息" class="headerlink" title="清除屏幕信息"></a>清除屏幕信息</h3><ul>
<li>功能：清除屏幕中的信息</li>
<li>命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure>

<h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><ul>
<li>功能：获取命令帮助文档，获取组中所有命令信息名称</li>
<li>命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">help 命令名称</span><br><span class="line">help @组名</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221008190042511.png" alt="image-20221008190042511"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221008190110484.png" alt="image-20221008190110484"></p>
<p>推出客户端命令行模式</p>
<ul>
<li>功能：推出客户端</li>
<li>命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">quit</span><br><span class="line">exit</span><br><span class="line">&lt; ESC&gt;(慎用)</span><br></pre></td></tr></table></figure>

<h1 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h1><h2 id="Redis数据类型-String"><a href="#Redis数据类型-String" class="headerlink" title="Redis数据类型 String"></a>Redis数据类型 String</h2><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p><a href="https://www.bilibili.com/video/BV1CJ411m7Gc?p=6">https://www.bilibili.com/video/BV1CJ411m7Gc?p=6</a></p>
<h3 id="数据存储类型介绍"><a href="#数据存储类型介绍" class="headerlink" title="数据存储类型介绍"></a>数据存储类型介绍</h3><p>业务数据的特殊性</p>
<p><strong>作为缓存使用</strong></p>
<ol>
<li>原始业务功能设计<br>秒杀<br>618活动<br>双十一活动<br>排队购票</li>
<li>运营平台监控到的突发高频访问数据<br>突发市政要闻，被强势关注围观</li>
<li>高频、复杂的统计数据<br>在线人数<br>投票排行榜</li>
</ol>
<p><strong>附加功能</strong><br>系统功能优化或升级</p>
<ul>
<li>单服务器升级集群</li>
<li><code>Session</code>管理</li>
<li><code>Token</code>管理</li>
</ul>
<h3 id="Redis-数据类型（5种常用）"><a href="#Redis-数据类型（5种常用）" class="headerlink" title="Redis 数据类型（5种常用）"></a>Redis 数据类型（5种常用）</h3><ul>
<li>string –&gt; String</li>
<li>hash –&gt; Hashmap</li>
<li>list –&gt; LinkList</li>
<li>set –&gt; HashSet</li>
<li>sorted_set –&gt; TreeSet</li>
</ul>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p><strong>redis 数据存储格式</strong></p>
<ul>
<li>redis自身是一个<code>Map</code>,其中所有的数据都是采用<code>key:value</code>的形式存储</li>
<li>数据类型指的是存储的数据的类型，也就是<code>value</code>部分的类型，<code>key</code>部分永远都是字符串</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70.png" alt="img"></p>
<ul>
<li><strong>String 类型</strong></li>
<li>存储的数据：单个数据，最贱的数据存储类型，也是最常用的数据存储类型</li>
<li>存储数据的格式：一个存储空间保存一个数据</li>
<li>存储内容：通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作使用</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/20200409191821527.png" alt="img"></p>
<h3 id="String-类型数据的基本操作"><a href="#String-类型数据的基本操作" class="headerlink" title="String 类型数据的基本操作"></a><strong>String 类型数据的基本操作</strong></h3><ul>
<li>添加/修改数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set key value</span><br></pre></td></tr></table></figure>

<ul>
<li>获取数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure>

<ul>
<li>删除数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure>

<ul>
<li>添加/修改多个数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mset key1 valueq key2 value2 …</span><br></pre></td></tr></table></figure>

<ul>
<li>获取多个数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mget key1 key2 …</span><br></pre></td></tr></table></figure>

<ul>
<li>获取数据字符个数（字符串长度）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">strlen key</span><br></pre></td></tr></table></figure>

<ul>
<li>追加信息到原始信息后部（如果原始信息存在就追加，否则新建）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">append key value</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221008193222956.png" alt="image-20221008193222956"></p>
<h3 id="String类型数据的扩展操作"><a href="#String类型数据的扩展操作" class="headerlink" title="String类型数据的扩展操作"></a>String类型数据的扩展操作</h3><p><strong>业务场景</strong><br>大型企业级应用中，分表操作是基本操作，使用多张表存储同类型数据，但是对应的主键id必须保证统一性，不能重复。Oracle数据库具有sequence设定，可以解决该问题，但是MySQL数据库并不具有类似的机制，那么如何解决？</p>
<p><strong>解决方案</strong></p>
<ul>
<li>设置数值数据增加指定范围的值</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">incr key</span><br><span class="line">incrby key increment</span><br><span class="line">incrbyfloat key increment</span><br></pre></td></tr></table></figure>

<ul>
<li>设置数值数据减少指定范围的值</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">decr key</span><br><span class="line">decrby key increment</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221008193637593.png" alt="image-20221008193637593"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221008193707121.png" alt="image-20221008193707121"></p>
<p><strong>String作为数值操作</strong></p>
<p><code>String</code>在<code>redis</code>内部存储默认就是一个字符串，当遇到增减类操作<code>incr</code>,<code>decr</code>时会转成数值型进行计算<br><code>redis</code>所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的，因此无需考虑并发带来的数据影响。<br>注意：按数值进行操作的数据，如果原始数据不能转成数值，或超过了<code>redis</code>数值上线范围，将会报错。<code>9223372036854775807</code> (java中long型数据最大值，<code>Long.MAX_VALUE</code>)</p>
<h3 id="String-数据时效性设置"><a href="#String-数据时效性设置" class="headerlink" title="String 数据时效性设置"></a>String 数据时效性设置</h3><p><strong>业务场景</strong></p>
<ul>
<li><p>场景一：“最强女生”，启动海选投票，只能通过微信投票，每个微信号每4个小时只能投1票。</p>
</li>
<li><p>场景二：电商商家开启热门商品推荐，热门商品不能一直处于热门期，每种商品热门期维持3天，3天后自动取消热门</p>
</li>
<li><p>场景三：新闻网站会出现热点新闻，热点新闻最大的特征是对时效性，如何自动控制热点新闻的时效性</p>
</li>
</ul>
<p><strong>解决方案</strong></p>
<ul>
<li>设置数据具有指定的声明周期</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">setex key seconds value</span><br><span class="line">psetex key milliseconds value</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221008194430071.png" alt="image-20221008194430071"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221008195132656.png" alt="image-20221008195132656"></p>
<p><code>psetex</code> 和 <code>setex</code> 作用一样，都是设置过期时间，区别是：<code>psetex</code> 时间单位是毫秒，<code>setex</code> 是秒。</p>
<p>Tips 2:</p>
<ul>
<li><code>redis</code> 控制数据的生命周期，通过数据是否失效控制业务行为，适用于所有具有时效性限定控制的操作</li>
</ul>
<h3 id="String-类型的注意事项"><a href="#String-类型的注意事项" class="headerlink" title="String 类型的注意事项"></a>String 类型的注意事项</h3><ul>
<li><p>数据操作不成功的反馈与数据正常操作之间的差异</p>
<ul>
<li><p>1、表示运行结果是否成功<br> <code>（integer)0–&gt;false </code>失败<br>   <code>（integer)1–&gt;true </code>成功</p>
</li>
<li><p>2、表示运行结果值<br> <code>（integer)3–&gt;3 </code>3个<br>   <code>（integer)1–&gt;1 </code>1个</p>
</li>
</ul>
</li>
<li><p>数据未获取到<code>(nil）</code>等同于<code>null</code></p>
</li>
<li><p>数据最大存储量<code>512MB</code></p>
</li>
<li><p>数值计算最大范围（java中的long的最大值）</p>
</li>
</ul>
<h3 id="String类型应用场景"><a href="#String类型应用场景" class="headerlink" title="String类型应用场景"></a>String类型应用场景</h3><p><strong>业务场景</strong><br>主页高频访问信息显示控制，例如新浪微博大V主页显示粉丝数与微博数量</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221008195627422.png" alt="image-20221008195627422"></p>
<h3 id="key的设置约定"><a href="#key的设置约定" class="headerlink" title="key的设置约定"></a>key的设置约定</h3><p>数据库中的热点数据<code>key</code>命名惯例</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/20200413220259916.png" alt="img"></p>
<h2 id="Redis数据类型-Hash"><a href="#Redis数据类型-Hash" class="headerlink" title="Redis数据类型 Hash"></a>Redis数据类型 Hash</h2><h3 id="学习教程"><a href="#学习教程" class="headerlink" title="学习教程"></a>学习教程</h3><p><a href="https://www.bilibili.com/video/BV1CJ411m7Gc?p=12">https://www.bilibili.com/video/BV1CJ411m7Gc?p=12</a></p>
<h3 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h3><p><strong>存储的困惑</strong><br>对象类数据的存储如果具有较为频繁的更新需求操作会显得笨重</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-16652303781884.png" alt="img"></p>
<h3 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a><strong>hash类型</strong></h3><ul>
<li>新的存储需求：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息</li>
<li>需要的内存结构：一个存储空间保存多少个键值对数据</li>
<li><code>hash</code>类型：底层使用哈希表结构实现数据存储</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-16652314848056.png" alt="img"></p>
<h3 id="hash类型数据的基本操作"><a href="#hash类型数据的基本操作" class="headerlink" title="hash类型数据的基本操作"></a>hash类型数据的基本操作</h3><ul>
<li>添加/修改数据</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hset key field value</span><br></pre></td></tr></table></figure>

<ul>
<li>获取数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hget key field</span><br><span class="line">hgetall key</span><br></pre></td></tr></table></figure>

<ul>
<li>删除数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdel key field1 [field2]</span><br></pre></td></tr></table></figure>

<ul>
<li>添加/修改多个数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hmset key field1 value1 field2 calue2</span><br></pre></td></tr></table></figure>

<ul>
<li>获取多个数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hmget key field1 field2 …</span><br></pre></td></tr></table></figure>

<ul>
<li>获取哈希表中字段的数量</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hlen key</span><br></pre></td></tr></table></figure>

<ul>
<li>获取哈希表中是否存在指定的字段</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexists key field</span><br></pre></td></tr></table></figure>

<h3 id="hash类型数据扩展操作"><a href="#hash类型数据扩展操作" class="headerlink" title="hash类型数据扩展操作"></a>hash类型数据扩展操作</h3><ul>
<li>获取哈希表中所有的字段名和字段值</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hkeys key</span><br><span class="line">hvals key</span><br></pre></td></tr></table></figure>

<ul>
<li>设置指定字段的数值数据增加指定范围的值</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hincrby key field increment</span><br><span class="line">hincrbyfloat key field increment</span><br></pre></td></tr></table></figure>

<h3 id="hash类型数据操作的注意事项"><a href="#hash类型数据操作的注意事项" class="headerlink" title="hash类型数据操作的注意事项"></a>hash类型数据操作的注意事项</h3><ul>
<li>hash类型下的<code>value</code>只能存储字符串，不允许存储其他类型数据，不存在嵌套现象。如果数据未获取到，对应的值为<code>(nil)</code></li>
<li>每个<code>hash</code>可以存储<code>232-1</code>个键值对</li>
<li><code>hash</code>类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性。但<code>hash</code>设计初中不是为了存储大量对象而设计的，切记不可滥用，更不可以将<code>hash</code>作为对象列表使用</li>
<li><code>hgetall</code>操作可以获取全部属性，如果内部<code>field</code>过多，遍历整体数据效率就会很低，有可能成为数据访问瓶颈</li>
</ul>
<h3 id="hash类型应用场景购物车"><a href="#hash类型应用场景购物车" class="headerlink" title="hash类型应用场景购物车"></a>hash类型应用场景购物车</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-16652318807278.png" alt="img"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-166523190155910.png" alt="img"></p>
<h3 id="Hash实现抢购"><a href="#Hash实现抢购" class="headerlink" title="Hash实现抢购"></a>Hash实现抢购</h3><p>Hash应用场景</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-166523194297412.png" alt="img"></p>
<p><strong>解决方案</strong></p>
<ul>
<li>以商家<code>id</code>作为<code>key</code></li>
<li>将参与抢购的商品<code>id</code>作为<code>field</code></li>
<li>将参与抢购的商品数量作为对应的<code>value</code></li>
<li>抢购时使用降至的方式控制产品数量</li>
</ul>
<h2 id="Redis数据存储-List"><a href="#Redis数据存储-List" class="headerlink" title="Redis数据存储 List"></a>Redis数据存储 List</h2><h3 id="list类型"><a href="#list类型" class="headerlink" title="list类型"></a>list类型</h3><ul>
<li>数据存储需求：存储多个数据，并对数据进入存储空间的顺序进行区分</li>
<li>需要的存储数据：一个存储空间保存多个数据，且通过数据可以体现进入顺序</li>
<li>list类型：保存多个数据，底层使用双向链表存储结构实现</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-166523626646014.png" alt="img"></p>
<h3 id="list类型数据基本操作"><a href="#list类型数据基本操作" class="headerlink" title="list类型数据基本操作"></a>list类型数据基本操作</h3><ul>
<li><strong>添加/修改数据</strong></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">lpush key value1 [<span class="type">value2</span>] …</span><br><span class="line">rpush key value1 [<span class="type">value2</span>] …</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>获取数据</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lrange key start stop</span><br><span class="line">lindex key index</span><br><span class="line">llen key</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>删除并移除数据</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lpop key</span><br><span class="line">rpop key</span><br></pre></td></tr></table></figure>

<h3 id="list-类型数组扩展操作"><a href="#list-类型数组扩展操作" class="headerlink" title="list 类型数组扩展操作"></a><strong>list 类型数组扩展操作</strong></h3><ul>
<li><strong>规定时间内获取并移除数据</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">blpop key1 [key2] timeout</span><br><span class="line">brpop key1 [key2] timeout</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221008215815344.png" alt="image-20221008215815344"><br>阻塞式获取，获取值如果还没有的时候可以等，如果有值就可以获取到。</p>
<h3 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h3><p>微信朋友圈点赞，要求按照点赞顺序显示点赞好友信息，如果取消点赞，移除对应好友信息</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-166523647532016.png" alt="img"></p>
<ul>
<li><strong>移除指定数据</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lrem key count value</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221008220123068.png" alt="image-20221008220123068"></p>
<ul>
<li><code>redis</code>应用于具有操作线后顺序的数据控制</li>
</ul>
<h3 id="list类型数据操作注意事项"><a href="#list类型数据操作注意事项" class="headerlink" title="list类型数据操作注意事项"></a>list类型数据操作注意事项</h3><ul>
<li><code>list </code>中保存的数据都是<code>string</code>类型的，数据总容量式由西安的，最多<code>232-1</code>个元素<code>（4294967295）</code></li>
<li>list具有索引的概念，但是操作数据时候通常以队列的形式进行入队出队操作，或以栈的形式进入栈出栈的操作</li>
<li>获取全部数据操作结束索引设置为<code>-1</code></li>
<li><code>list</code> 可以对数据进行分页操作，通过第一页的信息来自<code>list</code>，第2页及更多的信息通过数据库的形式加载</li>
</ul>
<h3 id="list类型应用场景"><a href="#list类型应用场景" class="headerlink" title="list类型应用场景"></a>list类型应用场景</h3><p><strong>业务场景</strong></p>
<ul>
<li><p>twitter、新浪微博、腾讯微博中个人用于的关注列表需要按照用户的关注顺序进行展示，粉丝列表需要将最近关注的粉丝列在前面</p>
</li>
<li><p>新闻、资讯类网站如何将最新的新闻或资讯按照发生的事件顺序展示</p>
</li>
<li><p>企业运营过程中，系统将产生出大量的运营数据，如何保障堕胎服务器操作日志的统一顺序输出？</p>
<p>解决方案</p>
</li>
<li><p>依赖list的数据具有顺序的特征对信息进行管理</p>
</li>
<li><p>使用队列模型解决多路信息汇总合并的问题</p>
</li>
<li><p>使用栈模型解决最新消息的问题</p>
</li>
</ul>
<h2 id="Redis数据类型-Set"><a href="#Redis数据类型-Set" class="headerlink" title="Redis数据类型 Set"></a>Redis数据类型 Set</h2><ul>
<li>新的存储需求：存储大量的数据，在查询方面提供更高的效率</li>
<li>休要的存储结构：能够保存大量的数据，搞笑的内部存储机制，便于查询</li>
<li>set类型：与hash存储结构完全相同，仅存储键，不存储值（nil),并且值式不允许重复的</li>
</ul>
<h3 id="set类型数据的基本操作"><a href="#set类型数据的基本操作" class="headerlink" title="set类型数据的基本操作"></a>set类型数据的基本操作</h3><ul>
<li>添加数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sadd key menber1 [member2]</span><br></pre></td></tr></table></figure>

<ul>
<li>获取全部数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">smembers key</span><br></pre></td></tr></table></figure>

<ul>
<li>删除数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srem key member1 [member2]</span><br></pre></td></tr></table></figure>

<ul>
<li>获取集合数据总量</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scard key</span><br></pre></td></tr></table></figure>

<ul>
<li>判断集合中是否包含指定数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sismember key member</span><br></pre></td></tr></table></figure>

<h3 id="set类型数据的扩展操作"><a href="#set类型数据的扩展操作" class="headerlink" title="set类型数据的扩展操作"></a>set类型数据的扩展操作</h3><p><strong>业务场景</strong><br>每位用户首次使用进入头条时候会设置3项爱好的内容，但是后期为了增加用户的活跃度，兴趣点，必须让用户对其他信息类别逐渐产生兴趣，增加客户留存度，如何实现？</p>
<p><strong>业务分析</strong></p>
<ul>
<li><p>系统分析出各个分类的最新或最热点信息条目并组织成set集合</p>
</li>
<li><p>随机挑选其中部分信息</p>
</li>
<li><p>配合用户关注信息分类中的热点信息组织展示的全信息集合</p>
</li>
</ul>
<p><strong>解决方案</strong></p>
<ul>
<li>随机获取集合中指定数量的数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srandmember key [count]</span><br></pre></td></tr></table></figure>

<ul>
<li>随机获取集合中的某个数据并将该数据移出集合</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">spop key [count]</span><br></pre></td></tr></table></figure>

<ul>
<li>redis应用于随机推荐类信息检索，例如热点歌单推荐，热点新闻推荐，热点旅游线路，应用APP推荐，大V推荐等</li>
</ul>
<h3 id="set类型数据的扩展操作-1"><a href="#set类型数据的扩展操作-1" class="headerlink" title="set类型数据的扩展操作"></a>set类型数据的扩展操作</h3><p><strong>业务场景</strong></p>
<p><img src="https://./img-blog.csdnimg.cn/20200419195350115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><strong>解决方案</strong></p>
<ul>
<li>求两个集合的交、并、差集</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sinter key1 [key2]</span><br><span class="line">sunion key1 [key2]</span><br><span class="line">sdiff key1 [key2]</span><br></pre></td></tr></table></figure>

<ul>
<li>求两个集合的交、并、差集并存储到指定集合中</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sinterstore destination key1 [key2]</span><br><span class="line">sunionstore destination key1 [key2]</span><br><span class="line">sdiffstore destination key1 [key2]</span><br></pre></td></tr></table></figure>

<ul>
<li>将指定数据从原始集合移动到目标集合中</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">smove source destination member</span><br></pre></td></tr></table></figure>

<ul>
<li><code>redis</code>应用于同类信息的关联搜索，二度关联搜索，深度关联搜索</li>
<li>显示共同关注（一度）</li>
<li>显示共同好友（一度）</li>
<li>由用户A出发，获取到好友用户B的好友信息列表（一度）</li>
<li>由用户A出发，获取到好友用户B的购物清单列表（二度）</li>
<li>由用户A出发，获取到好友用户B的游戏充值列表（二度）</li>
</ul>
<h3 id="Set类型数据操作的注意事项"><a href="#Set类型数据操作的注意事项" class="headerlink" title="Set类型数据操作的注意事项"></a>Set类型数据操作的注意事项</h3><ul>
<li><code>set</code>类型不允许数据重复，如果添加的数据在<code>set</code>中已经存在，将只保留一份</li>
<li><code>set</code>虽然与<code>hash</code>的存储结构相同，但是无法启用<code>hash</code>中存储值的空间</li>
</ul>
<p><strong>业务场景</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-16652943755982.png" alt="img"></p>
<p><strong>解决方案</strong></p>
<ul>
<li>依赖set集合数据不重复的特征，依赖set集合hash存储结构特征完成数据过滤与快速查询</li>
<li>根据用户id获取用户所有角色</li>
<li>根据用户所有角色获取用户所有操作权限放入set集合</li>
<li>根据用户所有觉得获取用户所有数据全选放入set集合</li>
</ul>
<p><strong>校验工作</strong>：redis提供基础数据还是提供校验结果<br>Tips 10:</p>
<ul>
<li>redis应用于同类型不重复数据的合并操作</li>
</ul>
<h3 id="set类型应用场景"><a href="#set类型应用场景" class="headerlink" title="set类型应用场景"></a>set类型应用场景</h3><p><strong>业务场景</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/20200420110014423.png" alt="img"></p>
<p><strong>解决方案</strong></p>
<ul>
<li>利用set集合的数据去重特征，记录各种访问数据</li>
<li>建立string类型数据，利用incr统计日访问量（PV)</li>
<li>建立set模型，记录不同cookie数量（UV)</li>
<li>建立set模型，记录不同IP数量（IP)</li>
</ul>
<p><strong>业务场景（黑白名单）</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-16652944831775.png" alt="img"></p>
<p><strong>解决方案</strong></p>
<ul>
<li><p>基于经营战略设定问题用户发现、鉴别规则</p>
</li>
<li><p>周期性更行满足规则的用户黑名单，加入set集合</p>
</li>
<li><p>用户行为信息达到后与黑名单进行比比对，确认行为去向</p>
</li>
<li><p>黑名单过滤IP地址：应用于开放游客访问权限的信息源</p>
</li>
<li><p>黑名单过滤设备信息：应用于限定访问设备的信息源</p>
</li>
<li><p>黑名单过滤用户：应用于基于访问权限的信息源</p>
</li>
</ul>
<p>Tips 12:</p>
<ul>
<li>redis应用于基于黑名单与白名单设定的服务控制</li>
</ul>
<h2 id="Redis数据类型-sorted-set"><a href="#Redis数据类型-sorted-set" class="headerlink" title="Redis数据类型 sorted_set"></a>Redis数据类型 sorted_set</h2><ul>
<li>新的存储需求：根据排序有利于数据的有效显示，需要提供一种可以根据自身特征进行排序的方式</li>
<li>需要的存储结构：新的存储模型，可以保存可排序的数据</li>
<li>sorted_set类型：在set的存储结构基础上添加可排序字段</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-16652961455767.png" alt="img"></p>
<h3 id="sorted-set类型数据的基本操作"><a href="#sorted-set类型数据的基本操作" class="headerlink" title="sorted_set类型数据的基本操作"></a>sorted_set类型数据的基本操作</h3><ul>
<li>添加数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zadd key score1 member1 [score2 member2]</span><br></pre></td></tr></table></figure>

<ul>
<li>获取全部数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrange key start stop [WITHSCORES]</span><br><span class="line">zrevrange key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure>

<ul>
<li>删除数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrem key member [member …]</span><br></pre></td></tr></table></figure>

<ul>
<li>按条件获取数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrangebyscore key min max [WITHSCORES] [LIMIT]</span><br><span class="line">zrevrangebyscore key max min [WITHSCORES]</span><br></pre></td></tr></table></figure>

<ul>
<li>条件删除</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zremrangebyrank key start stop</span><br><span class="line">zremrangebyscore key min max</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li><p><code>min</code>与<code>max</code>用于限定搜索查询的条件</p>
</li>
<li><p><code>start</code>与<code>stop</code>用于限定查询范围，作用于索引，表示开始和结束索引</p>
</li>
<li><p><code>offset</code>与<code>count</code>用于限定查询范围，作用于查询结果，表示<code>开始位置</code>和<code>数据总量</code></p>
</li>
<li><p>获取集合数据总量</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcard key</span><br><span class="line">zcount key min max</span><br></pre></td></tr></table></figure>

<ul>
<li>集合交、并操作</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zinterstore destination numkeys key [key …]</span><br><span class="line">zunionstore destination numkeys key [key …]</span><br></pre></td></tr></table></figure>

<p>计算给定的一个或多个有序集的交集，其中给定 <code>key</code> 的数量必须以 <code>numkeys</code> 参数指定，并将该交集(结果集)储存到 <code>destination</code> 。</p>
<h3 id="sorted-set-类型数据的扩展操作"><a href="#sorted-set-类型数据的扩展操作" class="headerlink" title="sorted_set 类型数据的扩展操作"></a>sorted_set 类型数据的扩展操作</h3><p><strong>业务场景</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-16652965719209.png" alt="img"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-166529658190511.png" alt="img"></p>
<p><strong>解决方案</strong></p>
<ul>
<li>获取数据对应的索引（排名）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrank key member</span><br><span class="line">zrevrank key member</span><br></pre></td></tr></table></figure>

<ul>
<li>score 值获取与修改</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zscore key member</span><br><span class="line">zincrby key increment member</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-166529756430013.png" alt="img"></p>
<p>Tips 13:</p>
<ul>
<li><code>redis </code>应用于计数器组合排序功能对应的排名</li>
</ul>
<h3 id="sorted-set-类型数据操作的注意事项"><a href="#sorted-set-类型数据操作的注意事项" class="headerlink" title="sorted_set 类型数据操作的注意事项"></a>sorted_set 类型数据操作的注意事项</h3><ul>
<li><p>score 保存的数据存储空间是<code>64</code>位，如果是整数范围是</p>
</li>
<li><p>score保存的数据也可以是一个双精度的<code>double</code>值，基于双精度浮点数的特征，可能会丢失精度，使用时侯要慎重</p>
</li>
<li><p>sorted_set底层存储还是基于set结构的，因此数据不能重复，如果重复添加相同的数据，<code>score</code>值将被反复覆盖，保留最后一次修改的结果</p>
</li>
</ul>
<p><strong>业务场景</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/20200420131157293.png" alt="img"></p>
<p>解决方案</p>
<ul>
<li><p>对于基于时间线限定的任务处理，将处理时间记录位<code>score</code>值，利用排序功能区分处理的先后顺序</p>
</li>
<li><p>记录下一个要处理的事件，当到期后处理对应的任务，移除<code>redis</code>中的记录，并记录下一个要处理的时间</p>
</li>
<li><p>当新任务加入时，判定并更新当前下一个要处理的任务时间</p>
</li>
<li><p>为提升<code>sorted_set</code>的性能，通常将任务根据特征存储成若干个<code>sorted_set</code>.例如1小时内，1天内，年度等，操作时逐渐提升，将即将操作的若干个任务纳入到1小时内处理队列中</p>
</li>
<li><p>获取当前系统时间</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">time</span><br></pre></td></tr></table></figure>

<p>Tips 14</p>
<ul>
<li><code>redis</code>应用于定时任务执行顺序管理或任务过期管理</li>
</ul>
<h3 id="业务场景-1"><a href="#业务场景-1" class="headerlink" title="业务场景"></a><strong>业务场景</strong></h3><p>任务/消息权重设定应用</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/20200420132321704.png" alt="img"></p>
<p><strong>解决方案</strong></p>
<p>对于带有权重的任务，优先处理权重高的任务，采用<code>score</code>记录权重即可</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-166529806574817.png" alt="img"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FtcW0zMw==,size_16,color_FFFFFF,t_70-166529807350419.png" alt="img"></p>
<ul>
<li>Tips 15:</li>
<li><code>redis</code>应用于即时任务/消息队列执行管理 </li>
</ul>
<h2 id="数据类型实践案例"><a href="#数据类型实践案例" class="headerlink" title="数据类型实践案例"></a>数据类型实践案例</h2><p><strong>业务场景</strong></p>
<p>人工智能领域的语义识别与自动对话将是未来服务业机器人应答呼叫体系中的重要技术，百度自研用户评价 语义识别服务，免费开放给企业试用，同时训练百度自己的模型。现对试用用户的使用行为进行限速，限制 每个用户每分钟最多发起10次调用</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221009174400409.png" alt="image-20221009174400409"></p>
<p><strong>解决方案</strong></p>
<ul>
<li>设计计数器，记录调用次数，用于控制业务执行次数。以用户<code>id</code>作为<code>key</code>，使用次数作为<code>value</code> </li>
<li> 在调用前获取次数，判断是否超过限定次数 不超过次数的情况下，每次调用<code>计数+1</code> 业务调用失败，<code>计数-1 </code></li>
<li>为计数器设置生命周期为指定周期，例如<code>1秒/分钟</code>，自动清空周期内使用次数</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221009174553101.png" alt="image-20221009174553101"></p>
<p><strong>解决方案改良</strong></p>
<ul>
<li>取消最大值的判定，利用<code>incr</code>操作超过最大值抛出异常的形式替代每次判断是否大于最大值 </li>
<li>判断是否为<code>nil</code>， 如果是，设置为Max-次数 如果不是，计数+1 业务调用失败，计数-1 </li>
<li>遇到异常即+操作超过上限，视为使用达到上限</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221009174829031.png" alt="image-20221009174829031"></p>
<p><strong>业务场景</strong></p>
<p>使用微信的过程中，当微信接收消息后，会默认将最近接收的消息置顶，当多个好友及关注的订阅号同时发 送消息时，该排序会不停的进行交替。同时还可以将重要的会话设置为置顶。一旦用户离线后，再次打开微 信时，消息该按照什么样的顺序显示？</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221009175046572.png" alt="image-20221009175046572"></p>
<p><strong>解决方案</strong></p>
<ul>
<li>依赖list的数据具有顺序的特征对消息进行管理，将list结构作为栈使用 </li>
<li>对置顶与普通会话分别创建独立的list分别管理 </li>
<li>当某个list中接收到用户消息后，将消息发送方的id从list的一侧加入list（此处设定左侧） </li>
<li>多个相同id发出的消息反复入栈会出现问题，在入栈之前无论是否具有当前id对应的消息，先删除对应id </li>
<li>推送消息时先推送置顶会话list，再推送普通会话list，推送完成的list清除所有数据 </li>
<li>消息的数量，也就是微信用户对话数量采用计数器的思想另行记录，伴随list操作同步更新</li>
</ul>
<p><strong>Tips 17：</strong> </p>
<ul>
<li> redis 应用于基于时间顺序的数据操作，而不关注具体时间</li>
</ul>
<h3 id="解决方案列表"><a href="#解决方案列表" class="headerlink" title="解决方案列表"></a>解决方案列表</h3><ul>
<li>Tips 1：redis用于控制数据库表主键id，为数据库表主键提供生成策略，保障数据库表的主键唯一性 </li>
<li>Tips 2：redis 控制数据的生命周期，通过数据是否失效控制业务行为，适用于所有具有时效性限定控制的操作 </li>
<li>Tips 3：redis应用于各种结构型和非结构型高热度数据访问加速 </li>
<li>Tips 4：redis 应用于购物车数据存储设计 </li>
<li>Tips 5：redis 应用于抢购，限购类、限量发放优惠卷、激活码等业务的数据存储设计 </li>
<li>Tips 6：redis 应用于具有操作先后顺序的数据控制 </li>
<li>Tips 7：redis 应用于最新消息展示 </li>
<li>Tips 8：redis 应用于随机推荐类信息检索，例如热点歌单推荐，热点新闻推荐，热卖旅游线路，应用APP推荐，大V推荐等 </li>
<li>Tips 9：redis 应用于同类信息的关联搜索，二度关联搜索，深度关联搜索 </li>
<li>Tips 10：redis 应用于同类型不重复数据的合并、取交集操作 </li>
<li>Tips 11：redis 应用于同类型数据的快速去重 </li>
<li>Tips 12：redis 应用于基于黑名单与白名单设定的服务控制 </li>
<li>Tips 13：redis 应用于计数器组合排序功能对应的排名 </li>
<li>Tips 14：redis 应用于定时任务执行顺序管理或任务过期管理 </li>
<li>Tips 15：redis 应用于及时任务/消息队列执行管理 </li>
<li>Tips 16：redis 应用于按次结算的服务控制 </li>
<li>Tips 17：redis 应用于基于时间顺序的数据操作，而不关注具体时间</li>
</ul>
<h1 id="Redis-通用指令"><a href="#Redis-通用指令" class="headerlink" title="Redis 通用指令"></a>Redis 通用指令</h1><h2 id="key通用指令"><a href="#key通用指令" class="headerlink" title="key通用指令"></a>key通用指令</h2><h3 id="key-特征"><a href="#key-特征" class="headerlink" title="key 特征"></a><strong>key 特征</strong></h3><p>key是一个字符串，通过<code>key</code>获取<code>redis</code>中保存的数据</p>
<p><strong>key应该设计哪些操作？</strong></p>
<ul>
<li>对于key自身状态的相关操作，例如：删除，判定存在，获取类型等 </li>
<li>对于key有效性控制相关操作，例如：有效期设定，判定是否有效，有效状态的切换等 </li>
<li>对于key快速查询操作，例如：按指定策略查询key </li>
<li>……</li>
</ul>
<h3 id="key-基本操作"><a href="#key-基本操作" class="headerlink" title="key 基本操作"></a>key 基本操作</h3><h4 id="删除指定key"><a href="#删除指定key" class="headerlink" title="删除指定key"></a><strong>删除指定key</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">del</span> string</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get string</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<h4 id="获取key是否存在"><a href="#获取key是否存在" class="headerlink" title="获取key是否存在"></a><strong>获取key是否存在</strong></h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">exists key</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; exists list1</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="获取key的类型"><a href="#获取key的类型" class="headerlink" title="获取key的类型"></a><strong>获取key的类型</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type key</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">type</span> list1</span><br><span class="line">list</span><br></pre></td></tr></table></figure>

<h3 id="key-扩展操作（时效性控制）"><a href="#key-扩展操作（时效性控制）" class="headerlink" title="key 扩展操作（时效性控制）"></a>key 扩展操作（时效性控制）</h3><h4 id="为指定key设置有效期"><a href="#为指定key设置有效期" class="headerlink" title="为指定key设置有效期"></a><strong>为指定key设置有效期</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">expire key seconds</span><br><span class="line">pexpire key milliseconds</span><br><span class="line">expireat key timestamp</span><br><span class="line">pexpireat key milliseconds-timestamp</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; expire name <span class="number">10</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line"><span class="string">&quot;weiwshao&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; expireat name <span class="number">1665310700</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line"><span class="string">&quot;weishao&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; time</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;1665310693&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;637763&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line"><span class="string">&quot;weishao&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<p><code>EXPIREAT</code> 的作用和 <code>EXPIRE</code> 类似，都用于为 <code>key</code> 设置生存时间。不同在于 <code>EXPIREAT</code> 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</p>
<h4 id="获取key的有效时间"><a href="#获取key的有效时间" class="headerlink" title="获取key的有效时间"></a><strong>获取key的有效时间</strong></h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ttl key</span><br><span class="line">pttl key</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name weishao</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; ttl name</span><br><span class="line">(integer) <span class="literal">-1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; expire name <span class="number">10</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; ttl name</span><br><span class="line">(integer) <span class="number">7</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; ttl name</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; pttl name</span><br><span class="line">(integer) <span class="literal">-2</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name weishao</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; pttl name</span><br><span class="line">(integer) <span class="literal">-1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; expire name <span class="number">10</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; pttl name</span><br><span class="line">(integer) <span class="number">7061</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; pttl name</span><br><span class="line">(integer) <span class="literal">-2</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>当 <code>key</code> 不存在时，返回 <code>-2</code> 。</li>
<li>当 <code>key</code> 存在但没有设置剩余生存时间时，返回 <code>-1</code> 。</li>
<li>否则，以毫秒为单位，返回 <code>key</code> 的剩余生存时间。</li>
</ul>
<h4 id="切换key从时效性转换为永久性"><a href="#切换key从时效性转换为永久性" class="headerlink" title="切换key从时效性转换为永久性"></a><strong>切换key从时效性转换为永久性</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">persist key</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; expire name <span class="number">10</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; ttl name</span><br><span class="line">(integer) <span class="number">7</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; persist name</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; ttl name</span><br><span class="line">(integer) <span class="literal">-1</span></span><br></pre></td></tr></table></figure>

<h3 id="key-扩展操作（查询模式）"><a href="#key-扩展操作（查询模式）" class="headerlink" title="key 扩展操作（查询模式）"></a>key 扩展操作（查询模式）</h3><h4 id="查询key"><a href="#查询key" class="headerlink" title="查询key"></a><strong>查询key</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keys pattern</span><br></pre></td></tr></table></figure>

<p><strong>查询模式规则</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* 匹配任意数量的任意符号 ? 配合一个任意符号 [] 匹配一个指定符号</span><br><span class="line">keys * 查询所有</span><br><span class="line">keys it* 查询所有以it开头</span><br><span class="line">keys *heima 查询所有以heima结尾</span><br><span class="line">keys ??heima 查询所有前面两个字符任意，后面以heima结尾</span><br><span class="line">keys user:? 查询所有以user:开头，最后一个字符任意</span><br><span class="line">keys u[st]er:1 查询所有以u开头，以er:1结尾，中间包含一个字母，s或t</span><br></pre></td></tr></table></figure>

<h4 id="key-其他操作"><a href="#key-其他操作" class="headerlink" title="key 其他操作"></a><strong>key 其他操作</strong></h4><h5 id="为key改名"><a href="#为key改名" class="headerlink" title="为key改名"></a>为key改名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename key newkey</span><br><span class="line">renamenx key newkey</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name weishao</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; rename name name2</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt;</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get name2</span><br><span class="line"><span class="string">&quot;weishao&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get name2</span><br><span class="line"><span class="string">&quot;weishao&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name3 <span class="number">123</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; renamenx name2 name3</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>当且仅当 <code>newkey</code> 不存在时，将 <code>key</code> 改名为 <code>newkey</code> 。</p>
<p>当 <code>key</code> 不存在时，返回一个错误。</p>
<p>修改成功时，返回 <code>1</code> ； 如果 <code>newkey</code> 已经存在，返回 <code>0</code> 。</p>
<h5 id="对所有key排序"><a href="#对所有key排序" class="headerlink" title="对所有key排序"></a>对所有key排序</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line">1) &quot;8&quot;</span><br><span class="line">2) &quot;6&quot;</span><br><span class="line">3) &quot;2&quot;</span><br><span class="line">4) &quot;4&quot;</span><br><span class="line">5) &quot;3&quot;</span><br><span class="line">6) &quot;6&quot;</span><br><span class="line">127.0.0.1:6379&gt; sort list2</span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) &quot;3&quot;</span><br><span class="line">3) &quot;4&quot;</span><br><span class="line">4) &quot;6&quot;</span><br><span class="line">5) &quot;6&quot;</span><br><span class="line">6) &quot;8&quot;</span><br></pre></td></tr></table></figure>

<h5 id="其他key通用操作"><a href="#其他key通用操作" class="headerlink" title="其他key通用操作"></a>其他key通用操作</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">help @generic</span><br></pre></td></tr></table></figure>

<h2 id="数据库通用指令"><a href="#数据库通用指令" class="headerlink" title="数据库通用指令"></a>数据库通用指令</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a><strong>数据库</strong></h3><h4 id="key-的重复问题"><a href="#key-的重复问题" class="headerlink" title="key 的重复问题"></a><strong>key 的重复问题</strong></h4><ul>
<li><code>key</code>是由程序员定义的 </li>
<li><code>redis</code>在使用过程中，伴随着操作数据量的增加，会出现大量的数据以及对应的<code>key </code></li>
<li>数据不区分种类、类别混杂在一起，极易出现重复或冲突</li>
</ul>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h4><ul>
<li>redis为每个服务提供有16个数据库，编号从0到15 </li>
<li>每个数据库之间的数据相互独立</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221009204434585.png" alt="image-20221009204434585"></p>
<h3 id="db-基本操作"><a href="#db-基本操作" class="headerlink" title="db 基本操作"></a>db 基本操作</h3><h4 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">select</span> index</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">select</span> <span class="number">1</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>[<span class="number">1</span>]&gt;</span><br></pre></td></tr></table></figure>

<h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">quit</span><br><span class="line">ping</span><br><span class="line"><span class="built_in">echo</span> message</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>

<p>使用客户端向 Redis 服务器发送一个 <code>PING</code> ，如果服务器运作正常的话，会返回一个 <code>PONG</code> 。通常用于测试与服务器的连接是否仍然生效，或者用于测量延迟值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; echo 123</span><br><span class="line">&quot;123&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>

<p>打印一个特定的信息 <code>message</code> ，测试时使用。</p>
<h3 id="db-相关操作"><a href="#db-相关操作" class="headerlink" title="db 相关操作"></a>db 相关操作</h3><h4 id="数据移动"><a href="#数据移动" class="headerlink" title="数据移动"></a>数据移动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">move key db</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">move</span> name2 <span class="number">1</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; exists name2</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">select</span> <span class="number">1</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>[<span class="number">1</span>]&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name2&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="数据清除"><a href="#数据清除" class="headerlink" title="数据清除"></a>数据清除</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dbsize</span><br><span class="line">flushdb</span><br><span class="line">flushall</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>[<span class="number">1</span>]&gt; dbsize</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>返回当前数据库的 key 的数量。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; dbsize</span><br><span class="line">(integer) <span class="number">16</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; flushdb</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; dbsize</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>清空当前数据库中的所有 key。此命令从不失败。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; dbsize</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">select</span> <span class="number">1</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>[<span class="number">1</span>]&gt; dbsize</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>[<span class="number">1</span>]&gt; <span class="built_in">select</span> <span class="number">0</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; flushall</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">select</span> <span class="number">1</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>[<span class="number">1</span>]&gt; dbsize</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>清空整个 <code>Redis</code> 服务器的数据(删除所有数据库的所有<code> key</code> )。此命令从不失败。</p>
<h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><h2 id="Jedis简介"><a href="#Jedis简介" class="headerlink" title="Jedis简介"></a>Jedis简介</h2><h3 id="编程语言与redis"><a href="#编程语言与redis" class="headerlink" title="编程语言与redis"></a>编程语言与redis</h3><p><code>Java</code>语言连接<code>redis</code>服务 <code>Jedis</code></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221009210540279.png" alt="image-20221009210540279"></p>
<ul>
<li><p>Java语言连接redis服务 </p>
<ul>
<li><p>Jedis </p>
</li>
<li><p>SpringData Redis </p>
</li>
<li><p>Lettuce </p>
</li>
</ul>
</li>
<li><p>C 、C++ 、C# 、Erlang、Lua 、Objective-C 、Perl 、PHP 、Python 、Ruby 、Scala </p>
</li>
<li><p>可视化连接redis客户端 </p>
<ul>
<li><p>Redis Desktop Manager </p>
</li>
<li><p>Redis Client </p>
</li>
<li><p>Redis Studi</p>
</li>
</ul>
</li>
</ul>
<h2 id="HelloWorld（Jedis版）"><a href="#HelloWorld（Jedis版）" class="headerlink" title="HelloWorld（Jedis版）"></a>HelloWorld（Jedis版）</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li><strong>jar包导入</strong> </li>
</ul>
<p>下载地址：<a href="https://mvnrepository.com/artifact/redis.clients/jedis">https://mvnrepository.com/artifact/redis.clients/jedis</a></p>
<ul>
<li><strong>基于maven</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="客户端连接redis"><a href="#客户端连接redis" class="headerlink" title="客户端连接redis"></a>客户端连接redis</h3><h4 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a><strong>连接redis</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br></pre></td></tr></table></figure>

<h4 id="操作redis"><a href="#操作redis" class="headerlink" title="操作redis"></a><strong>操作redis</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">jedis.get(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="关闭redis连接"><a href="#关闭redis连接" class="headerlink" title="关闭redis连接"></a><strong>关闭redis连接</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jedis.close();</span><br></pre></td></tr></table></figure>

<h4 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h4><p><a href="http://xetorthio.github.io/jedis/">http://xetorthio.github.io/jedis/</a></p>
<h3 id="Jedis读写redis数据"><a href="#Jedis读写redis数据" class="headerlink" title="Jedis读写redis数据"></a>Jedis读写redis数据</h3><h4 id="案例：服务调用次数控制"><a href="#案例：服务调用次数控制" class="headerlink" title="案例：服务调用次数控制"></a><strong>案例：服务调用次数控制</strong></h4><p>人工智能领域的语义识别与自动对话将是未来服务业机器人应答呼叫体系中的重要技术，百度自研用户评 价语义识别服务，免费开放给企业试用，同时训练百度自己的模型。现对试用用户的使用行为进行限速， 限制每个用户每分钟最多发起10次调用</p>
<ul>
<li><p><strong>案例要求</strong> </p>
<ul>
<li><p>① 设定A、B、C三个用户 </p>
</li>
<li><p>② A用户限制10次/分调用，B用户限制30次/分调用，C用户不限制</p>
</li>
</ul>
</li>
</ul>
<h4 id="案例：需求分析"><a href="#案例：需求分析" class="headerlink" title="案例：需求分析"></a><strong>案例：需求分析</strong></h4><ul>
<li>① 设定一个服务方法，用于模拟实际业务调用的服务，内部采用打印模拟调用 </li>
<li>② 在业务调用前服务调用控制单元，内部使用redis进行控制，参照之前的方案 </li>
<li>③ 对调用超限使用异常进行控制，异常处理设定为打印提示信息 </li>
<li>④ 主程序启动3个线程，分别表示3种不同用户的调用</li>
</ul>
<h4 id="案例：实现步骤"><a href="#案例：实现步骤" class="headerlink" title="案例：实现步骤"></a><strong>案例：实现步骤</strong></h4><ol>
<li><strong>设定业务方法</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">business</span><span class="params">(String id,<span class="type">long</span> num)</span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;用户&quot;</span>+id+<span class="string">&quot;发起业务调用，当前第&quot;</span>+num+<span class="string">&quot;次&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>设定多线类，模拟用户调用</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">     	jd.service(id);</span><br><span class="line">     	<span class="comment">//模拟调用间隔，设定为1.x秒</span></span><br><span class="line">         <span class="keyword">try</span>&#123;</span><br><span class="line">             <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">             Thread.sleep(<span class="number">1000</span>+ r.nextInt(<span class="number">200</span>));</span><br><span class="line">         &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">             e.printStackTrace();;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>设计redis控制方案</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">service</span><span class="params">(String id)</span>&#123;</span><br><span class="line">     <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">     <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;compid:&quot;</span> + id);</span><br><span class="line">     <span class="comment">//判定是否具有调用计数控制，利用异常进行控制处理</span></span><br><span class="line">     <span class="keyword">if</span>(value == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="comment">//没有控制，创建控制计数器</span></span><br><span class="line">         jedis.setex(<span class="string">&quot;compid:&quot;</span> + id, <span class="number">20</span>, <span class="string">&quot;&quot;</span>+(Long.MAX_VALUE-<span class="number">10</span>));</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="comment">//有控制，自增，并调用业务</span></span><br><span class="line">         <span class="keyword">try</span>&#123;</span><br><span class="line">         	<span class="type">Long</span> <span class="variable">val</span> <span class="operator">=</span> jedis.incr(<span class="string">&quot;compid:&quot;</span>+id);</span><br><span class="line">         	business(id,<span class="number">10</span>+val-Long.MAX_VALUE);</span><br><span class="line">         &#125;<span class="keyword">catch</span> (JedisDataException e)&#123;</span><br><span class="line">         <span class="comment">//调用次数溢出，弹出提示</span></span><br><span class="line">         System.out.println(<span class="string">&quot;用户：&quot;</span>+id+<span class="string">&quot;使用次数已达到上限，请稍后再试，或升级VIP会员&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">     	jedis.close();</span><br><span class="line">     	&#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>设计启动主程序</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;初级用户&quot;</span>);</span><br><span class="line">     t1.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后续1：对业务控制方案进行改造，设定不同用户等级的判定 </p>
<p>后续2：将不同用户等级对应的信息、限制次数等设定到redis中，使用hash保存</p>
<h2 id="基于连接池获取连接"><a href="#基于连接池获取连接" class="headerlink" title="基于连接池获取连接"></a>基于连接池获取连接</h2><p>JedisPool：Jedis提供的连接池技术 </p>
<ul>
<li><code>poolConfig</code>:连接池配置对象 </li>
<li><code>host</code>:redis服务地址 </li>
<li><code>port</code>:redis服务端口号</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">JedisPool</span><span class="params">(GenericObjectPoolConfig poolConfig, String host, <span class="type">int</span> port)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>(poolConfig, host, port, <span class="number">2000</span>, (String)<span class="literal">null</span>, <span class="number">0</span>, (String)<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="封装连接参数"><a href="#封装连接参数" class="headerlink" title="封装连接参数"></a>封装连接参数</h3><ul>
<li><strong>jedis.properties</strong></li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jedis.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="attr">jedis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">jedis.maxTotal</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">jedis.maxIdle</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure>

<h3 id="加载配置信息"><a href="#加载配置信息" class="headerlink" title="加载配置信息"></a>加载配置信息</h3><ul>
<li>静态代码块初始化资源</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"> <span class="comment">//读取配置文件 获得参数值</span></span><br><span class="line"> <span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jedis&quot;</span>);</span><br><span class="line"> host = rb.getString(<span class="string">&quot;jedis.host&quot;</span>);</span><br><span class="line"> port = Integer.parseInt(rb.getString(<span class="string">&quot;jedis.port&quot;</span>));</span><br><span class="line"> maxTotal = Integer.parseInt(rb.getString(<span class="string">&quot;jedis.maxTotal&quot;</span>));</span><br><span class="line"> maxIdle = Integer.parseInt(rb.getString(<span class="string">&quot;jedis.maxIdle&quot;</span>));</span><br><span class="line"> poolConfig = <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line"> poolConfig.setMaxTotal(maxTotal);</span><br><span class="line"> poolConfig.setMaxIdle(maxIdle);</span><br><span class="line"> jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(poolConfig,host,port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a>获取连接</h3><ul>
<li>对外访问接口，提供<code>jedis</code>连接对象，连接从连接池获取</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPool.getResource();</span><br><span class="line">     <span class="keyword">return</span> jedis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="可视化客户端"><a href="#可视化客户端" class="headerlink" title="可视化客户端"></a>可视化客户端</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010115536757.png" alt="image-20221010115536757"></p>
<h1 id="Redis-安装"><a href="#Redis-安装" class="headerlink" title="Redis 安装"></a>Redis 安装</h1><h2 id="基于Linux环境安装Redis"><a href="#基于Linux环境安装Redis" class="headerlink" title="基于Linux环境安装Redis"></a>基于Linux环境安装Redis</h2><ul>
<li><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a><strong>下载安装包</strong></h3></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-?.?.?.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010120957375.png" alt="image-20221010120957375"></p>
<ul>
<li><strong>解压</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar –xvf 文件名.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010121604452.png" alt="image-20221010121604452"></p>
<ul>
<li><strong>编译</strong> </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010122116412.png" alt="image-20221010122116412"></p>
<ul>
<li><strong>安装</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make install [destdir=/目录]</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010122310424.png" alt="image-20221010122310424"></p>
<h2 id="指定端口启动服务"><a href="#指定端口启动服务" class="headerlink" title="指定端口启动服务"></a>指定端口启动服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server –-port 6380</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010123927631.png" alt="image-20221010123927631"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010124244936.png" alt="image-20221010124244936"></p>
<h2 id="指定配置文件启动"><a href="#指定配置文件启动" class="headerlink" title="指定配置文件启动"></a>指定配置文件启动</h2><p><strong>删除配置文件 注释信息和无用空白并保存至新的配置文件<code>redis-6379</code>文件中</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat redis.conf | grep -v &quot;#&quot; | grep -v &quot;^$&quot; &gt; redis-6379.conf</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010125149349.png" alt="image-20221010125149349"></p>
<p><strong>新建日志保存位置，并获取路径</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010130449881.png" alt="image-20221010130449881"></p>
<p><strong>修改配置<code>redis-6379</code>文件保存必要配置</strong></p>
<p><strong>基本配置</strong> </p>
<ul>
<li>daemonize yes <ul>
<li>以守护进程方式启动，使用本启动方式，redis将以服务的形式存在，日志将不再打印到命令窗口中 </li>
</ul>
</li>
<li>port 6<ul>
<li>设定当前服务启动端口号</li>
</ul>
</li>
<li>dir “/自定义目录/redis/data“ <ul>
<li>设定当前服务文件保存位置，包含日志文件、持久化文件（后面详细讲解）等</li>
</ul>
</li>
<li>logfile 6***.log<ul>
<li>设定日志文件名，便于查阅</li>
</ul>
</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010130013766.png" alt="image-20221010130013766"></p>
<p><strong>指定配置文件<code>redis-6379.conf</code>启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server redis-6379.conf </span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010130712193.png" alt="image-20221010130712193"></p>
<p><strong>查看redis是否启动完成</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis-</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010130827016.png" alt="image-20221010130827016"></p>
<h2 id="配置文件启动目录管理"><a href="#配置文件启动目录管理" class="headerlink" title="配置文件启动目录管理"></a>配置文件启动目录管理</h2><p><strong>创建配置目录，并将配置文件放入目录内</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 redis-7.0.5]# mkdir conf</span><br><span class="line">[root@hecs-33111 redis-7.0.5]# mv redis-6379.conf conf</span><br></pre></td></tr></table></figure>

<p><strong>以指定目录下的配置及文件启动redis</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 redis-7.0.5]# redis-server conf/redis-6379.conf</span><br></pre></td></tr></table></figure>

<p><strong>同时启动两个不同端口的redis</strong></p>
<ul>
<li><strong>复制配置文件并修改</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp redis-6379.conf redis-6380.conf</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010164820275.png" alt="image-20221010164820275"></p>
<ul>
<li><strong>同时启动两个服务</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 redis-7.0.5]# redis-server conf/redis-6380.conf</span><br><span class="line">[root@hecs-33111 redis-7.0.5]# redis-server conf/redis-6379.conf</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010165103534.png" alt="image-20221010165103534"></p>
<h1 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h1><h2 id="持久化简介"><a href="#持久化简介" class="headerlink" title="持久化简介"></a>持久化简介</h2><p><strong>意外的断电</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010170628637.png" alt="image-20221010170628637"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010170643138.png" alt="image-20221010170643138"></p>
<p><strong>什么是持久化</strong></p>
<p>利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制称为持久化。</p>
<p><strong>为什么要进行持久化</strong></p>
<p>防止数据的意外丢失，确保数据安全性</p>
<p><strong>持久化过程保存什么</strong></p>
<ul>
<li>将当前数据状态进行保存，快照形式，存储数据结果，存储格式简单，关注点在数据 </li>
<li>将数据的操作过程进行保存，日志形式，存储操作过程，存储格式复杂，关注点在数据的操作过程</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010170926880.png" alt="image-20221010170926880"></p>
<h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><h3 id="RDB启动方式-——-save指令"><a href="#RDB启动方式-——-save指令" class="headerlink" title="RDB启动方式 —— save指令"></a>RDB启动方式 —— save指令</h3><p><strong>命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">save</span><br></pre></td></tr></table></figure>

<p>作用 手动执行一次保存操作</p>
<p><strong>演示</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hecs</span>-<span class="number">33111</span> <span class="type">redis</span>-<span class="number">7.0</span><span class="type">.5</span>]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; </span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; </span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; </span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010171723018.png" alt="image-20221010171723018"></p>
<ul>
<li><strong>添加数据观察rdb文件变化</strong></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name weishao</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010172032344.png" alt="image-20221010172032344"></p>
<h4 id="RDB启动方式-——-save指令相关配置"><a href="#RDB启动方式-——-save指令相关配置" class="headerlink" title="RDB启动方式 —— save指令相关配置"></a>RDB启动方式 —— save指令相关配置</h4><ul>
<li><strong>dbfilename dump.rdb</strong> <ul>
<li>说明：设置本地数据库文件名，默认值为 dump.rdb </li>
<li>经验：通常设置为<code>dump-端口号.rdb </code></li>
</ul>
</li>
<li><strong>dir</strong> <ul>
<li>说明：设置存储.rdb文件的路径 </li>
<li>经验：通常设置成存储空间较大的目录中，目录名称<code>data </code></li>
</ul>
</li>
<li><strong>rdbcompression yes</strong> <ul>
<li>说明：设置存储至本地数据库时是否压缩数据，默认为<code> yes</code>，采用 <code>LZF</code> 压缩 </li>
<li>经验：通常默认为开启状态，如果设置为no，可以节省 CPU 运行时间，但会使存储的文件变大（巨大）</li>
</ul>
</li>
<li><strong>rdbchecksum yes</strong> <ul>
<li>说明：设置是否进行<code>RDB</code>文件格式校验，该校验过程在写文件和读文件过程均进行 </li>
<li>经验：通常默认为开启状态，如果设置为<code>no</code>，可以节约读写性过程约<code>10%</code>时间消耗，但是存储一定的数据损坏风险</li>
</ul>
</li>
</ul>
<p><strong>演示</strong></p>
<ul>
<li><strong>修改配置文件</strong></li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010211312492.png" alt="image-20221010211312492"></p>
<ul>
<li><strong>添加数据并save,观察rdb文件是否生成</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name weishao</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010211455930.png" alt="image-20221010211455930"></p>
<p><strong>数据恢复演示</strong></p>
<ul>
<li><strong>关闭redis进程</strong></li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010211925344.png" alt="image-20221010211925344"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010212001633.png" alt="image-20221010212001633"></p>
<ul>
<li><strong>启动redis，观察是否有数据</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 redis-7.0.5]# redis-server conf/redis-6379.conf </span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010212159279.png" alt="image-20221010212159279"></p>
<ul>
<li><strong>关闭前的数据存在，持久化生效</strong></li>
</ul>
<h4 id="RDB启动方式-——-save指令工作原理"><a href="#RDB启动方式-——-save指令工作原理" class="headerlink" title="RDB启动方式 —— save指令工作原理"></a>RDB启动方式 —— save指令工作原理</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010212520404.png" alt="image-20221010212520404"></p>
<p><strong>RDB启动方式</strong></p>
<p><strong>数据量过大，单线程执行方式造成效率过低如何处理？</strong></p>
<p>后台执行 </p>
<ul>
<li>谁：redis操作者（用户）发起指令；redis服务器控制指令执行 </li>
<li>什么时间：即时（发起）；合理的时间（执行） </li>
<li>干什么事情：保存数据</li>
</ul>
<h3 id="RDB启动方式-——-bgsave指令"><a href="#RDB启动方式-——-bgsave指令" class="headerlink" title="RDB启动方式 —— bgsave指令"></a>RDB启动方式 —— bgsave指令</h3><ul>
<li>命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bgsave</span><br></pre></td></tr></table></figure>

<ul>
<li>作用 </li>
</ul>
<p>​    手动启动后台保存操作，但不是立即执行</p>
<p><strong>演示</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">127.0.0.1:6379&gt; set age 25</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">&quot;25&quot;</span><br><span class="line">127.0.0.1:6379&gt; bgsave</span><br><span class="line">Background saving started</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010215027206.png" alt="image-20221010215027206"></p>
<h4 id="RDB启动方式-——-bgsave指令工作原理"><a href="#RDB启动方式-——-bgsave指令工作原理" class="headerlink" title="RDB启动方式 —— bgsave指令工作原理"></a>RDB启动方式 —— bgsave指令工作原理</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221010215129772.png" alt="image-20221010215129772"></p>
<h4 id="RDB启动方式-——-bgsave指令相关配置"><a href="#RDB启动方式-——-bgsave指令相关配置" class="headerlink" title="RDB启动方式 —— bgsave指令相关配置"></a>RDB启动方式 —— bgsave指令相关配置</h4><ul>
<li><p> dbfilename dump.rdb </p>
</li>
<li><p> dir </p>
</li>
<li><p> rdbcompression yes </p>
</li>
<li><p> rdbchecksum yes </p>
</li>
<li><p><strong>stop-writes-on-bgsave-error yes</strong> </p>
<ul>
<li><p>说明：后台存储过程中如果出现错误现象，是否停止保存操作 </p>
</li>
<li><p>经验：通常默认为开启状态</p>
</li>
</ul>
</li>
</ul>
<p><strong>RDB启动方式</strong></p>
<p>反复执行保存指令，忘记了怎么办？不知道数据产生了多少变化，何时保存？</p>
<p><strong>自动执行</strong></p>
<ul>
<li> 谁：redis服务器发起指令（基于条件） </li>
<li> 什么时间：满足条件 </li>
<li> 干什么事情：保存数据</li>
</ul>
<h3 id="RDB启动方式-——save配置"><a href="#RDB启动方式-——save配置" class="headerlink" title="RDB启动方式 ——save配置"></a>RDB启动方式 ——save配置</h3><ul>
<li><strong>配置</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">save second changes</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong></li>
</ul>
<p>满足限定时间范围内<code>key</code>的变化数量达到指定数量即进行持久化</p>
<ul>
<li><p><strong>参数</strong></p>
<ul>
<li><p>second：监控时间范围 </p>
</li>
<li><p>changes：监控key的变化量</p>
</li>
</ul>
</li>
<li><p><strong>位置</strong></p>
<ul>
<li>在conf文件中进行配置</li>
</ul>
</li>
<li><p><strong>范例</strong></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure>

<p><strong>演示</strong></p>
<p>修改配置文件，并重新以配置文件启动</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221011141609019.png" alt="image-20221011141609019"></p>
<p>添加数据观察<code>rdb</code>文件变化</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221011142127323.png" alt="image-20221011142127323"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221011142306626.png" alt="image-20221011142306626"></p>
<h4 id="RDB启动方式-——save配置原理"><a href="#RDB启动方式-——save配置原理" class="headerlink" title="RDB启动方式 ——save配置原理"></a>RDB启动方式 ——save配置原理</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221011142546510.png" alt="image-20221011142546510"></p>
<h3 id="RDB三种启动方式对比"><a href="#RDB三种启动方式对比" class="headerlink" title="RDB三种启动方式对比"></a>RDB三种启动方式对比</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221011142827574.png" alt="image-20221011142827574"></p>
<h3 id="RDB特殊启动形式"><a href="#RDB特殊启动形式" class="headerlink" title="RDB特殊启动形式"></a>RDB特殊启动形式</h3><ul>
<li><strong>全量复制</strong></li>
</ul>
<p>​        在主从复制中详细讲解</p>
<ul>
<li><strong>服务器运行过程中重启</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">debug reload</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>关闭服务器时指定保存数据</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shutdown save</span><br></pre></td></tr></table></figure>

<p>默认情况下执行<code>shutdown</code>命令时，自动执行 <code>bgsave</code>(如果没有开启<code>AOF</code>持久化功能)</p>
<h3 id="RDB优点与缺点"><a href="#RDB优点与缺点" class="headerlink" title="RDB优点与缺点"></a>RDB优点与缺点</h3><h4 id="RDB优点"><a href="#RDB优点" class="headerlink" title="RDB优点"></a>RDB优点</h4><ul>
<li><code>RDB</code>是一个紧凑压缩的二进制文件，存储效率较高 </li>
<li> <code>RDB</code>内部存储的是<code>redis</code>在某个<code>时间点</code>的数据快照，非常适合用于数据备份，全量复制等场景 </li>
<li> <code>RDB</code>恢复数据的速度要比<code>AOF</code>快很多</li>
<li> 应用：服务器中每<code>X</code>小时执行<code>bgsave</code>备份，并将<code>RDB</code>文件拷贝到远程机器中，用于灾难恢复。</li>
</ul>
<h4 id="RDB缺点"><a href="#RDB缺点" class="headerlink" title="RDB缺点"></a>RDB缺点</h4><ul>
<li><code>RDB</code>方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据 </li>
<li><code>bgsave</code>指令每次运行要执行<code>fork</code>操作创建子进程，要牺牲掉一些性能 </li>
<li><code>Redis</code>的众多版本中未进行<code>RDB</code>文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象</li>
</ul>
<h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><h3 id="RDB存储的弊端"><a href="#RDB存储的弊端" class="headerlink" title="RDB存储的弊端"></a>RDB存储的弊端</h3><ul>
<li> 存储数据量较大，效率较低 基于快照思想，每次读写都是全部数据，当数据量巨大时，效率非常低 </li>
<li> 大数据量下的<code>IO</code>性能较低 </li>
<li> 基于<code>fork</code>创建子进程，内存产生额外消耗 </li>
<li> 宕机带来的数据丢失风险</li>
</ul>
<h4 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路"></a>解决思路</h4><ul>
<li> 不写全数据，仅记录部分数据 </li>
<li> 降低区分数据是否改变的难度，改记录数据为记录操作过程 </li>
<li> 对所有操作均进行记录，排除丢失数据的风险</li>
</ul>
<h3 id="AOF概念"><a href="#AOF概念" class="headerlink" title="AOF概念"></a>AOF概念</h3><ul>
<li> <code>AOF</code>(append only file)持久化：以独立日志的方式记录每次写命令，重启时再重新执行<code>AOF</code>文件中命令 达到恢复数据的目的。与<code>RDB</code>相比可以简单描述为改记录数据为记录数据产生的过程 </li>
<li> <code>AOF</code>的主要作用是解决了数据持久化的实时性，目前已经是<code>Redis</code>持久化的主流方式</li>
</ul>
<h3 id="AOF写数据过程"><a href="#AOF写数据过程" class="headerlink" title="AOF写数据过程"></a>AOF写数据过程</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221011152156869.png" alt="image-20221011152156869"></p>
<h3 id="AOF写数据三种策略-appendfsync"><a href="#AOF写数据三种策略-appendfsync" class="headerlink" title="AOF写数据三种策略(appendfsync)"></a>AOF写数据三种策略(appendfsync)</h3><p> <strong>always(每次）</strong> </p>
<p>​    每次写入操作均同步到<code>AOF</code>文件中，<code>数据零误差，性能较低 </code></p>
<p> <strong>everysec（每秒）</strong> </p>
<p>​    每秒将缓冲区中的指令同步到<code>AOF</code>文件中，数据<code>准确性较高，性能较高 </code></p>
<p>​    在系统突然宕机的情况下丢失<code>1</code>秒内的数据 </p>
<p> <strong>no（系统控制）</strong> </p>
<p>​    由操作系统控制每次同步到<code>AOF</code>文件的周期，整体过程<code>不可控</code></p>
<h3 id="AOF相关配置"><a href="#AOF相关配置" class="headerlink" title="AOF相关配置"></a>AOF相关配置</h3><p><strong>配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appendfilename filename</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong></p>
<p><code>AOF</code>持久化文件名，默认文件名未<code>appendonly.aof</code>，建议配置为<code>appendonly-端口号.aof</code></p>
<p><strong>配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dir</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong> </p>
<p>​    <code>AOF</code>持久化文件保存路径，与<code>RDB</code>持久化文件保持一致即可</p>
<p><strong>演示</strong></p>
<p><strong>修改配置文件，并重启服务</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221011164116974.png" alt="image-20221011164116974"></p>
<p><strong>添加数据</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set age 55</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221012100201807.png" alt="image-20221012100201807"></p>
<h3 id="AOF写数据遇到的问题"><a href="#AOF写数据遇到的问题" class="headerlink" title="AOF写数据遇到的问题"></a>AOF写数据遇到的问题</h3><p>如果连续执行如下指令该如何处理</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221011165301074.png" alt="image-20221011165301074"></p>
<h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>随着命令不断写入<code>AOF</code>，文件会越来越大，为了解决这个问题，<code>Redis</code>引入了<code>AOF</code>重写机制压缩文件体积。<code>AOF</code>文件重 写是将<code>Redis</code>进程内的数据转化为写命令同步到新<code>AOF</code>文件的过程。简单说就是将对同一个数据的若干个条命令执行结 果转化成最终结果数据对应的指令进行记录。</p>
<h4 id="AOF重写作用"><a href="#AOF重写作用" class="headerlink" title="AOF重写作用"></a>AOF重写作用</h4><ul>
<li>降低磁盘占用量，提高磁盘利用率 </li>
<li>提高持久化效率，降低持久化写时间，提高IO性能 </li>
<li>降低数据恢复用时，提高数据恢复效</li>
</ul>
<h4 id="AOF重写规则"><a href="#AOF重写规则" class="headerlink" title="AOF重写规则"></a>AOF重写规则</h4><ul>
<li>进程内已超时的数据不再写入文件 </li>
<li>忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令 如<code>del key1、 hdel key2、srem key3、set key4 111、set key4 222</code>等 </li>
<li>对同一数据的多条写命令合并为一条命令 如<code>lpush list1 a、lpush list1 b、 lpush list1 c</code> 可以转化为：<code>lpush list1 a b c</code>。 为防止数据量过大造成客户端缓冲区溢出，对<code>list、set、hash、zset</code>等类型，每条指令最多写入<code>64</code>个元素</li>
</ul>
<h4 id="重写方式"><a href="#重写方式" class="headerlink" title="重写方式"></a>重写方式</h4><ul>
<li>手动重写</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bgrewriteaof</span><br></pre></td></tr></table></figure>

<ul>
<li> 自动重写</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auto-aof-rewrite-min-size size</span><br><span class="line">auto-aof-rewrite-percentage percentage</span><br></pre></td></tr></table></figure>

<h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><ul>
<li>添加数据，观察aof文件变化</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name 111</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set name 222</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221012100448914.png" alt="image-20221012100448914"></p>
<ul>
<li>手动重写</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; BGREWRITEAOF</span><br><span class="line">Background append only file rewriting started</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221012100544751.png" alt="image-20221012100544751"></p>
<h4 id="AOF手动重写-——-bgrewriteaof指令工作原理"><a href="#AOF手动重写-——-bgrewriteaof指令工作原理" class="headerlink" title="AOF手动重写 —— bgrewriteaof指令工作原理"></a>AOF手动重写 —— bgrewriteaof指令工作原理</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221012102219574.png" alt="image-20221012102219574"></p>
<h4 id="AOF自动重写方式"><a href="#AOF自动重写方式" class="headerlink" title="AOF自动重写方式"></a>AOF自动重写方式</h4><ul>
<li>自动重写触发条件设置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auto-aof-rewrite-min-size size</span><br><span class="line">auto-aof-rewrite-percentage percent</span><br></pre></td></tr></table></figure>

<ul>
<li>自动重写触发比对参数（ 运行指令info Persistence获取具体信息 ）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aof_current_size</span><br><span class="line">aof_base_size</span><br></pre></td></tr></table></figure>

<ul>
<li>自动重写触发条件</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221012102721225.png" alt="image-20221012102721225"></p>
<h3 id="AOF工作流程"><a href="#AOF工作流程" class="headerlink" title="AOF工作流程"></a>AOF工作流程</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221012155613605.png" alt="image-20221012155613605"></p>
<h3 id="AOF重写流程"><a href="#AOF重写流程" class="headerlink" title="AOF重写流程"></a>AOF重写流程</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221012155656032.png" alt="image-20221012155656032"></p>
<h2 id="RDB-VS-AOF"><a href="#RDB-VS-AOF" class="headerlink" title="RDB VS AOF"></a>RDB VS AOF</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221012155840377.png" alt="image-20221012155840377"></p>
<h2 id="RDB与AOF的选择之惑"><a href="#RDB与AOF的选择之惑" class="headerlink" title="RDB与AOF的选择之惑"></a>RDB与AOF的选择之惑</h2><ul>
<li><strong>对数据非常敏感，建议使用默认的AOF持久化方案</strong> <ul>
<li>​    <code>AOF</code>持久化策略使用<code>everysecond</code>，每秒钟<code>fsync</code>一次。该策略<code>redis</code>仍可以保持很好的处理性能，当出 现问题时，最多丢失<code>0-1</code>秒内的数据。 </li>
<li>​    注意：由于<code>AOF</code>文件存储体积较大，且恢复速度较慢 </li>
</ul>
</li>
<li><strong>数据呈现阶段有效性，建议使用RDB持久化方案</strong> <ul>
<li>​    数据可以良好的做到阶段内无丢失（该阶段是开发者或运维人员手工维护的），且恢复速度较快，阶段 点数据恢复通常采用<code>RDB</code>方案 </li>
<li>​    注意：利用<code>RDB</code>实现紧凑的数据持久化会使<code>Redis</code>降的很低，慎重总结： </li>
</ul>
</li>
<li><strong>综合比对</strong> <ul>
<li>​    <code>RDB</code>与<code>AOF</code>的选择实际上是在做一种权衡，每种都有利有弊 </li>
<li>​    如不能承受数分钟以内的数据丢失，对业务数据非常敏感，选用<code>AOF</code> </li>
<li>​    如能承受数分钟以内的数据丢失，且追求大数据集的恢复速度，选用<code>RDB </code></li>
<li>​    灾难恢复选用<code>RDB</code> </li>
<li>​    双保险策略，同时开启 <code>RDB</code> 和<code> AOF</code>，重启后，<code>Redis</code>优先使用 <code>AOF</code> 来恢复数据，降低丢失数据的量</li>
</ul>
</li>
</ul>
<h2 id="持久化应用场景"><a href="#持久化应用场景" class="headerlink" title="持久化应用场景"></a>持久化应用场景</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221012160408015.png" alt="image-20221012160408015"></p>
<h1 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h1><h2 id="事务简介"><a href="#事务简介" class="headerlink" title="事务简介"></a>事务简介</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221012161432189.png" alt="image-20221012161432189"></p>
<p><strong>什么是事务</strong></p>
<p>Redis执行指令过程中，多条连续执行的指令被干扰，打断，插队</p>
<p>redis事务就是一个命令执行的队列，将一系列预定义命令包装成一个整体（一个队列）。当执行时，一次性 按照添加顺序依次执行，中间不会被打断或者干扰。</p>
<p>一个队列中，一次性、顺序性、排他性的执行一系列命令</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221012161628529.png" alt="image-20221012161628529"></p>
<h2 id="事务基本操作"><a href="#事务基本操作" class="headerlink" title="事务基本操作"></a>事务基本操作</h2><p><strong>事务的边界</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221012161728903.png" alt="image-20221012161728903"></p>
<ul>
<li><strong>开启事务</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">multi</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong> </li>
</ul>
<p>​        设定事务的开启位置，此指令执行后，后续的所有指令均加入到事务中</p>
<ul>
<li><strong>执行事务</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exec</span><br></pre></td></tr></table></figure>

<p><strong>注意：加入事务的命令暂时进入到任务队列中，并没有立即执行，只有执行<code>exec</code>命令才开始执行</strong></p>
<p><strong>演示</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="number">111</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get name </span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="number">222</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; EXEC</span><br><span class="line"><span class="number">1</span>) OK</span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;111&quot;</span></span><br><span class="line"><span class="number">3</span>) OK</span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;222&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>事务定义过程中发现出了问题，怎么办？</strong></p>
<p>取消事务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">discard</span><br></pre></td></tr></table></figure>

<p>作用 </p>
<p>​    终止当前事务的定义，发生在<code>multi</code>之后，<code>exec</code>之前</p>
<p><strong>演示</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="number">111</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; DISCARD</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; EXEC</span><br><span class="line">(error) ERR EXEC without MULTI</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="事务的工作流程"><a href="#事务的工作流程" class="headerlink" title="事务的工作流程"></a>事务的工作流程</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221012165810588.png" alt="image-20221012165810588"></p>
<h2 id="事务的注意事项"><a href="#事务的注意事项" class="headerlink" title="事务的注意事项"></a>事务的注意事项</h2><p><strong>定义事务的过程中，命令格式输入错误怎么办？</strong></p>
<ul>
<li><strong>语法错误</strong> </li>
</ul>
<p>​    指命令书写格式有误 </p>
<ul>
<li><strong>处理结果</strong> </li>
</ul>
<p>​    如果定义的事务中所包含的命令存在语法错误，整体事务中所有命令均不会执行。包括那些语法正    确的命令。</p>
<p><strong>演示</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">SET</span> name <span class="number">111</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; TES name <span class="number">222</span></span><br><span class="line">(error) ERR unknown command <span class="string">&#x27;TES&#x27;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; EXEC</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br></pre></td></tr></table></figure>

<p><strong>定义事务的过程中，命令执行出现错误怎么办？</strong></p>
<ul>
<li><strong>运行错误</strong> </li>
</ul>
<p>​    指命令格式正确，但是无法正确的执行。例如对<code>list</code>进行<code>incr</code>操作 </p>
<ul>
<li><strong>处理结果</strong> </li>
</ul>
<p>​    能够正确运行的命令会执行，运行错误的命令不会被执行</p>
<p><strong>注意：已经执行完毕的命令对应的数据不会自动回滚，需要程序员自己在代码中实现回滚。</strong></p>
<p><strong>演示</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="number">111</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get name </span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="number">222</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; lpush name <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; EXEC</span><br><span class="line"><span class="number">1</span>) OK</span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;111&quot;</span></span><br><span class="line"><span class="number">3</span>) OK</span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;222&quot;</span></span><br><span class="line"><span class="number">5</span>) (error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="手动进行事务回滚"><a href="#手动进行事务回滚" class="headerlink" title="手动进行事务回滚"></a>手动进行事务回滚</h2><ul>
<li>记录操作过程中被影响的数据之前的状态 <ul>
<li>​    单数据：string </li>
<li>​    多数据：hash、list、set、zset </li>
</ul>
</li>
<li>设置指令恢复所有的被修改的项 <ul>
<li>​    单数据：直接set（注意周边属性，例如时效） </li>
<li>​    多数据：修改对应值或整体克隆复制</li>
</ul>
</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221012181836503.png" alt="image-20221012181836503"></p>
<h1 id="Redis-锁"><a href="#Redis-锁" class="headerlink" title="Redis 锁"></a>Redis 锁</h1><h2 id="基于特定条件的事务执行——锁"><a href="#基于特定条件的事务执行——锁" class="headerlink" title="基于特定条件的事务执行——锁"></a>基于特定条件的事务执行——锁</h2><p><strong>业务场景</strong></p>
<p>天猫双11热卖过程中，对已经售罄的货物追加补货，4个业务员都有权限进行补货。补货的操作可能是一系 列的操作，牵扯到多个连续操作，如何保障不会重复操作？</p>
<p><strong>业务分析</strong></p>
<ul>
<li>多个客户端有可能同时操作同一组数据，并且该数据一旦被操作修改后，将不适用于继续操作 </li>
<li>在操作之前锁定要操作的数据，一旦发生变化，终止当前操作</li>
</ul>
<p><strong>解决方案</strong></p>
<ul>
<li>对 <code>key</code> 添加监视锁，在执行<code>exec</code>前如果<code>key</code>发生了变化，终止事务执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">watch key1 [key2……]</span><br></pre></td></tr></table></figure>

<ul>
<li>取消对所有 key 的监视</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unwatch</span><br></pre></td></tr></table></figure>

<p>Tips 18：  <code>redis </code>应用基于状态控制的批量任务执行</p>
<p><strong>演示1.监控时 锁未被修改</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; </span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; </span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="number">123</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> age <span class="number">321</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; watch name</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line"><span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> aa bb</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get aa</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; EXEC</span><br><span class="line"><span class="number">1</span>) OK</span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;bb&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>演示2.监控时 锁被修改</strong></p>
<p><strong>客户端1</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; watch name age</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> aa cc</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get aa</span><br><span class="line">QUEUED</span><br></pre></td></tr></table></figure>

<p><strong>客户端2</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hecs</span>-<span class="number">33111</span> ~]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; </span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; </span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; </span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="number">111</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p><strong>客户端1</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; </span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; watch name age</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> aa cc</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get aa</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; EXEC</span><br><span class="line">(nil)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>演示3.事务必须在监视内部开启</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; WATCH age</span><br><span class="line">(error) ERR WATCH inside MULTI is not allowed</span><br></pre></td></tr></table></figure>

<p><strong>演示4.取消锁</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; WATCH name</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line"><span class="string">&quot;111&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; UNWATCH</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h2 id="基于特定条件的事务执行——分布式锁"><a href="#基于特定条件的事务执行——分布式锁" class="headerlink" title="基于特定条件的事务执行——分布式锁"></a>基于特定条件的事务执行——分布式锁</h2><p><strong>业务场景</strong></p>
<p>天猫双11热卖过程中，对已经售罄的货物追加补货，且补货完成。客户购买热情高涨，3秒内将所有商品购 买完毕。本次补货已经将库存全部清空，如何避免最后一件商品不被多人同时购买？【超卖问题】</p>
<p><strong>业务分析</strong></p>
<ul>
<li>使用<code>watch</code>监控一个<code>key</code>有没有改变已经不能解决问题，此处要监控的是具体数据 </li>
<li>虽然<code>redis</code>是单线程的，但是多个客户端对同一数据同时进行操作时，如何避免不被同时修改？</li>
</ul>
<p><strong>解决方案</strong></p>
<ul>
<li>使用 setnx 设置一个公共锁</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setnx lock-key value</span><br></pre></td></tr></table></figure>

<p> 利用<code>setnx</code>命令的返回值特征，有值则返回设置失败，无值则返回设置成功 </p>
<ul>
<li>​    对于返回设置成功的，拥有控制权，进行下一步的具体业务操作 </li>
<li>​    对于返回设置失败的，不具有控制权，排队或等待<br>操作完毕通过del操作释放锁</li>
</ul>
<p>注意：上述解决方案是一种设计概念，依赖规范保障，具有风险性</p>
<p>Tips 19：  <code>redis</code> 应用基于分布式锁对应的场景控制</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221013125505629.png" alt="image-20221013125505629"></p>
<p><strong>演示</strong></p>
<p><strong>客户端1加锁并修改目标变量</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> num <span class="number">10</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; </span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETNX <span class="built_in">lock-num</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; INCRBY num <span class="literal">-1</span></span><br><span class="line">(integer) <span class="number">9</span></span><br></pre></td></tr></table></figure>

<p><strong>客户端2也进行加锁，加锁失败</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETNX <span class="built_in">lock-num</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><strong>客户端1删除锁</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> num <span class="number">10</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; </span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETNX <span class="built_in">lock-num</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; INCRBY num <span class="literal">-1</span></span><br><span class="line">(integer) <span class="number">9</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">DEL</span> <span class="built_in">lock-num</span></span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>客户端2加锁成功</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETNX <span class="built_in">lock-num</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETNX <span class="built_in">lock-num</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="基于特定条件的事务执行——分布式锁改良"><a href="#基于特定条件的事务执行——分布式锁改良" class="headerlink" title="基于特定条件的事务执行——分布式锁改良"></a>基于特定条件的事务执行——分布式锁改良</h2><p><strong>业务场景</strong></p>
<p>依赖分布式锁的机制，某个用户操作时对应客户端宕机，且此时已经获取到锁。如何解决？</p>
<p><strong>业务分析</strong></p>
<ul>
<li>由于锁操作由用户控制加锁解锁，必定会存在加锁后未解锁的风险 </li>
<li>需要解锁操作不能仅依赖用户控制，系统级别要给出对应的保底处理方案</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221013131128283.png" alt="image-20221013131128283"></p>
<p><strong>解决方案</strong></p>
<ul>
<li>使用 <code>expire</code> 为锁<code>key</code>添加时间限定，到时不释放，放弃锁</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">expire lock-key second</span><br><span class="line">pexpire lock-key milliseconds</span><br></pre></td></tr></table></figure>

<p>由于操作通常都是微秒或毫秒级，因此该锁定时间不宜设置过大。具体时间需要业务测试后确认。 </p>
<ul>
<li>例如：持有锁的操作最长执行时间<code>127ms</code>，最短执行时间<code>7ms</code>。 </li>
<li>测试百万次最长执行时间对应命令的最大耗时，测试百万次网络延迟平均耗时 </li>
<li>锁时间设定推荐：最大耗时<code>*120%+平均网络延迟*110%</code> </li>
<li>如果<code>业务最大耗时&lt;&lt;网络平均延迟</code>，通常为<code>2个数量级</code>，取其中单个耗时较长即可</li>
</ul>
<p><strong>演示</strong></p>
<p><strong>客户端1，加锁并设置过期时间</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETNX <span class="built_in">lock-num</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; EXPIRE <span class="built_in">lock-num</span> <span class="number">20</span></span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>客户端2，尝试加锁</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETNX <span class="built_in">lock-num</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETNX <span class="built_in">lock-num</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETNX <span class="built_in">lock-num</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETNX <span class="built_in">lock-num</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETNX <span class="built_in">lock-num</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETNX <span class="built_in">lock-num</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETNX <span class="built_in">lock-num</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="Redis-删除策略"><a href="#Redis-删除策略" class="headerlink" title="Redis 删除策略"></a>Redis 删除策略</h1><h2 id="Redis中的数据特征"><a href="#Redis中的数据特征" class="headerlink" title="Redis中的数据特征"></a>Redis中的数据特征</h2><ul>
<li><p><code>Redis</code>是一种内存级数据库，所有数据均存放在内存中，内存中的数据可以通过<code>TTL</code>指令获取其状态 </p>
<ul>
<li><p><code>XX</code> ：具有时效性的数据 </p>
</li>
<li><p><code>-1</code> ：永久有效的数据 </p>
</li>
<li><p><code>-2</code> ：已经过期的数据 或 被删除的数据 或 未定义的数据</p>
</li>
</ul>
</li>
</ul>
<p><strong>过期的数据真的删除了吗？</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221013144136576.png" alt="image-20221013144136576"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221013144200317.png" alt="image-20221013144200317"></p>
<h2 id="数据删除策略"><a href="#数据删除策略" class="headerlink" title="数据删除策略"></a>数据删除策略</h2><ol>
<li><strong>定时删除</strong></li>
<li><strong>惰性删除</strong></li>
<li><strong>定期删除</strong></li>
</ol>
<h3 id="时效性数据的存储结构"><a href="#时效性数据的存储结构" class="headerlink" title="时效性数据的存储结构"></a>时效性数据的存储结构</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221013144754957.png" alt="image-20221013144754957"></p>
<h3 id="数据删除策略的目标"><a href="#数据删除策略的目标" class="headerlink" title="数据删除策略的目标"></a>数据删除策略的目标</h3><p>在内存占用与<code>CPU</code>占用之间寻找一种平衡，顾此失彼都会造成整体<code>redis</code>性能的下降，甚至引发<code>服务器宕机</code>或<code>内存泄露</code></p>
<h3 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h3><ul>
<li>创建一个定时器，当<code>key</code>设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作 </li>
<li>优点：节约内存，到时就删除，快速释放掉不必要的内存占用 </li>
<li>缺点：<code>CPU</code>压力很大，无论<code>CPU</code>此时负载量多高，均占用<code>CPU</code>，会影响<code>redis</code>服务器响应时间和指令吞吐量 </li>
<li>总结：用处理器性能换取存储空间（拿时间换空间）</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221013145837784.png" alt="image-20221013145837784"></p>
<h3 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h3><ul>
<li>数据到达过期时间，不做处理。等下次访问该数据时 <ul>
<li>如果未过期，返回数据 </li>
<li>发现已过期，删除，返回不存在 </li>
</ul>
</li>
<li>优点：节约CPU性能，发现必须删除的时候才删除 </li>
<li>缺点：内存压力很大，出现长期占用内存的数据 </li>
<li>总结：用存储空间换取处理器性能 （拿时间换空间）</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221013150235170.png" alt="image-20221013150235170"></p>
<h3 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h3><p><strong>两种方案都走极端，有没有折中方案？</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221013151212923.png" alt="image-20221013151212923"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221013151238928.png" alt="image-20221013151238928"></p>
<ul>
<li>周期性轮询<code>redis</code>库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度 </li>
<li>特点1：<code>CPU</code>性能占用设置有峰值，检测频度可自定义设置 </li>
<li>特点2：内存压力不是很大，长期占用内存的冷数据会被持续清理 </li>
<li>总结：周期性抽查存储空间 <code>expireIfNeeded()</code> （随机抽查，重点抽查）</li>
</ul>
<h3 id="删除策略比对"><a href="#删除策略比对" class="headerlink" title="删除策略比对"></a>删除策略比对</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221013151547838.png" alt="image-20221013151547838"></p>
<h2 id="逐出算法"><a href="#逐出算法" class="headerlink" title="逐出算法"></a>逐出算法</h2><h3 id="新数据进入检测"><a href="#新数据进入检测" class="headerlink" title="新数据进入检测"></a>新数据进入检测</h3><p>当新数据进入redis时，如果内存不足怎么办？</p>
<ul>
<li><code>Redis</code>使用内存存储数据，在执行每一个命令前，会调用<code>freeMemoryIfNeeded()</code>检测内存是否充足。如 果内存不满足新加入数据的最低存储要求，redis要临时删除一些数据为当前指令清理存储空间。清理数据 的策略称为逐出算法。 </li>
<li>注意：逐出数据的过程不是<code>100%</code>能够清理出足够的可使用的内存空间，如果不成功则反复执行。当对所 有数据尝试完毕后，如果不能达到内存清理的要求，将出现错误信息。</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221014131638733.png" alt="image-20221014131638733"></p>
<h3 id="影响数据逐出的相关配置"><a href="#影响数据逐出的相关配置" class="headerlink" title="影响数据逐出的相关配置"></a>影响数据逐出的相关配置</h3><ul>
<li>最大可使用内存</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maxmemory</span><br></pre></td></tr></table></figure>

<p>占用物理内存的比例，默认值为0，表示不限制。生产环境中根据需求设定，通常设置在50%以上。</p>
<ul>
<li>每次选取待删除数据的个数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maxmemory-samples</span><br></pre></td></tr></table></figure>

<p>选取数据时并不会全库扫描，导致严重的性能消耗，降低读写性能。因此采用随机获取数据的方式作为待检测删除数据</p>
<ul>
<li>删除策略</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">maxmemory-policy</span><br></pre></td></tr></table></figure>

<p>达到最大内存后的，对被挑选出来的数据进行删除的策略</p>
<p> 检测易失数据（可能会过期的数据集<code>server.db[i].expires</code> ） </p>
<p>① <code>volatile-lru</code>：挑选最近最少使用的数据淘汰 </p>
<p>② <code>volatile-lfu</code>：挑选最近使用次数最少的数据淘汰 </p>
<p>③ <code>volatile-ttl</code>：挑选将要过期的数据淘汰 </p>
<p>④ <code>volatile-random</code>：任意选择数据淘汰 </p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221014132248229.png" alt="image-20221014132248229"></p>
<p> 检测全库数据（所有数据集<code>server.db[i].dict </code>） </p>
<p>⑤ <code>allkeys-lru</code>：挑选最近最少使用的数据淘汰 </p>
<p>⑥ <code>allkeys-lfu</code>：挑选最近使用次数最少的数据淘汰 </p>
<p>⑦ <code>allkeys-random</code>：任意选择数据淘汰 </p>
<p> 放弃数据驱逐 </p>
<p>⑧ <code>no-enviction</code>（驱逐）：禁止驱逐数据（<code>redis4.0</code>中默认策略），会引发错误<code>OOM（Out Of Memory）</code></p>
<p><strong>命令配置</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">maxmemory<span class="literal">-policy</span> volatile<span class="literal">-lru</span></span><br></pre></td></tr></table></figure>

<h3 id="数据逐出策略配置依据"><a href="#数据逐出策略配置依据" class="headerlink" title="数据逐出策略配置依据"></a>数据逐出策略配置依据</h3><p>使用<code>INFO</code>命令输出监控信息，查询缓存 <code>hit</code> 和 <code>miss</code> 的次数，根据业务需求调优<code>Redis</code>配置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; INFO</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221014133100016.png" alt="image-20221014133100016"></p>
<h1 id="Redis-核心配置"><a href="#Redis-核心配置" class="headerlink" title="Redis 核心配置"></a>Redis 核心配置</h1><h2 id="服务器端设定"><a href="#服务器端设定" class="headerlink" title="服务器端设定"></a>服务器端设定</h2><ul>
<li>设置服务器以守护进程的方式运行</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">daemonize yes|no</span><br></pre></td></tr></table></figure>

<ul>
<li>绑定主机地址</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">bind <span class="number">127.0</span>.<span class="number">0.1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置服务器端口号</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">port <span class="number">6379</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置数据库数量</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">databases <span class="number">16</span></span><br></pre></td></tr></table></figure>

<h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><ul>
<li>设置服务器以指定日志记录级别</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">loglevel debug|verbose|notice|warning</span><br></pre></td></tr></table></figure>

<ul>
<li>日志记录文件名</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logfile 端口号.log</span><br></pre></td></tr></table></figure>

<p>注意：日志级别开发期设置为<code>verbose</code>即可，生产环境中配置为<code>notice</code>，简化日志输出量，降低写日志IO的频度</p>
<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><ul>
<li>设置同一时间最大客户端连接数，默认无限制。当客户端连接到达上限，Redis会关闭新的连接</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">maxclients <span class="number">0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>客户端闲置等待最大时长，达到最大值后关闭连接。如需关闭该功能，设置为 0</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">timeout <span class="number">300</span></span><br></pre></td></tr></table></figure>

<h2 id="多服务器快捷配置"><a href="#多服务器快捷配置" class="headerlink" title="多服务器快捷配置"></a>多服务器快捷配置</h2><p>导入并加载指定配置文件信息，用于快速创建<code>redis</code>公共配置较多的<code>redis</code>实例配置文件，便于维护</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">include /path/server-端口号.conf</span><br></pre></td></tr></table></figure>

<h1 id="Redis-高级数据类型"><a href="#Redis-高级数据类型" class="headerlink" title="Redis 高级数据类型"></a>Redis 高级数据类型</h1><h2 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221014134814217.png" alt="image-20221014134814217"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221014134931474.png" alt="image-20221014134931474"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221014135302634.png" alt="image-20221014135302634"></p>
<h3 id="Bitmaps类型的基础操作"><a href="#Bitmaps类型的基础操作" class="headerlink" title="Bitmaps类型的基础操作"></a>Bitmaps类型的基础操作</h3><ul>
<li>获取指定key对应偏移量上的bit值</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">getbit key offset</span><br></pre></td></tr></table></figure>

<ul>
<li>设置指定key对应偏移量上的bit值，value只能是1或0</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setbit key offset value</span><br></pre></td></tr></table></figure>

<p><strong>演示</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETBIT bits <span class="number">0</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GETBIT bits <span class="number">0</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GETBIT bits <span class="number">10</span></span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="Bitmaps类型的扩展操作"><a href="#Bitmaps类型的扩展操作" class="headerlink" title="Bitmaps类型的扩展操作"></a>Bitmaps类型的扩展操作</h3><p><strong>业务场景</strong> </p>
<p><strong>电影网站</strong> </p>
<ul>
<li>统计每天某一部电影是否被点播 </li>
<li>统计每天有多少部电影被点播 </li>
<li>统计每周/月/年有多少部电影被点播 </li>
<li>统计年度哪部电影没有被点播</li>
</ul>
<p><strong>业务分析</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221014140142843.png" alt="image-20221014140142843"></p>
<ul>
<li>对指定key按位进行交、并、非、异或操作，并将结果保存到destKey中</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bitop op destKey key1 [key2...]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>and：交 </p>
</li>
<li><p>or：并 </p>
</li>
<li><p>not：非 </p>
</li>
<li><p>xor：异或</p>
</li>
<li><p>统计指定key中1的数量</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bitcount key [start end]</span><br></pre></td></tr></table></figure>

<p>Tips 21： <code>redis</code> 应用于信息状态统计</p>
<p><strong>演示</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETBIT <span class="number">20880808</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETBIT <span class="number">20880808</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETBIT <span class="number">20880808</span> <span class="number">8</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETBIT <span class="number">20880809</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETBIT <span class="number">20880809</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETBIT <span class="number">20880809</span> <span class="number">8</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; BITCOUNT <span class="number">20880808</span></span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; BITCOUNT <span class="number">20880809</span></span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SETBIT  <span class="number">20880808</span> <span class="number">6</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; BITCOUNT <span class="number">20880808</span></span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; BITOP or <span class="number">08</span><span class="literal">-09</span> <span class="number">20880808</span> <span class="number">20880809</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; BITCOUNT <span class="number">08</span><span class="literal">-09</span></span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><h3 id="统计独立UV"><a href="#统计独立UV" class="headerlink" title="统计独立UV"></a>统计独立UV</h3><ul>
<li>原始方案：set <ul>
<li>存储每个用户的id（字符串） </li>
</ul>
</li>
<li>改进方案：Bitmaps <ul>
<li>存储每个用户状态（bit） </li>
</ul>
</li>
<li>全新的方案：Hyperloglog</li>
</ul>
<h3 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h3><ul>
<li>基数是数据集去重后元素个数 </li>
<li><code>HyperLogLog</code> 是用来做基数统计的，运用了<code>LogLog</code>的算法</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221014142336498.png" alt="image-20221014142336498"></p>
<h3 id="HyperLogLog类型的基本操作"><a href="#HyperLogLog类型的基本操作" class="headerlink" title="HyperLogLog类型的基本操作"></a>HyperLogLog类型的基本操作</h3><ul>
<li>添加数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pfadd key element [element ...]</span><br></pre></td></tr></table></figure>

<ul>
<li>统计数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pfcount key [key ...]</span><br></pre></td></tr></table></figure>

<ul>
<li>合并数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pfmerge destkey sourcekey [sourcekey...]</span><br></pre></td></tr></table></figure>

<p>Tips 22：  redis 应用于独立信息统计</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD hll 001</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD hll 001</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; PFADD hll 001</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; PFADD hll 001</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; PFADD hll 001</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; PFADD hll 002</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; GET hll</span><br><span class="line">&quot;HYLL\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80L\x9f\x84R\xbf\x80`\x9d&quot;</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT hll</span><br><span class="line">(integer) 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">PFADD  nosql  <span class="string">&quot;Redis&quot;</span>  <span class="string">&quot;MongoDB&quot;</span>  <span class="string">&quot;Memcached&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">PFADD  RDBMS  <span class="string">&quot;MySQL&quot;</span> <span class="string">&quot;MSSQL&quot;</span> <span class="string">&quot;PostgreSQL&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">PFMERGE  databases  nosql  RDBMS</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">PFCOUNT  databases</span></span><br><span class="line">(integer) 6</span><br></pre></td></tr></table></figure>



<h3 id="相关说明"><a href="#相关说明" class="headerlink" title="相关说明"></a>相关说明</h3><ul>
<li>用于进行基数统计，不是集合，不保存数据，只记录数量而不是具体数据 </li>
<li>核心是基数估算算法，最终数值<strong>存在一定误差</strong> </li>
<li>误差范围：基数估计的结果是一个带有 <code>0.81%</code> 标准错误的近似值 </li>
<li>耗空间极小，每个<code>hyperloglog key</code>占用了<code>12K</code>的内存用于标记基数 </li>
<li><code>pfadd</code>命令不是一次性分配<code>12K</code>内存使用，会随着基数的增加内存逐渐增大 </li>
<li><code>Pfmerge</code>命令合并后占用的存储空间为<code>12K</code>，无论合并之前数据量多少</li>
</ul>
<h2 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221014162507268.png" alt="image-20221014162507268"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221014162532151.png" alt="image-20221014162532151"></p>
<h3 id="GEO类型的基本操作"><a href="#GEO类型的基本操作" class="headerlink" title="GEO类型的基本操作"></a>GEO类型的基本操作</h3><ul>
<li><strong>添加坐标点</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geoadd key longitude latitude member [longitude latitude member ...]</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>获取坐标点</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geopos key member [member ...]</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>计算坐标点距离</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geodist key member1 member2 [unit]</span><br></pre></td></tr></table></figure>

<p><strong>演示</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEOADD geos <span class="number">1</span> <span class="number">1</span> a</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEOADD geos <span class="number">2</span> <span class="number">2</span> b</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEOPOS geos a</span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;0.99999994039535522&quot;</span></span><br><span class="line">   <span class="number">2</span>) <span class="string">&quot;0.99999945914297683&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEODIST geos a b</span><br><span class="line"><span class="string">&quot;157270.0561&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEODIST geos a b m</span><br><span class="line"><span class="string">&quot;157270.0561&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEODIST geos a b km</span><br><span class="line"><span class="string">&quot;157.2701&quot;</span></span><br></pre></td></tr></table></figure>


<ul>
<li><strong>根据坐标范围内的数据</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">georadius key longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>根据点求范围内数据</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">georadiusbymember key member radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]</span><br></pre></td></tr></table></figure>

<ul>
<li> <strong>计算经纬度</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geohash key member [member ...]</span><br></pre></td></tr></table></figure>

<p><strong>演示</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEODIST geos a b</span><br><span class="line"><span class="string">&quot;157270.0561&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEODIST geos a b m</span><br><span class="line"><span class="string">&quot;157270.0561&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEODIST geos a b km</span><br><span class="line"><span class="string">&quot;157.2701&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEOADD geos <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEOADD geos <span class="number">1</span> <span class="number">2</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEOADD geos <span class="number">1</span> <span class="number">3</span> <span class="number">1</span>,<span class="number">3</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEOADD geos <span class="number">2</span> <span class="number">1</span> <span class="number">2</span>,<span class="number">1</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEOADD geos <span class="number">2</span> <span class="number">2</span> <span class="number">2</span>,<span class="number">2</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEOADD geos <span class="number">2</span> <span class="number">3</span> <span class="number">2</span>,<span class="number">3</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEOADD geos <span class="number">3</span> <span class="number">1</span> <span class="number">3</span>,<span class="number">1</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEOADD geos <span class="number">3</span> <span class="number">2</span> <span class="number">3</span>,<span class="number">2</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEOADD geos <span class="number">3</span> <span class="number">3</span> <span class="number">3</span>,<span class="number">3</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEOADD geos <span class="number">5</span> <span class="number">5</span> <span class="number">5</span>,<span class="number">5</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEORADIUSBYMEMBER geos <span class="number">2</span>,<span class="number">2</span> <span class="number">180</span> km</span><br><span class="line"> <span class="number">1</span>) <span class="string">&quot;1,1&quot;</span></span><br><span class="line"> <span class="number">2</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"> <span class="number">3</span>) <span class="string">&quot;2,1&quot;</span></span><br><span class="line"> <span class="number">4</span>) <span class="string">&quot;1,2&quot;</span></span><br><span class="line"> <span class="number">5</span>) <span class="string">&quot;2,2&quot;</span></span><br><span class="line"> <span class="number">6</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"> <span class="number">7</span>) <span class="string">&quot;3,1&quot;</span></span><br><span class="line"> <span class="number">8</span>) <span class="string">&quot;3,2&quot;</span></span><br><span class="line"> <span class="number">9</span>) <span class="string">&quot;1,3&quot;</span></span><br><span class="line"><span class="number">10</span>) <span class="string">&quot;2,3&quot;</span></span><br><span class="line"><span class="number">11</span>) <span class="string">&quot;3,3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEORADIUSBYMEMBER geos <span class="number">2</span>,<span class="number">2</span> <span class="number">120</span> km</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;1,2&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;2,2&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;2,3&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;2,1&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;3,2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEORADIUSBYMEMBER geos <span class="number">2</span>,<span class="number">2</span> <span class="number">1800</span> km</span><br><span class="line"> <span class="number">1</span>) <span class="string">&quot;1,1&quot;</span></span><br><span class="line"> <span class="number">2</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"> <span class="number">3</span>) <span class="string">&quot;2,1&quot;</span></span><br><span class="line"> <span class="number">4</span>) <span class="string">&quot;1,2&quot;</span></span><br><span class="line"> <span class="number">5</span>) <span class="string">&quot;2,2&quot;</span></span><br><span class="line"> <span class="number">6</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"> <span class="number">7</span>) <span class="string">&quot;3,1&quot;</span></span><br><span class="line"> <span class="number">8</span>) <span class="string">&quot;3,2&quot;</span></span><br><span class="line"> <span class="number">9</span>) <span class="string">&quot;1,3&quot;</span></span><br><span class="line"><span class="number">10</span>) <span class="string">&quot;2,3&quot;</span></span><br><span class="line"><span class="number">11</span>) <span class="string">&quot;3,3&quot;</span></span><br><span class="line"><span class="number">12</span>) <span class="string">&quot;5,5&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEORADIUS geos <span class="number">1.5</span> <span class="number">1.5</span> <span class="number">90</span> km</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;1,2&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;2,2&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;1,1&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;2,1&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GEOHASH geos <span class="number">2</span>,<span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;s037ms06g70&quot;</span></span><br></pre></td></tr></table></figure>

<p>Tips 23：  redis 应用于地理位置计算</p>
<h1 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis 主从复制"></a>Redis 主从复制</h1><h2 id="主从复制简介"><a href="#主从复制简介" class="headerlink" title="主从复制简介"></a>主从复制简介</h2><p><strong>互联网“三高”架构</strong></p>
<ul>
<li><strong>高并发</strong> </li>
<li><strong>高性能</strong> </li>
<li><strong>高可用</strong></li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017163836418.png" alt="image-20221017163836418"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017163847015.png" alt="image-20221017163847015"></p>
<h3 id="你的“Redis”是否高可用"><a href="#你的“Redis”是否高可用" class="headerlink" title="你的“Redis”是否高可用"></a><strong>你的“Redis”是否高可用</strong></h3><p>单机<code>redis</code>的风险与问题 </p>
<ul>
<li>问题1.机器故障 <ul>
<li>现象：硬盘故障、系统崩溃 </li>
<li>本质：数据丢失，很可能对业务造成灾难性打击 </li>
<li>结论：基本上会放弃使用<code>redis</code>. </li>
</ul>
</li>
<li>问题2.容量瓶颈 <ul>
<li>现象：内存不足，从<code>16G</code>升级到<code>64G</code>，从<code>64G</code>升级到<code>128G</code>，无限升级内存 </li>
<li>本质：穷，硬件条件跟不上 </li>
<li>结论：放弃使用<code>redis</code> </li>
</ul>
</li>
<li>结论： <ul>
<li>​    为了避免单点<code>Redis</code>服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服 务器上，<strong>连接在一起</strong>，并保证数据是<strong>同步</strong>的。即使有其中一台服务器宕机，其他服务器依然可以继续 提供服务，实现<code>Redis</code>的高可用，同时实现数据<strong>冗余备份</strong>。</li>
</ul>
</li>
</ul>
<h3 id="多台服务器连接方案"><a href="#多台服务器连接方案" class="headerlink" title="多台服务器连接方案"></a>多台服务器连接方案</h3><ul>
<li>提供数据方：master <ul>
<li>主服务器，主节点，主库 </li>
<li>主客户端 </li>
</ul>
</li>
<li>接收数据方：slave <ul>
<li>从服务器，从节点，从库 </li>
<li>从客户端 </li>
</ul>
</li>
<li>需要解决的问题：<ul>
<li> 数据同步 </li>
</ul>
</li>
<li>核心工作： <ul>
<li>master的数据复制到slave中</li>
</ul>
</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017164832371.png" alt="image-20221017164832371"></p>
<h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>主从复制即将<code>master</code>中的数据即时、有效的复制到<code>slave</code>中 </p>
<p>特征：一个<code>master</code>可以拥有多个<code>slave</code>，一个<code>slave</code>只对应一个<code>master </code></p>
<p>职责： </p>
<ul>
<li><strong>master</strong>: <ul>
<li>写数据 </li>
<li>执行写操作时，将出现变化的数据自动同步到<code>slave </code></li>
<li>读数据（可忽略） </li>
</ul>
</li>
<li><strong>slave</strong>: <ul>
<li>读数据 </li>
<li>写数据（禁止）</li>
</ul>
</li>
</ul>
<h3 id="高可用集群"><a href="#高可用集群" class="headerlink" title="高可用集群"></a>高可用集群</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017165447946.png" alt="image-20221017165447946"></p>
<h3 id="主从复制的作用"><a href="#主从复制的作用" class="headerlink" title="主从复制的作用"></a>主从复制的作用</h3><ul>
<li>读写分离：<code>master</code>写、<code>slave</code>读，提高服务器的读写负载能力 </li>
<li>负载均衡：基于主从结构，配合读写分离，由<code>slave</code>分担<code>master</code>负载，并根据需求的变化，改变<code>slave</code>的数 量，通过多个从节点分担数据读取负载，大大提高<code>Redis</code>服务器并发量与数据吞吐量 </li>
<li>故障恢复：当<code>master</code>出现问题时，由<code>slave</code>提供服务，实现快速的故障恢复 </li>
<li>数据冗余：实现数据热备份，是持久化之外的一种数据冗余方式 </li>
<li>高可用基石：基于主从复制，构建哨兵模式与集群，实现<code>Redis</code>的高可用方案</li>
</ul>
<h2 id="主从复制工作流程"><a href="#主从复制工作流程" class="headerlink" title="主从复制工作流程"></a>主从复制工作流程</h2><ul>
<li><p>主从复制过程大体可以分为3个阶段 </p>
<ul>
<li><p> <strong>建立连接阶段（即准备阶段）</strong> </p>
</li>
<li><p> <strong>数据同步阶段</strong> </p>
</li>
<li><p> <strong>命令传播阶段</strong></p>
</li>
</ul>
</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017200718612.png" alt="image-20221017200718612"></p>
<h3 id="阶段一：建立连接阶段"><a href="#阶段一：建立连接阶段" class="headerlink" title="阶段一：建立连接阶段"></a>阶段一：建立连接阶段</h3><p>建立<code>slave</code>到<code>master</code>的连接，使<code>master</code>能够识别<code>slave</code>，并保存<code>slave</code>端口号</p>
<h4 id="建立连接阶段工作流程"><a href="#建立连接阶段工作流程" class="headerlink" title="建立连接阶段工作流程"></a>建立连接阶段工作流程</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017201122179.png" alt="image-20221017201122179"></p>
<h4 id="主从连接（slave连接master）"><a href="#主从连接（slave连接master）" class="headerlink" title="主从连接（slave连接master）"></a>主从连接（slave连接master）</h4><ul>
<li><strong>方式一：客户端发送命令</strong></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方式二：启动服务器参数</strong></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">redis<span class="literal">-server</span> <span class="literal">-slaveof</span> &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方式三：服务器配置</strong></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>slave</code>系统信息</p>
<ul>
<li><p>master_link_down_since_seconds </p>
</li>
<li><p>masterhost </p>
</li>
<li><p>masterport</p>
</li>
</ul>
</li>
<li><p><code>master</code>系统信息</p>
<ul>
<li>slave_listening_port(多个)</li>
</ul>
</li>
</ul>
<p><strong>演示</strong></p>
<ul>
<li><strong>修改配置文件关闭守护进程和日志</strong></li>
</ul>
<p><strong>redis-6379.conf</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">no</span></span><br><span class="line"><span class="comment">#logfile &quot;6379.log&quot;</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">/root/redis-4.0.0/data</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump-6379.rdb</span></span><br><span class="line"><span class="attr">rdbcompression</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">rdbchecksum</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">save</span> <span class="string">10 2</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">always</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">appendonly-6379.aof</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">16</span></span><br></pre></td></tr></table></figure>

<p><strong>redis-6380.conf</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">6380</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">no</span></span><br><span class="line"><span class="comment">#logfile &quot;6380.log&quot;</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">/root/redis-4.0.0/data</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>启动多个redis服务</strong></li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017202520833.png" alt="image-20221017202520833"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017202628618.png" alt="image-20221017202628618"></p>
<ul>
<li><strong>slave服务器连接master服务器</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 ~]# redis-cli -p 6380</span><br><span class="line">127.0.0.1:6380&gt; </span><br><span class="line">127.0.0.1:6380&gt; </span><br><span class="line">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017203447084.png" alt="image-20221017203447084"></p>
<p><strong>观察服务器连接信息</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017203710563.png" alt="image-20221017203710563"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017203741205.png" alt="image-20221017203741205"></p>
<p><strong>同步效果测试</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017204007153.png" alt="image-20221017204007153"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017204029344.png" alt="image-20221017204029344"></p>
<p><strong>第二种连接方式(启动时连接)</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 redis-4.0.0]# redis-server conf/redis-6380.conf --slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>

<p><strong>第三种连接方式（配置文件连接）</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">6380</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">no</span></span><br><span class="line"><span class="comment">#logfile &quot;6380.log&quot;</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">/root/redis-4.0.0/data</span></span><br><span class="line"><span class="attr">slaveof</span> <span class="string">127.0.0.1 6379</span></span><br></pre></td></tr></table></figure>

<p><strong>查看信息</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017204901267.png" alt="image-20221017204901267"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017204924813.png" alt="image-20221017204924813"></p>
<h4 id="主从断开连接"><a href="#主从断开连接" class="headerlink" title="主从断开连接"></a>主从断开连接</h4><ul>
<li>客户端发送命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">slaveof no one</span><br></pre></td></tr></table></figure>

<p>说明： </p>
<ul>
<li>​    <code>slave</code>断开连接后，不会删除已有数据，只是不再接受<code>master</code>发送的数据</li>
</ul>
<h4 id="授权访问"><a href="#授权访问" class="headerlink" title="授权访问"></a>授权访问</h4><ul>
<li><code>master</code>客户端发送命令设置密码</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">requirepass &lt;password&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>master</code>配置文件设置密码</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config set requirepass &lt;password&gt;</span><br><span class="line">config get requirepass</span><br></pre></td></tr></table></figure>

<ul>
<li><code>slave</code>客户端发送命令设置密码</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auth &lt;password&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>slave配置文件设置密码</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">masterauth &lt;password&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>slave启动服务器设置密码</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server –a &lt;password&gt;</span><br></pre></td></tr></table></figure>

<h3 id="阶段二：数据同步阶段工作流程"><a href="#阶段二：数据同步阶段工作流程" class="headerlink" title="阶段二：数据同步阶段工作流程"></a>阶段二：数据同步阶段工作流程</h3><ul>
<li>在<code>slave</code>初次连接<code>master</code>后，复制<code>master</code>中的所有数据到<code>slave </code></li>
<li>将<code>slave</code>的数据库状态更新成<code>master</code>当前的数据库状态</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017212932073.png" alt="image-20221017212932073"></p>
<h4 id="数据同步阶段master说明"><a href="#数据同步阶段master说明" class="headerlink" title="数据同步阶段master说明"></a>数据同步阶段master说明</h4><ol>
<li>如果<code>master</code>数据量巨大，数据同步阶段应避开流量高峰期，避免造成<code>master</code>阻塞，影响业务正常执行 </li>
<li>复制缓冲区大小设定不合理，会导致数据溢出。如进行全量复制周期太长，进行部分复制时发现数据已 经存在丢失的情况，必须进行第二次全量复制，致使<code>slave</code>陷入死循环状态。</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">repl-backlog-size</span> <span class="string">1mb</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>master</code>单机内存占用主机内存的比例不应过大，建议使用<code>50%-70%</code>的内存，留下<code>30%-50%</code>的内存用于执 行<code>bgsave</code>命令和创建复制缓冲区</li>
</ol>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017213705310.png" alt="image-20221017213705310"></p>
<h4 id="数据同步阶段slave说明"><a href="#数据同步阶段slave说明" class="headerlink" title="数据同步阶段slave说明"></a>数据同步阶段slave说明</h4><ol>
<li>为避免<code>slave</code>进行全量复制、部分复制时服务器响应阻塞或数据不同步，建议关闭此期间的对外服务</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">slave-serve-stale-data yes|no</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>数据同步阶段，<code>master</code>发送给<code>slave</code>信息可以理解<code>master</code>是<code>slave</code>的一个客户端，主动向<code>slave</code>发送 命令 </li>
<li>多个<code>slave</code>同时对<code>master</code>请求数据同步，<code>master</code>发送的<code>RDB</code>文件增多，会对带宽造成巨大冲击，如果 <code>master</code>带宽不足，因此数据同步需要根据业务需求，适量错峰</li>
<li><code>slave</code>过多时，建议调整拓扑结构，由一主多从结构变为树状结构，中间的节点既是<code>master</code>，也是 <code>slave</code>。注意使用树状结构时，由于层级深度，导致深度越高的<code>slave</code>与最顶层<code>master</code>间数据同步延迟 较大，数据一致性变差，应谨慎选择</li>
</ol>
<h3 id="阶段三：命令传播阶段"><a href="#阶段三：命令传播阶段" class="headerlink" title="阶段三：命令传播阶段"></a>阶段三：命令传播阶段</h3><ul>
<li>当<code>master</code>数据库状态被修改后，导致主从服务器数据库状态不一致，此时需要让主从数据同步到一致的 状态，同步的动作称为命令传播 </li>
<li><code>master</code>将接收到的数据变更命令发送给<code>slave</code>，<code>slave</code>接收命令后执行命令 </li>
<li>主从复制过程大体可以分为3个阶段 <ul>
<li><strong>建立连接阶段（即准备阶段）</strong> </li>
<li><strong>数据同步阶段</strong> </li>
<li><strong>命令传播阶段</strong></li>
</ul>
</li>
</ul>
<h4 id="命令传播阶段的部分复制"><a href="#命令传播阶段的部分复制" class="headerlink" title="命令传播阶段的部分复制"></a>命令传播阶段的部分复制</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017214240292.png" alt="image-20221017214240292"></p>
<h4 id="服务器运行ID（runid）"><a href="#服务器运行ID（runid）" class="headerlink" title="服务器运行ID（runid）"></a>服务器运行ID（runid）</h4><ul>
<li>概念：服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行id </li>
<li>组成：运行id由40位字符组成，是一个随机的十六进制字符 例如：fdc9ff13b9bbaab28db42b3d50f852bb5e3fcdce </li>
<li>作用：运行id被用于在服务器间进行传输，识别身份 如果想两次操作均对同一台服务器进行，必须每次操作携带对应的运行id，用于对方识别 </li>
<li>实现方式：运行id在每台服务器启动时自动生成的，master在首次连接slave时，会将自己的运行ID发 送给slave，slave保存此ID，通过info Server命令，可以查看节点的runid</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017214743888.png" alt="image-20221017214743888"></p>
<h4 id="复制缓冲区"><a href="#复制缓冲区" class="headerlink" title="复制缓冲区"></a>复制缓冲区</h4><p>概念：复制缓冲区，又名复制积压缓冲区，是一个先进先出<code>（FIFO）</code>的队列，用于存储服务器执行过的命 令，每次传播命令，<code>master</code>都会将传播的命令记录下来，并存储在复制缓冲区</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221017214956086.png" alt="image-20221017214956086"></p>
<h4 id="复制缓冲区内部工作原理"><a href="#复制缓冲区内部工作原理" class="headerlink" title="复制缓冲区内部工作原理"></a>复制缓冲区内部工作原理</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018164806918.png" alt="image-20221018164806918"></p>
<ul>
<li>概念：复制缓冲区，又名复制积压缓冲区，是一个先进先出<code>（FIFO）</code>的队列，用于存储服务器执行过的命 令，每次传播命令，<code>master</code>都会将传播的命令记录下来，并存储在复制缓冲区 <ul>
<li>复制缓冲区默认数据存储空间大小是<code>1M</code>，由于存储空间大小是固定的，当入队元素的数量大于队 列长度时，最先入队的元素会被弹出，而新元素会被放入队列 </li>
</ul>
</li>
<li>由来：每台服务器启动时，如果开启有<code>AOF</code>或被连接成为<code>master</code>节点，即创建复制缓冲区 </li>
<li>作用：用于保存<code>master</code>收到的所有指令（仅影响数据变更的指令，例如<code>set，select</code>） </li>
<li>数据来源：当<code>master</code>接收到主客户端的指令时，除了将指令执行，会将该指令存储到缓冲区中</li>
</ul>
<h4 id="主从服务器复制偏移量（offset）"><a href="#主从服务器复制偏移量（offset）" class="headerlink" title="主从服务器复制偏移量（offset）"></a>主从服务器复制偏移量（offset）</h4><ul>
<li>概念：一个数字，描述复制缓冲区中的指令字节位置 </li>
<li>分类： <ul>
<li><code>master</code>复制偏移量：记录发送给所有<code>slave</code>的指令字节对应的位置（多个） </li>
<li><code>slave</code>复制偏移量：记录<code>slave</code>接收<code>master</code>发送过来的指令字节对应的位置（一个） </li>
</ul>
</li>
<li>数据来源： <ul>
<li><code>master</code>端：发送一次记录一次 </li>
<li><code>slave</code>端：接收一次记录一次 </li>
</ul>
</li>
<li>作用：同步信息，比对<code>master</code>与<code>slave</code>的差异，当<code>slave</code>断线后，恢复数据使用</li>
</ul>
<h4 id="数据同步-命令传播阶段工作流程"><a href="#数据同步-命令传播阶段工作流程" class="headerlink" title="数据同步+命令传播阶段工作流程"></a>数据同步+命令传播阶段工作流程</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018165949891.png" alt="image-20221018165949891"></p>
<h4 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h4><ul>
<li>进入命令传播阶段候，<code>master</code>与<code>slave</code>间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线 </li>
<li><code>master</code>心跳： <ul>
<li>指令：PING </li>
<li>周期：由<code>repl-ping-slave-period</code>决定，默认10秒 </li>
<li>作用：判断<code>slave</code>是否在线 </li>
<li>查询：INFO replication 获取slave最后一次连接时间间隔，<code>lag</code>项维持在0或1视为正常 </li>
</ul>
</li>
<li>slave心跳任务 <ul>
<li>指令：REPLCONF ACK {offset} </li>
<li>周期：1秒 </li>
<li>作用1：汇报<code>slave</code>自己的复制偏移量，获取最新的数据变更指令 </li>
<li>作用2：判断<code>master</code>是否在线</li>
</ul>
</li>
</ul>
<h4 id="心跳阶段注意事项"><a href="#心跳阶段注意事项" class="headerlink" title="心跳阶段注意事项"></a>心跳阶段注意事项</h4><ul>
<li>当<code>slave</code>多数掉线，或延迟过高时，<code>master</code>为保障数据稳定性，将拒绝所有信息同步操作</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">min-slaves-to-write</span> <span class="string">2</span></span><br><span class="line"><span class="attr">min-slaves-max-lag</span> <span class="string">8</span></span><br></pre></td></tr></table></figure>

<p><code>slave</code>数量少于2个，或者所有<code>slave</code>的延迟都大于等于10秒时，强制关闭<code>master</code>写功能，停止数据同步</p>
<ul>
<li><code>slave</code>数量由<code>slave</code>发送<code>REPLCONF ACK</code>命令做确认 </li>
<li><code>slave</code>延迟由<code>slave</code>发送<code>REPLCONF ACK</code>命令做确认</li>
</ul>
<h4 id="主从复制工作流程（完整）"><a href="#主从复制工作流程（完整）" class="headerlink" title="主从复制工作流程（完整）"></a>主从复制工作流程（完整）</h4><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018171711366.png" alt="image-20221018171711366"></p>
<h2 id="主从复制常见问题"><a href="#主从复制常见问题" class="headerlink" title="主从复制常见问题"></a>主从复制常见问题</h2><h3 id="频繁的全量复制（1）"><a href="#频繁的全量复制（1）" class="headerlink" title="频繁的全量复制（1）"></a>频繁的全量复制（1）</h3><p>伴随着系统的运行，<code>master</code>的数据量会越来越大，一旦<code>master</code>重启，<code>runid</code>将发生变化，会导致全部<code>slave</code>的 全量复制操作 </p>
<p>内部优化调整方案： </p>
<ol>
<li><code>master</code>内部创建<code>master_replid</code>变量，使用<code>runid</code>相同的策略生成，长度<code>41</code>位，并发送给所有slave </li>
<li>在<code>master</code>关闭时执行命令 <code>shutdown save</code>，进行<code>RDB</code>持久化,将<code>runid</code>与<code>offset</code>保存到RDB文件中 <ul>
<li>repl-id repl-offset  </li>
<li>通过<code>redis-check-rdb</code>命令可以查看该信息 </li>
</ul>
</li>
<li><code>master</code>重启后加载<code>RDB</code>文件，恢复数据 <ul>
<li>重启后，将<code>RDB</code>文件中保存的<code>repl-id</code>与<code>repl-offset</code>加载到内存中 <ul>
<li>master_repl_id = repl master_repl_offset = repl-offset </li>
<li>通过<code>info</code>命令可以查看该信息 </li>
</ul>
</li>
</ul>
</li>
</ol>
<p>作用： 本机保存上次<code>runid</code>，重启后恢复该值，使所有<code>slave</code>认为还是之前的<code>master</code></p>
<h3 id="频繁的全量复制（2）"><a href="#频繁的全量复制（2）" class="headerlink" title="频繁的全量复制（2）"></a>频繁的全量复制（2）</h3><ul>
<li>问题现象 <ul>
<li>网络环境不佳，出现网络中断，<code>slave</code>不提供服务 </li>
</ul>
</li>
<li>问题原因 <ul>
<li>复制缓冲区过小，断网后<code>slave</code>的<code>offset</code>越界，触发全量复制 </li>
</ul>
</li>
<li>最终结果 <ul>
<li><code>slave</code>反复进行全量复制 </li>
</ul>
</li>
<li>解决方案 <ul>
<li>修改复制缓冲区大小</li>
</ul>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">repl-backlog-size</span></span><br></pre></td></tr></table></figure>

<ul>
<li>建议设置如下</li>
</ul>
<ol>
<li>测算从<code>master</code>到<code>slave</code>的重连平均时长<code>second </code></li>
<li>获取<code>master</code>平均每秒产生写命令数据总量<code>write_size_per_second </code></li>
<li>最优复制缓冲区空间 = <code>2 * second * write_size_per_second</code></li>
</ol>
<h3 id="频繁的网络中断（1）"><a href="#频繁的网络中断（1）" class="headerlink" title="频繁的网络中断（1）"></a>频繁的网络中断（1）</h3><ul>
<li>问题现象 <ul>
<li><code>master</code>的<code>CPU</code>占用过高 或 <code>slave</code>频繁断开连接 </li>
</ul>
</li>
<li>问题原因 <ul>
<li><code>slave</code>每1秒发送<code>REPLCONF ACK</code>命令到<code>master </code></li>
<li>当<code>slave</code>接到了慢查询时（<code>keys *</code> ，<code>hgetall</code>等），会大量占用<code>CPU</code>性能 </li>
<li><code>master</code>每1秒调用复制定时函数r<code>eplicationCron()</code>，比对<code>slave</code>发现长时间没有进行响应 </li>
</ul>
</li>
<li>最终结果 <ul>
<li><code>master</code>各种资源（输出缓冲区、带宽、连接等）被严重占用 </li>
</ul>
</li>
<li>解决方案 <ul>
<li>通过设置合理的超时时间，确认是否释放<code>slave</code></li>
</ul>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">repl-timeout</span></span><br></pre></td></tr></table></figure>

<p>该参数定义了超时时间的阈值（默认<code>60秒</code>），超过该值，释放<code>slave</code></p>
<h3 id="频繁的网络中断（2）"><a href="#频繁的网络中断（2）" class="headerlink" title="频繁的网络中断（2）"></a>频繁的网络中断（2）</h3><ul>
<li>问题现象 <ul>
<li><code>slave</code>与<code>master</code>连接断开 </li>
</ul>
</li>
<li>问题原因 <ul>
<li><code>master</code>发送<code>ping</code>指令频度较低 </li>
<li><code>master</code>设定超时时间较短 </li>
<li><code>ping</code>指令在网络中存在丢包 </li>
</ul>
</li>
<li>解决方案 <ul>
<li>提高<code>ping</code>指令发送的频度</li>
</ul>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">repl-ping-slave-period</span></span><br></pre></td></tr></table></figure>

<p>超时时间<code>repl-time</code>的时间至少是<code>ping</code>指令频度的5到10倍，否则<code>slave</code>很容易判定超时</p>
<h3 id="数据不一致"><a href="#数据不一致" class="headerlink" title="数据不一致"></a>数据不一致</h3><ul>
<li>问题现象 <ul>
<li>多个<code>slave</code>获取相同数据不同步 </li>
</ul>
</li>
<li>问题原因 <ul>
<li>网络信息不同步，数据发送有延迟 </li>
</ul>
</li>
<li>解决方案 <ul>
<li>优化主从间的网络环境，通常放置在同一个机房部署，如使用阿里云等云服务器时要注意此现象 </li>
<li>监控主从节点延迟（通过<code>offset</code>）判断，如果<code>slave</code>延迟过大，暂时屏蔽程序对该<code>slave</code>的数据访问</li>
</ul>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">slave-serve-stale-data</span> <span class="string">yes|no</span></span><br></pre></td></tr></table></figure>

<p>开启后仅响应<code>info</code>、<code>slaveof</code>等少数命令（慎用，除非对数据一致性要求很高）</p>
<h1 id="Redis-哨兵模式"><a href="#Redis-哨兵模式" class="headerlink" title="Redis 哨兵模式"></a><strong>Redis 哨兵模式</strong></h1><h2 id="哨兵简介"><a href="#哨兵简介" class="headerlink" title="哨兵简介"></a>哨兵简介</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018182810865.png" alt="image-20221018182810865"></p>
<p><strong>哨兵</strong></p>
<p>哨兵(sentinel) 是一个分布式系统，用于对主从结构中的每台服务器进行<strong>监控</strong>，当出现故障时通过投票机制<strong>选择</strong>新的 <code>master</code>并将所有<code>slave</code>连接到新的<code>master</code>。</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018182922458.png" alt="image-20221018182922458"></p>
<p><strong>哨兵的作用</strong></p>
<ul>
<li>监控 <ul>
<li>不断的检查<code>master</code>和<code>slave</code>是否正常运行。 </li>
<li><code>master</code>存活检测、<code>master</code>与<code>slave</code>运行情况检测 </li>
</ul>
</li>
<li>通知（提醒） <ul>
<li>当被监控的服务器出现问题时，向其他（哨兵间，客户端）发送通知。 </li>
</ul>
</li>
<li>自动故障转移 <ul>
<li>断开<code>master</code>与<code>slave</code>连接，选取一个<code>slave</code>作为<code>master</code>，将其他<code>slave</code>连接到新的<code>master</code>，并告知客户端新的服 务器地址 </li>
</ul>
</li>
</ul>
<p>注意： 哨兵也是一台<code>redis</code>服务器，只是不提供数据服务 通常哨兵配置数量为单数</p>
<h2 id="配置哨兵"><a href="#配置哨兵" class="headerlink" title="配置哨兵"></a>配置哨兵</h2><ul>
<li>配置一拖二的主从结构 </li>
<li>配置三个哨兵（配置相同，端口不同） <ul>
<li>参看<code>sentinel.conf </code></li>
</ul>
</li>
<li>启动哨兵</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">redis-sentinel</span> <span class="string">sentinel-端口号.conf</span></span><br></pre></td></tr></table></figure>

<p><strong>演示</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018211141094.png" alt="image-20221018211141094"></p>
<p><strong>观察文件信息</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[root@hecs-33111</span> <span class="string">redis-4.0.0]# cat sentinel.conf | grep -v &quot;#&quot; | grep -v &quot;^$&quot;</span></span><br><span class="line"><span class="attr">port</span> <span class="string">26379</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">/tmp</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor mymaster 127.0.0.1 6379 2</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">down-after-milliseconds mymaster 30000</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">parallel-syncs mymaster 1</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">failover-timeout mymaster 180000</span></span><br></pre></td></tr></table></figure>

<p><strong>将配置文件拷贝一份至指定文件夹下</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat sentinel.conf | grep -v &quot;#&quot; | grep -v &quot;^$&quot; &gt; ./conf/sentinel-26379.conf</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018211919137.png" alt="image-20221018211919137"></p>
<p><strong>修改配置文件</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018212228270.png" alt="image-20221018212228270"></p>
<p><strong>再拷贝两份哨兵的配置文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 conf]# sed &#x27;s/26379/26380/g&#x27; sentinel-26379.conf &gt; sentinel-26380.conf </span><br><span class="line">[root@hecs-33111 conf]# sed &#x27;s/26379/26381/g&#x27; sentinel-26379.conf &gt; sentinel-26381.conf </span><br><span class="line">[root@hecs-33111 conf]# cat sentinel-26380.conf </span><br><span class="line">port 26380</span><br><span class="line">dir /root/redis-4.0.0/data</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br></pre></td></tr></table></figure>

<p><strong>再拷贝一份slave的配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 conf]# sed &#x27;s/6380/6381/g&#x27; redis-6380.conf &gt; redis-6381.conf</span><br><span class="line">[root@hecs-33111 conf]# cat redis-6381.conf </span><br><span class="line">port 6381</span><br><span class="line">daemonize no</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">logfile <span class="string">&quot;6381.log&quot;</span></span></span><br><span class="line">dir /root/redis-4.0.0/data</span><br><span class="line">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>

<p><strong>清空data文件夹中的所有信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 data]# rm -rf *</span><br></pre></td></tr></table></figure>

<p><strong>启动master</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018213515776.png" alt="image-20221018213515776"></p>
<p><strong>启动两个slave</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018213813008.png" alt="image-20221018213813008"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018213903729.png" alt="image-20221018213903729"></p>
<p><strong>启动哨兵1</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-sentinel  conf/sentinel-26379.conf </span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018214102909.png" alt="image-20221018214102909"></p>
<p><strong>客户端连接哨兵1观察信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 /]# redis-cli -p 26379</span><br><span class="line">127.0.0.1:26379&gt; info</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018214557474.png" alt="image-20221018214557474"></p>
<p><strong>观察配置文件 已经发生变化</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018214924564.png" alt="image-20221018214924564"></p>
<p><strong>启动哨兵2</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018215154820.png" alt="image-20221018215154820"></p>
<p><strong>观察到哨兵1的相关信息</strong></p>
<p><strong>观察哨兵1的日志信息可以观察到哨兵2的信息</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018215320585.png" alt="image-20221018215320585"></p>
<p><strong>观察现有两个哨兵的配置文件信息</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018215520080.png" alt="image-20221018215520080"></p>
<p><strong>启动哨兵3</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018215630899.png" alt="image-20221018215630899"></p>
<p><strong>观察到识别出两个哨兵信息</strong></p>
<p><strong>观察哨兵1的配置文件 可以查看到新增哨兵信息</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221018215802938.png" alt="image-20221018215802938"></p>
<p><strong>验证master与两个slave的连通性</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name weishao</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; get name</span><br><span class="line">&quot;weishao&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6381&gt; get name</span><br><span class="line">&quot;weishao&quot;</span><br></pre></td></tr></table></figure>

<p><strong>CTRL+C使得master宕机</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019151305171.png" alt="image-20221019151305171"></p>
<p><strong>观察哨兵1的信息</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019151729961.png" alt="image-20221019151729961"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019151925079.png" alt="image-20221019151925079"></p>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><h3 id="主从切换"><a href="#主从切换" class="headerlink" title="主从切换"></a><strong>主从切换</strong></h3><ul>
<li>哨兵在进行主从切换过程中经历三个阶段 <ul>
<li>监控 </li>
<li>通知 </li>
<li>故障转移</li>
</ul>
</li>
</ul>
<h3 id="阶段一：监控阶段"><a href="#阶段一：监控阶段" class="headerlink" title="阶段一：监控阶段"></a>阶段一：监控阶段</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019155153179.png" alt="image-20221019155153179"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019202524994.png" alt="image-20221019202524994"></p>
<h3 id="阶段二：通知阶段"><a href="#阶段二：通知阶段" class="headerlink" title="阶段二：通知阶段"></a>阶段二：通知阶段</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019202725003.png" alt="image-20221019202725003"></p>
<h3 id="阶段三：故障转移阶段"><a href="#阶段三：故障转移阶段" class="headerlink" title="阶段三：故障转移阶段"></a>阶段三：故障转移阶段</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019203036948.png" alt="image-20221019203036948"></p>
<p><strong>选择领头的sentine进行清理，选举过程</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019203813171.png" alt="image-20221019203813171"></p>
<p><strong>领头的sentinel选择新的slave作为master</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019204608998.png" alt="image-20221019204608998"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>监控 <ul>
<li>同步信息 </li>
</ul>
</li>
<li>通知 <ul>
<li>保持联通 </li>
</ul>
</li>
<li>故障转移 <ul>
<li>发现问题 </li>
<li>竞选负责人 </li>
<li>优选新master </li>
<li>新<code>master</code>上任，其他<code>slave</code>切换<code>master</code>，原<code>master</code>作为<code>slave</code>故障回复后连接</li>
</ul>
</li>
</ul>
<h1 id="Redis-集群"><a href="#Redis-集群" class="headerlink" title="Redis 集群"></a>Redis 集群</h1><h2 id="集群简介"><a href="#集群简介" class="headerlink" title="集群简介"></a>集群简介</h2><p><strong>现状问题</strong></p>
<p><strong>业务发展过程中遇到的峰值瓶颈</strong></p>
<ul>
<li><code>redis</code>提供的服务<code>OPS</code>可以达到10万/秒，当前业务OPS已经达到10万/秒 </li>
<li>内存单机容量达到<code>256G</code>，当前业务需求内存容量<code>1T </code></li>
<li>使用集群的方式可以快速解决上述问题</li>
</ul>
<p><strong>集群架构</strong></p>
<p> 集群就是使用网络将若干台计算机联通起来，并提供统一的管理方式，使其对外呈现单机的服务效果</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019210603285.png" alt="image-20221019210603285"></p>
<p><strong>集群作用</strong></p>
<ul>
<li>分散单台服务器的访问压力，实现负载均衡 </li>
<li>分散单台服务器的存储压力，实现可扩展性 </li>
<li>降低单台服务器宕机带来的业务灾难</li>
</ul>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019210730122.png" alt="image-20221019210730122"></p>
<h2 id="Redis集群结构设计"><a href="#Redis集群结构设计" class="headerlink" title="Redis集群结构设计"></a>Redis集群结构设计</h2><h3 id="数据存储设计"><a href="#数据存储设计" class="headerlink" title="数据存储设计"></a>数据存储设计</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019211136036.png" alt="image-20221019211136036"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019211257396.png" alt="image-20221019211257396"></p>
<h3 id="集群内部通讯设计"><a href="#集群内部通讯设计" class="headerlink" title="集群内部通讯设计"></a>集群内部通讯设计</h3><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019211557357.png" alt="image-20221019211557357"></p>
<h2 id="cluster集群搭建"><a href="#cluster集群搭建" class="headerlink" title="cluster集群搭建"></a>cluster集群搭建</h2><h3 id="搭建方式"><a href="#搭建方式" class="headerlink" title="搭建方式"></a>搭建方式</h3><ul>
<li>原生安装（单条命令） <ul>
<li>配置服务器（3主3从） </li>
<li>建立通信（Meet） </li>
<li>分槽（Slot） </li>
<li>搭建主从（master-slave） </li>
</ul>
</li>
<li>工具安装（批处理）</li>
</ul>
<h3 id="Cluster配置"><a href="#Cluster配置" class="headerlink" title="Cluster配置"></a>Cluster配置</h3><ul>
<li><p>添加节点</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster-enabled</span> <span class="string">yes|no</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>cluster配置文件名，该文件属于自动生成，仅用于快速查找文件并查询文件内容</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster-config-file</span> <span class="string">&lt;filename&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>节点服务响应超时时间，用于判定该节点是否下线或切换为从节点</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster-node-timeout</span> <span class="string">&lt;milliseconds&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>master连接的slave最小数量</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster-migration-barrier</span> <span class="string">&lt;count&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Cluster节点操作命令"><a href="#Cluster节点操作命令" class="headerlink" title="Cluster节点操作命令"></a>Cluster节点操作命令</h3><ul>
<li><p>查看集群节点信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cluster nodes</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入一个从节点 redis，切换其主节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cluster replicate &lt;master-id&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>发现一个新节点，新增主节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cluster meet ip:port</span><br></pre></td></tr></table></figure>
</li>
<li><p>忽略一个没有solt的节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cluster forget &lt;id&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>手动故障转移</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cluster failover</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="redis-trib命令"><a href="#redis-trib命令" class="headerlink" title="redis-trib命令"></a>redis-trib命令</h3><ul>
<li><p>添加节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-trib.rb add-node</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-trib.rb del-node</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新分片</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-trib.rb reshard</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a><strong>演示</strong></h3><h4 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h4><p><strong>清空data</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 data]# rm -rf *</span><br></pre></td></tr></table></figure>

<p><strong>配置redis-6379集群的配置</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019212827549.png" alt="image-20221019212827549"></p>
<p><strong>复制配置文件为6份</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 conf]# sed &#x27;s/6379/6380/g&#x27; redis-6379.conf &gt;redis-6380.conf</span><br><span class="line">[root@hecs-33111 conf]# sed &#x27;s/6379/6381/g&#x27; redis-6379.conf &gt;redis-6381.conf</span><br><span class="line">[root@hecs-33111 conf]# sed &#x27;s/6379/6382/g&#x27; redis-6379.conf &gt;redis-6382.conf</span><br><span class="line">[root@hecs-33111 conf]# sed &#x27;s/6379/6383/g&#x27; redis-6379.conf &gt;redis-6383.conf</span><br><span class="line">[root@hecs-33111 conf]# sed &#x27;s/6379/6384/g&#x27; redis-6379.conf &gt;redis-6384.conf</span><br><span class="line">[root@hecs-33111 conf]# sed &#x27;s/6379/6385/g&#x27; redis-6379.conf &gt;redis-6385.conf</span><br></pre></td></tr></table></figure>

<p><strong>根据配置文件依次启动redis-server</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 redis-4.0.0]# redis-server conf/redis-6379.conf </span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019213943319.png" alt="image-20221019213943319"></p>
<p><strong>观察服务已经全部启动</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019214204996.png" alt="image-20221019214204996"></p>
<p><strong>观察启动命令</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019215041069.png" alt="image-20221019215041069"></p>
<p>执行此命令需要安装<code>ruby</code>和<code>ruby gem</code></p>
<p><strong>安装ruby</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install ruby</span><br></pre></td></tr></table></figure>

<p><strong>安装ruby gem</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install rubygems -y</span><br></pre></td></tr></table></figure>

<p><strong>查看ruby和ruby gem安装版本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 src]# ruby -v</span><br><span class="line">ruby 2.5.9p229 (2021-04-05 revision 67939) [x86_64-linux]</span><br><span class="line">[root@hecs-33111 src]# gem -v</span><br><span class="line">2.7.6.3</span><br></pre></td></tr></table></figure>

<p><strong>启动集群</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 src]# ./redis-trib.rb create --replicas 1 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384</span><br></pre></td></tr></table></figure>

<p><strong>报错</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019221124005.png" alt="image-20221019221124005"></p>
<p><strong>解决方案</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 src]# gem install redis</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221019221255502.png" alt="image-20221019221255502"></p>
<p><strong>观察到data目录下已经生成了一些配置文件</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020103923017.png" alt="image-20221020103923017"></p>
<p><strong>观察6379的节点信息</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020104041099.png" alt="image-20221020104041099"></p>
<p><strong>覆盖配置</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020104442095.png" alt="image-20221020104442095"></p>
<p><strong>节点开始加入</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020104543307.png" alt="image-20221020104543307"></p>
<p><strong>观察6379配置文件变化</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020104914459.png" alt="image-20221020104914459"></p>
<p><strong>观察6379此时的日志信息</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020105340354.png" alt="image-20221020105340354"></p>
<h4 id="设置与获取数据"><a href="#设置与获取数据" class="headerlink" title="设置与获取数据"></a><strong>设置与获取数据</strong></h4><p><strong>连接redis集群</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 src]# redis-cli -c</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>

<p><strong>设置数据</strong></p>
<p><strong>根据key计算出槽位，并且重定向至槽位</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020105938279.png" alt="image-20221020105938279"></p>
<p><strong>连接集群内指定位置的redis服务器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli -c -p 6382</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-33111 src]# redis-cli -c -p 6382</span><br><span class="line">127.0.0.1:6382&gt; </span><br><span class="line">127.0.0.1:6382&gt; </span><br><span class="line">127.0.0.1:6382&gt; </span><br><span class="line">127.0.0.1:6382&gt; get name</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [5798] located at 127.0.0.1:6380</span></span><br><span class="line">&quot;itheima&quot;</span><br></pre></td></tr></table></figure>

<h4 id="主从下线与主从切换"><a href="#主从下线与主从切换" class="headerlink" title="主从下线与主从切换"></a><strong>主从下线与主从切换</strong></h4><p><strong>关闭slave1 观察master1日志信息</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020110725445.png" alt="image-20221020110725445"></p>
<p><strong>其余redis服务器显示的信息</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020110909594.png" alt="image-20221020110909594"></p>
<p><strong>将slave1恢复连接观察master1的信息</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020111001703.png" alt="image-20221020111001703"></p>
<p><strong>关闭master1，观察slave1日志信息</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020111147479.png" alt="image-20221020111147479"></p>
<p><strong>slave1替代master1成为新的master</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020111637321.png" alt="image-20221020111637321"></p>
<p><strong>查看集群节点信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; CLUSTER NODES</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020112004426.png" alt="image-20221020112004426"></p>
<p><strong>恢复6379，观察日志信息</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020113758577.png" alt="image-20221020113758577"></p>
<h1 id="Redis-企业级解决方案"><a href="#Redis-企业级解决方案" class="headerlink" title="Redis 企业级解决方案"></a>Redis 企业级解决方案</h1><h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><p><strong>“宕机”</strong></p>
<p>服务器启动后迅速宕机</p>
<p><strong>问题排查</strong></p>
<ol>
<li>请求数量较高 </li>
<li>主从之间数据吞吐量较大，数据同步操作频度较高</li>
</ol>
<p><strong>解决方案</strong></p>
<p><strong>前置准备工作</strong>： </p>
<ol>
<li><p>日常例行统计数据访问记录，统计访问频度较高的热点数据 </p>
</li>
<li><p>利用LRU数据删除策略，构建数据留存队列 例如：storm与kafka配合 </p>
<p><strong>准备工作</strong>： </p>
<ol>
<li><p>将统计结果中的数据分类，根据级别，redis优先加载级别较高的热点数据 </p>
</li>
<li><p>利用分布式多服务器同时进行数据读取，提速数据加载过程 </p>
</li>
<li><p>热点数据主从同时预热 </p>
<p><strong>实施</strong>： </p>
<ol>
<li>使用脚本程序固定触发数据预热过程 </li>
<li>如果条件允许，使用了CDN（内容分发网络），效果会更好</li>
</ol>
</li>
</ol>
</li>
</ol>
<p><strong>总结</strong></p>
<p>缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓 存的问题！用户直接查询事先被预热的缓存数据！</p>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p><strong>数据库服务器崩溃（1）</strong></p>
<ol>
<li>系统平稳运行过程中，忽然数据库连接量激增 </li>
<li>应用服务器无法及时处理请求 </li>
<li>大量408，500错误页面出现 </li>
<li>客户反复刷新页面获取数据 </li>
<li>数据库崩溃 </li>
<li>应用服务器崩溃 </li>
<li>重启应用服务器无效 </li>
<li>Redis服务器崩溃 </li>
<li>Redis集群崩溃 </li>
<li>重启数据库后再次被瞬间流量放倒</li>
</ol>
<p><strong>问题排查</strong></p>
<ol>
<li>在一个较短的时间内，缓存中较多的key集中过期 </li>
<li>此周期内请求访问过期的数据，redis未命中，redis向数据库获取数据 </li>
<li>数据库同时接收到大量的请求无法及时处理 </li>
<li>Redis大量请求被积压，开始出现超时现象 </li>
<li>数据库流量激增，数据库崩溃 </li>
<li>重启后仍然面对缓存中无数据可用 </li>
<li>Redis服务器资源被严重占用，Redis服务器崩溃 </li>
<li>Redis集群呈现崩塌，集群瓦解 </li>
<li>应用服务器无法及时得到数据响应请求，来自客户端的请求数量越来越多，应用服务器崩溃 </li>
<li>应用服务器，redis，数据库全部重启，效果不理想</li>
</ol>
<p><strong>问题分析</strong></p>
<ul>
<li>短时间范围内 </li>
<li>大量key集中过期</li>
</ul>
<p><strong>解决方案（道）</strong></p>
<ol>
<li><p><strong>更多的页面静态化处理</strong> </p>
</li>
<li><p><strong>构建多级缓存架构</strong> </p>
<p>​    Nginx缓存+redis缓存+ehcache缓存 </p>
</li>
<li><p><strong>检测Mysql严重耗时业务进行优化</strong> </p>
<p>​    对数据库的瓶颈排查：例如超时查询、耗时较高事务等 </p>
</li>
<li><p><strong>灾难预警机制</strong> </p>
<p>​    监控redis服务器性能指标 </p>
<ul>
<li><p>CPU占用、CPU使用率 </p>
</li>
<li><p>内存容量 </p>
</li>
</ul>
<ul>
<li>查询平均响应时间 </li>
</ul>
<ul>
<li>线程数 </li>
</ul>
</li>
<li><p><strong>限流、降级</strong> </p>
</li>
</ol>
<p>​    短时间范围内牺牲一些客户体验，限制一部分请求访问，降低应用服务器压力，待业务低速运转后再逐步放开访问</p>
<p><strong>解决方案（术）</strong></p>
<ol>
<li><p><strong>LRU与LFU切换</strong> </p>
</li>
<li><p><strong>数据有效期策略调整</strong> </p>
<p>根据业务数据有效期进行分类错峰，A类90分钟，B类80分钟，C类70分钟 </p>
<p>过期时间使用固定时间+随机值的形式，稀释集中到期的key的数量 </p>
</li>
<li><p><strong>超热数据使用永久key</strong> </p>
</li>
<li><p><strong>定期维护（自动+人工）</strong> </p>
<p>对即将过期数据做访问量分析，确认是否延时，配合访问量统计，做热点数据的延时 </p>
</li>
<li><p><strong>加锁 慎用！</strong></p>
</li>
</ol>
<p><strong>总结</strong></p>
<p>缓存雪崩就是瞬间过期数据量太大，导致对数据库服务器造成压力。如能够有效避免过期时间集中，可以有效解决雪崩现象的出现 （约40%），配合其他策略一起使用，并监控服务器的运行数据，根据运行记录做快速调整。</p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020162205314.png" alt="image-20221020162205314"></p>
<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p><strong>数据库服务器崩溃（2）</strong></p>
<ol>
<li>系统平稳运行过程中 </li>
<li>数据库连接量瞬间激增 </li>
<li>Redis服务器无大量key过期 </li>
<li>Redis内存平稳，无波动 </li>
<li>Redis服务器CPU正常 </li>
<li>数据库崩溃</li>
</ol>
<p><strong>问题排查</strong></p>
<ol>
<li>Redis中某个key过期，该key访问量巨大 </li>
<li>多个数据请求从服务器直接压到Redis后，均未命中 </li>
<li>Redis在短时间内发起了大量对数据库中同一数据的访问</li>
</ol>
<p><strong>问题分析</strong></p>
<ul>
<li>单个key高热数据 </li>
<li>key过期</li>
</ul>
<p><strong>解决方案（术）</strong></p>
<ol>
<li><p><strong>预先设定</strong> </p>
<p>​    以电商为例，每个商家根据店铺等级，指定若干款主打商品，在购物节期间，加大此类信息    key的过期时长 </p>
<p>​    注意：购物节不仅仅指当天，以及后续若干天，访问峰值呈现逐渐降低的趋势 </p>
</li>
<li><p><strong>现场调整</strong> </p>
<p>​    监控访问量，对自然流量激增的数据延长过期时间或设置为永久性key </p>
</li>
<li><p><strong>后台刷新数据</strong> </p>
<p>​    启动定时任务，高峰期来临之前，刷新数据有效期，确保不丢失 </p>
</li>
<li><p><strong>二级缓存</strong> </p>
<p>​    设置不同的失效时间，保障不会被同时淘汰就行 </p>
</li>
<li><p><strong>加锁</strong> </p>
<p>​    分布式锁，防止被击穿，但是要注意也是性能瓶颈，慎重！</p>
</li>
</ol>
<p><strong>总结</strong></p>
<p>缓存击穿就是单个高热数据过期的瞬间，数据访问量较大，未命中redis后，发起了大量对同一数据的数据库访问，导致对数据库服务器造成压力。应对策略应该在业务数据分析与预防方面进行，配合运行监控测试与即时调整策略，毕竟单个key的过期监控难度较高，配合雪崩处理策略即可。</p>
<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p><strong>数据库服务器崩溃（3）</strong></p>
<ol>
<li>系统平稳运行过程中 </li>
<li>应用服务器流量随时间增量较大 </li>
<li>Redis服务器命中率随时间逐步降低 </li>
<li>Redis内存平稳，内存无压力 </li>
<li>Redis服务器CPU占用激增 </li>
<li>数据库服务器压力激增 </li>
<li>数据库崩溃</li>
</ol>
<p><strong>问题排查</strong></p>
<ol>
<li>Redis中大面积出现未命中 </li>
<li>出现非正常URL访问</li>
</ol>
<p><strong>问题分析</strong></p>
<ul>
<li>获取的数据在数据库中也不存在，数据库查询未得到对应数据 </li>
<li>Redis获取到null数据未进行持久化，直接返回 </li>
<li>下次此类数据到达重复上述过程 </li>
<li>出现黑客攻击服务器</li>
</ul>
<p><strong>解决方案（术）</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020164447238.png" alt="image-20221020164447238"></p>
<p><strong>总结</strong></p>
<p>缓存击穿访问了不存在的数据，跳过了合法数据的redis数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力。通常此类 数据的出现量是一个较低的值，当出现此类情况以毒攻毒，并及时报警。应对策略应该在临时预案防范方面多做文章。 </p>
<p>无论是黑名单还是白名单，都是对整体系统的压力，警报解除后尽快移除。</p>
<h2 id="性能指标监控"><a href="#性能指标监控" class="headerlink" title="性能指标监控"></a>性能指标监控</h2><p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020165330711.png" alt="image-20221020165330711"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020165344324.png" alt="image-20221020165344324"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020165518327.png" alt="image-20221020165518327"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020165557352.png" alt="image-20221020165557352"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020165707597.png" alt="image-20221020165707597"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020165743895.png" alt="image-20221020165743895"></p>
<p><strong>监控方式</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020165841955.png" alt="image-20221020165841955"></p>
<p><strong>benchmark</strong></p>
<ul>
<li>命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-benchmark [-h ] [-p ] [-c ] [-n &lt;requests]&gt; [-k ]</span><br></pre></td></tr></table></figure>

<ul>
<li>范例1</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-benchmark</span><br></pre></td></tr></table></figure>

<p>说明：50个连接，10000次请求对应的性能</p>
<ul>
<li>范例2</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-benchmark -c 100 -n 5000</span><br></pre></td></tr></table></figure>

<p>说明：100个连接，5000次请求对应的性能</p>
<p><strong>演示</strong></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020170658042.png" alt="image-20221020170658042"></p>
<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020170824761.png" alt="image-20221020170824761"></p>
<p><strong>monitor</strong></p>
<ul>
<li>命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">monitor</span><br></pre></td></tr></table></figure>

<p>打印服务器调试信息</p>
<p><strong>showlong</strong></p>
<ul>
<li>命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">slowlog [operator]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>get ：获取慢查询日志 </p>
</li>
<li><p>len ：获取慢查询日志条目数 </p>
</li>
<li><p>reset ：重置慢查询日志</p>
</li>
<li><p>相关配置</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">slowlog-log-slower-than 1000 #设置慢查询的时间下线，单位：微妙</span><br><span class="line">slowlog-max-len 100 #设置慢查询命令对应的日志显示长度，单位：命令数</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-Redis/image-20221020171634657.png" alt="image-20221020171634657"></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>黑马程序员</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>
